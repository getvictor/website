<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps &amp; Infrastructure on Victor on Software</title><link>https://victoronsoftware.com/categories/devops--infrastructure/</link><description>Recent content in DevOps &amp; Infrastructure on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 05 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/categories/devops--infrastructure/index.xml" rel="self" type="application/rss+xml"/><item><title>Why developers should use OpenTelemetry in dev</title><link>https://victoronsoftware.com/posts/opentelemetry-for-devs/</link><pubDate>Tue, 05 Aug 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/opentelemetry-for-devs/</guid><description>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/opentelemetry-for-devs-headline.png" alt="Featured image of post Why developers should use OpenTelemetry in dev" /&gt;&lt;p&gt;We&amp;rsquo;ve changed our tune on OpenTelemetry.&lt;/p&gt;
&lt;p&gt;In our &lt;a class="link" href="../opentelemetry-with-jaeger/" &gt;previous article on OpenTelemetry with Jaeger&lt;/a&gt;, we were skeptical about its value
for the average developer. The tooling seemed more suited for production monitoring than day-to-day development work.
However, recent production issues have made us reconsider.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#feature-1-api-request-and-response-bodies" &gt;Feature 1: API request and response bodies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#feature-2-database-query-instrumentation" &gt;Feature 2: Database query instrumentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#feature-3-outgoing-http-requests" &gt;Feature 3: Outgoing HTTP requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#feature-4-trace-log-correlation" &gt;Feature 4: Trace-log correlation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#feature-5-comprehensive-error-handling" &gt;Feature 5: Comprehensive error handling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-wake-up-call"&gt;&lt;a href="#the-wake-up-call" class="header-anchor"&gt;&lt;/a&gt;The wake-up call
&lt;/h2&gt;&lt;p&gt;We discovered a critical gap in our production telemetry: several key API endpoints weren&amp;rsquo;t instrumented. When issues
arose, we were flying blind. No traces. No visibility. Just frustrated customers and scrambling engineers.&lt;/p&gt;
&lt;p&gt;This experience taught us an important lesson: &lt;strong&gt;telemetry isn&amp;rsquo;t just an operations concern, it&amp;rsquo;s a development
concern&lt;/strong&gt;. If developers don&amp;rsquo;t use and understand telemetry during development, we end up with half-baked
instrumentation in production.&lt;/p&gt;
&lt;p&gt;The solution? Developers must dogfood their own telemetry.&lt;/p&gt;
&lt;h2 id="setting-up-opentelemetry-for-development"&gt;&lt;a href="#setting-up-opentelemetry-for-development" class="header-anchor"&gt;&lt;/a&gt;Setting up OpenTelemetry for development
&lt;/h2&gt;&lt;p&gt;Using OpenTelemetry during development provides immediate benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complete instrumentation coverage before production&lt;/li&gt;
&lt;li&gt;Faster debugging with familiar tooling (same tooling in dev and production)&lt;/li&gt;
&lt;li&gt;Better understanding of code behavior&lt;/li&gt;
&lt;li&gt;Early detection of performance issues&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We built a TODO application to demonstrate key OpenTelemetry features for developers. The examples use
&lt;a class="link" href="https://signoz.io/docs/install/docker/" target="_blank" rel="noopener"
&gt;SigNoz&lt;/a&gt; as the backend, but any OpenTelemetry-compatible system works (Jaeger,
Grafana, Datadog, etc.).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In development, we often want more detailed telemetry than in production. Production may limit telemetry due
to performance or security reasons. Many of the features we&amp;rsquo;ll demonstrate should have environment-specific toggles.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="feature-1-api-request-and-response-bodies"&gt;&lt;a href="#feature-1-api-request-and-response-bodies" class="header-anchor"&gt;&lt;/a&gt;Feature 1: API request and response bodies
&lt;/h2&gt;&lt;p&gt;Seeing actual request and response bodies is invaluable during development. While you&amp;rsquo;d avoid this in production for
security reasons, it&amp;rsquo;s essential for debugging locally.&lt;/p&gt;
&lt;h3 id="key-opentelemetry-concepts-attributes-vs-events"&gt;&lt;a href="#key-opentelemetry-concepts-attributes-vs-events" class="header-anchor"&gt;&lt;/a&gt;Key OpenTelemetry concepts: attributes vs events
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Attributes&lt;/strong&gt;: Key-value pairs attached to spans that provide metadata. They&amp;rsquo;re indexed and searchable (e.g.,
&lt;code&gt;http.method&lt;/code&gt;, &lt;code&gt;http.status_code&lt;/code&gt;, &lt;code&gt;user.id&lt;/code&gt;). Use attributes for the data you need to query or filter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Events&lt;/strong&gt;: Timestamped records within a span that capture what happened at a specific moment. They&amp;rsquo;re perfect for
logging request/response bodies, error messages, or any detailed information that doesn&amp;rsquo;t need to be searchable but
provides context when debugging.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our TODO app, we recorded request and response bodies as events:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;AddEvent&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;http.request.body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithAttributes&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;requestBody&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;AddEvent&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;http.response.body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithAttributes&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;responseBody&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This approach provides full API context without bloating searchable attributes.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/api-request-response.png"
alt="SigNoz showing API request and response bodies as events in a trace span"&gt;
&lt;/figure&gt;
&lt;h2 id="feature-2-database-query-instrumentation"&gt;&lt;a href="#feature-2-database-query-instrumentation" class="header-anchor"&gt;&lt;/a&gt;Feature 2: Database query instrumentation
&lt;/h2&gt;&lt;p&gt;Database queries often cause performance bottlenecks. OpenTelemetry captures both query timing and the actual SQL
executed.&lt;/p&gt;
&lt;p&gt;Standard instrumentation shows parameterized queries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; todos &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; user_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; status &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For debugging, we need the actual values. Our enhanced instrumentation includes both:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/database-query-instrumentation.png"
alt="SigNoz showing database queries with both parameterized and populated SQL statements"&gt;
&lt;/figure&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetAttributes&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;db.statement&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;SELECT * FROM todos WHERE user_id = ? AND status = ?&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;db.statement.formatted&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;SELECT * FROM todos WHERE user_id = 123 AND status = &amp;#39;active&amp;#39;&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This dual approach maintains security (prepared statements against SQL injection) while providing debugging context. Use
populated queries to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reproduce issues by running the exact query&lt;/li&gt;
&lt;li&gt;Understand why a query returned unexpected results&lt;/li&gt;
&lt;li&gt;Debug complex queries with multiple parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alternatively, you could log the populated query statements instead of adding them as span attributes. Putting them in
the logs gives you more flexibility in controlling data retention policies, as logs and traces often have different
storage durations and access controls in production environments.&lt;/p&gt;
&lt;h2 id="feature-3-outgoing-http-requests"&gt;&lt;a href="#feature-3-outgoing-http-requests" class="header-anchor"&gt;&lt;/a&gt;Feature 3: Outgoing HTTP requests
&lt;/h2&gt;&lt;p&gt;Modern applications integrate with external APIs and microservices. Outgoing HTTP calls need the same visibility as
incoming requests.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/outgoing-http-requests.png"
alt="SigNoz displaying outgoing HTTP request details"&gt;
&lt;/figure&gt;
&lt;p&gt;Our TODO app instruments outgoing HTTP requests, capturing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Before making the request&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;AddEvent&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;http.request.body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithAttributes&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;requestBody&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Int&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;size&amp;#34;&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;requestBody&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// After receiving the response&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;AddEvent&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;http.response.body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithAttributes&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;responseBody&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Int&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;size&amp;#34;&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;responseBody&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Int&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;status_code&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;resp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;StatusCode&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This visibility is crucial when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Third-party APIs return unexpected results&lt;/li&gt;
&lt;li&gt;You need to debug authentication or request formatting issues&lt;/li&gt;
&lt;li&gt;Performance bottlenecks come from external dependencies&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re troubleshooting integration problems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;External calls receive the same instrumentation as internal operations, eliminating black boxes during development.&lt;/p&gt;
&lt;h2 id="feature-4-trace-log-correlation"&gt;&lt;a href="#feature-4-trace-log-correlation" class="header-anchor"&gt;&lt;/a&gt;Feature 4: Trace-log correlation
&lt;/h2&gt;&lt;p&gt;OpenTelemetry connects traces with logs, enabling seamless navigation between high-level trace data and detailed log
output.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/trace-log-correlation.png"
alt="SigNoz showing correlated logs for a specific trace with direct navigation links"&gt;
&lt;/figure&gt;
&lt;h3 id="key-opentelemetry-concepts-spans-vs-traces"&gt;&lt;a href="#key-opentelemetry-concepts-spans-vs-traces" class="header-anchor"&gt;&lt;/a&gt;Key OpenTelemetry concepts: spans vs traces
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Span&lt;/strong&gt;: A single unit of work within a trace. It represents an operation like a database query, HTTP request, or
function call. Each span has a unique &lt;code&gt;span_id&lt;/code&gt; and may have a &lt;code&gt;parent_span_id&lt;/code&gt; to form a tree. Spans are connected
through these relationships to reflect the call hierarchy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Trace&lt;/strong&gt;: The complete journey of a request through your system, composed of multiple spans that all share the same
&lt;code&gt;trace_id&lt;/code&gt;. The root span has no parent and marks the start of the trace. Think of a trace as the tree, and spans as
the branches and leaves.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our TODO app, we inject trace context into all log entries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;logger&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;With&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;trace_id&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SpanContext&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;TraceID&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;span_id&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SpanContext&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;SpanID&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;logger&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Info&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Creating new TODO item&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;user_id&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;userID&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;title&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;todo&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Title&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This correlation enables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quick navigation from a slow span to its detailed logs&lt;/li&gt;
&lt;li&gt;Understanding the sequence of operations within a request&lt;/li&gt;
&lt;li&gt;Debugging complex flows across multiple services&lt;/li&gt;
&lt;li&gt;Maintaining context when troubleshooting issues&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Viewing traces and logs together reduces debugging time significantly.&lt;/p&gt;
&lt;h2 id="feature-5-comprehensive-error-handling"&gt;&lt;a href="#feature-5-comprehensive-error-handling" class="header-anchor"&gt;&lt;/a&gt;Feature 5: Comprehensive error handling
&lt;/h2&gt;&lt;p&gt;OpenTelemetry captures complete error context and propagation paths throughout your system.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/error-handling.png"
alt="SigNoz showing errors"&gt;
&lt;/figure&gt;
&lt;p&gt;Error counts may appear inflated because they&amp;rsquo;re counted at each span level:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Database layer throws an error (count: 1)&lt;/li&gt;
&lt;li&gt;Service layer catches and returns error response (count: 2)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This propagation helps identify error origins and their path through application layers.&lt;/p&gt;
&lt;p&gt;Example error instrumentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Simple error recording&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;RecordError&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetStatus&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;codes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Error&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Error&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// With stack trace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;RecordError&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithStackTrace&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With proper error instrumentation, you get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complete stack traces for debugging&lt;/li&gt;
&lt;li&gt;Error propagation paths through your system&lt;/li&gt;
&lt;li&gt;Direct links to the failing trace&lt;/li&gt;
&lt;li&gt;Associated logs with full context&lt;/li&gt;
&lt;li&gt;Performance impact of error handling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All debugging information exists in one place, reducing troubleshooting from hours to minutes.&lt;/p&gt;
&lt;h2 id="moving-forward"&gt;&lt;a href="#moving-forward" class="header-anchor"&gt;&lt;/a&gt;Moving forward
&lt;/h2&gt;&lt;p&gt;Our next step is implementing this approach in our production application. The benefits are clear:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Complete visibility&lt;/strong&gt;: No more blind spots in our API endpoints&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Faster debugging&lt;/strong&gt;: All context in one place&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Better habits&lt;/strong&gt;: Developers who use telemetry build better instrumented code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proactive monitoring&lt;/strong&gt;: Issues are caught before they impact users&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Telemetry isn&amp;rsquo;t an afterthought. It&amp;rsquo;s a development tool that we can use from day one.&lt;/p&gt;
&lt;h2 id="try-it-yourself"&gt;&lt;a href="#try-it-yourself" class="header-anchor"&gt;&lt;/a&gt;Try it yourself
&lt;/h2&gt;&lt;p&gt;See these concepts in action with our &lt;a class="link" href="https://github.com/getvictor/todo-app" target="_blank" rel="noopener"
&gt;instrumented TODO application on GitHub&lt;/a&gt;.
The AI-generated code has readability issues, but effectively demonstrates all telemetry concepts.&lt;/p&gt;
&lt;p&gt;To get started with your own setup:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a class="link" href="https://signoz.io/docs/install/docker/" target="_blank" rel="noopener"
&gt;SigNoz using Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clone the TODO app repository&lt;/li&gt;
&lt;li&gt;Run the app with OpenTelemetry enabled&lt;/li&gt;
&lt;li&gt;Start exploring your traces!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The goal isn&amp;rsquo;t perfect code. It&amp;rsquo;s perfect visibility into code behavior.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../software-load-testing/" &gt;Top 5 metrics for software load testing performance&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Learn which telemetry metrics matter most when load testing your applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../optimizing-performance-of-go-app/" &gt;How to benchmark performance of Go serializers&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Discover performance optimization techniques using Go&amp;rsquo;s built-in profiling tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../opentelemetry-with-jaeger/" &gt;Is OpenTelemetry useful for the average software developer?&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Our initial skeptical take on OpenTelemetry and its challenges for development use.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; What&amp;rsquo;s your experience with OpenTelemetry? Have you found other creative ways to use telemetry during
development?&lt;/p&gt;
&lt;h2 id="watch-us-demonstrate-opentelemetry-features-useful-for-developers"&gt;&lt;a href="#watch-us-demonstrate-opentelemetry-features-useful-for-developers" class="header-anchor"&gt;&lt;/a&gt;Watch us demonstrate OpenTelemetry features useful for developers
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/1a8f8FWRWS0"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Top 5 metrics for software load testing performance</title><link>https://victoronsoftware.com/posts/software-load-testing/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/software-load-testing/</guid><description>&lt;img src="https://victoronsoftware.com/posts/software-load-testing/loadtest-fail.png" alt="Featured image of post Top 5 metrics for software load testing performance" /&gt;&lt;ol&gt;
&lt;li&gt;&lt;a class="link" href="#server-cpu-and-memory-utilization" &gt;Server CPU and memory utilization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#server-errors" &gt;Server errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#server-api-latency-response-time" &gt;Server API latency (response time)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#database-slow-queries" &gt;Database slow queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#database-performance-metrics" &gt;Database performance metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="what-is-software-load-testing"&gt;&lt;a href="#what-is-software-load-testing" class="header-anchor"&gt;&lt;/a&gt;What is software load testing?
&lt;/h2&gt;&lt;p&gt;Software load testing is a type of performance testing that simulates real-world user load on a software application.
Load tests usually run in a test environment identical to the production environment.&lt;/p&gt;
&lt;p&gt;The goals of load testing may include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure the application meets the required performance criteria&lt;/li&gt;
&lt;li&gt;Ensure the application performance did not degrade after changes&lt;/li&gt;
&lt;li&gt;Test a new feature&amp;rsquo;s performance before releasing it to production&lt;/li&gt;
&lt;li&gt;Identify bottlenecks in the application to reduce compute costs and/or risks&lt;/li&gt;
&lt;li&gt;Run &lt;a class="link" href="https://en.wikipedia.org/wiki/Chaos_engineering" target="_blank" rel="noopener"
&gt;chaos engineering&lt;/a&gt; performance experiments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Load testing can be done manually or automatically. Many open-source and commercial tools are available to help you run
load tests. Some features of load testing tools include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Record and replay user interactions, including simulating unique users&lt;/li&gt;
&lt;li&gt;Simulate different user loads&lt;/li&gt;
&lt;li&gt;Monitor the application&amp;rsquo;s performance during the test&lt;/li&gt;
&lt;li&gt;Generate reports with performance metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article lists the key metrics you should gather during a software load test of your web application.&lt;/p&gt;
&lt;h2 id="server-cpu-and-memory-utilization"&gt;&lt;a href="#server-cpu-and-memory-utilization" class="header-anchor"&gt;&lt;/a&gt;Server CPU and memory utilization
&lt;/h2&gt;&lt;p&gt;CPU utilization is the percentage of time the CPU is busy processing instructions, and memory utilization is the
percentage of memory used by the server. Companies deploy multiple instances of the same application web server, and the
load balancer distributes the user requests among them. These metrics are averages across all instances.&lt;/p&gt;
&lt;p&gt;High CPU or memory utilization can indicate a bottleneck in the application or server. It may also signal that the
application needs to be scaled horizontally (add more instances) or vertically (increase the server&amp;rsquo;s resources).&lt;/p&gt;
&lt;p&gt;Low CPU or memory utilization may indicate that the application is over-provisioned, and infrastructure engineers could
reduce resources to save costs.&lt;/p&gt;
&lt;p&gt;Typical expectations for CPU and memory utilization are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU utilization should be below 80% on average&lt;/li&gt;
&lt;li&gt;Memory utilization should be below 80% on average&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/software-load-testing/cpu-utilization.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;High CPU utilization during load test&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="server-errors"&gt;&lt;a href="#server-errors" class="header-anchor"&gt;&lt;/a&gt;Server errors
&lt;/h2&gt;&lt;p&gt;Server errors are error messages in the application logs or 5XX HTTP status codes. They can indicate that the
application is not handling the load well, has a bug, or is misconfigured.&lt;/p&gt;
&lt;p&gt;Error logs are a key debugging tool for developers. They can help identify the root cause of a functional or performance
error and fix it. As such, developers must use error logs to report actual server errors and not just informational
messages. For example, a 404 error is typically not a server error but a client error. A website user requesting a
resource that does not exist is a common scenario. Client errors should be logged as informational messages or tagged
appropriately to be excluded from the server error metric.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/software-load-testing/server-errors.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;AWS Logs Insights JSON error filter and sample error patterns&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The ideal number of server errors is zero. However, in practice, some errors are expected. For example, some startup or
shutdown-related errors may occur if application servers are scaling up or down due to load. Note the expected errors in
the test plan and adjust the error filter accordingly.&lt;/p&gt;
&lt;h2 id="server-api-latency-response-time"&gt;&lt;a href="#server-api-latency-response-time" class="header-anchor"&gt;&lt;/a&gt;Server API latency (response time)
&lt;/h2&gt;&lt;p&gt;API latency is the time it takes for the server to respond to a request, measured in milliseconds. Typically, the
business cares about user-facing API endpoints, such as the login, checkout, or search endpoints.&lt;/p&gt;
&lt;p&gt;API latency is a critical metric for user experience. High latency can lead to user frustration and abandonment.&lt;/p&gt;
&lt;p&gt;One standard metric is the 95th percentile latency. This metric indicates the latency that 95% of the requests are
faster than. It is a good indicator of the user experience because it filters out outliers.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/software-load-testing/api-latency.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Example spike in latency during a load test experiment&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Telemetry tools such as &lt;a class="link" href="https://opentelemetry.io/" target="_blank" rel="noopener"
&gt;OpenTelemetry&lt;/a&gt; can help you gather API latency metrics and correlate
them with other metrics, such as server errors or CPU utilization.&lt;/p&gt;
&lt;h2 id="database-slow-queries"&gt;&lt;a href="#database-slow-queries" class="header-anchor"&gt;&lt;/a&gt;Database slow queries
&lt;/h2&gt;&lt;p&gt;Query response time is the time it takes for the database to respond to a query. Slow queries can indicate that the
query is not optimized or that the table needs an index.&lt;/p&gt;
&lt;p&gt;Slow queries can lead to high API latency and server errors. They can also lead to high CPU and memory utilization on
the database server.&lt;/p&gt;
&lt;p&gt;Typically, we want to look at the average query response time multiplied by the number of queries per second for each
query signature. This will identify the queries that have the most impact on database performance.&lt;/p&gt;
&lt;p&gt;The list of slow queries should remain stable during a load test. If it changes, it may indicate a new unoptimized query
or a new bug in the application.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/software-load-testing/db-slow-queries.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;AWS RDS Performance Insights uses Average Active Sessions (AAS) as its slow query metric&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="database-performance-metrics"&gt;&lt;a href="#database-performance-metrics" class="header-anchor"&gt;&lt;/a&gt;Database performance metrics
&lt;/h2&gt;&lt;p&gt;Along with slow queries, we always gather the following database performance metrics:&lt;/p&gt;
&lt;h3 id="database-cpu-utilization"&gt;&lt;a href="#database-cpu-utilization" class="header-anchor"&gt;&lt;/a&gt;Database CPU utilization
&lt;/h3&gt;&lt;p&gt;Just like the server, we monitor the database&amp;rsquo;s CPU utilization. The typical expectation is that CPU utilization should
be below 80% on average.&lt;/p&gt;
&lt;p&gt;Memory utilization may not be as critical for the database as for the server. We expect the database to use as much
memory as possible to cache data and speed up queries.&lt;/p&gt;
&lt;h3 id="database-threads-running-sessions"&gt;&lt;a href="#database-threads-running-sessions" class="header-anchor"&gt;&lt;/a&gt;Database threads running (sessions)
&lt;/h3&gt;&lt;p&gt;Database threads running is the number of database connections actively processing queries. High thread counts can
indicate that the database is under heavy load.&lt;/p&gt;
&lt;p&gt;The number of threads should be at or below the number of CPUs on the database server.&lt;/p&gt;
&lt;h3 id="database-io-operations-per-second-iops"&gt;&lt;a href="#database-io-operations-per-second-iops" class="header-anchor"&gt;&lt;/a&gt;Database IO operations per second (IOPS)
&lt;/h3&gt;&lt;p&gt;Database IOPS is the number of disk read and write operations the database performs per second. High IOPS can indicate
that the database is not effectively caching data or that too many writes are occurring.&lt;/p&gt;
&lt;p&gt;IOPS should be in line with the database&amp;rsquo;s provisioned IOPS. If IOPS are consistently higher than provisioned, the
database may need to be scaled up.&lt;/p&gt;
&lt;h2 id="additional-metrics"&gt;&lt;a href="#additional-metrics" class="header-anchor"&gt;&lt;/a&gt;Additional metrics
&lt;/h2&gt;&lt;p&gt;The following metrics may also be necessary. However, these additional metrics may be more situational than the above
top 5 metrics.&lt;/p&gt;
&lt;h3 id="network-traffic"&gt;&lt;a href="#network-traffic" class="header-anchor"&gt;&lt;/a&gt;Network traffic
&lt;/h3&gt;&lt;p&gt;Network traffic includes the number of bytes sent and received by the server. Typically, the data received by the server
is the user&amp;rsquo;s request, and the data sent by the server is the response.&lt;/p&gt;
&lt;p&gt;However, in microservices architectures and servers with 3rd party integrations, our server may also make requests to
other web servers.&lt;/p&gt;
&lt;p&gt;User traffic is typically consistent from load test to load test. Traffic to other servers may change as engineers add
new features. If the network traffic changes significantly, it may indicate a new bug in the application, such as
application servers making too many requests to a 3rd party service.&lt;/p&gt;
&lt;h3 id="performance-profile"&gt;&lt;a href="#performance-profile" class="header-anchor"&gt;&lt;/a&gt;Performance profile
&lt;/h3&gt;&lt;p&gt;Many performance tools and modern programming languages can generate a performance profile. A performance profile is a
breakdown of the time spent in each function of the application. It can help identify bottlenecks in the application
code.&lt;/p&gt;
&lt;p&gt;If code performance is a significant concern, take a performance profile during the load test and compare it to a
baseline or the previous load test profile. If the profile changes significantly, it may indicate a new bug in the
application or a new performance bottleneck.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/software-load-testing/performance-profile.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Example performance profile from Go pprof&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="database-replication-lag"&gt;&lt;a href="#database-replication-lag" class="header-anchor"&gt;&lt;/a&gt;Database replication lag
&lt;/h3&gt;&lt;p&gt;If the database is replicated, the replication lag is the time it takes for changes to be sent from the primary database
and applied to the replica database. High replication lag can indicate that the replica is not keeping up with the
primary database.&lt;/p&gt;
&lt;p&gt;High replication lag can lead to a bad user experience &amp;ndash; for example, if the user saves data, then immediately
retrieves it and receives stale data.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../opentelemetry-for-devs/" &gt;OpenTelemetry: A developer&amp;rsquo;s best friend for production-ready code&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
See how developers can leverage OpenTelemetry during development to build better instrumented applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../opentelemetry-with-jaeger/" &gt;Is OpenTelemetry useful for the average software developer?&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Our initial exploration of OpenTelemetry&amp;rsquo;s practical value for everyday development tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../optimizing-performance-of-go-app/" &gt;How to benchmark performance of Go serializers&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Measure and optimize your Go application&amp;rsquo;s performance with effective benchmarking techniques.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-discuss-the-software-load-testing-performance-metrics"&gt;&lt;a href="#watch-us-discuss-the-software-load-testing-performance-metrics" class="header-anchor"&gt;&lt;/a&gt;Watch us discuss the software load testing performance metrics
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/KHS4D2QfsFk"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Secure private CDN content with CloudFront signed URLs</title><link>https://victoronsoftware.com/posts/cloudfront-signed-urls/</link><pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/cloudfront-signed-urls/</guid><description>&lt;img src="https://victoronsoftware.com/posts/cloudfront-signed-urls/signed-url-headline.png" alt="Featured image of post Secure private CDN content with CloudFront signed URLs" /&gt;&lt;ol&gt;
&lt;li&gt;&lt;a class="link" href="#create-a-cloudfront-distribution" &gt;Create a CloudFront distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#create-a-cloudfront-key-pair-and-add-it-to-a-key-group" &gt;Create a CloudFront key pair and add it to a key group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#associate-the-key-group-with-the-cloudfront-distribution" &gt;Associate the key group with the CloudFront distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#generate-a-signed-url-using-aws-sdks" &gt;Generate a signed URL using AWS SDKs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="what-is-cloudfront-cdn"&gt;&lt;a href="#what-is-cloudfront-cdn" class="header-anchor"&gt;&lt;/a&gt;What is CloudFront CDN?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://aws.amazon.com/cloudfront/" target="_blank" rel="noopener"
&gt;Amazon CloudFront&lt;/a&gt; is a content delivery network (CDN) service that securely
delivers data, videos, applications, and APIs to customers globally with low latency and high transfer speeds.
CloudFront is a popular choice for serving users worldwide with static assets, such as images, videos, and software
package files.&lt;/p&gt;
&lt;p&gt;CloudFront uses S3 buckets, EC2 instances, and other AWS resources as origins to cache and serve content. When a user
requests a file from a CloudFront distribution, CloudFront checks its cache for the file. If the file is not in the
cache, CloudFront retrieves it from the origin and caches it for future requests.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/cloudfront-signed-urls/users-requesting-from-cloudfront.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Users around the world requesting data from their local Cloudfront CDN cache&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="what-are-cloudfront-signed-urls"&gt;&lt;a href="#what-are-cloudfront-signed-urls" class="header-anchor"&gt;&lt;/a&gt;What are CloudFront signed URLs?
&lt;/h2&gt;&lt;p&gt;CloudFront signed URLs grant access to private content served by CloudFront. By default, CloudFront distributions are
public and serve content to anyone who requests it. However, your signed URLs can restrict access according to some of
the following rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;source IP address&lt;/li&gt;
&lt;li&gt;begin access time and/or expiration time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Signed URLs are helpful when you want to serve private content to specific users or for a limited time. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serve paid content to customers who have purchased a subscription&lt;/li&gt;
&lt;li&gt;Share private documents with a specific group of users&lt;/li&gt;
&lt;li&gt;Provide temporary access to a file for a limited time&lt;/li&gt;
&lt;li&gt;Serve content to users without requiring them to log in&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A signed URL looks like a regular CloudFront URL but contains additional query parameters that specify the access
restrictions. Depending on the limits you apply, a signed URL may be quite lengthy.&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://d1nsa5964r3p4i.cloudfront.net/hello-world.txt?Expires=1736178766&amp;amp;Signature=HpcpyniNSBkS695mZhkZRjXo6UQ5JtXQ2sk0poLEMDMeF063IjsBj2O56rruzk3lomYFjqoxc3BdnFqEjrEXQSieSALiCufZ2LjTfWffs7f7qnNVZwlkg-upZd5KBfrCHSIyzMYSPhgWFPOpNRVqOc4NFXx8fxRLagK7NBKFAEfCAwo0~KMCSJiof0zWOdY0a8p0NNAbBn0uLqK7vZLwSttVpoK6ytWRaJlnemofWNvLaa~Et3p5wJJRfYGv73AK-pe4FMb8dc9vqGNSZaDAqw2SOdXrLhrpvSMjNmMO3OvTcGS9hVHMtJvBmgqvCMAWmHBK6v5C9BobSh4TCNLIuA__&amp;amp;Key-Pair-Id=K1HFGXOMBB6TFF" target="_blank" rel="noopener"
&gt;https://d1nsa5964r3p4i.cloudfront.net/hello-world.txt?Expires=1736178766&amp;Signature=HpcpyniNSBkS695mZhkZRjXo6UQ5JtXQ2sk0poLEMDMeF063IjsBj2O56rruzk3lomYFjqoxc3BdnFqEjrEXQSieSALiCufZ2LjTfWffs7f7qnNVZwlkg-upZd5KBfrCHSIyzMYSPhgWFPOpNRVqOc4NFXx8fxRLagK7NBKFAEfCAwo0~KMCSJiof0zWOdY0a8p0NNAbBn0uLqK7vZLwSttVpoK6ytWRaJlnemofWNvLaa~Et3p5wJJRfYGv73AK-pe4FMb8dc9vqGNSZaDAqw2SOdXrLhrpvSMjNmMO3OvTcGS9hVHMtJvBmgqvCMAWmHBK6v5C9BobSh4TCNLIuA__&amp;Key-Pair-Id=K1HFGXOMBB6TFF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="how-to-create-cloudfront-signed-urls"&gt;&lt;a href="#how-to-create-cloudfront-signed-urls" class="header-anchor"&gt;&lt;/a&gt;How to create CloudFront signed URLs
&lt;/h2&gt;&lt;p&gt;You must have an AWS account and an S3 bucket with private content as a prerequisite.&lt;/p&gt;
&lt;h3 id="create-a-cloudfront-distribution"&gt;&lt;a href="#create-a-cloudfront-distribution" class="header-anchor"&gt;&lt;/a&gt;Create a CloudFront distribution
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Open the &lt;a class="link" href="https://console.aws.amazon.com/cloudfront/" target="_blank" rel="noopener"
&gt;CloudFront console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;Create Distribution&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Origin domain&lt;/strong&gt; section, choose your S3 bucket as the origin.
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/cloudfront-signed-urls/create-cloudfront-distribution.png"&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Origin access&lt;/strong&gt; section, select &lt;strong&gt;Origin access control settings (recommended)&lt;/strong&gt; and click &lt;strong&gt;Create new
OAC&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Create new OAC&lt;/strong&gt; modal, click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Choose one option in the &lt;strong&gt;WebApplication Firewall (WAF)&lt;/strong&gt; section.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create Distribution&lt;/strong&gt; to create the CloudFront distribution.&lt;/li&gt;
&lt;li&gt;In the yellow &lt;strong&gt;The S3 bucket policy needs to be updated&lt;/strong&gt; banner, click &lt;strong&gt;Copy policy&lt;/strong&gt; and then click &lt;strong&gt;Go to S3
bucket permissions to update policy&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Under bucket &lt;strong&gt;Permissions&lt;/strong&gt; &amp;gt; &lt;strong&gt;Bucket policy&lt;/strong&gt;, click &lt;strong&gt;Edit&lt;/strong&gt; and paste the copied policy.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Save changes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Back in the CloudFront console, wait for the distribution to deploy. When the distribution is done deploying, the
&lt;strong&gt;Last modified&lt;/strong&gt; column will change from &lt;strong&gt;Deploying&lt;/strong&gt; to a date and time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, the CloudFront distribution will serve content from the S3 bucket to anyone who requests it. Signed URLs
do NOT protect it until we set them up in the following steps. Test the distribution by accessing a file using the
CloudFront URL.&lt;/p&gt;
&lt;h3 id="create-a-cloudfront-key-pair-and-add-it-to-a-key-group"&gt;&lt;a href="#create-a-cloudfront-key-pair-and-add-it-to-a-key-group" class="header-anchor"&gt;&lt;/a&gt;Create a CloudFront key pair and add it to a key group
&lt;/h3&gt;&lt;p&gt;The recommended method for signing URLs is using trusted key groups. A key group is a collection of public keys that
CloudFront uses to verify signed URLs.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use OpenSSL to generate a private key and a public key:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out private_key.pem &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl rsa -pubout -in private_key.pem -out public_key.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;Open the &lt;a class="link" href="https://console.aws.amazon.com/cloudfront/" target="_blank" rel="noopener"
&gt;CloudFront console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In the side menu, choose &lt;strong&gt;Key management&lt;/strong&gt; &amp;gt; &lt;strong&gt;Public keys&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create public key&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Enter a name for the key, paste the contents of the &lt;code&gt;public_key.pem&lt;/code&gt; file, and click &lt;strong&gt;Create public key&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Remember the key ID for a later step.&lt;/li&gt;
&lt;li&gt;In the CloudFront side menu, choose &lt;strong&gt;Key management&lt;/strong&gt; &amp;gt; &lt;strong&gt;Key groups&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create key group&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Enter a name for the key group, select the public key you created, and click &lt;strong&gt;Create key group&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="associate-the-key-group-with-the-cloudfront-distribution"&gt;&lt;a href="#associate-the-key-group-with-the-cloudfront-distribution" class="header-anchor"&gt;&lt;/a&gt;Associate the key group with the CloudFront distribution
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Open the &lt;a class="link" href="https://console.aws.amazon.com/cloudfront/" target="_blank" rel="noopener"
&gt;CloudFront console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click on the CloudFront distribution you created.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Behaviors&lt;/strong&gt; tab, select a behavior and click &lt;strong&gt;Edit&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Restrict viewer access&lt;/strong&gt; section, select &lt;strong&gt;Yes&lt;/strong&gt;, choose the key group you created, and &lt;strong&gt;Save changes&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, the CloudFront URL will only serve content to users using a signed URL with the private key. Accessing content
without a signed URL will result in an access denied 403 error.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;Error&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;Code&amp;gt;&lt;/span&gt;MissingKey&lt;span style="color:#f92672"&gt;&amp;lt;/Code&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;Message&amp;gt;&lt;/span&gt;Missing Key-Pair-Id query parameter or cookie value&lt;span style="color:#f92672"&gt;&amp;lt;/Message&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/Error&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="generate-a-signed-url-using-aws-sdks"&gt;&lt;a href="#generate-a-signed-url-using-aws-sdks" class="header-anchor"&gt;&lt;/a&gt;Generate a signed URL using AWS SDKs
&lt;/h3&gt;&lt;p&gt;You can generate signed URLs using the AWS SDKs for various programming languages. Amazon provides
&lt;a class="link" href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html#private-content-overview-sample-code" target="_blank" rel="noopener"
&gt;examples for several languages&lt;/a&gt;.
We will show an example using the Go SDK.&lt;/p&gt;
&lt;p&gt;In a new directory, create a Go project and add the AWS SDK as a dependency:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go mod init cloudfront-signed-urls
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go get github.com/aws/aws-sdk-go-v2/feature/cloudfront/sign@v1.8.3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Copy the &lt;code&gt;private_key.pem&lt;/code&gt; file to the project directory and create a new Go file with the following code:&lt;/p&gt;
&lt;script type="application/javascript" src="https://gist.github.com/getvictor/7ace01fbf8ef160517cd6cd74a551b20.js"&gt;&lt;/script&gt;
&lt;p&gt;Run the Go program to generate a signed URL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2025/01/06 08:52:46 Signed URL: https://d1nsa5964r3p4i.cloudfront.net/hello-world.txt?Expires&lt;span style="color:#f92672"&gt;=&lt;/span&gt;1736178766&amp;amp;Signature&lt;span style="color:#f92672"&gt;=&lt;/span&gt;HpcpyniNSBkS695mZhkZRjXo6UQ5JtXQ2sk0poLEMDMeF063IjsBj2O56rruzk3lomYFjqoxc3BdnFqEjrEXQSieSALiCufZ2LjTfWffs7f7qnNVZwlkg-upZd5KBfrCHSIyzMYSPhgWFPOpNRVqOc4NFXx8fxRLagK7NBKFAEfCAwo0~KMCSJiof0zWOdY0a8p0NNAbBn0uLqK7vZLwSttVpoK6ytWRaJlnemofWNvLaa~Et3p5wJJRfYGv73AK-pe4FMb8dc9vqGNSZaDAqw2SOdXrLhrpvSMjNmMO3OvTcGS9hVHMtJvBmgqvCMAWmHBK6v5C9BobSh4TCNLIuA__&amp;amp;Key-Pair-Id&lt;span style="color:#f92672"&gt;=&lt;/span&gt;K1HFGXOMBB6TFF
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The signed URL will expire in 1 hour.&lt;/p&gt;
&lt;h2 id="potential-issues"&gt;&lt;a href="#potential-issues" class="header-anchor"&gt;&lt;/a&gt;Potential issues
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Server side encryption (SSE) may be an issue.
&lt;a class="link" href="https://arpadt.com/articles/kms-encrypted-objects-via-cloudfront#32-sse-kms" target="_blank" rel="noopener"
&gt;AWS-managed KMS keys are not supported by CloudFront&lt;/a&gt;.
One solution is to switch to a customer-managed KMS key.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we explained &lt;a class="link" href="../macos-launchd-agents-and-daemons/" &gt;launchd agents and daemons on macOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Previously, we &lt;a class="link" href="../remote-development-environment/" &gt;set up a remote development environment for our web app&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-start-using-cloudfront-signed-urls"&gt;&lt;a href="#watch-how-to-start-using-cloudfront-signed-urls" class="header-anchor"&gt;&lt;/a&gt;Watch how to start using CloudFront signed URLs
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/RzTZExHie88"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>What are launchd agents and daemons on macOS?</title><link>https://victoronsoftware.com/posts/macos-launchd-agents-and-daemons/</link><pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/macos-launchd-agents-and-daemons/</guid><description>&lt;img src="https://victoronsoftware.com/posts/macos-launchd-agents-and-daemons/macos-agents-and-daemons.png" alt="Featured image of post What are launchd agents and daemons on macOS?" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#how-to-find-the-plist-file-for-a-running-process" &gt;How to find the plist file for a running process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#create-and-edit-plist-files-with-plistbuddy" &gt;Create and edit .plist files with PlistBuddy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-launchd"&gt;&lt;a href="#what-is-launchd" class="header-anchor"&gt;&lt;/a&gt;What is launchd?
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;launchd&lt;/code&gt; is a macOS system service manager that starts, stops, and manages daemons, agents, and other processes. It is
the first process the kernel starts and is responsible for starting all other processes on the system.&lt;/p&gt;
&lt;p&gt;If you go to &lt;code&gt;Activity Monitor&lt;/code&gt; on your Mac and &lt;code&gt;View&lt;/code&gt; &amp;gt; &lt;code&gt;All Processes, Hierarchically&lt;/code&gt;, you will see that all
processes are children of &lt;code&gt;launchd&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/macos-launchd-agents-and-daemons/activity-monitor.png"
alt="The top process name is kernel_task, its child is launchd, and everything else is a child of launchd."&gt;
&lt;/figure&gt;
&lt;h2 id="what-are-launchd-agents-and-daemons"&gt;&lt;a href="#what-are-launchd-agents-and-daemons" class="header-anchor"&gt;&lt;/a&gt;What are launchd agents and daemons?
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;launchd&lt;/code&gt; can start and manage agents and daemons.&lt;/p&gt;
&lt;h3 id="daemons"&gt;&lt;a href="#daemons" class="header-anchor"&gt;&lt;/a&gt;Daemons
&lt;/h3&gt;&lt;p&gt;Daemons are background processes that run without a user interface. They typically start at boot time and run
continuously in the background. One example of a daemon is Apple&amp;rsquo;s &lt;code&gt;timed&lt;/code&gt; time synchronization daemon, which maintains
system clock accuracy by synchronizing the clock with reference clocks over the network. Another example is a device
management daemon, such as &lt;a class="link" href="https://fleetdm.com/docs/get-started/anatomy#orbit" target="_blank" rel="noopener"
&gt;Fleet&amp;rsquo;s &lt;code&gt;orbit&lt;/code&gt;&lt;/a&gt;, which manages the
device&amp;rsquo;s configuration and security settings.&lt;/p&gt;
&lt;h3 id="agents"&gt;&lt;a href="#agents" class="header-anchor"&gt;&lt;/a&gt;Agents
&lt;/h3&gt;&lt;p&gt;Agents are similar to daemons but run in the context of a user session. They are started when a user logs in and can
interact with the user interface. Agents are helpful for tasks that need to run in the background but also need to
communicate with the user. For example, a security agent can check the system&amp;rsquo;s state and notify the user if they fail a
corporate security policy.&lt;/p&gt;
&lt;p&gt;Agents may or may not have a user interface. Many 3rd party agents run in the background and provide a menu bar icon to
configure the agent&amp;rsquo;s behavior.&lt;/p&gt;
&lt;h2 id="how-are-agents-and-daemons-configured-with-plist"&gt;&lt;a href="#how-are-agents-and-daemons-configured-with-plist" class="header-anchor"&gt;&lt;/a&gt;How are agents and daemons configured with plist?
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;launchd&lt;/code&gt; uses property list (&lt;code&gt;.plist&lt;/code&gt;) files to define the configuration of agents and daemons. These files specify the
program to run, the arguments to pass, the environment variables to set, and other settings.&lt;/p&gt;
&lt;p&gt;Here is an example of a &lt;code&gt;.plist&lt;/code&gt; file for a launchd daemon:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;plist&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;version=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;EnvironmentVariables&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ORBIT_ENROLL_SECRET_PATH&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/opt/orbit/secret.txt&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ORBIT_FLEET_URL&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;https://dogfood.fleetdm.com&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ORBIT_ENABLE_SCRIPTS&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;true&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ORBIT_ORBIT_CHANNEL&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;stable&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ORBIT_OSQUERYD_CHANNEL&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;stable&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ORBIT_UPDATE_URL&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;https://updates.fleetdm.com&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ORBIT_FLEET_DESKTOP&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;true&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ORBIT_DESKTOP_CHANNEL&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;stable&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ORBIT_UPDATE_INTERVAL&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;15m0s&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;KeepAlive&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.fleetdm.orbit&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/opt/orbit/bin/orbit/orbit&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RunAtLoad&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StandardErrorPath&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/var/log/orbit/orbit.stderr.log&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StandardOutPath&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/var/log/orbit/orbit.stdout.log&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ThrottleInterval&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;10&lt;span style="color:#f92672"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The typical locations for agent and daemon &lt;code&gt;.plist&lt;/code&gt; files are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Location&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;User Agents&lt;/td&gt;
&lt;td&gt;&lt;code&gt;~/Library/LaunchAgents&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Global Agents&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/Library/LaunchAgents&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;System Agents&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/System/Library/LaunchAgents&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Global Daemons&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/Library/LaunchDaemons&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;System Daemons&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/System/Library/LaunchDaemons&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; In rare cases, the &lt;code&gt;.plist&lt;/code&gt; files may be located in other directories or missing entirely.&lt;/p&gt;
&lt;h3 id="how-to-view-the-contents-of-a-plist-file"&gt;&lt;a href="#how-to-view-the-contents-of-a-plist-file" class="header-anchor"&gt;&lt;/a&gt;How to view the contents of a &lt;code&gt;.plist&lt;/code&gt; file
&lt;/h3&gt;&lt;p&gt;&lt;code&gt;.plist&lt;/code&gt; files come in several formats, including binary, XML, and JSON.&lt;/p&gt;
&lt;p&gt;You can view the contents of a &lt;code&gt;.plist&lt;/code&gt; file using the &lt;code&gt;plutil&lt;/code&gt; (property list utility) command. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plutil -p /System/Library/LaunchDaemons/com.apple.analyticsd.plist
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;plutil&lt;/code&gt; can also convert between different &lt;code&gt;.plist&lt;/code&gt; formats. For example, to convert a binary &lt;code&gt;.plist&lt;/code&gt; file to XML,
run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cp /System/Library/LaunchDaemons/com.apple.analyticsd.plist my.plist
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plutil -convert xml1 my.plist
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="can-i-use-a-plist-file-for-cron-like-scheduling"&gt;&lt;a href="#can-i-use-a-plist-file-for-cron-like-scheduling" class="header-anchor"&gt;&lt;/a&gt;Can I use a &lt;code&gt;.plist&lt;/code&gt; file for cron-like scheduling?
&lt;/h3&gt;&lt;p&gt;Yes, you can use &lt;code&gt;launchd&lt;/code&gt; to schedule tasks in a &lt;code&gt;.plist&lt;/code&gt; file. &lt;code&gt;launchd&lt;/code&gt; is the recommended alternative to &lt;code&gt;cron&lt;/code&gt; on
macOS. The &lt;code&gt;StartCalendarInterval&lt;/code&gt; key specifies when the task should run. For example, to run a task every day at 5 AM,
you can add the following to your &lt;code&gt;.plist&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;StartCalendarInterval&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Hour&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;5&lt;span style="color:#f92672"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Minute&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;0&lt;span style="color:#f92672"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="how-to-find-the-plist-file-for-a-running-process"&gt;&lt;a href="#how-to-find-the-plist-file-for-a-running-process" class="header-anchor"&gt;&lt;/a&gt;How to find the plist file for a running process
&lt;/h2&gt;&lt;p&gt;Suppose you identified a process running on your Mac from &lt;code&gt;Activity Monitor&lt;/code&gt; and want to find the &lt;code&gt;.plist&lt;/code&gt; file that
started it. The process should be a child of &lt;code&gt;launchd&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To find the identifier of a running process, you can use the &lt;code&gt;launchctl&lt;/code&gt; command. The &lt;code&gt;launchctl list&lt;/code&gt; command lists all
agents and daemons started by the user, while the &lt;code&gt;sudo launchctl list&lt;/code&gt; lists all agents and daemons started by the
system.&lt;/p&gt;
&lt;p&gt;For example, to find the identifier of the process with PID &lt;code&gt;62303&lt;/code&gt;, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt; /usr/bin/sudo launchctl list; launchctl list &lt;span style="color:#f92672"&gt;)&lt;/span&gt; | grep &lt;span style="color:#ae81ff"&gt;62303&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output will show the identifier, such as:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;62303 0 com.fleetdm.orbit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can now look in the standard locations for the &lt;code&gt;com.fleetdm.orbit.plist&lt;/code&gt; file. Alternatively, you can use the
&lt;code&gt;launchctl dumpstate&lt;/code&gt; command to dump the state of all launchd jobs, including the &lt;code&gt;.plist&lt;/code&gt; files that started them. For
example, in a macOS system with Fleet&amp;rsquo;s orbit running, you can run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;launchctl dumpstate | grep -B &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; -A &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt; -E &lt;span style="color:#e6db74"&gt;&amp;#34;active count = [1-9]&amp;#34;&lt;/span&gt; | grep com.fleetdm.orbit
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the output will show the path to the &lt;code&gt;.plist&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;system/com.fleetdm.orbit &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; path &lt;span style="color:#f92672"&gt;=&lt;/span&gt; /Library/LaunchDaemons/com.fleetdm.orbit.plist
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can now view the contents of the &lt;code&gt;.plist&lt;/code&gt; file to understand how the process was started.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;plutil -p /Library/LaunchDaemons/com.fleetdm.orbit.plist
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="create-and-edit-plist-files-with-plistbuddy"&gt;&lt;a href="#create-and-edit-plist-files-with-plistbuddy" class="header-anchor"&gt;&lt;/a&gt;Create and edit .plist files with PlistBuddy
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;PlistBuddy&lt;/code&gt; is a powerful built-in macOS tool for creating and editing &lt;code&gt;.plist&lt;/code&gt; files. You can use it to automate the
creation and modification of launchd agents and daemons.&lt;/p&gt;
&lt;p&gt;You can create and edit &lt;code&gt;.plist&lt;/code&gt; files using the &lt;code&gt;PlistBuddy&lt;/code&gt;. For example, to create a new &lt;code&gt;.plist&lt;/code&gt; file with a
key-value pair, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/usr/libexec/PlistBuddy -c &lt;span style="color:#e6db74"&gt;&amp;#34;Add :Label string com.fleetdm.orbit&amp;#34;&lt;/span&gt; com.fleetdm.orbit.plist
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To edit an existing &lt;code&gt;.plist&lt;/code&gt; file, use the &lt;code&gt;-c&lt;/code&gt; flag with the &lt;code&gt;Set&lt;/code&gt; command. For example, to change the above &lt;code&gt;Label&lt;/code&gt;
key to &lt;code&gt;com.fleetdm.orbit2&lt;/code&gt;, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/usr/libexec/PlistBuddy -c &lt;span style="color:#e6db74"&gt;&amp;#34;Set :Label com.fleetdm.orbit2&amp;#34;&lt;/span&gt; com.fleetdm.orbit.plist
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Run &lt;code&gt;/usr/libexec/PlistBuddy --help&lt;/code&gt; for more information on using &lt;code&gt;PlistBuddy&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we showed &lt;a class="link" href="../script-only-macos-install-package/" &gt;two ways to turn a script into a macOS install package&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Previously, we explained &lt;a class="link" href="../mtls-with-apple-keychain/" &gt;how to configure mTLS using the macOS keychain&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also covered &lt;a class="link" href="../cloudfront-signed-urls/" &gt;how to create signed URLs with AWS CloudFront&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-the-video-on-launchd-agents-and-daemons-and-how-to-find-the-plist-file-for-a-running-process"&gt;&lt;a href="#watch-the-video-on-launchd-agents-and-daemons-and-how-to-find-the-plist-file-for-a-running-process" class="header-anchor"&gt;&lt;/a&gt;Watch the video on launchd agents and daemons, and how to find the plist file for a running process
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/idFJmajURpE"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>What is a VLAN and why you need it in your home network</title><link>https://victoronsoftware.com/posts/why-you-need-vlan/</link><pubDate>Wed, 27 Nov 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/why-you-need-vlan/</guid><description>&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/vlan-house.png" alt="Featured image of post What is a VLAN and why you need it in your home network" /&gt;&lt;h2 id="what-is-a-vlan"&gt;&lt;a href="#what-is-a-vlan" class="header-anchor"&gt;&lt;/a&gt;What is a VLAN?
&lt;/h2&gt;&lt;p&gt;VLAN (Virtual Local Area Network) technology allows you to create multiple isolated networks on a single physical
network. For example, a single ethernet wire or a WLAN (wireless LAN) can support multiple VLANs. VLANs improve network
security, performance, and scalability.&lt;/p&gt;
&lt;h2 id="how-does-vlan-improve-network-security"&gt;&lt;a href="#how-does-vlan-improve-network-security" class="header-anchor"&gt;&lt;/a&gt;How does VLAN improve network security?
&lt;/h2&gt;&lt;p&gt;VLAN improves network security by isolating devices into separate networks. This isolation prevents devices in one VLAN
from communicating with devices in another VLAN. For example, you can create a separate VLAN for your IoT (Internet of
Things) devices, such as smart light bulbs and thermostats, to prevent them from accessing your primary network. You can
also create a separate VLAN for guest devices to prevent them from accessing your main network and other VLANs.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/VLAN-basic.png"
alt="Router with three VLANS -- office, IoT, and guest."&gt;
&lt;/figure&gt;
&lt;p&gt;For example, if a hacker gains access to a device in the IoT VLAN, they won&amp;rsquo;t be able to access devices in the office
VLAN or the guest VLAN. This isolation limits the damage that a hacker can do to your network.&lt;/p&gt;
&lt;h2 id="how-does-vlan-work"&gt;&lt;a href="#how-does-vlan-work" class="header-anchor"&gt;&lt;/a&gt;How does VLAN work?
&lt;/h2&gt;&lt;p&gt;VLAN works by adding a VLAN tag to each network packet. The VLAN tag contains the VLAN ID, which identifies the VLAN to
which the packet belongs. Network switches use the VLAN tag to forward packets only to devices in the same VLAN. Routers
can route packets between different VLANs based on their VLAN tags.&lt;/p&gt;
&lt;h2 id="how-to-set-up-vlans-in-your-home-network"&gt;&lt;a href="#how-to-set-up-vlans-in-your-home-network" class="header-anchor"&gt;&lt;/a&gt;How to set up VLANs in your home network
&lt;/h2&gt;&lt;p&gt;Unfortunately, setting up a VLAN in your home network is not as simple as flipping a switch. Multiple parts of your home
network need to be configured, and some older or cheaper hardware, such as no-configuration network switches, may not
support VLANs.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/VLAN-full.png"
alt="Detailed picture of router with three VLANS -- office, IoT, and guest. The picture includes firewall and switches."&gt;
&lt;/figure&gt;
&lt;h3 id="selecting-vlan-tags-and-ip-ranges"&gt;&lt;a href="#selecting-vlan-tags-and-ip-ranges" class="header-anchor"&gt;&lt;/a&gt;Selecting VLAN tags and IP ranges
&lt;/h3&gt;&lt;p&gt;Before configuring VLANs, decide how many VLAN tags you need and what each tag will represent. Also, determine what IP
ranges will map to each VLAN. Some people map the VLAN ID to the third octet of the IP address. For example, VLAN 333
may use the IP range 10.0.333.0/24.&lt;/p&gt;
&lt;p&gt;On the other hand, there is a security argument for using random VLAN IDs. If a hacker gets access to your network, they
won&amp;rsquo;t know what each VLAN ID represents and may even have difficulty figuring out which VLAN IDs are active. This
security approach is often referred to as security through obscurity.&lt;/p&gt;
&lt;p&gt;Some common VLANs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Office&lt;/li&gt;
&lt;li&gt;IoT&lt;/li&gt;
&lt;li&gt;Guest&lt;/li&gt;
&lt;li&gt;Media&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="router-interfaces"&gt;&lt;a href="#router-interfaces" class="header-anchor"&gt;&lt;/a&gt;Router interfaces
&lt;/h3&gt;&lt;p&gt;The network router interface is the first place to configure VLANs. A router interface is a physical or virtual router
port connecting to a network. So, you must configure the router interface to support your VLAN-selected tags.&lt;/p&gt;
&lt;h3 id="dhcp"&gt;&lt;a href="#dhcp" class="header-anchor"&gt;&lt;/a&gt;DHCP
&lt;/h3&gt;&lt;p&gt;Dynamic Host Configuration Protocol (DHCP) is a network protocol that automatically assigns IP addresses to devices on a
network.&lt;/p&gt;
&lt;p&gt;You need to configure a DHCP server to assign IP addresses to devices in each VLAN. You can use the same DHCP server for
all VLANs but must configure it to assign IP addresses from different ranges for each VLAN.&lt;/p&gt;
&lt;h3 id="firewall"&gt;&lt;a href="#firewall" class="header-anchor"&gt;&lt;/a&gt;Firewall
&lt;/h3&gt;&lt;p&gt;You need to configure firewall rules for each VLAN to control what traffic is allowed in and out of the VLAN. For
example, you may not allow devices on the Guest VLAN to access devices on the other VLANs.&lt;/p&gt;
&lt;p&gt;Below is an example of our firewall rules for the GUEST VLAN.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/vlan-firewall.png"
alt="pfsense firewall rules for GUEST VLAN, which only allows access to GUEST VLAN."&gt;
&lt;/figure&gt;
&lt;p&gt;The rules allow access to our local DNS server to block inappropriate content. The rules block all private networking
IPs (as defined by RFC 1918) except the VLAN&amp;rsquo;s subnet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10.0.0.0/8 (10.0.0.0 - 10.255.255.255)&lt;/li&gt;
&lt;li&gt;172.16.0.0/12 (172.16.0.0 - 172.31.255.255)&lt;/li&gt;
&lt;li&gt;192.168.0.0/16 (192.168.0.0 - 192.168.255.255)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="network-switch"&gt;&lt;a href="#network-switch" class="header-anchor"&gt;&lt;/a&gt;Network switch
&lt;/h3&gt;&lt;p&gt;You need to configure the VLAN tags for each port on the network switch. For example, you may configure port 1 to be
part of the Office VLAN and port 2 to be part of the IoT VLAN. A single port can be part of multiple VLANs, often
required for a wireless access point.&lt;/p&gt;
&lt;p&gt;Below is an example of the network switch configuration for our GUEST VLAN.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/vlan-network-switch.png"
alt="pfsense firewall rules for GUEST VLAN, which only allows access to GUEST VLAN."&gt;
&lt;/figure&gt;
&lt;p&gt;The tagged ports include three wireless access points and the router port.&lt;/p&gt;
&lt;h3 id="wireless-access-point-wap"&gt;&lt;a href="#wireless-access-point-wap" class="header-anchor"&gt;&lt;/a&gt;Wireless Access Point (WAP)
&lt;/h3&gt;&lt;p&gt;You need to configure the SSIDs (Service Set Identifiers) for each VLAN on your wireless access point. In our case, we
created a WLAN for each VLAN—Office, IoT, and Guest. Each WLAN is associated with a VLAN tag, which we set in the
advanced options of the WLAN configuration, as shown below.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/vlan-wlan-config.png"
alt="WLAN priority tab that specifies the VLAN tag of 4."&gt;
&lt;/figure&gt;
&lt;h2 id="guest-network"&gt;&lt;a href="#guest-network" class="header-anchor"&gt;&lt;/a&gt;Guest network
&lt;/h2&gt;&lt;p&gt;Before adding a VLAN for our guest network, we used the &amp;ldquo;Guest Mode&amp;rdquo; feature on our WAP (Wireless Access Point). This
feature was secure because it isolated guest devices from our primary network. However, the user experience for our
guests was terrible.&lt;/p&gt;
&lt;p&gt;The guest network directed users to a &lt;a class="link" href="https://en.wikipedia.org/wiki/Captive_portal" target="_blank" rel="noopener"
&gt;captive portal&lt;/a&gt; before granting
them Internet access. Some child guests could not access the captive portal due to parental device restrictions. Guests'
devices also had trouble reconnecting to the guest network on a subsequent visit &amp;ndash; they were not automatically
reconnected.&lt;/p&gt;
&lt;p&gt;Switching to a VLAN-based guest network significantly improved the user experience.&lt;/p&gt;
&lt;h2 id="how-to-specify-vlan-on-a-wired-connection"&gt;&lt;a href="#how-to-specify-vlan-on-a-wired-connection" class="header-anchor"&gt;&lt;/a&gt;How to specify VLAN on a wired connection
&lt;/h2&gt;&lt;p&gt;A single wired ethernet connection may be part of multiple VLANs. You can connect your computer to different VLANs for
testing or security reasons.&lt;/p&gt;
&lt;p&gt;On a wired connection, you can specify the VLAN ID in your device&amp;rsquo;s network settings. For example, you can add a virtual
interface with a specific VLAN tag on macOS.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/vlan-macos-config.png"
alt="macOS network settings with VLAN ID specified."&gt;
&lt;/figure&gt;
&lt;h2 id="debugging-notes"&gt;&lt;a href="#debugging-notes" class="header-anchor"&gt;&lt;/a&gt;Debugging notes
&lt;/h2&gt;&lt;p&gt;While setting up our VLANs, we encountered the issue of our computer not getting an IP address from the DHCP. After
reviewing the settings on our router and switch, we found that our settings did not save for some reason. Make sure to
reload your settings after making changes to ensure they stick.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the past, we discussed &lt;a class="link" href="../setting-up-a-virtual-router/" &gt;how to set up a virtual router&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We also covered &lt;a class="link" href="../create-ipv6-only-linux-server/" &gt;how to create an IPv6-only linux server&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../how-to-use-tpm/" &gt;Securing Private Keys with TPM 2.0: A Developer’s Guide&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;A hands-on walkthrough of using TPM
2.0 for hardware-backed key protection, featuring code examples and practical usage patterns.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-discuss-what-is-a-vlan-and-why-you-need-it-in-your-home-network"&gt;&lt;a href="#watch-us-discuss-what-is-a-vlan-and-why-you-need-it-in-your-home-network" class="header-anchor"&gt;&lt;/a&gt;Watch us discuss what is a VLAN and why you need it in your home network
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/R8vq50uRxik"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to connect to remote Active Directory server in 4 steps</title><link>https://victoronsoftware.com/posts/connect-to-remote-active-directory/</link><pubDate>Wed, 20 Nov 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/connect-to-remote-active-directory/</guid><description>&lt;img src="https://victoronsoftware.com/posts/connect-to-remote-active-directory/connect-to-ad-headline.png" alt="Featured image of post How to connect to remote Active Directory server in 4 steps" /&gt;&lt;ol&gt;
&lt;li&gt;&lt;a class="link" href="#1-obtain-vpn-connection-details" &gt;Obtain VPN connection details&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#2-point-your-computer-to-the-remote-active-directory-dns-server" &gt;Point your computer to the remote Active Directory DNS server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#3-join-your-computer-to-the-active-directory-domain" &gt;Join your computer to the Active Directory domain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#4-log-in-with-your-active-directory-credentials" &gt;Log in with your Active Directory credentials&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="what-is-active-directory"&gt;&lt;a href="#what-is-active-directory" class="header-anchor"&gt;&lt;/a&gt;What is Active Directory?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://docs.microsoft.com/en-us/windows-server/identity/ad-ds/get-started/virtual-dc/active-directory-domain-services-overview" target="_blank" rel="noopener"
&gt;Active Directory&lt;/a&gt;
is a directory service developed by Microsoft for Windows domain networks. It provides authentication and authorization
services and a framework for organizing and managing resources in a networked environment. Active Directory stores
information about users, computers, and other network objects, making managing and securing your network easier.&lt;/p&gt;
&lt;p&gt;Active Directory runs on Windows Server and is the central component of many Windows-based networks. It is the central
piece for a variety of services, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Certificate Services (AD CS)&lt;/li&gt;
&lt;li&gt;Lightweight Directory Services (AD LDS)&lt;/li&gt;
&lt;li&gt;Federation Services (AD FS)&lt;/li&gt;
&lt;li&gt;Rights Management Services (AD RMS)&lt;/li&gt;
&lt;li&gt;and many others&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-connect-to-a-remote-active-directory-server"&gt;&lt;a href="#why-connect-to-a-remote-active-directory-server" class="header-anchor"&gt;&lt;/a&gt;Why connect to a remote Active Directory server?
&lt;/h2&gt;&lt;p&gt;With the rise of remote work and distributed teams, you may need to connect your home computer to a remote Active
Directory server. This connection allows you to access network resources, authenticate with your company&amp;rsquo;s domain, and
use services that rely on Active Directory.&lt;/p&gt;
&lt;p&gt;The recommended way to connect to a remote Active Directory server is through a VPN (Virtual Private Network). A VPN
creates a secure connection between your computer and the remote network, allowing you to access resources as if you
were physically connected.&lt;/p&gt;
&lt;h2 id="steps-to-connect-to-a-remote-active-directory-server"&gt;&lt;a href="#steps-to-connect-to-a-remote-active-directory-server" class="header-anchor"&gt;&lt;/a&gt;Steps to connect to a remote Active Directory server
&lt;/h2&gt;&lt;h3 id="1-obtain-vpn-connection-details"&gt;&lt;a href="#1-obtain-vpn-connection-details" class="header-anchor"&gt;&lt;/a&gt;1. Obtain VPN connection details
&lt;/h3&gt;&lt;p&gt;Contact your IT department or network administrator to obtain the VPN connection details. You will need the following
information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VPN server address&lt;/li&gt;
&lt;li&gt;VPN type (e.g., PPTP, L2TP/IPsec, OpenVPN)&lt;/li&gt;
&lt;li&gt;VPN username and password&lt;/li&gt;
&lt;li&gt;Any additional settings or requirements, such as a private key or certificate&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For our example, we are using &lt;a class="link" href="https://www.wireguard.com/" target="_blank" rel="noopener"
&gt;WireGuard&lt;/a&gt;, a modern VPN protocol known for its simplicity
and security.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/connect-to-remote-active-directory/wireguard-vpn-settings.png"
alt="WireGuard interface, including public key, listen port, addresses, and DNS servers."&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; The &lt;code&gt;Allowed IPs&lt;/code&gt; field above specifies which IP addresses will be routed through the VPN. Make sure to include
the IP addresses of the remote Active Directory server. Also, ensure the IP addresses do not conflict with your local
network.&lt;/p&gt;
&lt;p&gt;Install the VPN client on your computer and activate the VPN connection using the provided details.&lt;/p&gt;
&lt;p&gt;Test the VPN connection by pinging the remote Active Directory server.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;PS C:\Users\victor&amp;gt; ping 10.98.1.1
Pinging 10.98.1.1 with 32 bytes of data:
Reply from 10.98.1.1: bytes=32 time=155ms TTL=127
Reply from 10.98.1.1: bytes=32 time=156ms TTL=127
Reply from 10.98.1.1: bytes=32 time=156ms TTL=127
Reply from 10.98.1.1: bytes=32 time=156ms TTL=127
Ping statistics for 10.98.1.1:
Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
Minimum = 155ms, Maximum = 156ms, Average = 155ms
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="2-point-your-computer-to-the-remote-active-directory-dns-server"&gt;&lt;a href="#2-point-your-computer-to-the-remote-active-directory-dns-server" class="header-anchor"&gt;&lt;/a&gt;2. Point your computer to the remote Active Directory DNS server
&lt;/h3&gt;&lt;p&gt;To use Active Directory, your computer must know where to find the domain controller. This information is stored in the
DNS (Domain Name System) settings.&lt;/p&gt;
&lt;p&gt;Since we are using a VPN to connect to the remote Active Directory server, we need to update the DNS settings of our VPN
connection.&lt;/p&gt;
&lt;p&gt;In the VPN settings above, we specified the DNS server as part of the WireGuard configuration.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;DNS = 10.98.1.1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Alternatively, we can manually set the DNS server for the VPN connection in &lt;strong&gt;Control Panel &amp;gt; Network and Sharing
Center &amp;gt; &lt;em&gt;your VPN connection&lt;/em&gt; &amp;gt; Properties &amp;gt; Networking &amp;gt; Internet Protocol Version 4 (TCP/IPv4) &amp;gt; Properties&lt;/strong&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/connect-to-remote-active-directory/vpn-dns-settings.png"
alt="Windows 11 popups for setting DNS server."&gt;
&lt;/figure&gt;
&lt;h3 id="3-join-your-computer-to-the-active-directory-domain"&gt;&lt;a href="#3-join-your-computer-to-the-active-directory-domain" class="header-anchor"&gt;&lt;/a&gt;3. Join your computer to the Active Directory domain
&lt;/h3&gt;&lt;p&gt;Open &lt;strong&gt;Control Panel &amp;gt; System and Security &amp;gt; System &amp;gt; Domain or workgroup &amp;gt; Change&amp;hellip;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Enter the domain name provided by your IT department. You can also change your computer name if necessary.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/connect-to-remote-active-directory/join-active-directory-domain.png"
alt="Windows 11 dialog to join a domain."&gt;
&lt;/figure&gt;
&lt;p&gt;Click &lt;strong&gt;OK&lt;/strong&gt; and enter your domain credentials when prompted. You must have permission from Active Directory to join a
computer to the domain.&lt;/p&gt;
&lt;p&gt;After a few seconds, you should see a message indicating that your computer has successfully joined the domain.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/connect-to-remote-active-directory/join-active-directory-success.png"
alt="Windows 11 dialog indicating successful domain join."&gt;
&lt;/figure&gt;
&lt;p&gt;You must restart your computer for the changes to take effect.&lt;/p&gt;
&lt;h3 id="4-log-in-with-your-active-directory-credentials"&gt;&lt;a href="#4-log-in-with-your-active-directory-credentials" class="header-anchor"&gt;&lt;/a&gt;4. Log in with your Active Directory credentials
&lt;/h3&gt;&lt;p&gt;Your VPN connection must be active to log in with your Active Directory credentials after joining the domain. Some VPN
clients allow you to connect before logging in to Windows. This feature ensures that your computer can reach the domain
controller during the login process.&lt;/p&gt;
&lt;p&gt;If your VPN client does not support connecting before logging in, you may need to log in with a local account first and
then connect to the VPN. Then, you can switch users and login with your Active Directory credentials.&lt;/p&gt;
&lt;h2 id="additional-information"&gt;&lt;a href="#additional-information" class="header-anchor"&gt;&lt;/a&gt;Additional information
&lt;/h2&gt;&lt;p&gt;The local computer caches credentials for Active Directory users. You can log in to your computer with your Active
Directory credentials on subsequent logins, even when you are not connected to the domain. For example, you can log in
and then connect to the VPN.&lt;/p&gt;
&lt;p&gt;After joining the domain, we found that our local computer refused SSH connections from other local computers. We
resolved this issue by allowing SSH access in Active Directory settings.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we covered &lt;a class="link" href="../test-ndes-scep-server/" &gt;how to test a Windows NDES SCEP server&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Previously, we explained &lt;a class="link" href="../code-signing-windows/" &gt;how to code sign a Windows application&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-connect-to-remote-active-directory-server"&gt;&lt;a href="#watch-how-to-connect-to-remote-active-directory-server" class="header-anchor"&gt;&lt;/a&gt;Watch how to connect to remote Active Directory server
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/wFlntCobLsA"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>2 ways to turn a script into a macOS install package</title><link>https://victoronsoftware.com/posts/script-only-macos-install-package/</link><pubDate>Wed, 13 Nov 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/script-only-macos-install-package/</guid><description>&lt;img src="https://victoronsoftware.com/posts/script-only-macos-install-package/script-package-headline.png" alt="Featured image of post 2 ways to turn a script into a macOS install package" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#create-a-script-only-install-package-using-the-pkgbuild-command" &gt;Create a script-only install package using the &lt;code&gt;pkgbuild&lt;/code&gt; command&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#create-a-script-only-install-package-using-the-packages-app" &gt;Create a script-only install package using the Packages app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-a-macos-install-package"&gt;&lt;a href="#what-is-a-macos-install-package" class="header-anchor"&gt;&lt;/a&gt;What is a macOS install package?
&lt;/h2&gt;&lt;p&gt;A macOS install package is a file that contains the files and scripts needed to install an application on a macOS
system. It is commonly used to distribute software to macOS users and can contain multiple files, scripts, and metadata.&lt;/p&gt;
&lt;h2 id="why-create-a-macos-install-package-that-only-runs-a-script"&gt;&lt;a href="#why-create-a-macos-install-package-that-only-runs-a-script" class="header-anchor"&gt;&lt;/a&gt;Why create a macOS install package that only runs a script?
&lt;/h2&gt;&lt;p&gt;Sometimes, you must distribute a script that performs a specific task on a macOS system, such as fixing a known issue.
You can create a macOS install package that contains the script and any other files needed to run that script. This
workflow allows you to distribute the script as an install package that users can easily install on their macOS systems.&lt;/p&gt;
&lt;p&gt;Another reason to create a macOS install package that only runs a script is to use a third-party installer instead of
the built-in macOS installer. This custom installer can provide additional features and customization options.&lt;/p&gt;
&lt;h2 id="create-a-script-only-install-package-using-the-pkgbuild-command"&gt;&lt;a href="#create-a-script-only-install-package-using-the-pkgbuild-command" class="header-anchor"&gt;&lt;/a&gt;Create a script-only install package using the &lt;code&gt;pkgbuild&lt;/code&gt; command
&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;pkgbuild&lt;/code&gt; command is a command-line tool included with macOS. It allows you to create macOS install packages from
the command line.&lt;/p&gt;
&lt;p&gt;First, create a directory for your script files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir Scripts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a script file in the above directory called &lt;code&gt;postinstall&lt;/code&gt; that contains the script you want to run. Below is an
example script for testing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# installer script variables:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# $0 = path to the script&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# $1 = path to the package&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# $2 = target location, i.e., /Applications&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# $3 = target volume, i.e., /Volumes/Macintosh HD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# $4 = &amp;#34;/&amp;#34; if this is the startup disk&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p /opt/hello
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;target&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;/opt/hello/hello.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;\$0=&lt;/span&gt;$0&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; &amp;gt; $target
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;\$1=&lt;/span&gt;$1&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; $target
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;\$2=&lt;/span&gt;$2&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; $target
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;\$3=&lt;/span&gt;$3&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; $target
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;\$4=&lt;/span&gt;$4&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; $target
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;\$INSTALL_PKG_SESSION_ID=&lt;/span&gt;$INSTALL_PKG_SESSION_ID&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; $target
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;\$USER=&lt;/span&gt;$USER&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; $target
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;\$HOME=&lt;/span&gt;$HOME&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; $target
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Always succeed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;exit &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above script creates a directory &lt;code&gt;/opt/hello&lt;/code&gt; and writes various script variables to a file &lt;code&gt;/opt/hello/hello.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Make sure the script is executable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;chmod +x Scripts/postinstall
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create the installation package using the &lt;code&gt;pkgbuild&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pkgbuild --nopayload --scripts Scripts --identifier com.victoronsoftware.pkgbuild-demo --version 1.0 PkgbuildDemo.pkg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command creates an install package &lt;code&gt;PkgbuildDemo.pkg&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;--nopayload&lt;/code&gt; flag tells &lt;code&gt;pkgbuild&lt;/code&gt; that there are no application files to include in the package. The &lt;code&gt;--scripts&lt;/code&gt;
flag specifies the directory containing the scripts to run during the installation. The scripts directory may also
contain additional files needed by the script.&lt;/p&gt;
&lt;p&gt;At this point, you can try installing the package on a test macOS system:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo installer -pkg PkgbuildDemo.pkg -target /
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="create-a-script-only-install-package-using-the-packages-app"&gt;&lt;a href="#create-a-script-only-install-package-using-the-packages-app" class="header-anchor"&gt;&lt;/a&gt;Create a script-only install package using the Packages app
&lt;/h2&gt;&lt;p&gt;One popular GUI tool for creating macOS installer packages is the
&lt;a class="link" href="http://s.sudre.free.fr/Software/Packages/about.html" target="_blank" rel="noopener"
&gt;Packages app&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Download and install the Packages app.&lt;/p&gt;
&lt;p&gt;Create a new project in the Packages app using the Raw Package template.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/script-only-macos-install-package/packages-app-new-project.png"
alt="Choose a template for your project. A Raw Package project lets you install files at specific locations."&gt;
&lt;/figure&gt;
&lt;p&gt;Choose the name and location of your project.&lt;/p&gt;
&lt;p&gt;In the Scripts tab, choose a Post-installation script. Add additional script resource files if needed for the script.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/script-only-macos-install-package/packages-app-add-script.png"
alt="Scripts tab is selected on the top. From the two options, pre-installation and post-installation, the post-installation contains an exec file."&gt;
&lt;/figure&gt;
&lt;p&gt;Save your project with &lt;strong&gt;File &amp;gt; Save&lt;/strong&gt; and build the package with &lt;strong&gt;Build &amp;gt; Build&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The tool will save the new PKG file to your project directory.&lt;/p&gt;
&lt;h2 id="analyze-the-install-package"&gt;&lt;a href="#analyze-the-install-package" class="header-anchor"&gt;&lt;/a&gt;Analyze the install package
&lt;/h2&gt;&lt;p&gt;To analyze the install package, you can use a tool like
&lt;a class="link" href="https://www.mothersruin.com/software/SuspiciousPackage/get.html" target="_blank" rel="noopener"
&gt;Suspicious Package&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/script-only-macos-install-package/suspicious-package.png"
alt="Suspicious Package app showing the contents of the postinstall script."&gt;
&lt;/figure&gt;
&lt;h2 id="sign-and-notarize-the-install-package"&gt;&lt;a href="#sign-and-notarize-the-install-package" class="header-anchor"&gt;&lt;/a&gt;Sign and notarize the install package
&lt;/h2&gt;&lt;p&gt;Before distributing the package to users, you may need to sign and notarize it.&lt;/p&gt;
&lt;p&gt;To sign the package, you need a Developer ID Installer certificate. The Apple Developer Program currently costs 99 USD
per membership year. To sign your package, place the certificate and corresponding private key (together called an
&amp;ldquo;identity&amp;rdquo;) into your keychain. Then, you can sign the package using the &lt;code&gt;productsign&lt;/code&gt; command-line utility:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;productsign --sign &lt;span style="color:#e6db74"&gt;&amp;#34;Developer ID Installer: ********&amp;#34;&lt;/span&gt; ~/PkgbuildDemo.pkg ~/PkgbuildDemo-signed.pkg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can notarize your package with Apple using the &lt;code&gt;notarytool&lt;/code&gt; command-line utility. For more information, see
&lt;a class="link" href="https://developer.apple.com/documentation/security/notarizing-macos-software-before-distribution?language=objc" target="_blank" rel="noopener"
&gt;Notarizing macOS software before distribution&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="distribute-the-install-package"&gt;&lt;a href="#distribute-the-install-package" class="header-anchor"&gt;&lt;/a&gt;Distribute the install package
&lt;/h2&gt;&lt;p&gt;You can distribute the package by posting a download link on your website, through a package manager, or using your MDM
tool.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using a macOS MDM platform such as &lt;a class="link" href="https://fleetdm.com/device-management" target="_blank" rel="noopener"
&gt;Fleet&lt;/a&gt;, you can upload the package
to the MDM and deploy it to your managed devices.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we explained &lt;a class="link" href="../macos-launchd-agents-and-daemons/" &gt;launchd agents and daemons on macOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In the past, we showed &lt;a class="link" href="../exe-installer/" &gt;how to create an EXE installer for Windows&lt;/a&gt; and
&lt;a class="link" href="../code-signing-windows/" &gt;code sign a Windows application&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also covered &lt;a class="link" href="../mtls-with-apple-keychain/" &gt;using Mutual TLS (mTLS) with macOS keychain&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-create-a-script-only-macos-install-package"&gt;&lt;a href="#watch-how-to-create-a-script-only-macos-install-package" class="header-anchor"&gt;&lt;/a&gt;Watch how to create a script-only macOS install package
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/_NWQS0Eu74k"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Is OpenTelemetry useful for the average software developer?</title><link>https://victoronsoftware.com/posts/opentelemetry-with-jaeger/</link><pubDate>Wed, 30 Oct 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/opentelemetry-with-jaeger/</guid><description>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-with-jaeger/opentelemetry-with-jaeger-headline.png" alt="Featured image of post Is OpenTelemetry useful for the average software developer?" /&gt;&lt;p&gt;This article discusses our first impressions of using OpenTelemetry with Jaeger.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#use-cases-for-opentelemetry-and-jaeger" &gt;Use cases for OpenTelemetry and Jaeger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#problems-with-opentelemetry-and-jaeger" &gt;Problems with OpenTelemetry and Jaeger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-opentelemetry"&gt;&lt;a href="#what-is-opentelemetry" class="header-anchor"&gt;&lt;/a&gt;What is OpenTelemetry?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://opentelemetry.io/" target="_blank" rel="noopener"
&gt;OpenTelemetry&lt;/a&gt; is a set of APIs, libraries, agents, and instrumentation for collecting
distributed traces and metrics from your applications. It provides a standardized way to instrument your code and
collect telemetry data. OpenTelemetry supports programming languages like Java, Python, Go, JavaScript, etc.&lt;/p&gt;
&lt;p&gt;Tracing is a method of monitoring and profiling your application to understand how requests flow through your system.
For example, you can view the associated database calls and requests to other services for a single API request. Tracing
allows you to identify bottlenecks, latency issues, and other performance problems.&lt;/p&gt;
&lt;h2 id="what-is-jaeger"&gt;&lt;a href="#what-is-jaeger" class="header-anchor"&gt;&lt;/a&gt;What is Jaeger?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://www.jaegertracing.io/" target="_blank" rel="noopener"
&gt;Jaeger&lt;/a&gt; is an open-source, end-to-end distributed tracing system. Jaeger is popular for
tracing applications because of its scalability, ease of use, and integration with other tools. Jaeger provides a
web-based UI for viewing traces and analyzing performance data.&lt;/p&gt;
&lt;h2 id="add-opentelemetry-instrumentation-to-your-application"&gt;&lt;a href="#add-opentelemetry-instrumentation-to-your-application" class="header-anchor"&gt;&lt;/a&gt;Add OpenTelemetry instrumentation to your application
&lt;/h2&gt;&lt;p&gt;To start with OpenTelemetry and Jaeger, you must instrument your application with OpenTelemetry libraries.&lt;/p&gt;
&lt;p&gt;In our case, we used the OpenTelemetry Go SDK to instrument our Go application. We added the necessary dependencies to
our project.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;go get go.opentelemetry.io/otel@v1.31.0
go get go.opentelemetry.io/otel/exporters/otlp/otlptrace@v1.31.0
go get go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc@v1.31.0
go get go.opentelemetry.io/otel/sdk@v1.31.0
go get go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux@v0.56.0
go get github.com/XSAM/otelsql@v0.35.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux&lt;/code&gt; package is needed to instrument our
&lt;code&gt;gorilla/mux&lt;/code&gt; HTTP router.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;mux&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewRouter&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Use&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;otelmux&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Middleware&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;fleet&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;github.com/XSAM/otelsql&lt;/code&gt; package is needed to instrument our SQL database queries.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/XSAM/otelsql&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;semconv&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;go.opentelemetry.io/otel/semconv/v1.26.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;otelTracedDriverName&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;init&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;otelTracedDriverName&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;otelsql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Register&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;mysql&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;otelsql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithAttributes&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;semconv&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;DBSystemMySQL&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;otelsql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithSpanOptions&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;otelsql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SpanOptions&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// DisableErrSkip ignores driver.ErrSkip errors, which are frequently returned by the MySQL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// driver when certain optional methods or paths are not implemented/taken.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// For example, interpolateParams=false (the secure default) will not do a parametrized&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// sql.conn.query directly without preparing it first, causing driver.ErrSkip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;DisableErrSkip&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Omitting span for sql.conn.reset_session since it takes ~1us and doesn&amp;#39;t provide useful&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// information&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;OmitConnResetSession&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Omitting span for sql.rows since it is very quick and typically doesn&amp;#39;t provide useful&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// information beyond what&amp;#39;s already reported by prepare/exec/query&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;OmitRows&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// WithSpanNameFormatter allows us to customize the span name, which is especially useful for SQL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// queries run outside an HTTPS transaction, which do not belong to a parent span, show up as their&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// own trace, and would otherwise be named &amp;#34;sql.conn.query&amp;#34; or &amp;#34;sql.conn.exec&amp;#34;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;otelsql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithSpanNameFormatter&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;context&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Context&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;method&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;otelsql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Method&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; string(&lt;span style="color:#a6e22e"&gt;method&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Append query with extra whitespaces removed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Join&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fields&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;), &lt;span style="color:#e6db74"&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;) &amp;gt; &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;[:&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;] &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; string(&lt;span style="color:#a6e22e"&gt;method&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;: &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; panic(&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, use &lt;code&gt;otelTracedDriverName&lt;/code&gt; to open a connection to your database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;db&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Open&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;otelTracedDriverName&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;user:password@tcp(localhost:3306)/database&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When starting your application, you must create an OpenTelemetry exporter and a trace provider.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;context&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Background&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;otlptracegrpc&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewClient&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;otlpTraceExporter&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;otlptrace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; panic(&lt;span style="color:#e6db74"&gt;&amp;#34;Failed to initialize tracing&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;batchSpanProcessor&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewBatchSpanProcessor&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;otlpTraceExporter&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tracerProvider&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTracerProvider&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithSpanProcessor&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;batchSpanProcessor&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;otel&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetTracerProvider&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tracerProvider&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="launch-jaeger"&gt;&lt;a href="#launch-jaeger" class="header-anchor"&gt;&lt;/a&gt;Launch Jaeger
&lt;/h2&gt;&lt;p&gt;To view traces, you need to launch Jaeger. You can run Jaeger locally using Docker. Based on the
&lt;a class="link" href="https://www.jaegertracing.io/docs/1.62/getting-started/" target="_blank" rel="noopener"
&gt;Jaeger 1.62 Getting Started guide&lt;/a&gt;, you can run the following
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run --rm --name jaeger &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -p 16686:16686 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -p 4317:4317 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt;jaegertracing/all-in-one:1.62.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our example, we are only exposing two ports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;4317&lt;/code&gt; for the Jaeger collector, which receives trace data using OpenTelemetry Protocol (OTLP) over gRPC&lt;/li&gt;
&lt;li&gt;&lt;code&gt;16686&lt;/code&gt; for the Jaeger UI&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="launch-your-application"&gt;&lt;a href="#launch-your-application" class="header-anchor"&gt;&lt;/a&gt;Launch your application
&lt;/h2&gt;&lt;p&gt;Before starting your application, you must set the OpenTelemetry endpoint to send traces to Jaeger. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;export OTEL_SERVICE_NAME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;fleet
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;export OTEL_EXPORTER_OTLP_ENDPOINT&lt;span style="color:#f92672"&gt;=&lt;/span&gt;http://localhost:4317
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, you can start your application.&lt;/p&gt;
&lt;h2 id="view-traces-in-jaeger"&gt;&lt;a href="#view-traces-in-jaeger" class="header-anchor"&gt;&lt;/a&gt;View traces in Jaeger
&lt;/h2&gt;&lt;p&gt;Open your browser and navigate to &lt;a class="link" href="http://localhost:16686" target="_blank" rel="noopener"
&gt;http://localhost:16686&lt;/a&gt; to view traces in the Jaeger UI.
Select your &lt;strong&gt;Service&lt;/strong&gt; name and click &lt;strong&gt;Find Traces&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can click into a trace to view the details of each span. You can see the duration, logs, and tags for each span. The
example below shows the HTTP request details and multiple SQL queries.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/opentelemetry-with-jaeger/example-jaeger-trace.png"
alt="Fleet hosts request with SQL queries to sessions, users, user_teams, and host tables."&gt;
&lt;/figure&gt;
&lt;h2 id="use-cases-for-opentelemetry-and-jaeger"&gt;&lt;a href="#use-cases-for-opentelemetry-and-jaeger" class="header-anchor"&gt;&lt;/a&gt;Use cases for OpenTelemetry and Jaeger
&lt;/h2&gt;&lt;p&gt;In a local software development environment, OpenTelemetry and Jaeger can be used to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fix bottlenecks and latency issues&lt;/li&gt;
&lt;li&gt;Understand how requests flow through your system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a bottleneck is known or suspected, Jaeger can help you identify the root cause. For example, you can see which
database queries are taking the most time and optimize them.&lt;/p&gt;
&lt;p&gt;When developing new features, Jaeger can help you understand how requests flow through your system. This telemetry data
provides a quick check to ensure your new feature works as expected.&lt;/p&gt;
&lt;p&gt;In a production environment, OpenTelemetry and Jaeger can be used to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monitor and profile your applications&lt;/li&gt;
&lt;li&gt;Troubleshoot performance issues&lt;/li&gt;
&lt;li&gt;Optimize your applications and improve user experience&lt;/li&gt;
&lt;li&gt;Ensure your applications meet service level objectives (SLOs)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="problems-with-opentelemetry-and-jaeger"&gt;&lt;a href="#problems-with-opentelemetry-and-jaeger" class="header-anchor"&gt;&lt;/a&gt;Problems with OpenTelemetry and Jaeger
&lt;/h2&gt;&lt;p&gt;OpenTelemetry and Jaeger are powerful tools, yet their development use seems limited to fixing performance bottlenecks.
They cannot be used for general debugging out of the box since they don&amp;rsquo;t provide enough detail for each specific
request, such as the request body.&lt;/p&gt;
&lt;p&gt;In addition, missing spans can be a problem. If your application is not instrumented correctly, you may not see all the
spans you expect or know about in Jaeger. Our application lacks spans for some API endpoints, Redis transactions,
outbound HTTP requests, and asynchronous processes. Adding all of these spans requires additional development and QA
efforts.&lt;/p&gt;
&lt;p&gt;The Jaeger UI itself is basic and lacks some features. For example, regex search is missing out of the box, unless
Elasticsearch/OpenSearch storage is added.&lt;/p&gt;
&lt;p&gt;Our chosen SQL instrumentation library, &lt;a class="link" href="https://github.com/XSAM/otelsql" target="_blank" rel="noopener"
&gt;github.com/XSAM/otelsql&lt;/a&gt;, could be better. It
does not provide a way to trace the transaction lifecycle, and it creates many spans at the root level, clogging the
Jaeger UI.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../opentelemetry-for-devs/" &gt;OpenTelemetry: A developer&amp;rsquo;s best friend for production-ready code&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
How we changed our minds about OpenTelemetry and now advocate for developers to use it during development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../software-load-testing/" &gt;Top 5 metrics for software load testing performance&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Essential metrics to track when evaluating your application&amp;rsquo;s performance under load.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../optimizing-performance-of-go-app/" &gt;How to benchmark performance of Go serializers&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Learn effective techniques for measuring and optimizing Go code performance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/fleetdm/fleet/tree/6bc0b5dcd9214c6e3ff94fe657947aeccbdad352" target="_blank" rel="noopener"
&gt;Fleet Device Management repo with OpenTelemetry instrumentation (as of this writing)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="watch-opentelemetry-with-jaeger-video"&gt;&lt;a href="#watch-opentelemetry-with-jaeger-video" class="header-anchor"&gt;&lt;/a&gt;Watch OpenTelemetry with Jaeger video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/eQhdvU2gsmQ"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to create a custom GitHub Action using TypeScript</title><link>https://victoronsoftware.com/posts/typescript-github-action/</link><pubDate>Wed, 23 Oct 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/typescript-github-action/</guid><description>&lt;img src="https://victoronsoftware.com/posts/typescript-github-action/typescript-github-action-headline.png" alt="Featured image of post How to create a custom GitHub Action using TypeScript" /&gt;&lt;p&gt;In this article, we&amp;rsquo;ll create a custom reusable GitHub Action using TypeScript. As covered in our article on
&lt;a class="link" href="../github-reusable-workflows-and-steps/" &gt;reusing GitHub workflows and steps&lt;/a&gt;, GitHub Actions allow you to automate your
software development workflows. By creating a custom GitHub Action, you can extend the functionality of GitHub Actions
to suit your specific needs.&lt;/p&gt;
&lt;p&gt;We will create a simple GitHub Action to replace
&lt;a class="link" href="../github-code-review-issues/" &gt;GitHub&amp;rsquo;s broken Pull Request review process&lt;/a&gt;. This custom GitHub Action will
automatically approve Pull Requests that meet specific criteria.&lt;/p&gt;
&lt;h2 id="start-with-githubs-action-template"&gt;&lt;a href="#start-with-githubs-action-template" class="header-anchor"&gt;&lt;/a&gt;Start with GitHub&amp;rsquo;s Action template
&lt;/h2&gt;&lt;p&gt;GitHub provides a
&lt;a class="link" href="https://github.com/actions/typescript-action" target="_blank" rel="noopener"
&gt;template for creating a new GitHub Action using TypeScript&lt;/a&gt;. You can use
this template to get started quickly. The template includes the necessary files and structure to create a new GitHub
Action. Anything unnecessary can be removed or modified to suit your requirements.&lt;/p&gt;
&lt;p&gt;Follow the instructions in the template&amp;rsquo;s README to set up your action.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Click the &lt;strong&gt;Use this template&lt;/strong&gt; button at the top of the repository&lt;/li&gt;
&lt;li&gt;Select &lt;strong&gt;Create a new repository&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select an owner and name for your new repository&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create repository&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Clone your new repository&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Check out your new repository, go to the cloned repo directory, and make sure your node version matches the one in the
&lt;code&gt;.node-version&lt;/code&gt; file. If you&amp;rsquo;re using &lt;a class="link" href="https://github.com/nvm-sh/nvm/blob/master/README.md" target="_blank" rel="noopener"
&gt;nvm (Node Version Manager)&lt;/a&gt;,
you can run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cp .node-version .nvmrc
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;nvm install
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;node --version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Our example is based on
&lt;a class="link" href="https://github.com/actions/typescript-action/tree/0467e124e81b527a246cabdaef9c3b433febf9a8" target="_blank" rel="noopener"
&gt;this commit of the template repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="implement-your-custom-github-action"&gt;&lt;a href="#implement-your-custom-github-action" class="header-anchor"&gt;&lt;/a&gt;Implement your custom GitHub Action
&lt;/h2&gt;&lt;p&gt;Install the template&amp;rsquo;s dependencies with &lt;code&gt;npm install&lt;/code&gt;. In addition, install the &lt;code&gt;@actions/github&lt;/code&gt; package with
&lt;code&gt;npm install @actions/github&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The template provides a basic structure for your GitHub Action. Update the &lt;code&gt;action.yml&lt;/code&gt; file with your action&amp;rsquo;s name,
description, author, and updated inputs/outputs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Code review&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;description&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Improved code review process&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;author&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Victor on Software&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Add your action&amp;#39;s branding here. This will appear on the GitHub Marketplace.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;branding&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;icon&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;heart&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;color&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Define your inputs here.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;inputs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;github-token&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;description&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;GitHub secret token&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;required&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;runs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;using&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;node20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;main&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;dist/index.js&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this example, our new action will have a single input, &lt;code&gt;github-token&lt;/code&gt;, the GitHub secret token to use the GitHub API.&lt;/p&gt;
&lt;p&gt;Next, we can modify the code in the &lt;code&gt;src/main.ts&lt;/code&gt; file to implement our custom logic.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;core&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;@actions/core&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;github&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;@actions/github&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;readFileSync&lt;/span&gt; } &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * The main function of the action.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * @returns {Promise&amp;lt;void&amp;gt;} Resolves when the action is complete.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;run&lt;/span&gt;()&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Promise&lt;/span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;void&lt;/span&gt;&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Get the PR number from the payload. This action is only intended for PRs.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;prNumber&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;github&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;context&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;payload&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;pull_request&lt;/span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;number&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;prNumber&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Get the required reviewer from the REVIEWERS file.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// This simplified example assumes that the REVIEWERS file contains a single reviewer.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// In a real-world scenario, we would need to parse the REVIEWERS file at the top directory
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// of our changed files to get the reviewers.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;reviewer&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;readFileSync&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;REVIEWERS&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;trim&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;reviewer&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;core&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;setFailed&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;No reviewer found in REVIEWERS file&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Get all the reviews for this PR.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;githubToken&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;core&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;getInput&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;github-token&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;octokit&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;github&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;getOctokit&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;githubToken&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;reviews&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;octokit&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;rest&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;pulls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;listReviews&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;owner&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;github.context.repo.owner&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;repo&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;github.context.repo.repo&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pull_number&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;prNumber&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Check if the required reviewer has approved the PR.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// This action does not require the reviewer to re-approve the PR if new changes are pushed.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;approved&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;reviews&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;forEach&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;review&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;review&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;user&lt;/span&gt;&lt;span style="color:#f92672"&gt;?&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;login&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;reviewer&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;review&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;state&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;APPROVED&amp;#39;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;approved&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Fail the workflow run if the required reviewer has not approved the PR.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;approved&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;core&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;setFailed&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;`Reviewer &lt;/span&gt;&lt;span style="color:#e6db74"&gt;${&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;reviewer&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; needs to approve the PR`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Fail the workflow run if an error occurs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;instanceof&lt;/span&gt; Error) &lt;span style="color:#a6e22e"&gt;core&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;setFailed&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;message&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We read the &lt;code&gt;REVIEWERS&lt;/code&gt; file to get the required reviewer for the PR. We then retrieve all the reviews for the pull
request and check if the needed reviewer has approved the PR. If the reviewer has not approved the PR, we fail the run.&lt;/p&gt;
&lt;h2 id="build-your-custom-github-action"&gt;&lt;a href="#build-your-custom-github-action" class="header-anchor"&gt;&lt;/a&gt;Build your custom GitHub Action
&lt;/h2&gt;&lt;p&gt;To build your action, run &lt;code&gt;npm run bundle&lt;/code&gt;. This will compile the TypeScript code in the &lt;code&gt;src/&lt;/code&gt; directory and output the
JavaScript code in the &lt;code&gt;dist/&lt;/code&gt; directory. The exact command for &lt;code&gt;bundle&lt;/code&gt; is defined in the &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;bundle&lt;/code&gt; step is required before you can test your action locally or use it in a workflow because the &lt;code&gt;action.yml&lt;/code&gt;
file points at the &lt;code&gt;dist/index.js&lt;/code&gt; bundled version of your code.&lt;/p&gt;
&lt;p&gt;This step can easily be forgotten, and you may wonder why your changes are not reflected in the action. You can
configure our IDE to do &lt;code&gt;npm run bundle&lt;/code&gt; automatically on save, create a check as a
&lt;a class="link" href="https://git-scm.com/book/ms/v2/Customizing-Git-Git-Hooks" target="_blank" rel="noopener"
&gt;git pre-commit hook&lt;/a&gt; to ensure the &lt;code&gt;dist/&lt;/code&gt; directory is
up-to-date, or rely on the &lt;code&gt;Check Transpiled Javascript&lt;/code&gt; workflow in the &lt;code&gt;.github/workflows/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Now, commit your changes and push them to your repository.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We will not cover testing in this article, but you should add tests to the &lt;code&gt;__tests__/&lt;/code&gt; directory for your
source code. For this example, we must refactor the code to make it more testable.&lt;/p&gt;
&lt;h2 id="test-your-custom-github-action-in-another-repository"&gt;&lt;a href="#test-your-custom-github-action-in-another-repository" class="header-anchor"&gt;&lt;/a&gt;Test your custom GitHub Action in another repository
&lt;/h2&gt;&lt;h3 id="add-workflows-and-reviewers-file"&gt;&lt;a href="#add-workflows-and-reviewers-file" class="header-anchor"&gt;&lt;/a&gt;Add workflows and REVIEWERS file
&lt;/h3&gt;&lt;p&gt;You can use the &lt;code&gt;uses&lt;/code&gt; keyword in a workflow file to try your action in another repository. Create a new workflow file
in the repository&amp;rsquo;s &lt;code&gt;.github/workflows/&lt;/code&gt; directory where you want to test your action. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Code review&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;workflow_dispatch&lt;/span&gt;: &lt;span style="color:#75715e"&gt;# Manual (for debug)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;pull_request&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;code-review&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Code review&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runs-on&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;ubuntu-latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Checkout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;id&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;checkout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;actions/checkout@v4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Code review action&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;id&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;test-action&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;getvictor/code-review-demo@main&lt;/span&gt; &lt;span style="color:#75715e"&gt;# Your action goes here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;github-token&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We are using &lt;code&gt;@main&lt;/code&gt; as the version of the action to test the latest code on the main branch. You can replace this with
a specific version tag or branch name.&lt;/p&gt;
&lt;p&gt;In addition, create a &lt;code&gt;REVIEWERS&lt;/code&gt; file at the repository&amp;rsquo;s root with the required reviewer&amp;rsquo;s GitHub username.&lt;/p&gt;
&lt;p&gt;Notice that the above workflow runs on &lt;code&gt;pull_request&lt;/code&gt; events but not on &lt;code&gt;pull_request_review&lt;/code&gt; events. This is because
GitHub Actions treats the &lt;code&gt;pull_request&lt;/code&gt; workflow runs and the &lt;code&gt;pull_request_review&lt;/code&gt; workflow runs as distinct. Instead,
we want the same workflow run to be triggered by both events. This is a common pitfall when working with GitHub Actions.
We need to add another workflow file that listens for &lt;code&gt;pull_request_review&lt;/code&gt; events and triggers the &lt;code&gt;pull_request&lt;/code&gt;
workflow run to fix this.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Rerun checks after review&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;pull_request_review&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;types&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;submitted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;dismissed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;rerun_checks&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Rerun specified checks&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;permissions&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;actions&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;write&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runs-on&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;ubuntu-latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Rerun Checks&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;shqear93/rerun-checks@v3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;github-token&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;check-names&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Code review&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="configure-a-github-rule-to-require-code-review"&gt;&lt;a href="#configure-a-github-rule-to-require-code-review" class="header-anchor"&gt;&lt;/a&gt;Configure a GitHub rule to require code review
&lt;/h3&gt;&lt;p&gt;Create a branch protection rule in the repository settings that requires the above &lt;code&gt;Code review&lt;/code&gt; workflow to pass in a
PR before merging to your default branch.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/typescript-github-action/github-code-review-rule.png"
alt="Require a pull request before merging. Require the Code review status check to pass."&gt;
&lt;/figure&gt;
&lt;h3 id="create-a-pull-request"&gt;&lt;a href="#create-a-pull-request" class="header-anchor"&gt;&lt;/a&gt;Create a pull request
&lt;/h3&gt;&lt;p&gt;Commit your changes to a new branch and create a pull request. The &lt;code&gt;Code review&lt;/code&gt; workflow should run automatically and
show the Failed status.&lt;/p&gt;
&lt;p&gt;Once the required reviewer approves the PR, the &lt;code&gt;Rerun checks after review&lt;/code&gt; workflow will run and trigger the
&lt;code&gt;Code review&lt;/code&gt; workflow. The rerun should pass, and you should be able to merge the PR.&lt;/p&gt;
&lt;h2 id="clean-up-your-custom-github-action-repo"&gt;&lt;a href="#clean-up-your-custom-github-action-repo" class="header-anchor"&gt;&lt;/a&gt;Clean up your custom GitHub Action repo
&lt;/h2&gt;&lt;p&gt;As an optional step, you can clean up your custom GitHub Action repository:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Update README.md with instructions on how to use your new action&lt;/li&gt;
&lt;li&gt;Remove the &lt;code&gt;src/wait.ts&lt;/code&gt; file and associated tests&lt;/li&gt;
&lt;li&gt;Update workflows in the &lt;code&gt;.github/workflows/&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;In a previous article, we described
&lt;a class="link" href="../git-merges-and-pull-requests/" &gt;what happens in a GitHub pull request after a &lt;code&gt;git merge&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In another article, we covered
&lt;a class="link" href="../use-github-actions-for-general-purpose-tasks/" &gt;how to use GitHub Actions for general-purpose tasks&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The code for our simple GitHub Action is available on GitHub: &lt;a class="link" href="https://github.com/getvictor/code-review-demo" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/code-review-demo&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="watch-how-to-create-a-custom-github-action-using-typescript"&gt;&lt;a href="#watch-how-to-create-a-custom-github-action-using-typescript" class="header-anchor"&gt;&lt;/a&gt;Watch how to create a custom GitHub Action using TypeScript
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/NFIwPxz5La8"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to test a Windows NDES SCEP server</title><link>https://victoronsoftware.com/posts/test-ndes-scep-server/</link><pubDate>Wed, 02 Oct 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/test-ndes-scep-server/</guid><description>&lt;img src="https://victoronsoftware.com/posts/test-ndes-scep-server/windows-security-headline.png" alt="Featured image of post How to test a Windows NDES SCEP server" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#test-ndes-using-powershell" &gt;Test NDES using PowerShell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#test-ndes-using-a-scep-client" &gt;Test NDES using a SCEP client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#test-ndes-using-apple-mdm-profile" &gt;Test NDES using Apple MDM profile&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="what-is-a-windows-ndes-scep-server"&gt;&lt;a href="#what-is-a-windows-ndes-scep-server" class="header-anchor"&gt;&lt;/a&gt;What is a Windows NDES SCEP server?
&lt;/h1&gt;&lt;p&gt;&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc8894" target="_blank" rel="noopener"
&gt;SCEP&lt;/a&gt; (Simple Certificate Enrollment Protocol) is a protocol used to
issue certificates with a Certificate Authority (CA) in a Public Key Infrastructure (PKI). It allows devices to request
and receive certificates over a secure channel without user interaction. IT admins use SCEP for network devices, mobile
devices, and other endpoints that need to authenticate themselves. The issued certificates can be used for various
purposes, such as Wi-Fi authentication, VPN access, email encryption, etc. For example, a new mobile device can request
a certificate from the SCEP server to authenticate on the corporate Wi-Fi network.&lt;/p&gt;
&lt;p&gt;NDES (Network Device Enrollment Service) is a Microsoft implementation of the SCEP protocol. NDES is part of the Active
Directory Certificate Services (AD CS) role in Windows Server.&lt;/p&gt;
&lt;h1 id="setting-up-a-windows-ndes-scep-server"&gt;&lt;a href="#setting-up-a-windows-ndes-scep-server" class="header-anchor"&gt;&lt;/a&gt;Setting up a Windows NDES SCEP server
&lt;/h1&gt;&lt;p&gt;Before testing your Windows NDES SCEP server, you must set it up. Numerous articles and guides cover the installation
and configuration of NDES. This article will focus on testing the NDES SCEP server to ensure the correct setup. We wrote
this article because we could not find a comprehensive guide on how to test the NDES SCEP server.&lt;/p&gt;
&lt;p&gt;Here are the high-level steps to configure a Windows NDES SCEP server:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create or use an existing Windows AD (Active Directory) server and domain.&lt;/li&gt;
&lt;li&gt;Install the Active Directory Certificate Services (AD CS) role on a Windows Server that is part of the AD domain.&lt;/li&gt;
&lt;li&gt;Configure the Enterprise NDES role service within AD CS.&lt;/li&gt;
&lt;li&gt;(Optional) Configure the certificate templates for NDES.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We used Windows Server 2022 for our tests, and we will update this article once we test with Windows Server 2025.&lt;/p&gt;
&lt;h1 id="test-ndes-using-a-web-browser"&gt;&lt;a href="#test-ndes-using-a-web-browser" class="header-anchor"&gt;&lt;/a&gt;Test NDES using a web browser
&lt;/h1&gt;&lt;p&gt;First, we must make sure the NDES server is accessible via a web browser. If the server should be accessible outside the
corporate network, test it using the public URL or IP address.&lt;/p&gt;
&lt;p&gt;The NDES server has an admin web interface for retrieving the SCEP challenge. The URL typically looks like
&lt;code&gt;http://ndes-server/certsrv/mscep_admin/&lt;/code&gt; and requires authentication. The username must use the Windows name format,
like &lt;code&gt;username@example.domain.com&lt;/code&gt;. Accessing this URL should prompt you to log in and display the SCEP challenge.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/test-ndes-scep-server/ndes-mscep_admin.png"
alt="Network Device Enrollment Service allows you to obtain certificates for routers or other network devices using the Simple Certificate Enrollment Protocol (SCEP). To complete certificate enrollment for your network device you will need the following information: The thumbprint (hash value) for the CA certificate is: A656FA66 AB12B433 A2DA5CF7 CC153D9A The enrollment challenge password is: 1ED0DD50F7459D6E This password can be used only once and will expire within 60 minutes. Each enrollment requires a new challenge password. You can refresh this web page to obtain a new challenge password. For more information see Using Network Device Enrollment Service."&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above admin page is encoded as UTF-16, as opposed to the more popular UTF-8 encoding. This encoding must
considered when parsing this page with a script.&lt;/p&gt;
&lt;p&gt;The other URL to test is the actual SCEP enrollment URL, typically &lt;code&gt;http://ndes-server/certsrv/mscep/mscep.dll&lt;/code&gt;. It
returns the following.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/test-ndes-scep-server/ndes-mscep.png"
alt="Network Device Enrollment Service allows you to obtain certificates for routers or other network devices using the Simple Certificate Enrollment Protocol (SCEP). This URL is used by network devices to submit certificate requests. To obtain an enrollment challenge password, go to the admin URL. By default, the admin URL is http://ndes-server/CertSrv/mscep_admin For more information see Using Network Device Enrollment Service."&gt;
&lt;/figure&gt;
&lt;h1 id="test-ndes-using-powershell"&gt;&lt;a href="#test-ndes-using-powershell" class="header-anchor"&gt;&lt;/a&gt;Test NDES using PowerShell
&lt;/h1&gt;&lt;p&gt;For our first test, we will use PowerShell to request a certificate from another Windows machine in the same AD domain.&lt;/p&gt;
&lt;p&gt;Below is a sample PowerShell script that requests a certificate from the NDES server. Update the URL and the challenge
password.&lt;/p&gt;
&lt;script type="application/javascript" src="https://gist.github.com/getvictor/fd2e7b88603be7898087b0f445102daf.js"&gt;&lt;/script&gt;
&lt;p&gt;After running the script, check that NDES issued a certificate.&lt;/p&gt;
&lt;h1 id="test-ndes-using-a-scep-client"&gt;&lt;a href="#test-ndes-using-a-scep-client" class="header-anchor"&gt;&lt;/a&gt;Test NDES using a SCEP client
&lt;/h1&gt;&lt;p&gt;For our next test, we will use an SCEP client to request a certificate from the NDES server. Several SCEP clients are
available, but many have been abandoned and do not work with NDES.&lt;/p&gt;
&lt;p&gt;We will use &lt;a class="link" href="https://github.com/micromdm/scep" target="_blank" rel="noopener"
&gt;micromdm/scep&lt;/a&gt;, a Go-based open-source SCEP server and client. We will
use the latest code from the &lt;code&gt;main&lt;/code&gt; branch, with the following commit hash: &lt;code&gt;781f8042a79cabcf61a5e6c01affdbadcb785932&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Follow the instructions from the above URL to install the &lt;code&gt;scep&lt;/code&gt; client. We built it for macOS M1 using the following
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;make scepclient-darwin-arm64
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After building the client, obtain a new enrollment challenge password and run the following command to request a
certificate from the NDES server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir test
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cd test
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;../scepclient-darwin-arm64 -key-encipherment-selector -cn &lt;span style="color:#e6db74"&gt;&amp;#34;ScepClient&amp;#34;&lt;/span&gt; -challenge &lt;span style="color:#e6db74"&gt;&amp;#34;ABBFE34CF11C2C04&amp;#34;&lt;/span&gt; -server-url &lt;span style="color:#e6db74"&gt;&amp;#34;https://my-ndes.com/certsrv/mscep/mscep.dll&amp;#34;&lt;/span&gt; -debug -private-key ./ndes-pk
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; We recommend running the above command in a separate directory because the SCEP client generates several
intermediate files during the certificate request process. If you don&amp;rsquo;t clean them up, the client may reuse them instead
of generating new ones from the command line flags.&lt;/p&gt;
&lt;p&gt;The above command will generate a new certificate request and send it to the NDES server. The server will respond with a
signed certificate, which the client will save to the current directory as a &lt;code&gt;client.pem&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;As a final step, verify that the certificate and the private key match by building a PKCS#12 file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/usr/bin/openssl pkcs12 -export -inkey ndes-pk -in client.pem -out client.p12
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="test-ndes-using-apple-mdm-profile"&gt;&lt;a href="#test-ndes-using-apple-mdm-profile" class="header-anchor"&gt;&lt;/a&gt;Test NDES using Apple MDM profile
&lt;/h1&gt;&lt;p&gt;For our final test, we will use an Apple MDM profile to request a certificate from the NDES server. We will use a macOS
VM enrolled in Fleet Device Management&amp;rsquo;s MDM server. However, adding the MDM profile manually via &lt;strong&gt;System Settings&lt;/strong&gt; -&amp;gt;
&lt;strong&gt;Profiles&lt;/strong&gt; should also work.&lt;/p&gt;
&lt;p&gt;First, create a new
&lt;a class="link" href="https://developer.apple.com/documentation/devicemanagement/scep?language=objc" target="_blank" rel="noopener"
&gt;Device Management SCEP payload&lt;/a&gt; with the
NDES server&amp;rsquo;s URL and the challenge password. Then, assign the SCEP payload to your device. Here&amp;rsquo;s an example payload:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;plist&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;version=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadContent&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadContent&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Challenge&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;8E6D19CAEC9411CC&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Key Type&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;RSA&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Key Usage&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;5&lt;span style="color:#f92672"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Keysize&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;2048&lt;span style="color:#f92672"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Retries&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;3&lt;span style="color:#f92672"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RetryDelay&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;10&lt;span style="color:#f92672"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Subject&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;CN&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;MDM TEST VM&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;OU&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;FLEET DEVICE MANAGEMENT&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;URL&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;https://my-ndes.com/certsrv/mscep/mscep.dll&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadDisplayName&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;SCEP #1&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadIdentifier&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.apple.security.scep.9DCC35A5-72F9-42B7-9A98-7AD9A9CCA3AA&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadType&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;com.apple.security.scep&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadUUID&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;9DCC35A5-72F9-42B7-9A98-7AD9A9CCA3AA&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadVersion&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;1&lt;span style="color:#f92672"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadDisplayName&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;SCEP cert&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadIdentifier&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Victors-Fleet-MBP.4CD1BD65-1D2C-4E9E-9E18-9BCD400CDEDB&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadType&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Configuration&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadUUID&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;4CD1BD65-1D2C-4E9E-9E18-9BCD400CDEDB&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;PayloadVersion&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;integer&amp;gt;&lt;/span&gt;1&lt;span style="color:#f92672"&gt;&amp;lt;/integer&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once the device receives the payload, it immediately requests a certificate from the NDES server. The server responds
with a signed certificate, which the device saves to the keychain.&lt;/p&gt;
&lt;h1 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h1&gt;&lt;p&gt;Recently, we covered &lt;a class="link" href="../connect-to-remote-active-directory/" &gt;how to connect to a remote Active Directory server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also wrote a series of articles on
&lt;a class="link" href="../mtls/" &gt;building a mutual TLS client which uses a system keystore, such as a Windows certificate store&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In addition, we presented an example of &lt;a class="link" href="../code-signing-windows/" &gt;code signing a Windows application&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id="watch-how-to-test-a-windows-ndes-scep-server"&gt;&lt;a href="#watch-how-to-test-a-windows-ndes-scep-server" class="header-anchor"&gt;&lt;/a&gt;Watch how to test a Windows NDES SCEP server
&lt;/h1&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/JMHs6spfdvQ"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to set up a remote development environment</title><link>https://victoronsoftware.com/posts/remote-development-environment/</link><pubDate>Sun, 22 Sep 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/remote-development-environment/</guid><description>&lt;img src="https://victoronsoftware.com/posts/remote-development-environment/remote-dev-environment-headline.png" alt="Featured image of post How to set up a remote development environment" /&gt;&lt;h1 id="why-set-up-a-remote-development-environment"&gt;&lt;a href="#why-set-up-a-remote-development-environment" class="header-anchor"&gt;&lt;/a&gt;Why set up a remote development environment?
&lt;/h1&gt;&lt;p&gt;A remote development environment can be beneficial for several reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Offload processing power&lt;/strong&gt;: Your local machine may not have enough processing power to run resource-intensive tasks.
By using a remote development environment, you can use more powerful hardware.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistent environment&lt;/strong&gt;: A remote development environment ensures all team members can work in the same
environment, reducing configuration issues and ensuring consistent behavior across different machines. For example,
developers may be using a mix of macOS, Windows, and Linux machines, which can lead to differences in behavior due to
operating system-specific issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple environments&lt;/strong&gt;: You can set up multiple environments for different projects or tasks without cluttering
your local machine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access from anywhere&lt;/strong&gt;: A remote development environment allows you to access your work from any device with an
internet connection.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collaboration&lt;/strong&gt;: You can easily collaborate with team members by sharing the same development environment. For
example, after coding a feature, the developer can hand off the environment to another engineer for review or QA.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Keeping your code and development environment on a remote server reduces the risk of data loss in case
of local hardware failure or theft.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: You can quickly scale your development environment up or down based on your needs without affecting
your local machine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cost-effective&lt;/strong&gt;: A remote development environment can be more cost-effective than purchasing and maintaining
high-end hardware for your local machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="setting-up-a-remote-development-environment"&gt;&lt;a href="#setting-up-a-remote-development-environment" class="header-anchor"&gt;&lt;/a&gt;Setting up a remote development environment
&lt;/h1&gt;&lt;p&gt;For our development example, we will use a standalone server application connected to a database and a Redis cache. The
application uses a monolith repo with a frontend and a backend codebase.&lt;/p&gt;
&lt;h2 id="choose-a-cloud-provider"&gt;&lt;a href="#choose-a-cloud-provider" class="header-anchor"&gt;&lt;/a&gt;Choose a cloud provider
&lt;/h2&gt;&lt;p&gt;We used a &lt;a class="link" href="https://www.digitalocean.com/" target="_blank" rel="noopener"
&gt;Digital Ocean&lt;/a&gt; VM with 8GB of RAM, 4 CPUs, and a 160 GB disk, running Ubuntu
24.04 LTS for our remote development environment. We found that Digital Ocean provides VMs that are generally cheaper
than other cloud providers.&lt;/p&gt;
&lt;p&gt;Any other cloud provider, such as AWS, Google Cloud, or Azure, can also be used. Your choice of provider depends on your
specific requirements, budget, and familiarity with the platform.&lt;/p&gt;
&lt;p&gt;After spinning up the VM, we SSH&amp;rsquo;ed into the server, installed the necessary software for our application, and launched
the server.&lt;/p&gt;
&lt;p&gt;Since our server required multiple running processes, we used &lt;a class="link" href="https://github.com/tmux/tmux" target="_blank" rel="noopener"
&gt;tmux&lt;/a&gt; to manage multiple
terminal sessions. Tmux allowed us to create numerous panes and windows within a single terminal session, making it
easier to manage the server processes. We could disconnect from the server, and the tmux processes ran in the
background. When reconnected to the server, we could easily reattach to the tmux session and resume work. Additionally,
we used &lt;a class="link" href="https://iterm2.com/documentation-tmux-integration.html" target="_blank" rel="noopener"
&gt;iTerm2 tmux integration&lt;/a&gt; to enhance our terminal
experience.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/remote-development-environment/tmux-on-remote-server.png"
alt="4 open windows with running processes"&gt;&lt;figcaption&gt;
&lt;h4&gt;tmux running on remote dev server&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="connect-your-ide-to-the-remote-development-environment"&gt;&lt;a href="#connect-your-ide-to-the-remote-development-environment" class="header-anchor"&gt;&lt;/a&gt;Connect your IDE to the remote development environment
&lt;/h2&gt;&lt;p&gt;We used &lt;a class="link" href="https://www.jetbrains.com/" target="_blank" rel="noopener"
&gt;JetBrains IDE&lt;/a&gt; for development work and
&lt;a class="link" href="https://www.jetbrains.com/remote-development/gateway/" target="_blank" rel="noopener"
&gt;JetBrains Gateway&lt;/a&gt; to connect to our remote development server
using SSH. JetBrains Gateway automatically installed the IDE backend on the remote server and brought up a local client
of the IDE.&lt;/p&gt;
&lt;p&gt;In our case, we wanted to use one IDE for backend development (GoLand) and another IDE for frontend development
(WebStorm).&lt;/p&gt;
&lt;p&gt;We had trouble starting them up and could not run both IDEs simultaneously. Either one or both of them would disconnect
from the remote development server without an obvious way to fix the issue. We suspect the issue was due to insufficient
memory on the machine &amp;ndash; try to plan for around 4 GB of memory per IDE.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/remote-development-environment/jetbrains-disconnect.png"
alt="No Connection message in GoLand IDE"&gt;
&lt;/figure&gt;
&lt;p&gt;However, we could use one of the IDEs at a time, which was sufficient for most of our needs.&lt;/p&gt;
&lt;h1 id="using-a-remote-development-environment"&gt;&lt;a href="#using-a-remote-development-environment" class="header-anchor"&gt;&lt;/a&gt;Using a remote development environment
&lt;/h1&gt;&lt;p&gt;After setting up the remote development environment, we reviewed common development use cases to ensure that everything
was working as expected.&lt;/p&gt;
&lt;h2 id="make-a-code-change-and-restart-the-application-server"&gt;&lt;a href="#make-a-code-change-and-restart-the-application-server" class="header-anchor"&gt;&lt;/a&gt;Make a code change and restart the application server
&lt;/h2&gt;&lt;p&gt;We made a simple code change in the backend service, saved the file, and restarted the application server. We verified
that the change was reflected in the application.&lt;/p&gt;
&lt;p&gt;The compile time was slower than on our local machine, likely due to the remote server&amp;rsquo;s lower CPU count and total RAM
compared to our local machine.&lt;/p&gt;
&lt;h2 id="run-unit-tests"&gt;&lt;a href="#run-unit-tests" class="header-anchor"&gt;&lt;/a&gt;Run unit tests
&lt;/h2&gt;&lt;p&gt;We ran the unit tests for the backend service. The tests passed successfully.&lt;/p&gt;
&lt;h2 id="connect-to-the-database-and-redis-cache"&gt;&lt;a href="#connect-to-the-database-and-redis-cache" class="header-anchor"&gt;&lt;/a&gt;Connect to the database and Redis cache
&lt;/h2&gt;&lt;p&gt;From our local development machine, we connected to the development server&amp;rsquo;s database and Redis cache to verify that the
services were running correctly.&lt;/p&gt;
&lt;h2 id="reconnecting-to-remote-development-environment"&gt;&lt;a href="#reconnecting-to-remote-development-environment" class="header-anchor"&gt;&lt;/a&gt;Reconnecting to remote development environment
&lt;/h2&gt;&lt;p&gt;After opening up our local computer the next day, we found that the JetBrains Gateway and the IDE has disconnected from
the remote server. Refreshing the Gateway re-established the connection, and the IDE also showed as connected within 60
seconds or so.&lt;/p&gt;
&lt;h1 id="security-considerations"&gt;&lt;a href="#security-considerations" class="header-anchor"&gt;&lt;/a&gt;Security considerations
&lt;/h1&gt;&lt;p&gt;When setting up a remote development environment, consider the following security best practices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SSH key authentication&lt;/strong&gt;: For secure access to the remote server, use SSH key authentication instead of passwords.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Firewall rules&lt;/strong&gt;: Configure firewall rules to restrict access to the server to only necessary IP addresses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secure connections&lt;/strong&gt;: Use HTTPS for web applications and encrypted connections for database access.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data encryption&lt;/strong&gt;: Encrypt sensitive data at rest and in transit. Always encrypt sensitive data in the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docker-firewall-rules"&gt;&lt;a href="#docker-firewall-rules" class="header-anchor"&gt;&lt;/a&gt;Docker firewall rules
&lt;/h2&gt;&lt;p&gt;Docker containers use &lt;code&gt;iptables&lt;/code&gt; rules to open ports for incoming traffic. We can
&lt;a class="link" href="https://docs.docker.com/engine/network/packet-filtering-firewalls/#restrict-external-connections-to-containers" target="_blank" rel="noopener"
&gt;restrict external connections to containers&lt;/a&gt;
by adding rules to the &lt;code&gt;DOCKER-USER&lt;/code&gt; chain, such as:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;iptables -I DOCKER-USER -i eth0 ! -s &amp;lt;your local IP&amp;gt; -j DROP
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where &lt;code&gt;eth0&lt;/code&gt; is the network interface connected to the internet and &lt;code&gt;&amp;lt;your local IP&amp;gt;&lt;/code&gt; is the IP address of your local
machine. This rule blocks all incoming traffic to Docker from the internet except for your local IP.&lt;/p&gt;
&lt;p&gt;After setting up and testing your rules, you can persist them across restarts with the &lt;code&gt;iptables-persistent&lt;/code&gt; package or
other methods.&lt;/p&gt;
&lt;h1 id="overall-impressions"&gt;&lt;a href="#overall-impressions" class="header-anchor"&gt;&lt;/a&gt;Overall impressions
&lt;/h1&gt;&lt;p&gt;After using the remote development environment for a few days, we found it usable but not as smooth as working on a
local machine. For our use case, it is an excellent option for a secondary development environment or for working on a
resource-intensive feature.&lt;/p&gt;
&lt;p&gt;Some issues we encountered included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Latency&lt;/strong&gt;: Occasionally, clicking on an element or using a keyboard shortcut had a noticeable delay.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Missing features&lt;/strong&gt;: Some features, such as only searching inside text strings, were not available in the remote
development environment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Issues with plugins&lt;/strong&gt;: GitHub Copilot did not work out of the box; it did not provide suggestions in the editor. We
did not drill down to the issue, but a potential workaround is to use JetBrains&amp;rsquo;s code assistant plugin.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;We recently explained &lt;a class="link" href="../secure-mysql-docker" &gt;how to secure a MySQL Docker container for Zero Trust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also discussed &lt;a class="link" href="../github-code-review-issues" &gt;the issues with GitHub&amp;rsquo;s code review process&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We wrote about &lt;a class="link" href="../google-sheets-api/" &gt;quickly editing a Google Sheets spreadsheet via the API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also covered &lt;a class="link" href="../cloudfront-signed-urls/" &gt;creating secure signed URLs with AWS CloudFront&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="watch-how-to-set-up-a-remote-development-environment"&gt;&lt;a href="#watch-how-to-set-up-a-remote-development-environment" class="header-anchor"&gt;&lt;/a&gt;Watch how to set up a remote development environment
&lt;/h1&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/_VDtA9Tq-1E"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to secure MySQL Docker container for Zero Trust</title><link>https://victoronsoftware.com/posts/secure-mysql-docker/</link><pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/secure-mysql-docker/</guid><description>&lt;img src="https://victoronsoftware.com/posts/secure-mysql-docker/mysql-docker-headline.png" alt="Featured image of post How to secure MySQL Docker container for Zero Trust" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#securing-database-secrets-with-docker-secrets" &gt;Securing database secrets with Docker secrets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#securing-database-secrets-with-sql-commands" &gt;Securing database secrets with SQL commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-a-zero-trust-development-environment"&gt;&lt;a href="#what-is-a-zero-trust-development-environment" class="header-anchor"&gt;&lt;/a&gt;What is a Zero Trust development environment?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://www.cloudflare.com/learning/security/glossary/what-is-zero-trust-security/" target="_blank" rel="noopener"
&gt;Zero Trust&lt;/a&gt; is a security model
that assumes no trust, even inside the network. Every request is authenticated, authorized, and encrypted in a Zero
Trust environment. This approach helps protect against data breaches and insider threats.&lt;/p&gt;
&lt;p&gt;In our example use case, we create a development environment in a cloud instance, which includes a MySQL database
running in a Docker container. We need to be able to access the MySQL database from our local machine for development
purposes. However, the database may contain sensitive data, such as API keys or user passwords. We want to secure the
MySQL database to prevent unauthorized access.&lt;/p&gt;
&lt;p&gt;We want to make sure that the MySQL database is not easily accessible from the internet. In addition, we want to limit
the exposure of database credentials.&lt;/p&gt;
&lt;h2 id="launching-mysql-docker-container"&gt;&lt;a href="#launching-mysql-docker-container" class="header-anchor"&gt;&lt;/a&gt;Launching MySQL Docker container
&lt;/h2&gt;&lt;p&gt;We can run a MySQL database in a Docker container using the
&lt;a class="link" href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener"
&gt;official MySQL Docker image&lt;/a&gt;. We create &lt;code&gt;docker-compose.yml&lt;/code&gt; like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;mysql&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;mysql:8.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;command&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;mysqld&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;--datadir=/tmp/mysqldata&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;toor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_DATABASE&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;fleet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_USER&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;fleet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_PASSWORD&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;insecure&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#34;3306:3306&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we run &lt;code&gt;docker-compose up&lt;/code&gt; to start the MySQL database.&lt;/p&gt;
&lt;p&gt;We can access the MySQL database by using the MySQL client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mysql -h 127.0.0.1 -P &lt;span style="color:#ae81ff"&gt;3306&lt;/span&gt; -uroot -ptoor
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see, the passwords are stored in plain text in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file. We want to avoid storing
sensitive data in plain text.&lt;/p&gt;
&lt;h2 id="securing-database-secrets-with-docker-secrets"&gt;&lt;a href="#securing-database-secrets-with-docker-secrets" class="header-anchor"&gt;&lt;/a&gt;Securing database secrets with Docker secrets
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://docs.docker.com/compose/use-secrets/" target="_blank" rel="noopener"
&gt;Docker secrets&lt;/a&gt; allow us to store sensitive data, such as passwords,
securely. We can create secrets and use them in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;secrets&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;mysql_root_password&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;file&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;./mysql_root_password.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;mysql_password&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;MYSQL_PASSWORD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;mysql&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;mysql:8.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;command&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;mysqld&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;--datadir=/tmp/mysqldata&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;secrets&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;mysql_root_password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;mysql_password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_ROOT_PASSWORD_FILE&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;/run/secrets/mysql_root_password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_DATABASE&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;fleet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_USER&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;fleet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_PASSWORD_FILE&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;/run/secrets/mysql_password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#34;3306:3306&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We create a &lt;code&gt;mysql_root_password.txt&lt;/code&gt; file and run &lt;code&gt;MYSQL_PASSWORD=insecure docker-compose up&lt;/code&gt; to start the MySQL
database.&lt;/p&gt;
&lt;p&gt;The above example shows that the MySQL root password is stored in a file, and the MySQL password is passed as an
environment variable. Although this approach may be an improvement, it is not secure for a Zero Trust environment. A
user with access to the file system can read the secrets, and environment variables can be read by anyone who can run
the &lt;code&gt;ps&lt;/code&gt; command, like: &lt;code&gt;ps eww &amp;lt;docker compose process ID&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In addition, a user can dump the secrets from the Docker container by running:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;docker exec &amp;lt;container ID&amp;gt; cat /run/secrets/mysql_root_password
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="securing-database-secrets-with-sql-commands"&gt;&lt;a href="#securing-database-secrets-with-sql-commands" class="header-anchor"&gt;&lt;/a&gt;Securing database secrets with SQL commands
&lt;/h2&gt;&lt;p&gt;To secure the MySQL database without exposing the secrets on the server, we can use MySQL commands to set the passwords.
We spin up MySQL with the following &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;mysql&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;mysql:8.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;command&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;mysqld&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;--datadir=/tmp/mysqldata&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;toor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_ONETIME_PASSWORD&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#34;3306:3306&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We set the root password and marked the root user as expired with &lt;code&gt;MYSQL_ONETIME_PASSWORD: true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, as the second step, we can run the following commands to set the passwords:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;echo \
&amp;#34;ALTER USER root IDENTIFIED BY &amp;#39;$(op read op://employee/DEMO_SERVER/MYSQL_ROOT_PASSWORD)&amp;#39;;&amp;#34; \
&amp;#34;CREATE DATABASE fleet;&amp;#34; \
&amp;#34;CREATE USER &amp;#39;fleet&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;$(op read op://employee/DEMO_SERVER/MYSQL_PASSWORD)&amp;#39;;&amp;#34; \
&amp;#34;GRANT ALL PRIVILEGES ON fleet.* TO &amp;#39;fleet&amp;#39;@&amp;#39;%&amp;#39;;&amp;#34; \
&amp;#34;FLUSH PRIVILEGES;&amp;#34; \
| mysql -h 127.0.0.1 -P 3306 -uroot -ptoor --connect-expired-password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the above command, we use &lt;a class="link" href="https://support.1password.com/command-line/" target="_blank" rel="noopener"
&gt;1Password&lt;/a&gt; as our secrets manager. We read
the secrets from 1Password and pass them to the MySQL client to set the passwords.&lt;/p&gt;
&lt;h2 id="additional-security-considerations"&gt;&lt;a href="#additional-security-considerations" class="header-anchor"&gt;&lt;/a&gt;Additional security considerations
&lt;/h2&gt;&lt;p&gt;This article focused on securing the MySQL passwords. However, there are additional security considerations when running
MySQL in a Zero Trust environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encrypting sensitive data &amp;ndash; all sensitive data should be encrypted when stored in the database&lt;/li&gt;
&lt;li&gt;Limiting access to specific IPs &amp;ndash; we can add a server firewall to restrict access to the MySQL port&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we wrote about &lt;a class="link" href="../remote-development-environment" &gt;setting up a remote development environment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also explained &lt;a class="link" href="../get-args-from-stdin" &gt;how to use STDIN to read your program arguments&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve previously written about &lt;a class="link" href="../mysql-master-slave-replication" &gt;MySQL master-slave replication&lt;/a&gt;. You can use MySQL
replication to create a high-availability setup for your MySQL databases.&lt;/p&gt;
&lt;h2 id="watch-how-to-secure-a-mysql-docker-container-for-zero-trust"&gt;&lt;a href="#watch-how-to-secure-a-mysql-docker-container-for-zero-trust" class="header-anchor"&gt;&lt;/a&gt;Watch how to secure a MySQL Docker container for Zero Trust
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/GgEPIvFbnT0"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Building a webhook flow with Tines</title><link>https://victoronsoftware.com/posts/webhook-flow-with-tines/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/webhook-flow-with-tines/</guid><description>&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/tines-fleet-webhook-workflow.png" alt="Featured image of post Building a webhook flow with Tines" /&gt;&lt;h2 id="what-is-a-webhook"&gt;&lt;a href="#what-is-a-webhook" class="header-anchor"&gt;&lt;/a&gt;What is a webhook?
&lt;/h2&gt;&lt;p&gt;A webhook is a way for one application to send data to another application in real time. It is a simple way to trigger
an action based on an event. In other words, a webhook is a custom HTTP callback.&lt;/p&gt;
&lt;h2 id="what-is-tines"&gt;&lt;a href="#what-is-tines" class="header-anchor"&gt;&lt;/a&gt;What is Tines?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://www.tines.io/" target="_blank" rel="noopener"
&gt;Tines&lt;/a&gt; is a no-code automation platform that allows you to automate repetitive tasks. It is a
powerful tool that can be used to automate workflows, such as sending emails, creating tickets, and updating databases.&lt;/p&gt;
&lt;h2 id="what-is-fleet"&gt;&lt;a href="#what-is-fleet" class="header-anchor"&gt;&lt;/a&gt;What is Fleet?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://fleetdm.com/" target="_blank" rel="noopener"
&gt;Fleet&lt;/a&gt; is an open-source platform for managing and gathering telemetry from devices such as
laptops, desktops, VMs, etc. &lt;a class="link" href="https://www.osquery.io/" target="_blank" rel="noopener"
&gt;Osquery&lt;/a&gt; agents run on these devices and report to the Fleet
server.&lt;/p&gt;
&lt;h2 id="our-example-it-workflow"&gt;&lt;a href="#our-example-it-workflow" class="header-anchor"&gt;&lt;/a&gt;Our example IT workflow
&lt;/h2&gt;&lt;p&gt;In this article, we will build a webhook flow with Tines. When a device has an outdated OS version, Tines will receive a
webhook callback from Fleet. Tines will then send an MDM (Mobile Device Management) command to the device to update the
device&amp;rsquo;s OS version.&lt;/p&gt;
&lt;p&gt;Fleet will send a callback via its calendar integration feature. Fleet can put a &amp;ldquo;System Maintenance&amp;rdquo; event on the
device user&amp;rsquo;s calendar. This event warns the device owner that their computer will be restarted to remediate one or more
failing policies. During the calendar event time, Fleet sends a webhook. The IT admin must set up a flow to remediate
the failing policy. This article is an example of one such flow.&lt;/p&gt;
&lt;h2 id="getting-started--webhook-action"&gt;&lt;a href="#getting-started--webhook-action" class="header-anchor"&gt;&lt;/a&gt;Getting started &amp;ndash; webhook action
&lt;/h2&gt;&lt;p&gt;First, we create a new Tines story. A story is a sequence of actions that are executed in order. Next, we add a webhook
action to the story. The webhook action listens for incoming webhooks. The webhook will contain a JSON body.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/1-tines-webhook.png"
alt="Tines webhook action"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines webhook action&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="handling-errors"&gt;&lt;a href="#handling-errors" class="header-anchor"&gt;&lt;/a&gt;Handling errors
&lt;/h2&gt;&lt;p&gt;Often, webhooks may contain error messages if there is an issue with the configuration, flow, etc. In this example, we
add a trigger action that checks whether the webhook body contains an error. Specifically, our action checks whether the
webhook body contains a non-empty &amp;ldquo;error&amp;rdquo; field.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/2-tines-error-handling.png"
alt="Tines trigger action checking for an error"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines trigger action checking for an error&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We leave this error-handling portion of the story as a stub. In the future, we can expand it by sending an email or
triggering other actions.&lt;/p&gt;
&lt;h2 id="checking-whether-webhook-indicates-an-outdated-os"&gt;&lt;a href="#checking-whether-webhook-indicates-an-outdated-os" class="header-anchor"&gt;&lt;/a&gt;Checking whether webhook indicates an outdated OS
&lt;/h2&gt;&lt;p&gt;At the same time, we also check whether the webhook was triggered by a policy indicating an outdated OS. From previous
testing, we know that the webhook payload will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-03-28T13:57:31.668954-05:00&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;host_id&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;11058&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;host_display_name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Victor&amp;#39;s Virtual Machine (2)&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;host_serial_number&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Z5C4L7GKY0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;failing_policies&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;479&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;macOS - OS version up to date&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The payload contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The device&amp;rsquo;s ID (host ID).&lt;/li&gt;
&lt;li&gt;Display name.&lt;/li&gt;
&lt;li&gt;Serial number.&lt;/li&gt;
&lt;li&gt;A list of failing policies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are interested in the failing policies. When one of the failing policies contains a policy named &amp;ldquo;macOS - OS version
up to date,&amp;rdquo; we know that the device&amp;rsquo;s OS is outdated. Hence, we create a trigger that looks for this policy.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/3-tines-os-version-trigger.png"
alt="Tines trigger action checking for an outdated OS"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines trigger action checking for an outdated OS&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We use the following formula, which loops over all policies and will only allow the workflow to proceed if true:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;IF(FIND(calendar_webhook.body.failing_policies, LAMBDA(item, item.name = &amp;#34;macOS - OS version up to date&amp;#34;)).id &amp;gt; 0, TRUE)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="getting-device-details-from-fleet"&gt;&lt;a href="#getting-device-details-from-fleet" class="header-anchor"&gt;&lt;/a&gt;Getting device details from Fleet
&lt;/h2&gt;&lt;p&gt;Next, we need to get more details about the device from Fleet. Devices are called hosts in Fleet. We add an &amp;ldquo;HTTP
Request&amp;rdquo; action to the story. The action makes a GET request to the Fleet API to get the device details. We use the host
ID from the webhook payload. We are looking for the device&amp;rsquo;s UUID, which we need to send the OS update MDM command.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/4-tines-get-host-request.png"
alt="Tines HTTP Request action to get Fleet device details"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines HTTP Request action to get Fleet device details&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To access Fleet&amp;rsquo;s API, we need to provide an API key. We store the API key as a CREDENTIAL in the current story. The API
key should belong to an API-only user in Fleet so that the key does not reset when the user logs out.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/5-tines-credential.png"
alt="Add credential to Tines story"&gt;&lt;figcaption&gt;
&lt;h4&gt;Add credential to Tines story&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="creating-mdm-command-payload-to-update-os-version"&gt;&lt;a href="#creating-mdm-command-payload-to-update-os-version" class="header-anchor"&gt;&lt;/a&gt;Creating MDM command payload to update OS version
&lt;/h2&gt;&lt;p&gt;We can create the MDM payload now that we have the device&amp;rsquo;s UUID. The payload contains the command to update the OS
version. We use the
&lt;a class="link" href="https://developer.apple.com/documentation/devicemanagement/schedule_an_os_update?language=objc" target="_blank" rel="noopener"
&gt;ScheduleOSUpdate&lt;/a&gt;
command from Apple&amp;rsquo;s MDM protocol.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;plist&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;version=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Command&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RequestType&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;ScheduleOSUpdate&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Updates&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;InstallAction&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;InstallASAP&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProductVersion&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;14.4.1&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CommandUUID&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;UUID&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;()&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will download macOS 14.4.1, install it, and pop up a 60-second countdown dialog box before restarting the
device. Note that the &lt;code&gt;&amp;lt;&amp;lt;UUID()&amp;gt;&amp;gt;&lt;/code&gt; Tines function creates a unique UUID for this MDM command.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/6-tines-create-mdm-command.png"
alt="Tines event to create ScheduleOSUpdate MDM command"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines event to create ScheduleOSUpdate MDM command&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The Fleet API requires the command to be sent as a base64-encoded string. We add a &amp;ldquo;Base64 Encode&amp;rdquo; action to the story
to encode the XML payload. It uses the Tines &lt;code&gt;BASE64_ENCODE&lt;/code&gt; function.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/7-tines-base64-encode.png"
alt="Tines Base64 Encode event"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines Base64 Encode event&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="run-mdm-command-on-device"&gt;&lt;a href="#run-mdm-command-on-device" class="header-anchor"&gt;&lt;/a&gt;Run MDM command on device
&lt;/h2&gt;&lt;p&gt;Finally, we send the MDM command to the device. We add another &amp;ldquo;HTTP Request&amp;rdquo; action to the story. The action makes a
POST request to the Fleet API to send the MDM command to the device.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/8-tines-run-mdm-command.png"
alt="Tines HTTP Request action to run MDM command on device"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines HTTP Request action to run MDM command on device&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The MDM command will run on the device, downloading and installing the OS update.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/9-macos-device-restart.png"
alt="macOS restart notification after OS update"&gt;&lt;figcaption&gt;
&lt;h4&gt;macOS restart notification after OS update&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="conclusion"&gt;&lt;a href="#conclusion" class="header-anchor"&gt;&lt;/a&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;In this article we built a webhook flow with Tines. We received a webhook callback from Fleet when a device had an
outdated OS version. We then sent an MDM command to the device to update the OS version. This example demonstrates how
Tines can automate workflows and tasks in IT environments.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we explained
&lt;a class="link" href="../google-sheets-api/" &gt;how to quickly get started with Google Sheets API for your development scripts&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="building-a-webhook-flow-with-tines-video"&gt;&lt;a href="#building-a-webhook-flow-with-tines-video" class="header-anchor"&gt;&lt;/a&gt;Building a webhook flow with Tines video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/GFqmvv4nHqk"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This article originally appeared in
&lt;a class="link" href="https://fleetdm.com/guides/building-webhook-flows-with-fleet-and-tines" target="_blank" rel="noopener"
&gt;Fleet&amp;rsquo;s blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description></item><item><title>Create an IPv6-only Linux server in 3 easy steps</title><link>https://victoronsoftware.com/posts/create-ipv6-only-linux-server/</link><pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/create-ipv6-only-linux-server/</guid><description>&lt;img src="https://victoronsoftware.com/posts/create-ipv6-only-linux-server/ipv6-only.png" alt="Featured image of post Create an IPv6-only Linux server in 3 easy steps" /&gt;&lt;h2 id="introduction"&gt;&lt;a href="#introduction" class="header-anchor"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;&lt;p&gt;IPv6 is the latest version of the Internet Protocol. It provides a larger address space than IPv4, which is running out
of addresses. IPv6 is essential for the future of the Internet, and many cloud providers support it.&lt;/p&gt;
&lt;p&gt;In addition, IPv6 is more secure than IPv4. It has built-in security features like IPsec, which is optional in IPv4.
IPv6 also has a simplified header, which makes it faster than IPv4.&lt;/p&gt;
&lt;p&gt;Many corporations use IPv6 internally, and some have even disabled IPv4. This tutorial will create a Linux VM using
IPv6, with IPv4 disabled.&lt;/p&gt;
&lt;p&gt;The steps are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class="link" href="#create-linux-server-with-ipv6-enabled" &gt;Create droplets with IPv6 enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#ssh-from-ipv4-client-to-ipv6-only-server" &gt;SSH from IPv4 client to IPv6-only server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#disable-ipv4-on-linux-server" &gt;Disable IPv4 on the Linux server&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="prerequisites"&gt;&lt;a href="#prerequisites" class="header-anchor"&gt;&lt;/a&gt;Prerequisites
&lt;/h2&gt;&lt;p&gt;We will use &lt;a class="link" href="https://www.digitalocean.com/" target="_blank" rel="noopener"
&gt;Digital Ocean&lt;/a&gt; as our cloud provider. Their IPv6 documentation is available
at &lt;a class="link" href="https://docs.digitalocean.com/products/networking/ipv6/" target="_blank" rel="noopener"
&gt;https://docs.digitalocean.com/products/networking/ipv6/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Droplets are Digital Ocean&amp;rsquo;s virtual private servers. They run on virtualized hardware and are available in various
sizes. We will create a new droplet with IPv6.&lt;/p&gt;
&lt;h2 id="create-linux-server-with-ipv6-enabled"&gt;&lt;a href="#create-linux-server-with-ipv6-enabled" class="header-anchor"&gt;&lt;/a&gt;Step 1: Create droplets with IPv6 enabled
&lt;/h2&gt;&lt;p&gt;We will create two Digital Ocean droplets. The first droplet will have only IPv6 enabled, and the second droplet will
have both IPv4 and IPv6 enabled. We only need the second droplet to SSH into the first droplet because our client
machine uses IPv4 only.&lt;/p&gt;
&lt;p&gt;Both droplets will use Ubuntu 24.04 (LTS), although any Linux distribution should work. Both droplets should have IPv6
enabled in Advanced Options.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/create-ipv6-only-linux-server/enable-ipv6.png"
alt="Enable IPv6 checkbox"&gt;
&lt;/figure&gt;
&lt;p&gt;The first droplet will use the Password authentication method.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/create-ipv6-only-linux-server/droplet-authentication-method.png"
alt="Choose Droplet authentication method"&gt;
&lt;/figure&gt;
&lt;p&gt;The second droplet can have either Password or SSH authentication.&lt;/p&gt;
&lt;h2 id="ssh-from-ipv4-client-to-ipv6-only-server"&gt;&lt;a href="#ssh-from-ipv4-client-to-ipv6-only-server" class="header-anchor"&gt;&lt;/a&gt;Step 2: SSH from IPv4 client to IPv6-only server
&lt;/h2&gt;&lt;p&gt;You can find the Droplet IPv4 and IPv6 addresses in the Droplet details.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/create-ipv6-only-linux-server/droplet-details.png"
alt="Droplet details"&gt;
&lt;/figure&gt;
&lt;p&gt;Now, we connect to the second droplet using SSH.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ssh root@143.198.235.211
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From there, we can SSH into the first droplet using its IPv6 address.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ssh root@2604:a880:4:1d0::4d3:3000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the &lt;code&gt;net-tools&lt;/code&gt; package to use the &lt;code&gt;ifconfig&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt update
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install net-tools
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="disable-ipv4-on-linux-server"&gt;&lt;a href="#disable-ipv4-on-linux-server" class="header-anchor"&gt;&lt;/a&gt;Step 3: Disable IPv4 on the Linux server
&lt;/h2&gt;&lt;p&gt;To disable IPv4 on the first droplet, edit the &lt;code&gt;/etc/netplan/50-cloud-init.yaml&lt;/code&gt; network configuration file by removing
all the IPv4 addresses and routes, and adding the IPv6 nameservers, as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;network&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;version&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ethernets&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;eth0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;accept-ra&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;addresses&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;2604&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;a880:4:1d0::4d3:3000/64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;match&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;macaddress&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;da:a1:07:89:d9:a1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;mtu&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;1500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;nameservers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;addresses&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;2001&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;4860&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;4860&lt;/span&gt;::&lt;span style="color:#ae81ff"&gt;8844&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;2001&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;4860&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;4860&lt;/span&gt;::&lt;span style="color:#ae81ff"&gt;8888&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;search&lt;/span&gt;: []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;routes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;to&lt;/span&gt;: ::&lt;span style="color:#ae81ff"&gt;/0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;via&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;2604&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;a880:4:1d0::1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;set-name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;eth0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply the changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo netplan apply --debug
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, you can view the network configuration using the &lt;code&gt;ifconfig&lt;/code&gt; command. It should look like:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500
inet6 fe80::d8a1:7ff:fe89:d9a1 prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt;
inet6 2604:a880:4:1d0::4d3:3000 prefixlen 64 scopeid 0x0&amp;lt;global&amp;gt;
ether da:a1:07:89:d9:a1 txqueuelen 1000 (Ethernet)
RX packets 5179 bytes 3832240 (3.8 MB)
RX errors 0 dropped 0 overruns 0 frame 0
TX packets 5099 bytes 696019 (696.0 KB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
eth1: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500
inet6 fe80::e826:4cff:feb7:6659 prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt;
ether ea:26:4c:b7:66:59 txqueuelen 1000 (Ethernet)
RX packets 12 bytes 916 (916.0 B)
RX errors 0 dropped 0 overruns 0 frame 0
TX packets 43 bytes 2266 (2.2 KB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt; mtu 65536
inet 127.0.0.1 netmask 255.0.0.0
inet6 ::1 prefixlen 128 scopeid 0x10&amp;lt;host&amp;gt;
loop txqueuelen 1000 (Local Loopback)
RX packets 233 bytes 22136 (22.1 KB)
RX errors 0 dropped 0 overruns 0 frame 0
TX packets 233 bytes 22136 (22.1 KB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see that the &lt;code&gt;eth0&lt;/code&gt; interface has an IPv6 address but no IPv4 address. The &lt;code&gt;eth1&lt;/code&gt; interface also has an IPv6
address. The &lt;code&gt;lo&lt;/code&gt; interface is the loopback interface and still uses the IPv4 &lt;code&gt;127.0.0.1&lt;/code&gt; address. We will not disable
IPv4 on the loopback interface at this point since many tools may break.&lt;/p&gt;
&lt;h2 id="transfer-files-between-ipv4-and-ipv6-only-servers"&gt;&lt;a href="#transfer-files-between-ipv4-and-ipv6-only-servers" class="header-anchor"&gt;&lt;/a&gt;Transfer files between IPv4 and IPv6-only servers
&lt;/h2&gt;&lt;p&gt;To transfer files between the IPv4 and IPv6-only servers, you can use the &lt;code&gt;scp&lt;/code&gt; command. First, transfer to the droplet
that supports both IPv4 and IPv6, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;scp fleet-osquery_1.24.0_amd64.deb root@143.198.235.211:~
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, SSH into that droplet and transfer the file to the IPv6-only droplet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;scp fleet-osquery_1.24.0_amd64.deb root@&lt;span style="color:#ae81ff"&gt;\[&lt;/span&gt;2604:a880:4:1d0::4d3:3000&lt;span style="color:#ae81ff"&gt;\]&lt;/span&gt;:~
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="conclusion"&gt;&lt;a href="#conclusion" class="header-anchor"&gt;&lt;/a&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;In this tutorial, we created a Linux VM using IPv6, with IPv4 disabled. We also transferred files between an IPv4 and an
IPv6-only server. IPv6 is the future of the Internet, and learning how to use it is essential. You can now create your
own IPv6-only servers and experiment with them.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we discussed &lt;a class="link" href="../why-you-need-vlan/" &gt;why you need VLANs in your home network&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="create-an-ipv6-only-linux-server-video"&gt;&lt;a href="#create-an-ipv6-only-linux-server-video" class="header-anchor"&gt;&lt;/a&gt;Create an IPv6-only Linux server video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/BjdHmyzfe80"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to reuse workflows and steps in GitHub Actions (2024)</title><link>https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/</link><pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/</guid><description>&lt;img src="https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/GitHub%20Actions%20thumbnail.png" alt="Featured image of post How to reuse workflows and steps in GitHub Actions (2024)" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#reusable-workflows" &gt;GitHub reusable workflows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#reusable-steps-composite-action" &gt;GitHub reusable steps (composite action)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="introduction"&gt;&lt;a href="#introduction" class="header-anchor"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/features/actions" target="_blank" rel="noopener"
&gt;GitHub Actions&lt;/a&gt; is a way to automate your software development workflows. The
approach is similar to CI/CD tools like Jenkins, CircleCI, and TravisCI. However, GitHub Actions are built into GitHub.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/GitHub%20Actions%20workflow.svg"
alt="High level diagram of GitHub Actions"&gt;&lt;figcaption&gt;
&lt;h4&gt;High level diagram of GitHub Actions&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The entry point for GitHub Actions is the &lt;code&gt;.github/workflows&lt;/code&gt; directory in your repository. This directory contains one
or more YAML files that define your workflows. A workflow is an automated process made up of one or more jobs. Each job
runs on a separate runner. A runner is a server that runs the job. A job contains one or more steps. Each step runs a
separate command.&lt;/p&gt;
&lt;h2 id="why-reuse"&gt;&lt;a href="#why-reuse" class="header-anchor"&gt;&lt;/a&gt;Why reuse?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://en.wikipedia.org/wiki/Code_reuse" target="_blank" rel="noopener"
&gt;Code reuse&lt;/a&gt; is a fundamental principle of software development. Reusing
GitHub Actions code allows you to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Improve maintainability by keeping common code in one place and reducing the amount of code&lt;/li&gt;
&lt;li&gt;Increase consistency since multiple workflows can use the same code&lt;/li&gt;
&lt;li&gt;Promote best practices&lt;/li&gt;
&lt;li&gt;Increase productivity&lt;/li&gt;
&lt;li&gt;Reduce errors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples of reusable GitHub Actions code include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Code signing&lt;/li&gt;
&lt;li&gt;Uploading artifacts to cloud services&lt;/li&gt;
&lt;li&gt;Security checks&lt;/li&gt;
&lt;li&gt;Notifications and reports&lt;/li&gt;
&lt;li&gt;Data processing&lt;/li&gt;
&lt;li&gt;and many others&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="reusable-workflows"&gt;&lt;a href="#reusable-workflows" class="header-anchor"&gt;&lt;/a&gt;Reusable workflows
&lt;/h2&gt;&lt;p&gt;A reusable workflow replaces a job in the main workflow.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/GitHub%20Actions%20reusable%20workflow.svg"
alt="GitHub Actions reusable workflow"&gt;&lt;figcaption&gt;
&lt;h4&gt;GitHub Actions reusable workflow&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A reusable workflow may be shared across repositories and run on a different platform than the main workflow.&lt;/p&gt;
&lt;p&gt;For file sharing, &amp;lsquo;build artifacts&amp;rsquo; must be used to share files with the main workflow. The reusable workflow does not
inherit environment variables. However, it accepts inputs and secrets from the calling workflow and may use outputs to
pass data back to the main workflow.&lt;/p&gt;
&lt;p&gt;Here is an example of a reusable workflow. It uses the same schema as a regular workflow.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Reusable workflow&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;workflow_call&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;inputs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;reusable_input&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;description&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Input to the reusable workflow&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;required&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;type&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;filename&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;required&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;type&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;secrets&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;HELLO_WORLD_SECRET&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;required&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;outputs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# Map the workflow output(s) to job output(s)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;reusable_output&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;description&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Output from the reusable workflow&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ jobs.reusable-workflow-job.outputs.job_output }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;defaults&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;shell&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;reusable-workflow-job&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runs-on&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;ubuntu-20.04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# Map the job output(s) to step output(s)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;outputs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;job_output&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ steps.process-step.outputs.step_output }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Process reusable input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;id&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;process-step&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;HELLO_WORLD_SECRET&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ secrets.HELLO_WORLD_SECRET }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: |&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; echo &amp;#34;reusable_input=${{ inputs.reusable_input }}&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; echo &amp;#34;HELLO_WORLD_SECRET=${HELLO_WORLD_SECRET}&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; echo &amp;#34;step_output=${{ inputs.reusable_input }}_processed&amp;#34; &amp;gt;&amp;gt; $GITHUB_OUTPUT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;actions/download-artifact@v4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;input_file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Process file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: |&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; echo &amp;#34;Processing file: ${{ inputs.filename }}&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; echo &amp;#34;file processed&amp;#34; &amp;gt;&amp;gt; ${{ inputs.filename }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;actions/upload-artifact@v4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;output_file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;path&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ inputs.filename }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reusable workflow is triggered &lt;code&gt;on: workflow_call&lt;/code&gt;. It accepts an input called &lt;code&gt;reusable_input&lt;/code&gt; and generates an
output called &lt;code&gt;reusable_output&lt;/code&gt;. It also downloads an artifact called &lt;code&gt;input_file&lt;/code&gt;, processes a file, and uploads an
artifact called &lt;code&gt;output_file&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The main workflow calls the reusable workflow using the &lt;code&gt;uses&lt;/code&gt; keyword.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;job-2&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;needs&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;job-1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# We do not need to check out the repository to use the reusable workflow&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;./.github/workflows/reusable-workflow.yml&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;reusable_input&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;job-2-input&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;filename&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;secrets&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# Can also implicitly pass the secrets with: secrets: inherit&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;HELLO_WORLD_SECRET&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;TERCES_DLROW_OLLEH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A successful run of the main workflow looks like this on GitHub:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/GitHub%20Actions%20reusable%20workflow%20success.png"
alt="GitHub Actions reusable workflow success"&gt;&lt;figcaption&gt;
&lt;h4&gt;GitHub Actions reusable workflow success&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="reusable-steps-composite-action"&gt;&lt;a href="#reusable-steps-composite-action" class="header-anchor"&gt;&lt;/a&gt;Reusable steps (composite action)
&lt;/h2&gt;&lt;p&gt;Reusable steps replace a regular step in a job. We will use a &lt;code&gt;composite action&lt;/code&gt; for reusable steps in our example.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/GitHub%20Actions%20reusable%20steps.svg"
alt="GitHub Actions reusable steps (composite action)"&gt;&lt;figcaption&gt;
&lt;h4&gt;GitHub Actions reusable steps (composite action)&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Like a reusable workflow, a composite action may be shared across repositories, it accepts inputs, and it may use
outputs to pass data back to the main workflow.&lt;/p&gt;
&lt;p&gt;Unlike a reusable workflow, a composite action inherits environment variables. However, it does not inherit secrets.
Secrets must be passed explicitly as inputs or environment variables. Also, there is no need to use &amp;lsquo;build artifacts&amp;rsquo; to
share files since the reusable steps run on the same runner and in the same work area as the main job.&lt;/p&gt;
&lt;p&gt;Here is an example of a composite action. It uses a different schema than a workflow. Also, the file must be named
&lt;code&gt;action.yml&lt;/code&gt; or similar.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Reusable steps (AKA composite action)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;description&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Demonstrate how to use reusable steps in a workflow&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Schema: https://json.schemastore.org/github-action.json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;inputs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;reusable_input&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;description&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Input to the reusable workflow&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;required&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;filename&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;required&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;outputs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# Map the action output(s) to step output(s)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;reusable_output&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;description&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;Output from the reusable workflow&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;value&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ steps.process-step.outputs.step_output }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;runs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;using&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;composite&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Process reusable input&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;id&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;process-step&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# Shell must explicitly specify the shell for each step. https://github.com/orgs/community/discussions/18597&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;shell&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: |&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; echo &amp;#34;reusable_input=${{ inputs.reusable_input }}&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; echo &amp;#34;HELLO_WORLD_SECRET=${HELLO_WORLD_SECRET}&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; echo &amp;#34;step_output=${{ inputs.reusable_input }}_processed&amp;#34; &amp;gt;&amp;gt; $GITHUB_OUTPUT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Process file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;shell&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: |&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; echo &amp;#34;Processing file: ${{ inputs.filename }}&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; echo &amp;#34;file processed&amp;#34; &amp;gt;&amp;gt; ${{ inputs.filename }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The composite action is called via the &lt;code&gt;uses&lt;/code&gt; setting on a step. Our action accepts an input called &lt;code&gt;reusable_input&lt;/code&gt; and
generates an output called &lt;code&gt;reusable_output&lt;/code&gt;. It also processes a file called &lt;code&gt;filename&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following code snippet shows how to use the composite action in a job.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Use reusable steps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;id&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;reusable-steps&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;./.github/reusable-steps&lt;/span&gt; &lt;span style="color:#75715e"&gt;# To use this syntax, we must have the repository checked out&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;reusable_input&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;job-2-input&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;filename&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;input.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;HELLO_WORLD_SECRET&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;TERCES_DLROW_OLLEH&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A successful run of the main workflow with reusable steps looks like this on GitHub:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/GitHub%20Actions%20composite%20action%20success.png"
alt="GitHub Actions composite action success"&gt;&lt;figcaption&gt;
&lt;h4&gt;GitHub Actions composite action success&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;For a reusable TypeScript action example, see the
&lt;a class="link" href="../typescript-github-action/" &gt;How to create a custom GitHub Action using TypeScript&lt;/a&gt; article.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;&lt;a href="#conclusion" class="header-anchor"&gt;&lt;/a&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Reusable workflows and steps are powerful tools for improving the maintainability, consistency, and productivity of your
GitHub Actions. They allow you to reuse code across repositories and workflows and promote best practices. They are a
great way to reduce errors and increase productivity.&lt;/p&gt;
&lt;p&gt;For larger units of work, a reusable workflow should be used. A composite action should be used for smaller units of
work that may run on the same runner and share the same work area.&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at: &lt;a class="link" href="https://github.com/getvictor/github-reusable-workflows-and-steps" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/github-reusable-workflows-and-steps&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="other-articles-related-to-github"&gt;&lt;a href="#other-articles-related-to-github" class="header-anchor"&gt;&lt;/a&gt;Other articles related to GitHub
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../track-engineering-metrics/" &gt;Automate tracking of engineering metrics with GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../github-code-review-issues" &gt;Is GitHub code review process broken in your company?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../git-merges-and-pull-requests/" &gt;&lt;em&gt;git merge&lt;/em&gt; and GitHub pull requests explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../find-code-owners-for-pull-request" &gt;Finding the minimum required code owner approvers for pull request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../use-github-actions-for-general-purpose-tasks/" &gt;Use GitHub actions for general-purpose tasks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="github-actions-reusable-workflows-and-steps-video"&gt;&lt;a href="#github-actions-reusable-workflows-and-steps-video" class="header-anchor"&gt;&lt;/a&gt;GitHub Actions reusable workflows and steps video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/ciHJzV6TZB8"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Code signing a Windows application</title><link>https://victoronsoftware.com/posts/code-signing-windows/</link><pubDate>Wed, 27 Mar 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/code-signing-windows/</guid><description>&lt;img src="https://victoronsoftware.com/posts/code-signing-windows/digital-signature-ok.png" alt="Featured image of post Code signing a Windows application" /&gt;&lt;h2 id="what-is-code-signing"&gt;&lt;a href="#what-is-code-signing" class="header-anchor"&gt;&lt;/a&gt;What is code signing?
&lt;/h2&gt;&lt;p&gt;Code signing is the process of digitally signing executables and scripts to confirm the software author and guarantee
that the code has not been altered or corrupted since it was signed. The method employs a cryptographic hash to validate
the authenticity and integrity of the code.&lt;/p&gt;
&lt;h2 id="the-benefits-of-code-signing"&gt;&lt;a href="#the-benefits-of-code-signing" class="header-anchor"&gt;&lt;/a&gt;The benefits of code signing
&lt;/h2&gt;&lt;p&gt;Code signing provides several benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User trust&lt;/strong&gt;: Users are likelier to trust signed software because they can verify its origin.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Code signing helps prevent tampering and makes sure that bad actors have not altered the software.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Malware protection&lt;/strong&gt;: Code signing helps protect users from malware by verifying the software&amp;rsquo;s authenticity.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Software updates&lt;/strong&gt;: Code signing helps users verify that software updates are legitimate and not malicious.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows Defender&lt;/strong&gt;: Code signing helps prevent Windows Defender warnings.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code-signing-process-for-windows"&gt;&lt;a href="#code-signing-process-for-windows" class="header-anchor"&gt;&lt;/a&gt;Code signing process for Windows
&lt;/h2&gt;&lt;p&gt;The code signing process for Windows involves the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Obtain a code signing certificate&lt;/strong&gt;: Purchase a code signing certificate from a trusted certificate authority (CA)
or use a self-signed certificate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sign the code&lt;/strong&gt;: Use a code signing tool to sign the code with the code signing certificate.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Timestamp the signature&lt;/strong&gt;: Timestamp the signature to make sure that the signature remains valid even after the
certificate expires.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Distribute the signed code&lt;/strong&gt;: Distribute the signed code to users.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Verify the signature&lt;/strong&gt;: Users can verify the signature to confirm the software&amp;rsquo;s authenticity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="obtaining-a-code-signing-certificate"&gt;&lt;a href="#obtaining-a-code-signing-certificate" class="header-anchor"&gt;&lt;/a&gt;Obtaining a code signing certificate
&lt;/h2&gt;&lt;p&gt;In our example, we will use a self-signed certificate. This approach is suitable for internal business applications. For
public applications, you should obtain a code signing certificate from a trusted CA.&lt;/p&gt;
&lt;p&gt;We will use the &lt;a class="link" href="https://www.openssl.org/" target="_blank" rel="noopener"
&gt;OpenSSL&lt;/a&gt; command line tool to generate the certificates. OpenSSL is a popular
open-source library for TLS and SSL protocols.&lt;/p&gt;
&lt;p&gt;The following script generates the certificate and key needed for code signing. It also generates a certificate
authority (CA) and signs the code signing certificate with the CA.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# -e: Immediately exit if any command has a non-zero exit status.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# -x: Print all executed commands to the terminal.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# -u: Exit if an undefined variable is used.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# -o pipefail: Exit if any command in a pipeline fails.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;set -exuo pipefail
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# This script generates certificates and keys needed for code signing.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p certs
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Certificate authority (CA)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/ca.key -out certs/ca.crt -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testCodeSignCA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate a certificate for code signing, signed by the CA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa:2048 -nodes -keyout certs/sign.key -out certs/sign.req -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testCodeSignCert&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/sign.req -days &lt;span style="color:#ae81ff"&gt;398&lt;/span&gt; -CA certs/ca.crt -CAkey certs/ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/sign.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Clean up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm certs/sign.req
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="building-the-application"&gt;&lt;a href="#building-the-application" class="header-anchor"&gt;&lt;/a&gt;Building the application
&lt;/h2&gt;&lt;p&gt;We will build a simple &amp;ldquo;Hello World&amp;rdquo; Windows application using the Go programming language for this example. We compile
the application with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;export GOOS&lt;span style="color:#f92672"&gt;=&lt;/span&gt;windows
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;export GOARCH&lt;span style="color:#f92672"&gt;=&lt;/span&gt;amd64
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go build ./hello-world.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Go build process generates the &lt;code&gt;hello-world.exe&lt;/code&gt; Windows executable.&lt;/p&gt;
&lt;h2 id="signing-and-timestamping-the-code"&gt;&lt;a href="#signing-and-timestamping-the-code" class="header-anchor"&gt;&lt;/a&gt;Signing and timestamping the code
&lt;/h2&gt;&lt;p&gt;To sign the code, we will use &lt;a class="link" href="https://github.com/mtrojnar/osslsigncode" target="_blank" rel="noopener"
&gt;osslsigncode&lt;/a&gt;, an open-source code signing tool
that uses OpenSSL to sign Windows executables. Unlike Microsoft&amp;rsquo;s &lt;code&gt;signtool,&lt;/code&gt; &lt;code&gt;osslsigncode&lt;/code&gt; is cross-platform and can
be used on Linux and macOS.&lt;/p&gt;
&lt;p&gt;To sign the code, we use the following script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# -e: Immediately exit if any command has a non-zero exit status.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# -x: Print all executed commands to the terminal.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# -u: Exit if an undefined variable is used.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# -o pipefail: Exit if any command in a pipeline fails.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;set -exuo pipefail
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;input_file&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$1
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;[&lt;/span&gt; ! -f &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$input_file&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;First argument must be path to binary&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; exit &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Check that input file is a windows PE (Portable Executable)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ! &lt;span style="color:#f92672"&gt;(&lt;/span&gt; file &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$input_file&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; | grep -q PE &lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#39;File must be a Portable Executable (PE) file.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; exit &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Check that osslsigncode is installed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; ! command -v osslsigncode &amp;gt;/dev/null 2&amp;gt;&amp;amp;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; ; &lt;span style="color:#66d9ef"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; echo &lt;span style="color:#e6db74"&gt;&amp;#34;osslsigncode utility is not present or missing from PATH. Binary cannot be signed.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; exit &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;orig_file&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#e6db74"&gt;${&lt;/span&gt;input_file&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;_unsigned&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mv &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$input_file&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$orig_file&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;osslsigncode sign -certs &lt;span style="color:#e6db74"&gt;&amp;#34;./certs/sign.crt&amp;#34;&lt;/span&gt; -key &lt;span style="color:#e6db74"&gt;&amp;#34;./certs/sign.key&amp;#34;&lt;/span&gt; -n &lt;span style="color:#e6db74"&gt;&amp;#34;Hello Windows code signing&amp;#34;&lt;/span&gt; -i &lt;span style="color:#e6db74"&gt;&amp;#34;https://victoronsoftware.com/&amp;#34;&lt;/span&gt; -t &lt;span style="color:#e6db74"&gt;&amp;#34;http://timestamp.comodoca.com/authenticode&amp;#34;&lt;/span&gt; -in &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$orig_file&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt; -out &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$input_file&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$orig_file&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In addition to signing the code, we timestamp the signature using the Comodo server. Timestamping makes sure the
signature remains valid even after the certificate expires or is invalidated.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;osslsigncode&lt;/code&gt; to verify the signature:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/usr/bin/env bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;input_file&lt;span style="color:#f92672"&gt;=&lt;/span&gt;$1
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;osslsigncode verify -CAfile ./certs/ca.crt &lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;$input_file&lt;span style="color:#e6db74"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="distributing-and-manually-verifying-the-signed-code"&gt;&lt;a href="#distributing-and-manually-verifying-the-signed-code" class="header-anchor"&gt;&lt;/a&gt;Distributing and manually verifying the signed code
&lt;/h2&gt;&lt;p&gt;After signing the code, we can distribute the signed executable to users. Users can manually verify the signature by
right-clicking the executable, selecting &amp;ldquo;Properties,&amp;rdquo; and navigating to the &amp;ldquo;Digital Signatures&amp;rdquo; tab. The user can then
view the certificate details and verify that the signature is valid.&lt;/p&gt;
&lt;p&gt;However, since we are using the self-signed certificate, users will see a warning that the certificate is not trusted.
Our self-signed certificate is not trusted because the certificate authority is not part of the Windows trusted root
certificate store.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/code-signing-windows/certificate-signature-not-verified.png"
alt="Certificate in code signature cannot be verified"&gt;&lt;figcaption&gt;
&lt;h4&gt;Certificate in code signature cannot be verified&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We can add the certificate authority to the Windows trusted root certificate store with the following Powershell
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Import-Certificate -FilePath &lt;span style="color:#e6db74"&gt;&amp;#34;certs\ca.crt&amp;#34;&lt;/span&gt; -CertStoreLocation Cert&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;\LocalMachine\Root
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After adding the certificate authority to the trusted root certificate store, users will see that the certificate is
trusted and the signature is valid.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/code-signing-windows/certificate-signature-verified.png"
alt="Certificate in code signature is be verified"&gt;&lt;figcaption&gt;
&lt;h4&gt;Certificate in code signature is be verified&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="code-signing-using-a-certificate-from-a-public-ca"&gt;&lt;a href="#code-signing-using-a-certificate-from-a-public-ca" class="header-anchor"&gt;&lt;/a&gt;Code signing using a certificate from a public CA
&lt;/h2&gt;&lt;p&gt;To sign public applications, we must obtain a code signing certificate from a trusted CA. The latest industry standards
require private keys for code signing certificates to be stored in hardware security modules (HSMs) to prevent
unauthorized access. This security requirement means certificates for code signing in CI/CD pipelines must use a cloud
HSM vendor or a private pipeline runner with an HSM.&lt;/p&gt;
&lt;p&gt;In a future article, we will explore signing a Windows application using a cloud HSM vendor.&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/code-sign-windows" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/code-sign-windows&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we explained &lt;a class="link" href="../exe-installer" &gt;how to create an EXE installer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also discussed &lt;a class="link" href="../connect-to-remote-active-directory/" &gt;connecting your local machine to remote Active Directory&lt;/a&gt; and
covered &lt;a class="link" href="../test-ndes-scep-server" &gt;how to test a Windows NDES SCEP server&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="code-signing-a-windows-application-video"&gt;&lt;a href="#code-signing-a-windows-application-video" class="header-anchor"&gt;&lt;/a&gt;Code signing a Windows application video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/NQYUgHznXew"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;</description></item><item><title>Use GitHub Actions for general-purpose tasks</title><link>https://victoronsoftware.com/posts/use-github-actions-for-general-purpose-tasks/</link><pubDate>Thu, 11 Jan 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/use-github-actions-for-general-purpose-tasks/</guid><description>&lt;img src="https://victoronsoftware.com/posts/use-github-actions-for-general-purpose-tasks/GitHub-action.png" alt="Featured image of post Use GitHub Actions for general-purpose tasks" /&gt;&lt;h2 id="what-are-github-actions"&gt;&lt;a href="#what-are-github-actions" class="header-anchor"&gt;&lt;/a&gt;What are GitHub Actions?
&lt;/h2&gt;&lt;p&gt;GitHub Actions are a way to automate your software development workflows. They are similar to CI/CD tools like Jenkins,
CircleCI, and TravisCI. However, GitHub Actions are built into GitHub.&lt;/p&gt;
&lt;p&gt;GitHub Actions are not entirely free, but they have very high usage limits for open-source projects. For private
repositories, you can run up to 2,000 minutes per month for free. After that, you will be charged.&lt;/p&gt;
&lt;h2 id="github-actions-for-non-cicd-tasks"&gt;&lt;a href="#github-actions-for-non-cicd-tasks" class="header-anchor"&gt;&lt;/a&gt;GitHub Actions for non-CI/CD tasks
&lt;/h2&gt;&lt;p&gt;However, GitHub Actions are not just for CI/CD. You can use them for many general-purpose tasks. For example, you can
use them as an extension of your application to perform tasks such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;generating aggregate reports&lt;/li&gt;
&lt;li&gt;updating a database&lt;/li&gt;
&lt;li&gt;sending notifications&lt;/li&gt;
&lt;li&gt;general data processing&lt;/li&gt;
&lt;li&gt;and many others&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A GitHub Action can run arbitrary code, taking inputs from multiple sources such as API calls, databases, and files.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/use-github-actions-for-general-purpose-tasks/GitHub-action.png"
alt="GitHub Action block diagram"&gt;
&lt;/figure&gt;
&lt;p&gt;You can use a GitHub Action as a worker for your application. For example, you can use it to process data from a
database and then send a notification to a user. Or you can use it to generate a report and upload it to a file server.&lt;/p&gt;
&lt;p&gt;Although GitHub Actions in open-source repositories are public, they can still use secrets that are not accessible to
the public. For example, secrets can be API keys and database access credentials.&lt;/p&gt;
&lt;h2 id="a-real-world-github-action-doing-data-processing"&gt;&lt;a href="#a-real-world-github-action-doing-data-processing" class="header-anchor"&gt;&lt;/a&gt;A real-world GitHub Action doing data processing
&lt;/h2&gt;&lt;p&gt;Below is an example GitHub Action that does general data processing. It uses API calls to download data from NVD
(National Vulnerability Database), generates files from this data, and then creates a release. Subsequently, the
application can download these files and use them directly without making the API calls or processing the data itself.&lt;/p&gt;
&lt;p&gt;GitHub gist: &lt;script type="application/javascript" src="https://gist.github.com/getvictor/5b708d408ec5508fbc5f1b3487e8f8a9.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;The GitHub Action does a checkout of our application code and runs a script &lt;em&gt;cmd/cve/generate.go&lt;/em&gt; to generate the files.
Then, it publishes the generated files as a new release. As a final step, it deletes any old releases.&lt;/p&gt;
&lt;p&gt;A note of caution. GitHub monitors for cryptocurrency mining and other abusive behavior. So, keep that in mind and be
careful with process-intensive actions.&lt;/p&gt;
&lt;h2 id="use-github-actions-for-general-purpose-tasks-video"&gt;&lt;a href="#use-github-actions-for-general-purpose-tasks-video" class="header-anchor"&gt;&lt;/a&gt;Use GitHub Actions for general-purpose tasks video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/y4Jct7eWLmY"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id="other-articles-related-to-github"&gt;&lt;a href="#other-articles-related-to-github" class="header-anchor"&gt;&lt;/a&gt;Other articles related to GitHub
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../github-reusable-workflows-and-steps/" &gt;How to reuse workflows and steps in GitHub Actions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../git-merges-and-pull-requests/" &gt;What happens in a GitHub pull request after a &lt;code&gt;git merge&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../typescript-github-action/" &gt;How to create a custom GitHub Action using TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>You need a personal dev docs DB (GitBook)</title><link>https://victoronsoftware.com/posts/you-need-a-personal-dev-docs-db-gitbook/</link><pubDate>Thu, 30 Nov 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/you-need-a-personal-dev-docs-db-gitbook/</guid><description>&lt;img src="https://victoronsoftware.com/posts/you-need-a-personal-dev-docs-db-gitbook/cover.png" alt="Featured image of post You need a personal dev docs DB (GitBook)" /&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/o-Tml_PAAeM"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;At &lt;a class="link" href="https://fleetdm.com/" target="_blank" rel="noopener"
&gt;Fleet&lt;/a&gt;, our developer documentation is spread out throughout the codebase,
contained in a multitude of README and Markdown files. Much of the documentation is hosted
on &lt;a class="link" href="https://fleetdm.com/docs/get-started/why-fleet" target="_blank" rel="noopener"
&gt;our webpage&lt;/a&gt;, but not all of it.&lt;/p&gt;
&lt;p&gt;As developers, we need to be able to quickly search project documentation to find answers to
specific questions, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to do a database migration&lt;/li&gt;
&lt;li&gt;How to run integration tests&lt;/li&gt;
&lt;li&gt;How to deploy a development version of to a specific OS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One solution is to use &lt;strong&gt;grep&lt;/strong&gt; or the IDE environment to search for these answers. Unfortunately,
such search methods are not optimized for text search &amp;ndash; they frequently generate no relevant
results or too many results that we must manually wade through to find the most appropriate.
Specialized documentation search tools, on the other hand, prioritize headings and whole words,
search for plural versions of the search terms, and offer other conveniences.&lt;/p&gt;
&lt;p&gt;The lack of good search capability for engineering docs must be solved in order to scale engineering
efforts. It is an issue because of the following side effects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Engineers are discouraged from writing documentation&lt;/li&gt;
&lt;li&gt;Documentation may be duplicated&lt;/li&gt;
&lt;li&gt;Senior developers are frequently interrupted when people can’t find relevant documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One solution is to use a documentation service, such as a team
wiki, &lt;a class="link" href="https://www.atlassian.com/software/confluence" target="_blank" rel="noopener"
&gt;Confluence&lt;/a&gt;,
or &lt;a class="link" href="https://www.gitbook.com/" target="_blank" rel="noopener"
&gt;GitBook&lt;/a&gt;. GitBook
integrates with git repositories, and can push documentation changes. GitBook is free for personal
use, which makes it easy to use for open source projects such
as &lt;a class="link" href="https://github.com/fleetdm/fleet" target="_blank" rel="noopener"
&gt;fleet&lt;/a&gt; and &lt;a class="link" href="https://github.com/osquery/osquery" target="_blank" rel="noopener"
&gt;osquery&lt;/a&gt;. That
said,
GitBook is a newcomer to the space, and is still reaching maturity.&lt;/p&gt;
&lt;p&gt;To set up a personal GitBook, make a fork of the open source projects that contain documentation
you’d like to search, and integrate them into GitBook spaces. After indexing is complete, you’ll be
able to effectively search the documentation.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/you-need-a-personal-dev-docs-db-gitbook/GitBook-1.png"
alt="Search for database migrations in Fleet&amp;#39;s GitBook"&gt;
&lt;/figure&gt;
&lt;p&gt;To keep the forks in sync with the parent repositories, we use Github Actions. Github Actions are
free for open source projects. Searching GitHub for &lt;strong&gt;sync-fork&lt;/strong&gt; returned several examples. We
ended up using the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Sync Fork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;schedule&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;cron&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;55 * * * *&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;workflow_dispatch&lt;/span&gt;: &lt;span style="color:#75715e"&gt;# on button click&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;sync&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runs-on&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;ubuntu-latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Checkout repository&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;actions/checkout@v4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;token&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ secrets.WORKFLOW_TOKEN }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;fetch-depth&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Configure Git&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: |&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; git config --global user.name &amp;#34;GitHub Actions Bot&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; git config --global user.email &amp;#34;actions@github.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Merge upstream&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: |&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; git remote add upstream https://github.com/fleetdm/fleet.git
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; git fetch upstream main
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; git checkout main
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; git merge upstream/main
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; git push origin main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;strong&gt;WORKFLOW_TOKEN&lt;/strong&gt; above is a GitHub personal access token (PAT) that allows reading and writing
workflows in this repository. This token is not needed for repositories without workflows.&lt;/p&gt;
&lt;p&gt;In addition to project documentation, GitBook can be used to synchronize personal documentation
that’s being held in a private repository. There are several git-based notebook applications on the
market. In addition, Markdown notes from the popular note-taking
app &lt;a class="link" href="https://obsidian.md/" target="_blank" rel="noopener"
&gt;Obsidian&lt;/a&gt; can be kept in GitHub. This turns GitBook into a true
personalized developer documentation database &amp;ndash; one place to search through developer docs as well
as your own private notes.&lt;/p&gt;</description></item><item><title>Setting up a virtual router (pfSense on Proxmox)</title><link>https://victoronsoftware.com/posts/setting-up-a-virtual-router/</link><pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/setting-up-a-virtual-router/</guid><description>&lt;img src="https://victoronsoftware.com/posts/setting-up-a-virtual-router/cover.jpeg" alt="Featured image of post Setting up a virtual router (pfSense on Proxmox)" /&gt;&lt;p&gt;Traditionally, network routers used dedicated bare metal machines. However, in the last several years, we’ve seen a rise
in software-based routers that can be deployed either on bare metal, on a VM, or even on a container. This means these
virtual routers can be used to replace existing router software on an older router. They can run in the cloud. Or they
can be installed on do-it-yourself (DIY) hardware. A couple popular open source software-based routers are
&lt;a class="link" href="https://www.pfsense.org/" target="_blank" rel="noopener"
&gt;pfSense&lt;/a&gt; and &lt;a class="link" href="https://opnsense.org/" target="_blank" rel="noopener"
&gt;OPNsense&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-use-a-virtual-router"&gt;&lt;a href="#why-use-a-virtual-router" class="header-anchor"&gt;&lt;/a&gt;Why use a virtual router?
&lt;/h2&gt;&lt;p&gt;For one, these routers offer enterprise-level features such as build-in VPN support, traffic analysis, and extensive
diagnostics, among others. Another reason is that having a virtual router gives you the ability to experiment &amp;ndash; you can
install multiple routers on top of your hypervisor, and try all of them out. A third reason is that the virtual router
may be only one of many VMs that you run on your hardware. You can use the same piece of hardware to run a router, an
ad-blocking service, a media server, and other applications.&lt;/p&gt;
&lt;h2 id="advanced-virtual-router-installation-and-set-up"&gt;&lt;a href="#advanced-virtual-router-installation-and-set-up" class="header-anchor"&gt;&lt;/a&gt;Advanced virtual router installation and set up
&lt;/h2&gt;&lt;p&gt;When setting up our virtual router, we chose to use &lt;a class="link" href="https://pve.proxmox.com/wiki/PCI%28e%29_Passthrough" target="_blank" rel="noopener"
&gt;PCI Passthrough&lt;/a&gt;
to allow the virtual router direct access to the NIC hardware. Direct access to hardware improves the latency of our
internet traffic. In addition, we wanted our hypervisor to sit behind the router, and not be exposed to the public. This
reduces the attack surface for potential bad agents. However, routing hypervisor traffic through the router made our
setup a bit tricker. It is like the chicken or the egg dilemma &amp;ndash; how do you put your hypervisor behind the router when
the hypervisor is responsible for managing the router? Below is the approach we used when installing pfSense on top of
&lt;a class="link" href="https://www.proxmox.com/en/proxmox-virtual-environment/overview" target="_blank" rel="noopener"
&gt;Proxmox Virtual Environment (PVE)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the initial installation, we did not use PCI Passthrough and instead used a virtual network bridge (&lt;strong&gt;vmbr0&lt;/strong&gt;). We
configured the router VM to start on boot.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/setting-up-a-virtual-router/Virtual-Router-1.jpg"
alt="Initial virtual router configuration"&gt;&lt;figcaption&gt;
&lt;h4&gt;Initial virtual router configuration&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This allowed us to continue controlling the virtual router through the PVE web GUI. We set up the router and enabled
access to it through the serial interface, which we used in the next step. Then, we put the system into its final
configuration.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/setting-up-a-virtual-router/Virtual-Router-2.jpg"
alt="Final virtual router configuration"&gt;&lt;figcaption&gt;
&lt;h4&gt;Final virtual router configuration&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In order to finish configuring, we had to plug in a monitor and keyboard into our hardware. We accessed the virtual
router via the serial interface from the PVE command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;qm terminal &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We updated the WAN interface to use &lt;strong&gt;eth0&lt;/strong&gt;. At this point, the LAN interface &lt;strong&gt;eth1&lt;/strong&gt; had access to the internet.&lt;/p&gt;
&lt;p&gt;In addition, we added a second LAN interface for the network bridge (&lt;strong&gt;vmbr0&lt;/strong&gt;). We made sure firewall configurations
for both LAN interfaces were the same.&lt;/p&gt;
&lt;p&gt;Next, from the PVE command line, we updated the PVE IP and gateway to point at the router by modifying the following
files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/etc/network/interfaces
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/etc/hosts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After rebooting PVE, we had access to the internet and to the PVE Web GUI from our new LAN.&lt;/p&gt;
&lt;h2 id="updating-router-software"&gt;&lt;a href="#updating-router-software" class="header-anchor"&gt;&lt;/a&gt;Updating router software
&lt;/h2&gt;&lt;p&gt;Using a virtual router with PCI Passthrough creates a unique challenge when doing software updates. What if the new
version doesn’t work? What if you lose all internet access.&lt;/p&gt;
&lt;p&gt;We can mitigate potential issues. First, we recommend always making a backup of the router VM when upgrading. That way
we can easily roll back the change. Switching to a backup, however, requires keyboard and monitor access to your
hardware, since it must be done via the PVE command line.&lt;/p&gt;
&lt;p&gt;Another way to safely upgrade is to spin up a second VM running updated router software. The second VM can be either
from a backup or brand new. This VM should use virtual network bridges for its connections. Once it is properly
configured, we can stop the first router VM and switch the port connections to the second VM. This flow also requires
accessing the router via the serial interface to update the WAN/LAN interfaces.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we have been &lt;a class="link" href="../why-you-need-vlan/" &gt;setting up VLANs on our home network&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="setting-up-a-virtual-router-video"&gt;&lt;a href="#setting-up-a-virtual-router-video" class="header-anchor"&gt;&lt;/a&gt;Setting up a virtual router video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/uj_lB__QDTc"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;</description></item></channel></rss>