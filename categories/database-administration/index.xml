<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Database Administration on Victor on Software</title><link>https://victoronsoftware.com/categories/database-administration/</link><description>Recent content in Database Administration on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 06 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/categories/database-administration/index.xml" rel="self" type="application/rss+xml"/><item><title>Create a MySQL replica database in 4 short steps (2025)</title><link>https://victoronsoftware.com/posts/mysql-master-slave-replication/</link><pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mysql-master-slave-replication/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mysql-master-slave-replication/mysql-master-slave-replication.png" alt="Featured image of post Create a MySQL replica database in 4 short steps (2025)" /&gt;&lt;h2 id="introduction"&gt;&lt;a href="#introduction" class="header-anchor"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;&lt;p&gt;In this article, we will create a MySQL replica database. A MySQL replica is a read-only copy of the primary database,
which is kept in sync with the main database using MySQL replication threads.&lt;/p&gt;
&lt;p&gt;The steps we will follow are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class="link" href="#create-mysql-source-and-replica-databases" &gt;Spin up MySQL source and replica databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#create-db-user-for-replication" &gt;Create a user for replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#retrieve-source-binary-log-coordinates" &gt;Obtain source binary log coordinates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#configure-replica-and-start-replication" &gt;Configure replica DB and start replication&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To add a replica to an existing MySQL database, see the
&lt;a class="link" href="#copy-database-from-source-and-start-replication-manually" &gt;copy database from source and start replication manually&lt;/a&gt;
section.&lt;/p&gt;
&lt;h2 id="terminology-master-slave-vs-source-replica"&gt;&lt;a href="#terminology-master-slave-vs-source-replica" class="header-anchor"&gt;&lt;/a&gt;Terminology: master-slave vs source-replica
&lt;/h2&gt;&lt;p&gt;In database replication, the terms master-slave and source-replica are used interchangeably. In recent MySQL versions,
the term source-replica is preferred over master-slave due to its more neutral connotation. Many keywords and variables
in MySQL have recently been renamed to use neutral terms. We will use the terms source and replica in this article.&lt;/p&gt;
&lt;h2 id="what-is-database-replication"&gt;&lt;a href="#what-is-database-replication" class="header-anchor"&gt;&lt;/a&gt;What is database replication?
&lt;/h2&gt;&lt;p&gt;Database replication is a process that allows data from one database server (the source) to be copied to one or more
database servers (replicas). Replication is asynchronous, meaning the replica instance does not need to be connected to
the source constantly. The replica can catch up with the source when either becomes available.&lt;/p&gt;
&lt;p&gt;Database replicas are used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scaling read operations&lt;/li&gt;
&lt;li&gt;High availability&lt;/li&gt;
&lt;li&gt;Disaster recovery&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL implements replication using the binary log. The source server writes changes to the binary log, and the replica
server reads it and applies the changes to its database.&lt;/p&gt;
&lt;h2 id="create-mysql-source-and-replica-databases"&gt;&lt;a href="#create-mysql-source-and-replica-databases" class="header-anchor"&gt;&lt;/a&gt;Create MySQL source and replica databases
&lt;/h2&gt;&lt;p&gt;We will use Docker to create the MySQL source and replica databases. We will use the
&lt;a class="link" href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener"
&gt;official MySQL Docker image&lt;/a&gt;. The source database will run on port 3308, and the
replica database will run on port 3309. Both servers will have the database named &lt;code&gt;test&lt;/code&gt;. We tested these instructions
on MySQL 8.0.36, MySQL 8.4.3, and MySQL 9.1.0.&lt;/p&gt;
&lt;p&gt;We run &lt;code&gt;docker compose up&lt;/code&gt; using the following &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;script type="application/javascript" src="https://gist.github.com/getvictor/92ce5a8541ce27a1ea36f9eb7feb0344.js"&gt;&lt;/script&gt;
&lt;h2 id="create-db-user-for-replication"&gt;&lt;a href="#create-db-user-for-replication" class="header-anchor"&gt;&lt;/a&gt;Create a DB user for replication
&lt;/h2&gt;&lt;p&gt;Replication in MySQL requires a user with the
&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.4/en/privileges-provided.html#priv_replication-slave" target="_blank" rel="noopener"
&gt;&lt;code&gt;REPLICATION SLAVE&lt;/code&gt;&lt;/a&gt;
privilege. We will create a user named &lt;code&gt;replicator&lt;/code&gt; with the password &lt;code&gt;rotacilper&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Connect to the source database using the MySQL client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mysql --host 127.0.0.1 --port &lt;span style="color:#ae81ff"&gt;3308&lt;/span&gt; -uroot -ptoor
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create the &lt;code&gt;replicator&lt;/code&gt; user and grant the &lt;code&gt;REPLICATION SLAVE&lt;/code&gt; privilege:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;CREATE&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;USER&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;replicator&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;@&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;%&amp;#39;&lt;/span&gt; IDENTIFIED &lt;span style="color:#66d9ef"&gt;BY&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;rotacilper&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;GRANT&lt;/span&gt; REPLICATION SLAVE &lt;span style="color:#66d9ef"&gt;ON&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;.&lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;TO&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;replicator&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;@&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;%&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;FLUSH &lt;span style="color:#66d9ef"&gt;PRIVILEGES&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="retrieve-source-binary-log-coordinates"&gt;&lt;a href="#retrieve-source-binary-log-coordinates" class="header-anchor"&gt;&lt;/a&gt;Retrieve source binary log coordinates
&lt;/h2&gt;&lt;p&gt;For the replica server to start replication, it needs to know the source&amp;rsquo;s binary log file and position. We can obtain
this information using the MySQL client we opened in the previous step.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SHOW&lt;/span&gt; BINARY LOG STATUS;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In MySQL 8.0, use the &lt;code&gt;SHOW MASTER STATUS&lt;/code&gt; command instead of &lt;code&gt;SHOW BINARY LOG STATUS&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The output will look like this:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;+------------+----------+--------------+------------------+-------------------+
| File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |
+------------+----------+--------------+------------------+-------------------+
| bin.000003 | 862 | | | |
+------------+----------+--------------+------------------+-------------------+
1 row in set (0.01 sec)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We must remember the &lt;code&gt;File&lt;/code&gt; and &lt;code&gt;Position&lt;/code&gt; values for the next step.&lt;/p&gt;
&lt;h2 id="configure-replica-and-start-replication"&gt;&lt;a href="#configure-replica-and-start-replication" class="header-anchor"&gt;&lt;/a&gt;Configure replica DB and start replication
&lt;/h2&gt;&lt;p&gt;Now, we will connect to the replica database and configure it to replicate from the source database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mysql --host 127.0.0.1 --port &lt;span style="color:#ae81ff"&gt;3309&lt;/span&gt; -uroot -ptoor
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Use the &lt;code&gt;CHANGE REPLICATION SOURCE TO&lt;/code&gt; command to configure the replica to replicate from the source. Replace
&lt;code&gt;SOURCE_LOG_FILE&lt;/code&gt; and &lt;code&gt;SOURCE_LOG_POS&lt;/code&gt; with the values obtained in the previous step.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;CHANGE REPLICATION &lt;span style="color:#66d9ef"&gt;SOURCE&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;TO&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SOURCE_HOST&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;mysql_source&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SOURCE_PORT&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;3306&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SOURCE_USER&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;replicator&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SOURCE_PASSWORD&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;rotacilper&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SOURCE_LOG_FILE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#39;bin.000003&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; SOURCE_LOG_POS&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;862&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; GET_SOURCE_PUBLIC_KEY&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;SOURCE_HOST&lt;/code&gt; is the primary source&amp;rsquo;s hostname, which matches the docker service name. The &lt;code&gt;GET_SOURCE_PUBLIC_KEY&lt;/code&gt;
option is needed for &lt;code&gt;caching_sha2_password&lt;/code&gt; authentication.&lt;/p&gt;
&lt;p&gt;Finally, start the replica:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;START&lt;/span&gt; REPLICA;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The replica will now start cloning data from the source database. You can check the replication status using the
&lt;code&gt;SHOW REPLICA STATUS\G&lt;/code&gt; command. Use this command to check for errors if you suspect something is wrong.&lt;/p&gt;
&lt;p&gt;We can create a table with data on the source database and check if it is replicated to the replica database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;USE test;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;CREATE&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;TABLE&lt;/span&gt; users (id INT &lt;span style="color:#66d9ef"&gt;PRIMARY&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;KEY&lt;/span&gt;, name VARCHAR(&lt;span style="color:#ae81ff"&gt;255&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;INSERT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;INTO&lt;/span&gt; users &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt; (&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;Alice&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="restore-replication-after-an-issue"&gt;&lt;a href="#restore-replication-after-an-issue" class="header-anchor"&gt;&lt;/a&gt;Restore replication after an issue
&lt;/h2&gt;&lt;p&gt;If the replica crashes and comes back up, it may be unable to resume replication from where it left off. If the replica
stops replicating due to an error, first try to restart replication on the replica:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;STOP REPLICA;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;START&lt;/span&gt; REPLICA;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Check the replication status for errors using the &lt;code&gt;SHOW REPLICA STATUS\G&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;If the replica still does not replicate, we need to copy the database from the source and restart replication manually.&lt;/p&gt;
&lt;h3 id="copy-database-from-source-and-start-replication-manually"&gt;&lt;a href="#copy-database-from-source-and-start-replication-manually" class="header-anchor"&gt;&lt;/a&gt;Copy database from source and start replication manually
&lt;/h3&gt;&lt;p&gt;Reset the replica:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;STOP REPLICA;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;RESET&lt;/span&gt; REPLICA &lt;span style="color:#66d9ef"&gt;ALL&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Optionally, drop and recreate the database on the replica:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;DROP&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DATABASE&lt;/span&gt; test;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;CREATE&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DATABASE&lt;/span&gt; test;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the source database still has the binary log files around from the first time we set up replication, we can redo the
original steps using the same source log file and position. If not, we need to back up the source database and restore
it on the replica.&lt;/p&gt;
&lt;p&gt;Backup the source database (on port 3308 with database name &lt;code&gt;test&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bash &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;c&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;mysqldump --host 127.0.0.1 --port 3308 -uroot -ptoor test | gzip -&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; backup.&lt;span style="color:#66d9ef"&gt;sql&lt;/span&gt;.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Restore the backup on the replica database (on port 3309):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;bash &lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;c&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;gzip -dc - | mysql --host 127.0.0.1 --port 3308 -uroot -ptoor test&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;&lt;/span&gt; backup.&lt;span style="color:#66d9ef"&gt;sql&lt;/span&gt;.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, redo the following steps from above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#retrieve-source-binary-log-coordinates" &gt;Obtain source binary log coordinates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#configure-replica-and-start-replication" &gt;Configure replica DB and start replication&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, restarting replication after an issue can be more involved than just restarting the replica. Regular
backups can help in such situations. When backing up the source database, make sure to include the binary log files,
along with the corresponding binary log position. You can then use these files to restore or spin up a new replica while
the source database is actively running.&lt;/p&gt;
&lt;h2 id="further-reading-on-database-scaling"&gt;&lt;a href="#further-reading-on-database-scaling" class="header-anchor"&gt;&lt;/a&gt;Further reading on database scaling
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we wrote about &lt;a class="link" href="../database-gotchas-when-scaling-apps" &gt;database gotchas when scaling applications&lt;/a&gt;. One of
the issues we summarized was
&lt;a class="link" href="../mysql-query-performance-insert-subqueries" &gt;optimizing a MySQL INSERT with subqueries&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In the past, we encountered a
&lt;a class="link" href="../sql-prepared-statements-are-broken-when-scaling-applications" &gt;memory issue with MySQL prepared statements when scaling applications&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also wrote about &lt;a class="link" href="../secure-mysql-docker" &gt;securing your MySQL Docker container for Zero Trust&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="follow-along-with-the-mysql-source-replica-video"&gt;&lt;a href="#follow-along-with-the-mysql-source-replica-video" class="header-anchor"&gt;&lt;/a&gt;Follow along with the MySQL source-replica video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/mpCeatW4t_U"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to secure MySQL Docker container for Zero Trust</title><link>https://victoronsoftware.com/posts/secure-mysql-docker/</link><pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/secure-mysql-docker/</guid><description>&lt;img src="https://victoronsoftware.com/posts/secure-mysql-docker/mysql-docker-headline.png" alt="Featured image of post How to secure MySQL Docker container for Zero Trust" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#securing-database-secrets-with-docker-secrets" &gt;Securing database secrets with Docker secrets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#securing-database-secrets-with-sql-commands" &gt;Securing database secrets with SQL commands&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-a-zero-trust-development-environment"&gt;&lt;a href="#what-is-a-zero-trust-development-environment" class="header-anchor"&gt;&lt;/a&gt;What is a Zero Trust development environment?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://www.cloudflare.com/learning/security/glossary/what-is-zero-trust-security/" target="_blank" rel="noopener"
&gt;Zero Trust&lt;/a&gt; is a security model
that assumes no trust, even inside the network. Every request is authenticated, authorized, and encrypted in a Zero
Trust environment. This approach helps protect against data breaches and insider threats.&lt;/p&gt;
&lt;p&gt;In our example use case, we create a development environment in a cloud instance, which includes a MySQL database
running in a Docker container. We need to be able to access the MySQL database from our local machine for development
purposes. However, the database may contain sensitive data, such as API keys or user passwords. We want to secure the
MySQL database to prevent unauthorized access.&lt;/p&gt;
&lt;p&gt;We want to make sure that the MySQL database is not easily accessible from the internet. In addition, we want to limit
the exposure of database credentials.&lt;/p&gt;
&lt;h2 id="launching-mysql-docker-container"&gt;&lt;a href="#launching-mysql-docker-container" class="header-anchor"&gt;&lt;/a&gt;Launching MySQL Docker container
&lt;/h2&gt;&lt;p&gt;We can run a MySQL database in a Docker container using the
&lt;a class="link" href="https://hub.docker.com/_/mysql" target="_blank" rel="noopener"
&gt;official MySQL Docker image&lt;/a&gt;. We create &lt;code&gt;docker-compose.yml&lt;/code&gt; like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;mysql&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;mysql:8.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;command&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;mysqld&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;--datadir=/tmp/mysqldata&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;toor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_DATABASE&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;fleet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_USER&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;fleet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_PASSWORD&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;insecure&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#34;3306:3306&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And we run &lt;code&gt;docker-compose up&lt;/code&gt; to start the MySQL database.&lt;/p&gt;
&lt;p&gt;We can access the MySQL database by using the MySQL client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mysql -h 127.0.0.1 -P &lt;span style="color:#ae81ff"&gt;3306&lt;/span&gt; -uroot -ptoor
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see, the passwords are stored in plain text in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file. We want to avoid storing
sensitive data in plain text.&lt;/p&gt;
&lt;h2 id="securing-database-secrets-with-docker-secrets"&gt;&lt;a href="#securing-database-secrets-with-docker-secrets" class="header-anchor"&gt;&lt;/a&gt;Securing database secrets with Docker secrets
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://docs.docker.com/compose/use-secrets/" target="_blank" rel="noopener"
&gt;Docker secrets&lt;/a&gt; allow us to store sensitive data, such as passwords,
securely. We can create secrets and use them in the &lt;code&gt;docker-compose.yml&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;secrets&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;mysql_root_password&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;file&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;./mysql_root_password.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;mysql_password&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;MYSQL_PASSWORD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;mysql&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;mysql:8.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;command&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;mysqld&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;--datadir=/tmp/mysqldata&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;secrets&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;mysql_root_password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;mysql_password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_ROOT_PASSWORD_FILE&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;/run/secrets/mysql_root_password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_DATABASE&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;fleet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_USER&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;fleet&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_PASSWORD_FILE&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;/run/secrets/mysql_password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#34;3306:3306&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We create a &lt;code&gt;mysql_root_password.txt&lt;/code&gt; file and run &lt;code&gt;MYSQL_PASSWORD=insecure docker-compose up&lt;/code&gt; to start the MySQL
database.&lt;/p&gt;
&lt;p&gt;The above example shows that the MySQL root password is stored in a file, and the MySQL password is passed as an
environment variable. Although this approach may be an improvement, it is not secure for a Zero Trust environment. A
user with access to the file system can read the secrets, and environment variables can be read by anyone who can run
the &lt;code&gt;ps&lt;/code&gt; command, like: &lt;code&gt;ps eww &amp;lt;docker compose process ID&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In addition, a user can dump the secrets from the Docker container by running:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;docker exec &amp;lt;container ID&amp;gt; cat /run/secrets/mysql_root_password
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="securing-database-secrets-with-sql-commands"&gt;&lt;a href="#securing-database-secrets-with-sql-commands" class="header-anchor"&gt;&lt;/a&gt;Securing database secrets with SQL commands
&lt;/h2&gt;&lt;p&gt;To secure the MySQL database without exposing the secrets on the server, we can use MySQL commands to set the passwords.
We spin up MySQL with the following &lt;code&gt;docker-compose.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;mysql&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;mysql:8.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;command&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;mysqld&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;--datadir=/tmp/mysqldata&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;environment&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;toor&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;MYSQL_ONETIME_PASSWORD&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#34;3306:3306&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We set the root password and marked the root user as expired with &lt;code&gt;MYSQL_ONETIME_PASSWORD: true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, as the second step, we can run the following commands to set the passwords:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;echo \
&amp;#34;ALTER USER root IDENTIFIED BY &amp;#39;$(op read op://employee/DEMO_SERVER/MYSQL_ROOT_PASSWORD)&amp;#39;;&amp;#34; \
&amp;#34;CREATE DATABASE fleet;&amp;#34; \
&amp;#34;CREATE USER &amp;#39;fleet&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;$(op read op://employee/DEMO_SERVER/MYSQL_PASSWORD)&amp;#39;;&amp;#34; \
&amp;#34;GRANT ALL PRIVILEGES ON fleet.* TO &amp;#39;fleet&amp;#39;@&amp;#39;%&amp;#39;;&amp;#34; \
&amp;#34;FLUSH PRIVILEGES;&amp;#34; \
| mysql -h 127.0.0.1 -P 3306 -uroot -ptoor --connect-expired-password
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the above command, we use &lt;a class="link" href="https://support.1password.com/command-line/" target="_blank" rel="noopener"
&gt;1Password&lt;/a&gt; as our secrets manager. We read
the secrets from 1Password and pass them to the MySQL client to set the passwords.&lt;/p&gt;
&lt;h2 id="additional-security-considerations"&gt;&lt;a href="#additional-security-considerations" class="header-anchor"&gt;&lt;/a&gt;Additional security considerations
&lt;/h2&gt;&lt;p&gt;This article focused on securing the MySQL passwords. However, there are additional security considerations when running
MySQL in a Zero Trust environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encrypting sensitive data &amp;ndash; all sensitive data should be encrypted when stored in the database&lt;/li&gt;
&lt;li&gt;Limiting access to specific IPs &amp;ndash; we can add a server firewall to restrict access to the MySQL port&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we wrote about &lt;a class="link" href="../remote-development-environment" &gt;setting up a remote development environment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also explained &lt;a class="link" href="../get-args-from-stdin" &gt;how to use STDIN to read your program arguments&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve previously written about &lt;a class="link" href="../mysql-master-slave-replication" &gt;MySQL master-slave replication&lt;/a&gt;. You can use MySQL
replication to create a high-availability setup for your MySQL databases.&lt;/p&gt;
&lt;h2 id="watch-how-to-secure-a-mysql-docker-container-for-zero-trust"&gt;&lt;a href="#watch-how-to-secure-a-mysql-docker-container-for-zero-trust" class="header-anchor"&gt;&lt;/a&gt;Watch how to secure a MySQL Docker container for Zero Trust
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/GgEPIvFbnT0"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>3 database gotchas when building apps for scale</title><link>https://victoronsoftware.com/posts/database-gotchas-when-scaling-apps/</link><pubDate>Wed, 29 May 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/database-gotchas-when-scaling-apps/</guid><description>&lt;img src="https://victoronsoftware.com/posts/database-gotchas-when-scaling-apps/database-thumbnail.png" alt="Featured image of post 3 database gotchas when building apps for scale" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#excessive-database-locks" &gt;Excessive database locks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#read-after-write-consistency" &gt;Read-after-write consistency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#index-limitations" &gt;Index limitations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When building an application, the database is often an afterthought. The database used in a development environment
often contains limited data with little traffic. However, when the application is deployed to production, real-world
traffic can expose issues that were not caught in development or testing.&lt;/p&gt;
&lt;p&gt;In this article, we cover issues we ran into with our customers. We assume the production application is deployed with
one master and one or more read replicas. See this article on
&lt;a class="link" href="../mysql-master-slave-replication" &gt;creating a MySQL slave replica in dev environment&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="excessive-database-locks"&gt;&lt;a href="#excessive-database-locks" class="header-anchor"&gt;&lt;/a&gt;Excessive database locks
&lt;/h2&gt;&lt;p&gt;One write query can bring your database to its knees if it locks too many rows.&lt;/p&gt;
&lt;p&gt;Consider this simplified INSERT with a subquery transaction:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;INSERT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;INTO&lt;/span&gt; software_counts (host_id, &lt;span style="color:#66d9ef"&gt;count&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; host_id, &lt;span style="color:#66d9ef"&gt;COUNT&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;count&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; host_software
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;GROUP&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;BY&lt;/span&gt; host_software.host_id;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/database-gotchas-when-scaling-apps/simple-insert-with-subquery.svg"
alt="Simplified INSERT with a subquery"&gt;&lt;figcaption&gt;
&lt;h4&gt;Simplified INSERT with a subquery&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The above query scans the entire &lt;code&gt;host_software&lt;/code&gt; table index to create a count. While the database is doing the scan and
the INSERT, it locks the &lt;code&gt;host_software&lt;/code&gt; table, preventing other transactions from writing to that table. If the table
and insert are large, the query can hold the lock for a long time. In production, we saw a lock time of over 30 seconds,
creating a bottleneck and spiking DB resource usage.&lt;/p&gt;
&lt;p&gt;Pay special attention to the following queries, as they can cause performance issues:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;COUNT(*)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Using a non-indexed column, like &lt;code&gt;WHERE non_indexed_column = value&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Returning a large number of rows, like &lt;code&gt;SELECT * FROM table&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One way to solve the above performance issue is to separate the &lt;code&gt;SELECT&lt;/code&gt; and &lt;code&gt;INSERT&lt;/code&gt; queries. First, run the &lt;code&gt;SELECT&lt;/code&gt;
query on the replica to get the data, then run the &lt;code&gt;INSERT&lt;/code&gt; query on the master to insert the data. We completely
eliminate the lock since the read is done on the replica. This article goes through
&lt;a class="link" href=".../mysql-query-performance-insert-subqueries" &gt;a specific example of optimizing an INSERT with subqueries&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As general advice, avoid running &lt;code&gt;SELECT&lt;/code&gt; queries and subqueries on the master, especially if they scan the entire
table.&lt;/p&gt;
&lt;h2 id="read-after-write-consistency"&gt;&lt;a href="#read-after-write-consistency" class="header-anchor"&gt;&lt;/a&gt;Read-after-write consistency
&lt;/h2&gt;&lt;p&gt;When you write to the master and read from the replica, you might not see the data you wrote. The replica is not in sync
with the master in real time. In our production, the replica is usually less than 30 milliseconds behind the master.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/database-gotchas-when-scaling-apps/read-after-write-consistency.svg"
alt="Read-after-write database issue"&gt;&lt;figcaption&gt;
&lt;h4&gt;Read-after-write database issue&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;These issues are typically not caught in development since dev environments usually have one database instance. Unit or
integration tests might not even see these issues if they run on a single database instance. Even in testing or small
production environments, you might only see these issues if the replica sync time is high. Customers with large
deployments may be experiencing these consistency issues without the development team knowing about it.&lt;/p&gt;
&lt;p&gt;One way to solve this issue is to read from the master after writing to it. This way, you are guaranteed to see the data
you just wrote. In
&lt;a class="link" href="https://github.com/fleetdm/fleet/blob/b7aac2cfabf17fcb5142808fb80352113710ec5c/server/contexts/ctxdb/ctxdb.go#L17" target="_blank" rel="noopener"
&gt;our Go backend&lt;/a&gt;,
forcing reads from the master can be done by updating the &lt;code&gt;Context&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;ctxUsePrimary&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;ctxdb&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;RequirePrimary&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, additional master reads increase the load on the master, defeating the purpose of having a replica for read
scaling.&lt;/p&gt;
&lt;p&gt;In addition, what about expensive read queries, like &lt;code&gt;COUNT(*)&lt;/code&gt; and calculations, which we don&amp;rsquo;t want to run on the
master? In this case, we can wait for the replica to catch up with the master.&lt;/p&gt;
&lt;p&gt;One generic approach to waiting for the replica is to read the last written data from the replica and retry the read if
the data is not found. The app could check the &lt;code&gt;updated_at&lt;/code&gt; column to see if the data is recent. If the data is not
found, the app can sleep for a few milliseconds and retry the read. This approach is imperfect but a good compromise
between read consistency and performance.&lt;/p&gt;
&lt;p&gt;Note:
&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-syntax.html#:~:text=default%20precision%20is%200." target="_blank" rel="noopener"
&gt;The default precision of MySQL date and time data types is 1 second (0 fractional seconds)&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="index-limitations"&gt;&lt;a href="#index-limitations" class="header-anchor"&gt;&lt;/a&gt;Index limitations
&lt;/h2&gt;&lt;h3 id="what-are-sql-indexes"&gt;&lt;a href="#what-are-sql-indexes" class="header-anchor"&gt;&lt;/a&gt;What are SQL indexes?
&lt;/h3&gt;&lt;p&gt;Indexes are a way to optimize read queries. They are a data structure that improves the speed of data retrieval
operations on a database table at the cost of additional writes and storage space to maintain the index data structure.
Indexes are created using one or more database columns and are stored and sorted using a B-tree or a similar data
structure. The goal is to reduce the number of data comparisons needed to find the data.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/database-gotchas-when-scaling-apps/database-index.svg"
alt="Database index"&gt;&lt;figcaption&gt;
&lt;h4&gt;Database index&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Indexes are generally beneficial. They speed up read queries but slightly slow down write queries. Indexes can also be
large and take up a lot of disk space.&lt;/p&gt;
&lt;h3 id="index-size-is-limited"&gt;&lt;a href="#index-size-is-limited" class="header-anchor"&gt;&lt;/a&gt;Index size is limited
&lt;/h3&gt;&lt;p&gt;As the product grows with more features, the number of columns in a specific table can also increase. Sometimes, the new
columns need to be part of a unique index. However, the
&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/innodb-limits.html" target="_blank" rel="noopener"
&gt;maximum index size in MySQL is 3072 bytes&lt;/a&gt;. This limit can
be quickly reached if columns are of type &lt;code&gt;VARCHAR&lt;/code&gt; or &lt;code&gt;TEXT&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;CREATE&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;TABLE&lt;/span&gt; &lt;span style="color:#f92672"&gt;`&lt;/span&gt;activities&lt;span style="color:#f92672"&gt;`&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;`&lt;/span&gt;user_name&lt;span style="color:#f92672"&gt;`&lt;/span&gt; VARCHAR(&lt;span style="color:#ae81ff"&gt;255&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;NOT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One way to solve the issue of hitting the index size limit is to create a new column that makes the hash of the other
relevant column(s), and use that as the unique index. For example, in our backend
&lt;a class="link" href="https://github.com/fleetdm/fleet/blob/6f008b40f24bcd000c1450d7438be99d30c518c5/server/datastore/mysql/schema.sql#L1450" target="_blank" rel="noopener"
&gt;we use a &lt;code&gt;checksum&lt;/code&gt; column in the &lt;code&gt;software&lt;/code&gt; table to create a unique index for a software item&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="foreign-keys-may-cause-performance-issues"&gt;&lt;a href="#foreign-keys-may-cause-performance-issues" class="header-anchor"&gt;&lt;/a&gt;Foreign keys may cause performance issues
&lt;/h3&gt;&lt;p&gt;If a table has a foreign key, any insert, update, or delete with a constraint on the foreign key column will lock the
corresponding row in the parent table. This locking can lead to performance issues when&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the parent table is large&lt;/li&gt;
&lt;li&gt;the parent has many foreign key constraints&lt;/li&gt;
&lt;li&gt;the parent table or child tables are frequently updated&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The performance issue manifests as excessive lock wait times for queries. One way to solve this issue is to remove the
foreign key constraint. Instead, the application code can handle the data integrity checks that the foreign key
constraint provides. In our application, we run a regular clean-up job to remove orphaned child rows.&lt;/p&gt;
&lt;h2 id="bonus-database-gotchas"&gt;&lt;a href="#bonus-database-gotchas" class="header-anchor"&gt;&lt;/a&gt;Bonus database gotchas
&lt;/h2&gt;&lt;p&gt;Additional database gotchas that we have seen in production include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../sql-prepared-statements-are-broken-when-scaling-applications" &gt;Prepared statements consuming too much memory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mysql-upsert-deadlock" &gt;Deadlocks caused by using an UPDATE/INSERT upsert pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, we recently &lt;a class="link" href="../distributed-lock" &gt;solved a problem in production with distributed lock&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="3-database-gotchas-video"&gt;&lt;a href="#3-database-gotchas-video" class="header-anchor"&gt;&lt;/a&gt;3 database gotchas video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/N-wzNq-sEwo"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Optimize MySQL query performance: INSERT with subqueries</title><link>https://victoronsoftware.com/posts/mysql-query-performance-insert-subqueries/</link><pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mysql-query-performance-insert-subqueries/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mysql-query-performance-insert-subqueries/INSERT%20with%20subqueries.png" alt="Featured image of post Optimize MySQL query performance: INSERT with subqueries" /&gt;&lt;h2 id="introduction"&gt;&lt;a href="#introduction" class="header-anchor"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;&lt;p&gt;We recently encountered a performance issue in production. Once an hour, we saw a spike in average DB lock time, along with occasional deadlocks and server errors. We identified the problematic query using &lt;a class="link" href="https://aws.amazon.com/rds/" target="_blank" rel="noopener"
&gt;Amazon RDS&lt;/a&gt; logs. It was an &lt;code&gt;INSERT&lt;/code&gt; statement with subqueries.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;INSERT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;INTO&lt;/span&gt; policy_stats (policy_id, inherited_team_id, passing_host_count, failing_host_count)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.id,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t.id &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; inherited_team_id,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;COUNT&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; policy_membership pm
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;INNER&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;JOIN&lt;/span&gt; hosts h &lt;span style="color:#66d9ef"&gt;ON&lt;/span&gt; pm.host_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; h.id
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; pm.policy_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; p.id &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; pm.passes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; h.team_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; t.id
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ) &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; passing_host_count,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;COUNT&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; policy_membership pm
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;INNER&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;JOIN&lt;/span&gt; hosts h &lt;span style="color:#66d9ef"&gt;ON&lt;/span&gt; pm.host_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; h.id
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; pm.policy_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; p.id &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; pm.passes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; h.team_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; t.id
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ) &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; failing_host_count
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; policies p
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;CROSS&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;JOIN&lt;/span&gt; teams t
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; p.team_id &lt;span style="color:#66d9ef"&gt;IS&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;NULL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;GROUP&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;BY&lt;/span&gt; p.id, t.id
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;ON&lt;/span&gt; DUPLICATE &lt;span style="color:#66d9ef"&gt;KEY&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;UPDATE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; updated_at &lt;span style="color:#f92672"&gt;=&lt;/span&gt; NOW(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; passing_host_count &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt;(passing_host_count),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; failing_host_count &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt;(failing_host_count);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This statement calculated passing/failing results and inserted them into a &lt;code&gt;policy_stats&lt;/code&gt; summary table. Unfortunately, this query took over 30 seconds to execute. During this time, it locked the important &lt;code&gt;policy_membership&lt;/code&gt; table, preventing other threads from writing to it.&lt;/p&gt;
&lt;h2 id="reproducing-slow-sql-queries"&gt;&lt;a href="#reproducing-slow-sql-queries" class="header-anchor"&gt;&lt;/a&gt;Reproducing slow SQL queries
&lt;/h2&gt;&lt;p&gt;Since we saw the issue in production, we needed to reproduce it in a test environment. We created a similar schema and loaded it with data. We used a Go script to populate the tables with dummy data: &lt;a class="link" href="https://github.com/getvictor/mysql/blob/main/insert-with-subqueries-perf/main.go" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mysql/blob/main/insert-with-subqueries-perf/main.go&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Initially, we used ten policies and ten teams with 10,000 hosts each, resulting in 100 inserted rows with the above query. However, the performance was only three to six seconds. Then, we increased the number of policies to 50, resulting in 500 inserted rows. The performance dropped to 30 to 60 seconds.&lt;/p&gt;
&lt;p&gt;The above data made it clear that this query needed to be more scalable. As the &lt;code&gt;GROUP BY p.id, t.id&lt;/code&gt; clause demonstrates, performance exponentially degrades with the number of policies and teams.&lt;/p&gt;
&lt;h2 id="debugging-slow-sql-queries"&gt;&lt;a href="#debugging-slow-sql-queries" class="header-anchor"&gt;&lt;/a&gt;Debugging slow SQL queries
&lt;/h2&gt;&lt;p&gt;MySQL has powerful tools called &lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/explain.html" target="_blank" rel="noopener"
&gt;EXPLAIN&lt;/a&gt; and &lt;code&gt;EXPLAIN ANALYSE&lt;/code&gt;. These tools show how MySQL executes a query and help identify performance bottlenecks. We ran &lt;code&gt;EXPLAIN ANALYSE&lt;/code&gt; on the problematic query and viewed the results as a tree and a diagram.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/mysql-query-performance-insert-subqueries/mysql-explain-tree.png"
alt="MySQL EXPLAIN result in TREE format"&gt;&lt;figcaption&gt;
&lt;h4&gt;MySQL EXPLAIN result in TREE format&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;br&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/mysql-query-performance-insert-subqueries/mysql-explain-diagram.png"
alt="MySQL EXPLAIN result as a diagram"&gt;&lt;figcaption&gt;
&lt;h4&gt;MySQL EXPLAIN result as a diagram&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Although the &lt;code&gt;EXPLAIN&lt;/code&gt; output was complex, it was clear that the &lt;code&gt;SELECT&lt;/code&gt; subqueries were executing too many times.&lt;/p&gt;
&lt;h2 id="fixing-insert-with-subqueries-performance"&gt;&lt;a href="#fixing-insert-with-subqueries-performance" class="header-anchor"&gt;&lt;/a&gt;Fixing INSERT with subqueries performance
&lt;/h2&gt;&lt;p&gt;The first step was to separate the &lt;code&gt;INSERT&lt;/code&gt; from the &lt;code&gt;SELECT&lt;/code&gt;. The top &lt;code&gt;SELECT&lt;/code&gt; subquery took most of the time. But, more importantly, the &lt;code&gt;SELECT&lt;/code&gt; does not block other threads from updating the &lt;code&gt;policy_membership&lt;/code&gt; table.&lt;/p&gt;
&lt;p&gt;However, the single standalone &lt;code&gt;SELECT&lt;/code&gt; subquery was still slow. In addition, memory usage could be high for many teams and policies.&lt;/p&gt;
&lt;p&gt;We decided to process one policy row at a time. This reduced the time to complete an individual &lt;code&gt;SELECT&lt;/code&gt; query to less than two seconds and limited the memory usage. We did not use a transaction to minimize locks. Not utilizing a transaction meant that the &lt;code&gt;INSERT&lt;/code&gt; could fail if a parallel process deleted the policy. Also, the &lt;code&gt;INSERT&lt;/code&gt; could overwrite a clearing of the &lt;code&gt;policy_stats&lt;/code&gt; row. These drawbacks were acceptable, as they were rare cases.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; p.id &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; policy_id,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; t.id &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; inherited_team_id,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;COUNT&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; policy_membership pm
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;INNER&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;JOIN&lt;/span&gt; hosts h &lt;span style="color:#66d9ef"&gt;ON&lt;/span&gt; pm.host_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; h.id
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; pm.policy_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; p.id &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; pm.passes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; h.team_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; t.id
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ) &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; passing_host_count,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;COUNT&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; policy_membership pm
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;INNER&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;JOIN&lt;/span&gt; hosts h &lt;span style="color:#66d9ef"&gt;ON&lt;/span&gt; pm.host_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; h.id
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; pm.policy_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; p.id &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; pm.passes &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; h.team_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; t.id
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ) &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; failing_host_count
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; policies p
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;CROSS&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;JOIN&lt;/span&gt; teams t
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; p.team_id &lt;span style="color:#66d9ef"&gt;IS&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;NULL&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; p.id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;GROUP&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;BY&lt;/span&gt; t.id, p.id;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After each &lt;code&gt;SELECT&lt;/code&gt;, we inserted the results into the &lt;code&gt;policy_stats&lt;/code&gt; table.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;INSERT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;INTO&lt;/span&gt; policy_stats (policy_id, inherited_team_id, passing_host_count, failing_host_count)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt; (&lt;span style="color:#f92672"&gt;?&lt;/span&gt;, &lt;span style="color:#f92672"&gt;?&lt;/span&gt;, &lt;span style="color:#f92672"&gt;?&lt;/span&gt;, &lt;span style="color:#f92672"&gt;?&lt;/span&gt;), ...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;ON&lt;/span&gt; DUPLICATE &lt;span style="color:#66d9ef"&gt;KEY&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;UPDATE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; updated_at &lt;span style="color:#f92672"&gt;=&lt;/span&gt; NOW(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; passing_host_count &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt;(passing_host_count),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; failing_host_count &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt;(failing_host_count);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="further-reading-about-mysql"&gt;&lt;a href="#further-reading-about-mysql" class="header-anchor"&gt;&lt;/a&gt;Further reading about MySQL
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mysql-upsert-deadlock/" &gt;MySQL deadlock on UPDATE/INSERT upsert pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mysql-master-slave-replication/" &gt;Scaling DB performance using master slave replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../unicode-and-emoji-gotchas/" &gt;Fully supporting Unicode and emojis in your app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../sql-prepared-statements-are-broken-when-scaling-applications/" &gt;SQL prepared statements are broken when scaling applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mysql-code-to-populate-db-on-github"&gt;&lt;a href="#mysql-code-to-populate-db-on-github" class="header-anchor"&gt;&lt;/a&gt;MySQL code to populate DB on GitHub
&lt;/h2&gt;&lt;p&gt;The code to populate our test DB is available on GitHub at: &lt;a class="link" href="https://github.com/getvictor/mysql/tree/main/insert-with-subqueries-perf" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mysql/tree/main/insert-with-subqueries-perf&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mysql-query-performance-insert-with-subqueries-video"&gt;&lt;a href="#mysql-query-performance-insert-with-subqueries-video" class="header-anchor"&gt;&lt;/a&gt;MySQL query performance: INSERT with subqueries video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/9vulV3W-bp8"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>MySQL deadlock on UPDATE/INSERT upsert pattern</title><link>https://victoronsoftware.com/posts/mysql-upsert-deadlock/</link><pubDate>Sun, 28 Apr 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mysql-upsert-deadlock/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mysql-upsert-deadlock/MySQL%20deadlock.png" alt="Featured image of post MySQL deadlock on UPDATE/INSERT upsert pattern" /&gt;&lt;h2 id="what-is-an-sql-deadlock"&gt;&lt;a href="#what-is-an-sql-deadlock" class="header-anchor"&gt;&lt;/a&gt;What is an SQL deadlock?
&lt;/h2&gt;&lt;p&gt;A deadlock occurs when two or more SQL transactions are waiting for each other to release locks. This can occur when two transactions have locks on separate resources and each is waiting for the other to release its lock.&lt;/p&gt;
&lt;h2 id="what-is-an-upsert"&gt;&lt;a href="#what-is-an-upsert" class="header-anchor"&gt;&lt;/a&gt;What is an upsert?
&lt;/h2&gt;&lt;p&gt;An upsert combines the words &amp;ldquo;update&amp;rdquo; and &amp;ldquo;insert.&amp;rdquo; It is a database operation that inserts a new row into a table if the row does not exist or updates the row if it already exists.&lt;/p&gt;
&lt;h2 id="insertupdate-upsert-pattern"&gt;&lt;a href="#insertupdate-upsert-pattern" class="header-anchor"&gt;&lt;/a&gt;INSERT/UPDATE upsert pattern
&lt;/h2&gt;&lt;p&gt;One common way to implement an upsert operation in MySQL is to use the following pattern:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;UPDATE&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;table_name&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;SET&lt;/span&gt; column1 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; value1, column2 &lt;span style="color:#f92672"&gt;=&lt;/span&gt; value2 &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;-- If the UPDATE statement does not affect any rows, insert a new row:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;INSERT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;INTO&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;table_name&lt;/span&gt; (id, column1, column2) &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt; (&lt;span style="color:#f92672"&gt;?&lt;/span&gt;, value1, value2);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/update.html" target="_blank" rel="noopener"
&gt;UPDATE&lt;/a&gt; returns the number of rows that were actually changed.&lt;/p&gt;
&lt;p&gt;This UPDATE/INSERT pattern is optimized for frequent updates and rare inserts. However, it can lead to deadlocks when multiple transactions try to insert simultaneously.&lt;/p&gt;
&lt;h2 id="mysql-deadlock-example"&gt;&lt;a href="#mysql-deadlock-example" class="header-anchor"&gt;&lt;/a&gt;MySQL deadlock example
&lt;/h2&gt;&lt;p&gt;We assume the default transaction isolation level of &lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html#isolevel_repeatable-read" target="_blank" rel="noopener"
&gt;REPEATABLE READ&lt;/a&gt;. Given the following table with one row:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;CREATE&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;TABLE&lt;/span&gt; my_table (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; id int(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;) unsigned &lt;span style="color:#66d9ef"&gt;NOT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; amount int(&lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;) unsigned &lt;span style="color:#66d9ef"&gt;NOT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;PRIMARY&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;KEY&lt;/span&gt; (id)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;INSERT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;INTO&lt;/span&gt; my_table (id, amount) &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt; (&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One transaction executes the following SQL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;UPDATE&lt;/span&gt; my_table &lt;span style="color:#66d9ef"&gt;SET&lt;/span&gt; amount &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another transaction executes the following SQL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;UPDATE&lt;/span&gt; my_table &lt;span style="color:#66d9ef"&gt;SET&lt;/span&gt; amount &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;INSERT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;INTO&lt;/span&gt; my_table (id, amount) &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt; (&lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At this point, the second transaction is waiting for the first transaction to release the lock.&lt;/p&gt;
&lt;p&gt;The first transaction then executes the following SQL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;INSERT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;INTO&lt;/span&gt; my_table (id, amount) &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt; (&lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Causing a deadlock:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;[40001][1213] Deadlock found when trying to get lock; try restarting transaction
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="why-does-the-deadlock-occur"&gt;&lt;a href="#why-does-the-deadlock-occur" class="header-anchor"&gt;&lt;/a&gt;Why does the deadlock occur?
&lt;/h3&gt;&lt;p&gt;The deadlock occurs because both transactions set &lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html#innodb-next-key-locks" target="_blank" rel="noopener"
&gt;next-key locks&lt;/a&gt; on the rows they attempted to update. Since the rows they attempted to update did not exist, the lock is set on the &amp;ldquo;supremum&amp;rdquo; pseudo-record. This pseudo-record has a value higher than any value actually in the index. This lock prevents the other transaction from inserting the row it needs.&lt;/p&gt;
&lt;h2 id="debugging-mysql-deadlocks"&gt;&lt;a href="#debugging-mysql-deadlocks" class="header-anchor"&gt;&lt;/a&gt;Debugging MySQL deadlocks
&lt;/h2&gt;&lt;p&gt;To view the last deadlock detected by MySQL, you can use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SHOW&lt;/span&gt; ENGINE INNODB STATUS;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output will contain a section like this:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;------------------------
LATEST DETECTED DEADLOCK
------------------------
2024-04-28 12:29:17 281472351068032
*** (1) TRANSACTION:
TRANSACTION 1638819, ACTIVE 7 sec inserting
mysql tables in use 1, locked 1
LOCK WAIT 3 lock struct(s), heap size 1128, 2 row lock(s)
MySQL thread id 97926, OS thread handle 281471580295040, query id 24192112 192.168.65.1 root update
/* ApplicationName=DataGrip 2024.1 */ INSERT INTO my_table (id, amount) VALUES (3, 3)
*** (1) HOLDS THE LOCK(S):
RECORD LOCKS space id 158 page no 4 n bits 72 index PRIMARY of table `test`.`my_table` trx id 1638819 lock_mode X
Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0
0: len 8; hex 73757072656d756d; asc supremum;;
*** (1) WAITING FOR THIS LOCK TO BE GRANTED:
RECORD LOCKS space id 158 page no 4 n bits 72 index PRIMARY of table `test`.`my_table` trx id 1638819 lock_mode X insert intention waiting
Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0
0: len 8; hex 73757072656d756d; asc supremum;;
*** (2) TRANSACTION:
TRANSACTION 1638812, ACTIVE 13 sec inserting
mysql tables in use 1, locked 1
LOCK WAIT 3 lock struct(s), heap size 1128, 2 row lock(s)
MySQL thread id 97875, OS thread handle 281471585578880, query id 24192285 192.168.65.1 root update
/* ApplicationName=DataGrip 2024.1 */ INSERT INTO my_table (id, amount) VALUES (2, 2)
*** (2) HOLDS THE LOCK(S):
RECORD LOCKS space id 158 page no 4 n bits 72 index PRIMARY of table `test`.`my_table` trx id 1638812 lock_mode X
Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0
0: len 8; hex 73757072656d756d; asc supremum;;
*** (2) WAITING FOR THIS LOCK TO BE GRANTED:
RECORD LOCKS space id 158 page no 4 n bits 72 index PRIMARY of table `test`.`my_table` trx id 1638812 lock_mode X insert intention waiting
Record lock, heap no 1 PHYSICAL RECORD: n_fields 1; compact format; info bits 0
0: len 8; hex 73757072656d756d; asc supremum;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can see the supremum locks held by both transactions: &lt;code&gt; 0: len 8; hex 73757072656d756d; asc supremum;;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Another way to debug MySQL deadlocks is to enable the &lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_print_all_deadlocks" target="_blank" rel="noopener"
&gt;innodb_print_all_deadlocks&lt;/a&gt; option. This option prints all deadlocks to the error log.&lt;/p&gt;
&lt;h2 id="preventing-the-updateinsert-deadlock"&gt;&lt;a href="#preventing-the-updateinsert-deadlock" class="header-anchor"&gt;&lt;/a&gt;Preventing the UPDATE/INSERT deadlock
&lt;/h2&gt;&lt;p&gt;One way to prevent the deadlock is to use the &lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/insert-on-duplicate.html" target="_blank" rel="noopener"
&gt;INSERT &amp;hellip; ON DUPLICATE KEY UPDATE&lt;/a&gt; pattern. This syntax allows you to insert a new row or update an existing row in a single statement. However, it is slower than an UPDATE and always increments the auto-increment value if present.&lt;/p&gt;
&lt;p&gt;Another way is to roll back the transaction once we know that the UPDATE did not affect any rows. This avoids the deadlock by not holding the lock while we insert the new row. After the rollback, we can retry the transaction using the above &lt;code&gt;INSERT ... ON DUPLICATE KEY UPDATE&lt;/code&gt; pattern.&lt;/p&gt;
&lt;p&gt;A third way is not to use transactions. In this case, the locks are released immediately after the statement is executed. However, this approach may not be suitable for all use cases.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;&lt;a href="#conclusion" class="header-anchor"&gt;&lt;/a&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;The UPDATE/INSERT upsert pattern can lead to MySQL deadlocks when multiple transactions try to insert simultaneously. To prevent deadlocks, consider using the &lt;code&gt;INSERT ... ON DUPLICATE KEY UPDATE&lt;/code&gt; pattern, rolling back the transaction, or not using transactions.&lt;/p&gt;
&lt;h2 id="mysql-deadlock-on-updateinsert-upsert-pattern-video"&gt;&lt;a href="#mysql-deadlock-on-updateinsert-upsert-pattern-video" class="header-anchor"&gt;&lt;/a&gt;MySQL deadlock on UPDATE/INSERT upsert pattern video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/ADerRg7tzag"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id="other-articles-related-to-mysql"&gt;&lt;a href="#other-articles-related-to-mysql" class="header-anchor"&gt;&lt;/a&gt;Other articles related to MySQL
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mysql-query-performance-insert-subqueries/" &gt;Optimize MySQL query performance: INSERT with subqueries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mysql-master-slave-replication/" &gt;Master slave replication in MySQL&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../unicode-and-emoji-gotchas/" &gt;Fully supporting Unicode and emojis in your app&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../sql-prepared-statements-are-broken-when-scaling-applications/" &gt;SQL prepared statements are broken when scaling applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Fully supporting Unicode and emojis in your app</title><link>https://victoronsoftware.com/posts/unicode-and-emoji-gotchas/</link><pubDate>Thu, 29 Feb 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/unicode-and-emoji-gotchas/</guid><description>&lt;img src="https://victoronsoftware.com/posts/unicode-and-emoji-gotchas/unicode-emoji.png" alt="Featured image of post Fully supporting Unicode and emojis in your app" /&gt;&lt;h2 id="introduction"&gt;&lt;a href="#introduction" class="header-anchor"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;&lt;p&gt;Any app aiming to reach an international audience must support Unicode. Emojis, which are based on Unicode, are everywhere. They are used in text messages, social media, and programming languages. Supporting Unicode and emojis in your app can be tricky. This article will cover common Unicode and emoji support issues and how to fix them.&lt;/p&gt;
&lt;h2 id="what-is-unicode"&gt;&lt;a href="#what-is-unicode" class="header-anchor"&gt;&lt;/a&gt;What is Unicode?
&lt;/h2&gt;&lt;p&gt;Unicode is a standard for encoding, representing, and handling text. It is a character set that assigns a unique number to every character. The most common encoding for Unicode is UTF-8, which stands for Unicode Transformation Format 8-bit. UTF-8 is a variable-width encoding that can represent every character in the Unicode character set.&lt;/p&gt;
&lt;p&gt;UTF-8 format can take one to four bytes to represent a code point. Multiple code points can be combined to form a single character. For example, the emoji &amp;ldquo;👍&amp;rdquo; is represented by the code point &lt;code&gt;U+1F44D&lt;/code&gt;. In UTF-8, it is represented by the bytes &lt;code&gt;F0 9F 91 8D&lt;/code&gt;. The same emoji with skin tone &amp;ldquo;👍🏽&amp;rdquo; is represented by the code point &lt;code&gt;U+1F44D U+1F3FD&lt;/code&gt;. In UTF-8, that emoji is represented by the bytes &lt;code&gt;F0 9F 91 8D F0 9F 8F BD&lt;/code&gt;. Generally, emojis take up at least four bytes in UTF-8.&lt;/p&gt;
&lt;h2 id="unicode-equivalence"&gt;&lt;a href="#unicode-equivalence" class="header-anchor"&gt;&lt;/a&gt;Unicode equivalence
&lt;/h2&gt;&lt;p&gt;Our first gotcha is unicode equivalence.&lt;/p&gt;
&lt;p&gt;Unicode equivalence is the concept that two different sequences of code points can represent the same character. For example, the character &lt;code&gt;é&lt;/code&gt; can be represented by the code point &lt;code&gt;U+00E9&lt;/code&gt; or by the sequence of code points &lt;code&gt;U+0065 U+0301&lt;/code&gt;. The first representation is the composed form, and the second is the decomposed form. Unicode equivalence is essential when comparing strings or searching for a string character.&lt;/p&gt;
&lt;p&gt;Databases typically do not support Unicode equivalence out of the box. For example, given this table using MySQL 5.7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;CREATE&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;TABLE&lt;/span&gt; test (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; id INT UNSIGNED &lt;span style="color:#66d9ef"&gt;NOT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;NULL&lt;/span&gt; AUTO_INCREMENT,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; name VARCHAR(&lt;span style="color:#ae81ff"&gt;255&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;NOT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;PRIMARY&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;KEY&lt;/span&gt; (id))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CHARACTER &lt;span style="color:#66d9ef"&gt;SET&lt;/span&gt; utf8mb4 &lt;span style="color:#66d9ef"&gt;COLLATE&lt;/span&gt; utf8mb4_unicode_ci;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;INSERT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;INTO&lt;/span&gt; test (name) &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;가&amp;#39;&lt;/span&gt;), (CONCAT(&lt;span style="color:#e6db74"&gt;&amp;#39;ᄀ&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;ᅡ&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; test &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;가&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The query will return a single row, even though the Korean character &lt;code&gt;가&lt;/code&gt; and character sequence &lt;code&gt;ᄀ&lt;/code&gt; + &lt;code&gt;ᅡ&lt;/code&gt; are equivalent. The incorrect result is because the &lt;code&gt;utf8mb4_unicode_ci&lt;/code&gt; collation does not support Unicode equivalence. One way to fix this is to use the &lt;code&gt;utf8mb4_0900_ai_ci&lt;/code&gt; collation, which supports Unicode equivalence. However, this requires updating the database to MySQL 8.0 or later, which may not be possible in some cases.&lt;/p&gt;
&lt;h2 id="emoji-equivalence"&gt;&lt;a href="#emoji-equivalence" class="header-anchor"&gt;&lt;/a&gt;Emoji equivalence
&lt;/h2&gt;&lt;p&gt;Our second gotcha is emoji equivalence.&lt;/p&gt;
&lt;p&gt;Some databases may not support emoji equivalence out of the box. For example, given this table using MySQL 5.7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;CREATE&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;TABLE&lt;/span&gt; test (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; id INT UNSIGNED &lt;span style="color:#66d9ef"&gt;NOT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;NULL&lt;/span&gt; AUTO_INCREMENT,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; name VARCHAR(&lt;span style="color:#ae81ff"&gt;255&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;NOT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;PRIMARY&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;KEY&lt;/span&gt; (id))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CHARACTER &lt;span style="color:#66d9ef"&gt;SET&lt;/span&gt; utf8mb4 &lt;span style="color:#66d9ef"&gt;COLLATE&lt;/span&gt; utf8mb4_unicode_ci;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;INSERT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;INTO&lt;/span&gt; test (name) &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;🔥&amp;#39;&lt;/span&gt;), (&lt;span style="color:#e6db74"&gt;&amp;#39;🔥🔥&amp;#39;&lt;/span&gt;), (&lt;span style="color:#e6db74"&gt;&amp;#39;👍&amp;#39;&lt;/span&gt;), (&lt;span style="color:#e6db74"&gt;&amp;#39;👍🏽&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; test &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;🔥&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The query will return:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1,🔥
3,👍
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And the following query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; test &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; name &lt;span style="color:#66d9ef"&gt;LIKE&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;%🔥%&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Will return:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1,🔥
2,🔥🔥
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;utf8mb4_unicode_ci&lt;/code&gt; collation does not support emoji equivalence, and the behavior of &lt;code&gt;=&lt;/code&gt; differs from &lt;code&gt;LIKE.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;One way to fix the problem of emoji equivalence is to use a different collation during the &lt;code&gt;=&lt;/code&gt; comparison. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; test &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; name &lt;span style="color:#66d9ef"&gt;COLLATE&lt;/span&gt; utf8mb4_bin &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;🔥&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Will return the single correct result:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1,🔥
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, this solution is not ideal because it requires the developer to remember to use the &lt;code&gt;utf8mb4_bin&lt;/code&gt; collation for emoji equivalence. There is also a slight performance impact when using a different collation.&lt;/p&gt;
&lt;h2 id="case-insensitive-sorting"&gt;&lt;a href="#case-insensitive-sorting" class="header-anchor"&gt;&lt;/a&gt;Case-insensitive sorting
&lt;/h2&gt;&lt;p&gt;Our third gotcha is sorting.&lt;/p&gt;
&lt;p&gt;Typically, app users want to see case-insensitive sorting of strings. For example, the strings &amp;ldquo;apple&amp;rdquo;, &amp;ldquo;Banana&amp;rdquo;, and &amp;ldquo;cherry&amp;rdquo; should be sorted as &amp;ldquo;apple&amp;rdquo;, &amp;ldquo;Banana&amp;rdquo;, and &amp;ldquo;cherry&amp;rdquo;. The &lt;code&gt;utf8mb4_unicode_ci&lt;/code&gt; collation used above supports case-insensitive sorting. However, switching to another collation, such as &lt;code&gt;utf8mb4_bin&lt;/code&gt;, to support emoji equivalence will break case-insensitive sorting. Hence, whatever solution you develop for full Unicode support should also support case-insensitive sorting.&lt;/p&gt;
&lt;h2 id="solving-our-gotchas-with-normalization"&gt;&lt;a href="#solving-our-gotchas-with-normalization" class="header-anchor"&gt;&lt;/a&gt;Solving our gotchas with normalization
&lt;/h2&gt;&lt;p&gt;A partial solution to the above gotchas is to use normalization. Normalization is the process of transforming text into a standard form. Unicode defines four normalization forms: NFC, NFD, NFKC, and NFKD. The most common normalization form is NFC, which is the composed form. NFC is the standard form for most text processing.&lt;/p&gt;
&lt;p&gt;For example, in the following Go code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;golang.org/x/text/unicode/norm&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;strconv&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;str1&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strconv&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Unquote&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;`&amp;#34;\uAC00&amp;#34;`&lt;/span&gt;) &lt;span style="color:#75715e"&gt;// 가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;str2&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strconv&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Unquote&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;`&amp;#34;\u1100\u1161&amp;#34;`&lt;/span&gt;) &lt;span style="color:#75715e"&gt;// ᄀ + ᅡ&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;str1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;str2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;str1&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;str2&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;raw equal&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;raw not equal&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;strNorm1&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;norm&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NFC&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;str1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;strNorm2&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;norm&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NFC&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;str2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strNorm1&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strNorm2&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;normalized equal&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;normalized not equal&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The two strings are not equal in their raw form but equal after normalization. Normalizing before inserting, updating, and searching in the database can solve the Unicode equivalence issue while allowing the user to keep the case-insensitive sorting.&lt;/p&gt;
&lt;p&gt;To solve emoji equivalence, we can use the &lt;code&gt;utf8mb4_bin&lt;/code&gt; collation for the &lt;code&gt;=&lt;/code&gt; comparison. However, if our column is indexed, we may need to use the &lt;code&gt;utf8mb4_bin&lt;/code&gt; collation for the index. We cannot have a different collation for the column and the index, but we could use a second generated column with the &lt;code&gt;utf8mb4_bin&lt;/code&gt; collation and index that column.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;&lt;a href="#conclusion" class="header-anchor"&gt;&lt;/a&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Unicode and emoji support is essential for any app aiming to reach an international audience. Unicode equivalence, emoji equivalence, and case-insensitive sorting are common issues with Unicode and emoji support. Normalization can solve the Unicode equivalence issue while allowing the user to keep the case-insensitive sorting. Using the &lt;code&gt;utf8mb4_bin&lt;/code&gt; collation for the &lt;code&gt;=&lt;/code&gt; comparison can solve the emoji equivalence issue.&lt;/p&gt;
&lt;h2 id="fully-supporting-unicode-and-emojis-in-your-app-video"&gt;&lt;a href="#fully-supporting-unicode-and-emojis-in-your-app-video" class="header-anchor"&gt;&lt;/a&gt;Fully supporting Unicode and emojis in your app video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/u9jFFHifa0Q"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id="other-articles-related-to-mysql"&gt;&lt;a href="#other-articles-related-to-mysql" class="header-anchor"&gt;&lt;/a&gt;Other articles related to MySQL
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mysql-query-performance-insert-subqueries/" &gt;Optimize MySQL query performance: INSERT with subqueries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mysql-upsert-deadlock/" &gt;MySQL deadlock on UPDATE/INSERT upsert pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../sql-prepared-statements-are-broken-when-scaling-applications/" &gt;SQL prepared statements are broken when scaling applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>SQL prepared statements are broken when scaling applications</title><link>https://victoronsoftware.com/posts/sql-prepared-statements-are-broken-when-scaling-applications/</link><pubDate>Thu, 14 Dec 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/sql-prepared-statements-are-broken-when-scaling-applications/</guid><description>&lt;img src="https://victoronsoftware.com/posts/sql-prepared-statements-are-broken-when-scaling-applications/cover.png" alt="Featured image of post SQL prepared statements are broken when scaling applications" /&gt;&lt;p&gt;A prepared statement is a feature of modern databases intended to help execute the same SQL
statement multiple times. For example, the following statement is a prepared statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; id, name &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; users &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; email &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The presence of an unspecified parameter, labeled “?”, makes it a prepared statement. When a
prepared statement is sent to the database, it is compiled, optimized, and stored in memory on the
database server. Subsequently, the client application may execute the same prepared statement
multiple times with different parameter values. This results in a speedup.&lt;/p&gt;
&lt;p&gt;Prepared statements are well suited for long and complex queries that require significant
compilation and optimization times. They are kept prepared on the DB server, and the application
must only pass the parameters to execute them.&lt;/p&gt;
&lt;p&gt;Another benefit of using prepared statements is the protection they provide
against &lt;a class="link" href="https://owasp.org/www-community/attacks/SQL_Injection" target="_blank" rel="noopener"
&gt;SQL injection&lt;/a&gt;. The application does
not need to properly escape the parameter values provided to the statement. Because of this
protection, many experts recommend always using prepared statements for accessing the database.&lt;/p&gt;
&lt;p&gt;However, by always using prepared statements for accessing the database, we force the SQL driver to
send the extra prepare command for every ad-hoc statement we execute. The driver sends the following
commands:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prepare the statement&lt;/li&gt;
&lt;li&gt;Execute statement with given parameters&lt;/li&gt;
&lt;li&gt;Close the statement (and deallocate the prepared statement created above)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another issue with prepared statements is the memory requirement. In large application deployments
with large numbers of connections, prepared statements can crash your environment. This issue
happened to one of our customers.&lt;/p&gt;
&lt;p&gt;A prepared statement is only valid for a single session, which typically maps to a single database
connection. If the application runs multiple servers, with many connections, it may end up storing a
prepared statement for each one of those sessions.&lt;/p&gt;
&lt;p&gt;For example, given 100 servers with 100 connections each, we have 10,000 connections to the
database. Assuming a memory requirement of 50 KB per prepared statement (derived from the
following &lt;a class="link" href="https://blog.searce.com/how-max-prepared-stmt-count-bring-down-the-production-mysql-system-6ca28e577663" target="_blank" rel="noopener"
&gt;article&lt;/a&gt;),
we arrive at the maximum memory requirement of:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;10,000 * 50 KB = 500 MB per single saved prepared statement
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some databases also have limits on the number of prepared statements. MySQL’s
&lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/server-system-variables.html#sysvar_max_prepared_stmt_count" target="_blank" rel="noopener"
&gt;max_prepared_stmt_count&lt;/a&gt; defaults to 16,382 for the entire server. Yes, this is a global limit, and
&lt;strong&gt;not&lt;/strong&gt; per session. In the above example, if the application uses prepared statements for every
database access, then each database connection will always be using up 1 short-lived prepared
statement. A short-lived prepared statement is the prepared statement, as we described above, that
will be created for the purposes of executing one statement, and then immediately deallocated
afterwards. This means the above application running with a default MySQL config &lt;strong&gt;cannot explicitly
save any prepared statements&lt;/strong&gt; &amp;ndash; 10,000 transient prepared statements + 10,000 saved prepared
statements is greater than the max_prepared_stmt_count of 16,382.&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;extremely inconvenient&lt;/strong&gt; for application developers, because they must keep track of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The number of saved prepared statements they are using&lt;/li&gt;
&lt;li&gt;How many application servers are running&lt;/li&gt;
&lt;li&gt;How many database connections each server has&lt;/li&gt;
&lt;li&gt;The prepared statement limits of the database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This detail can easily be overlooked when scaling applications.&lt;/p&gt;
&lt;p&gt;In the end, is it really worth using prepared statements, and especially saved prepared statements, in your application? Yes, saved prepared statements can offer performance advantages, especially for complex queries executed frequently. However they must also be kept in check.&lt;/p&gt;
&lt;p&gt;A few ways to mitigate prepared statement issues for large application deployments include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Limit the number of database connections per application server&lt;/li&gt;
&lt;li&gt;Increase the prepared statement limit on the database server(s)&lt;/li&gt;
&lt;li&gt;Limit the maximum lifespan of connections. When closing a connection, the database will deallocate all prepared statements on that connection.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="sql-prepared-statements-are-broken-when-scaling-applications-video"&gt;&lt;a href="#sql-prepared-statements-are-broken-when-scaling-applications-video" class="header-anchor"&gt;&lt;/a&gt;SQL prepared statements are broken when scaling applications video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/JHoEKmNj8t8"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id="other-articles-related-to-mysql"&gt;&lt;a href="#other-articles-related-to-mysql" class="header-anchor"&gt;&lt;/a&gt;Other articles related to MySQL
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mysql-query-performance-insert-subqueries/" &gt;Optimize MySQL query performance: INSERT with subqueries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mysql-upsert-deadlock/" &gt;MySQL deadlock on UPDATE/INSERT upsert pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../unicode-and-emoji-gotchas/" &gt;Fully supporting Unicode and emojis in your app&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item></channel></rss>