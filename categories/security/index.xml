<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on Victor on Software</title><link>https://victoronsoftware.com/categories/security/</link><description>Recent content in Security on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/categories/security/index.xml" rel="self" type="application/rss+xml"/><item><title>mTLS vs HTTP signature faceoff: securing your APIs</title><link>https://victoronsoftware.com/posts/mtls-vs-http-signature/</link><pubDate>Sun, 06 Jul 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-vs-http-signature/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-vs-http-signature/mtls-vs-http-signature.png" alt="Featured image of post mTLS vs HTTP signature faceoff: securing your APIs" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#what-is-mtls" &gt;What is mTLS?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#mtls-pros-and-cons" &gt;mTLS: pros and cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#what-is-an-http-message-signature" &gt;What is an HTTP message signature?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#http-message-signature-pros-and-cons" &gt;HTTP message signature: pros and cons&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#performance-considerations" &gt;Performance Considerations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#what-about-replay-attacks" &gt;What about replay attacks?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#mtls-vs-http-message-signatures-choosing-the-right-tool" &gt;mTLS vs HTTP message signatures: choosing the right tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HTTP is the backbone of modern system communication. It lets your service confirm that it&amp;rsquo;s talking to the device you
enrolled, not some impostor. It helps your backend recognize a microservice, not a malicious bot. And when it comes to
protecting those channels, you&amp;rsquo;ve got two popular weapons: mTLS and HTTP Message Signatures.&lt;/p&gt;
&lt;p&gt;Both are powerful and secure, but they take radically different approaches. One is baked into the TLS handshake, tight
and deeply integrated. The other is explicit and flexible, wrapping your HTTP messages in cryptographic armor. This post
is a no-nonsense breakdown covering what they are, where they shine, and where they cause pain.&lt;/p&gt;
&lt;h2 id="what-is-mtls"&gt;&lt;a href="#what-is-mtls" class="header-anchor"&gt;&lt;/a&gt;What is mTLS?
&lt;/h2&gt;&lt;p&gt;In ordinary TLS (Transport Layer Security), only the server presents a certificate to the client. This way, the client
knows it is connecting to a legitimate server. In mutual TLS (mTLS), the client also presents a certificate to the
server so that the server can verify the client&amp;rsquo;s identity.&lt;/p&gt;
&lt;figure&gt;&lt;img src="../mtls-hello-world/mtls-handshake.png"
alt="Mutual TLS (mTLS) handshake diagram"&gt;
&lt;/figure&gt;
&lt;p&gt;mTLS is built into the TLS protocol (1.2 and 1.3) and is fast. The OS knows how to do it, and browsers know how to do
it. It&amp;rsquo;s also commonly used in internal service meshes, Kubernetes clusters, secure databases, and private APIs where
mutual authentication is required.&lt;/p&gt;
&lt;p&gt;We covered mTLS in greater detail in our &lt;a class="link" href="../mtls/" &gt;series on building an mTLS client using the system keystore&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="mtls-pros-and-cons"&gt;&lt;a href="#mtls-pros-and-cons" class="header-anchor"&gt;&lt;/a&gt;mTLS: pros and cons
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Built-in support across OSes, browsers, and web servers.&lt;/li&gt;
&lt;li&gt;Strong identity baked into the connection itself.&lt;/li&gt;
&lt;li&gt;No need to change application logic: TLS handles it.&lt;/li&gt;
&lt;li&gt;Integrates more broadly with native certificate stores (e.g., macOS Keychain), with more substantial support across
existing OS-level and browser-based applications. However, your specific application may still need to implement its
own integration to use these certificate stores.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hard to scope by endpoint. You either enforce mTLS on the whole server or not.&lt;/li&gt;
&lt;li&gt;Requires TLS termination at a layer that understands and enforces client authentication. For example, suppose a load
balancer terminates the TLS connection (which is standard practice). In that case, it must handle client certificate
verification and securely pass the authenticated identity to the downstream server.&lt;/li&gt;
&lt;li&gt;Not great for public APIs. Many clients (e.g., mobile apps, SDKs) don&amp;rsquo;t handle client certificates well, making mTLS
adoption difficult in heterogeneous environments&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-an-http-message-signature"&gt;&lt;a href="#what-is-an-http-message-signature" class="header-anchor"&gt;&lt;/a&gt;What is an HTTP message signature?
&lt;/h2&gt;&lt;p&gt;HTTP message signatures are precisely what they sound like: you take an HTTP request, select a few headers (or maybe the
body), and sign them with a private key. The server uses the corresponding public key to verify that the request came
from someone it trusts.&lt;/p&gt;
&lt;pre class="mermaid"&gt;
---
title: HTTP message signature
---
sequenceDiagram
autonumber
participant Client
participant Server
Client-&amp;gt;&amp;gt;Client: Generate or retrieve private key
Client-&amp;gt;&amp;gt;Client: Create HTTP request with required headers
Client-&amp;gt;&amp;gt;Client: Sign headers/body using private key
Client-&amp;gt;&amp;gt;Server: Send HTTP request with signature in header
Server-&amp;gt;&amp;gt;Server: Retrieve client&amp;#39;s public key
Server-&amp;gt;&amp;gt;Server: Extract signature and signed headers
Server-&amp;gt;&amp;gt;Server: Verify signature with public key
alt Signature valid
Server-&amp;gt;&amp;gt;Server: Process request
else Signature invalid
Server-&amp;gt;&amp;gt;Client: Reject request (401 Unauthorized)
end
&lt;/pre&gt;
&lt;p&gt;HTTP signing works at the application layer. It does not replace TLS, but rides on top of it. That means you don&amp;rsquo;t have
to worry about where TLS is terminated, and the HTTP signature can be verified at the ultimate destination server.&lt;/p&gt;
&lt;p&gt;Many legacy systems have used their own approaches to HTTP signing. Apple&amp;rsquo;s MDM protocol relies on a detached
&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc5652" target="_blank" rel="noopener"
&gt;CMS signature&lt;/a&gt; with a custom header, while GitHub uses HMAC-based
payload signing with a shared secret for webhooks. These mechanisms take different paths to the same goal: verifying the
integrity and origin of HTTP messages.&lt;/p&gt;
&lt;p&gt;Today, more modern systems are beginning to align with &lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc9421" target="_blank" rel="noopener"
&gt;RFC 9421&lt;/a&gt;, a
proposed IETF standard for HTTP message signatures. The ecosystem is gradually converging on a shared standard for
signed HTTP requests. A common standard is beneficial when you don&amp;rsquo;t control the client or want signature-level
auditability and control.&lt;/p&gt;
&lt;h2 id="http-message-signature-pros-and-cons"&gt;&lt;a href="#http-message-signature-pros-and-cons" class="header-anchor"&gt;&lt;/a&gt;HTTP message signature: pros and cons
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Pros&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fine-grained control: sign specific API paths, select which headers or body fields to include, and decide when to
apply signing based on context.&lt;/li&gt;
&lt;li&gt;Signature verification works independently of TLS termination, enabling integrity checks even after a load balancer or
proxy has terminated the TLS connection.&lt;/li&gt;
&lt;li&gt;Doesn&amp;rsquo;t require X.509 certificates: keys can be created/exchanged directly, avoiding certificate issuance and renewal
workflows. However, certificates can still be used if needed.&lt;/li&gt;
&lt;li&gt;Easier to debug: you can log and inspect the signature.&lt;/li&gt;
&lt;li&gt;Can integrate with system keystores (e.g., TPM) when supported by the client application.&lt;/li&gt;
&lt;li&gt;Signing/verification libraries for RFC 9421 are available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Cons&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You must integrate/create the signing logic instead of relying on the OS or framework.&lt;/li&gt;
&lt;li&gt;You must manage replay attacks with nonce and/or timestamp protection&lt;/li&gt;
&lt;li&gt;Choosing which headers to sign isn&amp;rsquo;t always obvious and can break interoperability. It can also break backward
compatibility if header selection changes across client or server updates.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="performance-considerations"&gt;&lt;a href="#performance-considerations" class="header-anchor"&gt;&lt;/a&gt;Performance Considerations
&lt;/h2&gt;&lt;p&gt;mTLS is fast. The authentication step happens once per connection during the TLS handshake, and it benefits from all the
TLS acceleration and session reuse magic that your OS and hardware provide.&lt;/p&gt;
&lt;p&gt;HTTP message signatures happen every time. Every request is signed. Every request is verified. You&amp;rsquo;re layering crypto on
top of crypto. That means more CPU cycles, especially if your implementation isn&amp;rsquo;t careful or you aren&amp;rsquo;t using the most
efficient algorithms, such as ECDSA P-256. Performance will take a hit if you canonicalize huge headers or sign things
unnecessarily.&lt;/p&gt;
&lt;p&gt;📌 &lt;strong&gt;Important caveat:&lt;/strong&gt; For most APIs, performance is dominated by network and I/O. Unless you operate at a very high
scale or on constrained devices, the performance difference between mTLS and HTTP signatures might be negligible.&lt;/p&gt;
&lt;h2 id="what-about-replay-attacks"&gt;&lt;a href="#what-about-replay-attacks" class="header-anchor"&gt;&lt;/a&gt;What about replay attacks?
&lt;/h2&gt;&lt;p&gt;A replay attack occurs when a bad actor captures a legitimate request and replays it later to trigger the same action
again, such as resubmitting a money transfer or resetting a password.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;mTLS&lt;/strong&gt; helps mitigate replay attacks by tying authentication to a specific TLS session. An attacker can&amp;rsquo;t simply
replay a captured request from another machine or session because they won&amp;rsquo;t have access to the client&amp;rsquo;s private key and
can&amp;rsquo;t establish a valid mTLS session. That said, mTLS alone does not prevent replays of application-layer data if an
attacker somehow gains access to an active session (extremely unlikely).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;HTTP message signatures&lt;/strong&gt; require you to build your own defenses. Because there&amp;rsquo;s no TLS session binding to a client
key, an attacker who captures a signed request can replay it from any machine. The attacker does not need the private
key, just the full request and its signature. That usually means you must include a &lt;code&gt;created&lt;/code&gt; timestamp and/or &lt;code&gt;nonce&lt;/code&gt;
in the signed headers and reject any request that&amp;rsquo;s too old or already used. One way to do that would be:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server checks that &lt;code&gt;created&lt;/code&gt; is within 10 minutes of current server time (since these fields are included in the
signature, we know they have not been tampered with)&lt;/li&gt;
&lt;li&gt;Server checks that the &lt;code&gt;nonce&lt;/code&gt; value has not been used within the last 10 minutes (nonce values can be cached with
expiration in ValKey or Redis)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mtls-vs-http-message-signatures-choosing-the-right-tool"&gt;&lt;a href="#mtls-vs-http-message-signatures-choosing-the-right-tool" class="header-anchor"&gt;&lt;/a&gt;mTLS vs HTTP message signatures: choosing the right tool
&lt;/h2&gt;&lt;p&gt;Here&amp;rsquo;s how they compare:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Feature&lt;/th&gt;
&lt;th&gt;mTLS&lt;/th&gt;
&lt;th&gt;HTTP Message Signature&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Identity verification&lt;/td&gt;
&lt;td&gt;🟢 OS-level with client certs&lt;/td&gt;
&lt;td&gt;🟡 App-level with public key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Integrity&lt;/td&gt;
&lt;td&gt;🟢 Built into TLS&lt;/td&gt;
&lt;td&gt;🟢 Signature over headers/body&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Granular control&lt;/td&gt;
&lt;td&gt;🔴 Hard to apply per route&lt;/td&gt;
&lt;td&gt;🟢 Easy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deployment complexity&lt;/td&gt;
&lt;td&gt;🔴 High (requires certs and mTLS-aware proxies)&lt;/td&gt;
&lt;td&gt;🟡 Moderate (TLS termination agnostic)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Public API suitability&lt;/td&gt;
&lt;td&gt;🔴 Poor (inconsistent client certs)&lt;/td&gt;
&lt;td&gt;🟢 Good (no client certs needed)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Certificate handling&lt;/td&gt;
&lt;td&gt;🔴 Requires full X.509 cert&lt;/td&gt;
&lt;td&gt;🟢 Supports raw public keys&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Integration support&lt;/td&gt;
&lt;td&gt;🟢 Strong OS/browser support&lt;/td&gt;
&lt;td&gt;🟡 App libraries available&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Replay protection&lt;/td&gt;
&lt;td&gt;🟡 Tied to TLS session&lt;/td&gt;
&lt;td&gt;🔴 Requires nonce and/or timestamp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Performance&lt;/td&gt;
&lt;td&gt;🟢 Fast (once per connection)&lt;/td&gt;
&lt;td&gt;🟡 Moderate (on every request with efficient algo)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Debuggability&lt;/td&gt;
&lt;td&gt;🔴 Opaque handshake&lt;/td&gt;
&lt;td&gt;🟢 Signature is visible&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;So, which one should you use?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;strong&gt;mTLS&lt;/strong&gt; when both ends are under your control. It is fast, OS-integrated, and well-supported for internal
services or environments with managed certificates.&lt;/li&gt;
&lt;li&gt;Use &lt;strong&gt;HTTP message signatures&lt;/strong&gt; when you need per-request control, flexible client support, or operate in ecosystems
where certificate management is impractical.&lt;/li&gt;
&lt;li&gt;If you value &lt;strong&gt;fine-grained control and debuggability&lt;/strong&gt;, HTTP signatures are a better fit 🟢.&lt;/li&gt;
&lt;li&gt;If you want &lt;strong&gt;high performance and strong identity with minimal app changes&lt;/strong&gt;, mTLS is the clear choice 🟢, as long as
you can handle the setup 🔴.&lt;/li&gt;
&lt;li&gt;In some architectures, &lt;strong&gt;combining both&lt;/strong&gt; may offer the best of both worlds: transport-level trust with
application-level verification.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Different tools for different jobs. Just don&amp;rsquo;t skip authentication.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../how-to-use-tpm/" &gt;Using TPM 2.0 for secure key storage&lt;/a&gt; Store private keys in hardware to protect API credentials,
signing keys, and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-compare-mtls-and-http-message-signatures"&gt;&lt;a href="#watch-us-compare-mtls-and-http-message-signatures" class="header-anchor"&gt;&lt;/a&gt;Watch us compare mTLS and HTTP message signatures
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/aDMdLCzXn1U"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to use TPM 2.0 to secure private keys</title><link>https://victoronsoftware.com/posts/how-to-use-tpm/</link><pubDate>Wed, 02 Jul 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/how-to-use-tpm/</guid><description>&lt;img src="https://victoronsoftware.com/posts/how-to-use-tpm/tpm-key-hierarchy-headline.png" alt="Featured image of post How to use TPM 2.0 to secure private keys" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#tpm-architecture" &gt;TPM architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#tpm-key-storage" &gt;TPM key storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#tpm-key-hierarchy-model" &gt;TPM key hierarchy model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#tpm-signing" &gt;TPM signing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Trusted Platform Module (TPM) is a secure cryptoprocessor for many security applications requiring strong device
identity, data protection, and platform integrity. Some uses include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device identity and attestation&lt;/li&gt;
&lt;li&gt;Secure boot&lt;/li&gt;
&lt;li&gt;Key storage&lt;/li&gt;
&lt;li&gt;Disk encryption&lt;/li&gt;
&lt;li&gt;Digital signatures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TPM 1.2 was standardized in 2009 as ISO/IEC 11889:2009. TPM 2.0, the most common today, came out in 2015 with the
&lt;a class="link" href="https://www.iso.org/standard/66510.html" target="_blank" rel="noopener"
&gt;ISO/IEC 11889:2015 standard&lt;/a&gt;. The link is for part 1 of the standard (out of
4).&lt;/p&gt;
&lt;p&gt;Although many people think of TPM as a hardware chip, it has many possible implementations. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A dedicated TPM chip&lt;/li&gt;
&lt;li&gt;Integrated TPM as part of another chip (e.g., an ARM-based SoC)&lt;/li&gt;
&lt;li&gt;Firmware TPMs (fTPMs) that run in the CPU&amp;rsquo;s trusted execution environment&lt;/li&gt;
&lt;li&gt;Virtual TPMs (vTPMs) are provided by hypervisors to provide security to virtual environments&lt;/li&gt;
&lt;li&gt;Software TPMs are emulators of TPMs. They are helpful for development purposes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article, we will focus on the use case of storing a private key in TPM 2.0.&lt;/p&gt;
&lt;h2 id="tpm-architecture"&gt;&lt;a href="#tpm-architecture" class="header-anchor"&gt;&lt;/a&gt;TPM architecture
&lt;/h2&gt;&lt;pre class="mermaid"&gt;
graph TD
subgraph TPM
subgraph Memory
VM[&amp;lt;b&amp;gt;Volatile Memory&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;Temporary keys, Sessions,&amp;lt;br/&amp;gt;Buffers]
NV[&amp;lt;b&amp;gt;Non-Volatile Memory&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;EK, SRK, Policies,&amp;lt;br/&amp;gt;NV indexes]
end
subgraph Crypto engine
CC[Cryptographic Coprocessor]
RNG[Random Number Generator]
KGEN[Key Generation Logic]
CC --&amp;gt;|Uses| RNG
KGEN --&amp;gt;|Uses| RNG
CC --&amp;gt;|Performs| ENC[Encryption/Decryption]
CC --&amp;gt;|Performs| SIG[Digital Signature / Hashing]
end
subgraph Control logic
PCR[&amp;#34;Platform Configuration&amp;lt;br/&amp;gt;Registers&amp;lt;br/&amp;gt;(PCRs)&amp;#34;]
MM[Command Processing&amp;lt;br/&amp;gt;Engine /&amp;lt;br/&amp;gt;State Machine]
end
end
style TPM fill:#5c2d91,stroke:#fff,stroke-width:2px,color:#fff
style CC fill:#1f4e79,stroke:#fff,color:#fff
style KGEN fill:#1f4e79,stroke:#fff,color:#fff
style RNG fill:#2e7d32,stroke:#fff,color:#fff
style NV fill:#5d4037,stroke:#fff,color:#fff
style VM fill:#5d4037,stroke:#fff,color:#fff
style PCR fill:#7b1fa2,stroke:#fff,color:#fff
style MM fill:#37474f,stroke:#fff,color:#fff
style ENC fill:#455a64,stroke:#fff,stroke-dasharray: 5 5,color:#fff
style SIG fill:#455a64,stroke:#fff,stroke-dasharray: 5 5,color:#fff
&lt;/pre&gt;
&lt;p&gt;This TPM architecture diagram illustrates the internal components of a Trusted Platform Module, highlighting its secure
cryptographic engine, non-volatile and volatile memory, and control subsystems. Key elements include the cryptographic
coprocessor, random number generator, and key generation logic, all operating within a hardware-isolated boundary. The
platform configuration registers (PCRs) and command processing engine manage system state and policy enforcement, while
non-volatile memory stores persistent keys and metadata. Non-volatile storage includes the Endorsement Key (EK), a
unique, factory-installed identity key, and the Storage Root Key (SRK), which anchors the TPM&amp;rsquo;s key hierarchy.&lt;/p&gt;
&lt;h2 id="tpm-key-storage"&gt;&lt;a href="#tpm-key-storage" class="header-anchor"&gt;&lt;/a&gt;TPM key storage
&lt;/h2&gt;&lt;p&gt;TPM defines four main authorization hierarchies, each rooted in a different seed and intended for various use cases:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hierarchy&lt;/th&gt;
&lt;th&gt;Seed Used&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Owner&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Storage Seed&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Storage keys, general-purpose keys&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Endorsement&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Endorsement Seed&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Identity, attestation (e.g. EK)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Platform&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Platform Seed&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Firmware-level trust &amp;amp; control&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Null&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(None)&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Ephemeral keys not tied to any seed&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Each hierarchy has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Its own &lt;strong&gt;seed&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Its own &lt;strong&gt;authorization policy&lt;/strong&gt; (e.g., owner password)&lt;/li&gt;
&lt;li&gt;Its own &lt;strong&gt;logical namespace&lt;/strong&gt; for creating keys&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will focus on the &lt;strong&gt;Owner&lt;/strong&gt; hierarchy.&lt;/p&gt;
&lt;p&gt;While TPMs are capable of securely storing cryptographic keys, most applications avoid storing keys directly in the TPM
in practice. This is because the amount of available non-volatile storage varies significantly between TPM models and is
often limited. Instead, keys are typically generated or loaded temporarily into the TPM or stored externally in
encrypted form and only used inside the TPM when needed.&lt;/p&gt;
&lt;h2 id="tpm-key-hierarchy-model"&gt;&lt;a href="#tpm-key-hierarchy-model" class="header-anchor"&gt;&lt;/a&gt;TPM key hierarchy model
&lt;/h2&gt;&lt;p&gt;In addition to the authorization hierarchies, the TPM organizes keys in a hierarchy. This model helps balance
performance, security, and the TPM&amp;rsquo;s limited storage.&lt;/p&gt;
&lt;p&gt;Storage Seed → Parent Key → Child Key&lt;/p&gt;
&lt;h3 id="storage-seed-owner"&gt;&lt;a href="#storage-seed-owner" class="header-anchor"&gt;&lt;/a&gt;Storage seed (Owner)
&lt;/h3&gt;&lt;p&gt;The seed is a non-exportable, hardware-internal value that acts as the TPM&amp;rsquo;s true root key. You can&amp;rsquo;t access it, but you
can use it indirectly. &lt;strong&gt;The storage seed cannot be modified.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="parent-key"&gt;&lt;a href="#parent-key" class="header-anchor"&gt;&lt;/a&gt;Parent key
&lt;/h3&gt;&lt;p&gt;Parent keys are stored persistently in TPM non-volatile memory or reloaded as needed. A parent key is any key used to
encrypt (wrap) one or more child keys. The parent key must be already loaded in the TPM to load/use any of its children.&lt;/p&gt;
&lt;p&gt;When creating a parent key, the TPM &lt;strong&gt;does not randomly generate&lt;/strong&gt; the key unless you explicitly ask it to. Instead, if
you provide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The same hierarchy (e.g., the Owner ties it to the storage seed)&lt;/li&gt;
&lt;li&gt;The same key template (same attributes, algorithms, policy)&lt;/li&gt;
&lt;li&gt;The same authorization (e.g., null password)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip; then the TPM will derive &lt;strong&gt;the exact same key&lt;/strong&gt; every time.&lt;/p&gt;
&lt;p&gt;The TPM uses a deterministic KDF (key derivation function). This determinism means the application does not need to
store the parent key explicitly. It can be recreated when needed.&lt;/p&gt;
&lt;h4 id="create-a-parent-key-example"&gt;&lt;a href="#create-a-parent-key-example" class="header-anchor"&gt;&lt;/a&gt;Create a parent key example
&lt;/h4&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/tpm2-software/tpm2-tools" target="_blank" rel="noopener"
&gt;tpm2-tools&lt;/a&gt; is the official CLI toolset for interacting with TPM 2.0 via
the TPM2 Software Stack (tss). Install it on Ubuntu/Debian like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt update
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install tpm2-tools
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;tpm2-tss&lt;/code&gt; should already be installed or pulled in as part of &lt;code&gt;tpm2-tools&lt;/code&gt; installation. You can check for these
libraries with: &lt;code&gt;dpkg -l | grep libtss2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To interact with the TPM device using &lt;code&gt;tpm2-tools&lt;/code&gt;, the user must either be root or a member of the &lt;code&gt;tss&lt;/code&gt; group, which
has access to &lt;code&gt;/dev/tpmrm0&lt;/code&gt;. To add the user to the &lt;code&gt;tss&lt;/code&gt; group, you can:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo usermod -aG tss $USER
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then &lt;strong&gt;log out and log back in&lt;/strong&gt; for the group change to take effect.&lt;/p&gt;
&lt;p&gt;Our examples use &lt;code&gt;tpm2-tools&lt;/code&gt; version 5.6. See
&lt;a class="link" href="https://tpm2-tools.readthedocs.io/en/latest/" target="_blank" rel="noopener"
&gt;the tpm2-tools documentation&lt;/a&gt; for details. To create a transient parent
key in TPM 2.0 using TSS (tpm2-tools) CLI, use the &lt;code&gt;tpm2_createprimary&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_createprimary &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --hierarchy&lt;span style="color:#f92672"&gt;=&lt;/span&gt;owner &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;rsa &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --hash-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;sha256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --attributes&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;fixedtpm|fixedparent|sensitivedataorigin|userwithauth|decrypt|restricted&amp;#34;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;parent.ctx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command creates the &lt;code&gt;parent.ctx&lt;/code&gt; context file, which can be used in later commands.&lt;/p&gt;
&lt;p&gt;Below is an equivalent example of creating the parent key using the &lt;a class="link" href="https://github.com/google/go-tpm" target="_blank" rel="noopener"
&gt;go-tpm&lt;/a&gt; library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create a parent key template with the required attributes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;parentTemplate&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New2B&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTPublic&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Type&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgRSA&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;NameAlg&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgSHA256&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ObjectAttributes&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAObject&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;FixedTPM&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// bound to TPM that created it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;FixedParent&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Required&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SensitiveDataOrigin&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// key material generated internally&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;UserWithAuth&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Required, even if we use nil password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Decrypt&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Allows key to be used for decryption/unwrapping&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Restricted&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Limits use to decryption of child keys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Parameters&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUPublicParms&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgRSA&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMSRSAParms&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;KeyBits&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Symmetric&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTSymDefObject&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Algorithm&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgAES&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;KeyBits&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUSymKeyBits&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgAES&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMKeyBits&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;128&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Mode&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUSymMode&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgAES&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgCFB&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;primaryKey&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CreatePrimary&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;PrimaryHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMRHOwner&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InPublic&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;parentTemplate&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;device&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="child-key"&gt;&lt;a href="#child-key" class="header-anchor"&gt;&lt;/a&gt;Child key
&lt;/h3&gt;&lt;p&gt;A &lt;strong&gt;child key&lt;/strong&gt; in TPM 2.0 is created &lt;strong&gt;under a parent key&lt;/strong&gt; (which must already exist or be loaded). The child key is
&lt;strong&gt;wrapped (encrypted)&lt;/strong&gt; by the parent key and is not usable on its own—it must be &lt;strong&gt;unwrapped (loaded)&lt;/strong&gt; by the TPM
using the correct parent key.&lt;/p&gt;
&lt;p&gt;To create a child ECC key using &lt;code&gt;tpm2-tools&lt;/code&gt;, use the &lt;code&gt;tpm2-create&lt;/code&gt; command, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_create &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --parent-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;parent.ctx &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ecc_nist_p256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --hash-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;sha256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --attributes&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;fixedtpm|fixedparent|sensitivedataorigin|userwithauth|sign|decrypt&amp;#34;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --public&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.pub &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --private&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.priv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command creates the &lt;code&gt;child.pub&lt;/code&gt; and &lt;code&gt;child.priv&lt;/code&gt; files which can be used in later commands.&lt;/p&gt;
&lt;p&gt;To load the child key into the TPM using &lt;code&gt;tpm2-tools&lt;/code&gt;, use the &lt;code&gt;tpm2_load&lt;/code&gt; command, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_load &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --parent-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;parent.ctx &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --public&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.pub &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --private&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.priv &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.ctx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command creates the &lt;code&gt;child.ctx&lt;/code&gt; context file which can be used later.&lt;/p&gt;
&lt;p&gt;Below is an equivalent example of creating the child key using the &lt;a class="link" href="https://github.com/google/go-tpm" target="_blank" rel="noopener"
&gt;go-tpm&lt;/a&gt; library,
loading the key into the TPM, and saving the context for subsequent reuse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create an ECC key template for the child key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;eccTemplate&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New2B&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTPublic&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Type&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgECC&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;NameAlg&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgSHA256&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ObjectAttributes&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAObject&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;FixedTPM&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;FixedParent&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SensitiveDataOrigin&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;UserWithAuth&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Required even if the password is nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SignEncrypt&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Decrypt&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Parameters&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUPublicParms&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgECC&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMSECCParms&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;CurveID&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;curveID&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create the key under the transient parent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;createKey&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Create&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ParentHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;parentKeyHandle&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InPublic&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;eccTemplate&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;device&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Load the key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;loadedKey&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Load&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ParentHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;parentKeyHandle&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InPrivate&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;createKey&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;OutPrivate&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InPublic&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;createKey&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;OutPublic&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;device&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Save the key context&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;keyContext&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ContextSave&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SaveHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;loadedKey&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ObjectHandle&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;device&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="-where-can-a-child-key-be-persisted"&gt;&lt;a href="#-where-can-a-child-key-be-persisted" class="header-anchor"&gt;&lt;/a&gt;📁 Where can a child key be persisted?
&lt;/h4&gt;&lt;p&gt;The most common approach is to persist the child keys outside the TPM.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You store the child&amp;rsquo;s public key and private key blob on a disk, in a secure database, or in a file system.&lt;/li&gt;
&lt;li&gt;When you need to use the key, you &lt;strong&gt;load it into the TPM&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This storage approach is safe because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The private key is always encrypted with the TPM&amp;rsquo;s parent key&lt;/li&gt;
&lt;li&gt;Only the correct TPM with the correct parent key can decrypt/use it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is also a de facto standard for
&lt;a class="link" href="https://www.hansenpartnership.com/draft-bottomley-tpm2-keys.html" target="_blank" rel="noopener"
&gt;storing TPM 2.0 key files using ASN.1 structure&lt;/a&gt;.
OpenConnect VPN and several other tools use this standard.&lt;/p&gt;
&lt;h2 id="tpm-signing"&gt;&lt;a href="#tpm-signing" class="header-anchor"&gt;&lt;/a&gt;TPM signing
&lt;/h2&gt;&lt;p&gt;TPM can sign data using the child key. The output signature is in raw binary.&lt;/p&gt;
&lt;p&gt;To sign using &lt;code&gt;tpm2-tools&lt;/code&gt;, use the &lt;code&gt;tpm2_sign&lt;/code&gt; command, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Create dummy data and a dummy digest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; data.in.raw
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat data.in.raw | openssl dgst -sha256 -binary &amp;gt; digest.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Sign the digest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_sign &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.ctx &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --hash-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;sha256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --digest &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --format&lt;span style="color:#f92672"&gt;=&lt;/span&gt;plain &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --signature&lt;span style="color:#f92672"&gt;=&lt;/span&gt;signature.plain digest.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Now we will verify the signature using openssl.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# First, we need the child public key in PEM format.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_readpublic &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --object-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.ctx &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --output&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.pem &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --format&lt;span style="color:#f92672"&gt;=&lt;/span&gt;pem
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Now, we can verify the signature.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl dgst &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -sha256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -verify&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.pem &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -keyform&lt;span style="color:#f92672"&gt;=&lt;/span&gt;pem &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -signature&lt;span style="color:#f92672"&gt;=&lt;/span&gt;signature.plain &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; data.in.raw
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Below is an example of signing using the &lt;a class="link" href="https://github.com/google/go-tpm" target="_blank" rel="noopener"
&gt;go-tpm&lt;/a&gt; library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;sign&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Sign&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;KeyHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;childKeyHandle&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Digest&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPM2BDigest&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Buffer&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InScheme&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTSigScheme&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Scheme&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgECDSA&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Details&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUSigScheme&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgECDSA&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMSSchemeHash&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;HashAlg&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;hashAlg&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Validation&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTTKHashCheck&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Tag&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMSTHashCheck&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sign&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tpm&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Get the ECDSA signature&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;ecdsaSig&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Signature&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Signature&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ECDSA&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../mtls-hello-world/" &gt;Mutual TLS intro and hands-on example: mTLS Hello World&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;A quick and practical
introduction to mutual TLS (mTLS), including how client certificate authentication works and how to try it with a
simple example.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../mtls-vs-http-signature/" &gt;Comparing mTLS and HTTP signatures&lt;/a&gt;&lt;/strong&gt; A practical guide to securing HTTP requests with
transport-layer or application-layer authentication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../why-you-need-vlan/" &gt;What is a VLAN and why you need it in your home network&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;Learn how VLANs isolate devices
to improve home network security and what you need to configure on your router, switch, and access points.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-the-explanation-of-securing-private-keys-with-tpm"&gt;&lt;a href="#watch-the-explanation-of-securing-private-keys-with-tpm" class="header-anchor"&gt;&lt;/a&gt;Watch the explanation of securing private keys with TPM
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/zwnznp5KeQs"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Secure private CDN content with CloudFront signed URLs</title><link>https://victoronsoftware.com/posts/cloudfront-signed-urls/</link><pubDate>Wed, 08 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/cloudfront-signed-urls/</guid><description>&lt;img src="https://victoronsoftware.com/posts/cloudfront-signed-urls/signed-url-headline.png" alt="Featured image of post Secure private CDN content with CloudFront signed URLs" /&gt;&lt;ol&gt;
&lt;li&gt;&lt;a class="link" href="#create-a-cloudfront-distribution" &gt;Create a CloudFront distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#create-a-cloudfront-key-pair-and-add-it-to-a-key-group" &gt;Create a CloudFront key pair and add it to a key group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#associate-the-key-group-with-the-cloudfront-distribution" &gt;Associate the key group with the CloudFront distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#generate-a-signed-url-using-aws-sdks" &gt;Generate a signed URL using AWS SDKs&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="what-is-cloudfront-cdn"&gt;&lt;a href="#what-is-cloudfront-cdn" class="header-anchor"&gt;&lt;/a&gt;What is CloudFront CDN?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://aws.amazon.com/cloudfront/" target="_blank" rel="noopener"
&gt;Amazon CloudFront&lt;/a&gt; is a content delivery network (CDN) service that securely
delivers data, videos, applications, and APIs to customers globally with low latency and high transfer speeds.
CloudFront is a popular choice for serving users worldwide with static assets, such as images, videos, and software
package files.&lt;/p&gt;
&lt;p&gt;CloudFront uses S3 buckets, EC2 instances, and other AWS resources as origins to cache and serve content. When a user
requests a file from a CloudFront distribution, CloudFront checks its cache for the file. If the file is not in the
cache, CloudFront retrieves it from the origin and caches it for future requests.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/cloudfront-signed-urls/users-requesting-from-cloudfront.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Users around the world requesting data from their local Cloudfront CDN cache&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="what-are-cloudfront-signed-urls"&gt;&lt;a href="#what-are-cloudfront-signed-urls" class="header-anchor"&gt;&lt;/a&gt;What are CloudFront signed URLs?
&lt;/h2&gt;&lt;p&gt;CloudFront signed URLs grant access to private content served by CloudFront. By default, CloudFront distributions are
public and serve content to anyone who requests it. However, your signed URLs can restrict access according to some of
the following rules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;source IP address&lt;/li&gt;
&lt;li&gt;begin access time and/or expiration time&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Signed URLs are helpful when you want to serve private content to specific users or for a limited time. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Serve paid content to customers who have purchased a subscription&lt;/li&gt;
&lt;li&gt;Share private documents with a specific group of users&lt;/li&gt;
&lt;li&gt;Provide temporary access to a file for a limited time&lt;/li&gt;
&lt;li&gt;Serve content to users without requiring them to log in&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A signed URL looks like a regular CloudFront URL but contains additional query parameters that specify the access
restrictions. Depending on the limits you apply, a signed URL may be quite lengthy.&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://d1nsa5964r3p4i.cloudfront.net/hello-world.txt?Expires=1736178766&amp;amp;Signature=HpcpyniNSBkS695mZhkZRjXo6UQ5JtXQ2sk0poLEMDMeF063IjsBj2O56rruzk3lomYFjqoxc3BdnFqEjrEXQSieSALiCufZ2LjTfWffs7f7qnNVZwlkg-upZd5KBfrCHSIyzMYSPhgWFPOpNRVqOc4NFXx8fxRLagK7NBKFAEfCAwo0~KMCSJiof0zWOdY0a8p0NNAbBn0uLqK7vZLwSttVpoK6ytWRaJlnemofWNvLaa~Et3p5wJJRfYGv73AK-pe4FMb8dc9vqGNSZaDAqw2SOdXrLhrpvSMjNmMO3OvTcGS9hVHMtJvBmgqvCMAWmHBK6v5C9BobSh4TCNLIuA__&amp;amp;Key-Pair-Id=K1HFGXOMBB6TFF" target="_blank" rel="noopener"
&gt;https://d1nsa5964r3p4i.cloudfront.net/hello-world.txt?Expires=1736178766&amp;Signature=HpcpyniNSBkS695mZhkZRjXo6UQ5JtXQ2sk0poLEMDMeF063IjsBj2O56rruzk3lomYFjqoxc3BdnFqEjrEXQSieSALiCufZ2LjTfWffs7f7qnNVZwlkg-upZd5KBfrCHSIyzMYSPhgWFPOpNRVqOc4NFXx8fxRLagK7NBKFAEfCAwo0~KMCSJiof0zWOdY0a8p0NNAbBn0uLqK7vZLwSttVpoK6ytWRaJlnemofWNvLaa~Et3p5wJJRfYGv73AK-pe4FMb8dc9vqGNSZaDAqw2SOdXrLhrpvSMjNmMO3OvTcGS9hVHMtJvBmgqvCMAWmHBK6v5C9BobSh4TCNLIuA__&amp;Key-Pair-Id=K1HFGXOMBB6TFF&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="how-to-create-cloudfront-signed-urls"&gt;&lt;a href="#how-to-create-cloudfront-signed-urls" class="header-anchor"&gt;&lt;/a&gt;How to create CloudFront signed URLs
&lt;/h2&gt;&lt;p&gt;You must have an AWS account and an S3 bucket with private content as a prerequisite.&lt;/p&gt;
&lt;h3 id="create-a-cloudfront-distribution"&gt;&lt;a href="#create-a-cloudfront-distribution" class="header-anchor"&gt;&lt;/a&gt;Create a CloudFront distribution
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Open the &lt;a class="link" href="https://console.aws.amazon.com/cloudfront/" target="_blank" rel="noopener"
&gt;CloudFront console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Choose &lt;strong&gt;Create Distribution&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Origin domain&lt;/strong&gt; section, choose your S3 bucket as the origin.
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/cloudfront-signed-urls/create-cloudfront-distribution.png"&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Origin access&lt;/strong&gt; section, select &lt;strong&gt;Origin access control settings (recommended)&lt;/strong&gt; and click &lt;strong&gt;Create new
OAC&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Create new OAC&lt;/strong&gt; modal, click &lt;strong&gt;Create&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Choose one option in the &lt;strong&gt;WebApplication Firewall (WAF)&lt;/strong&gt; section.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create Distribution&lt;/strong&gt; to create the CloudFront distribution.&lt;/li&gt;
&lt;li&gt;In the yellow &lt;strong&gt;The S3 bucket policy needs to be updated&lt;/strong&gt; banner, click &lt;strong&gt;Copy policy&lt;/strong&gt; and then click &lt;strong&gt;Go to S3
bucket permissions to update policy&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Under bucket &lt;strong&gt;Permissions&lt;/strong&gt; &amp;gt; &lt;strong&gt;Bucket policy&lt;/strong&gt;, click &lt;strong&gt;Edit&lt;/strong&gt; and paste the copied policy.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Save changes&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Back in the CloudFront console, wait for the distribution to deploy. When the distribution is done deploying, the
&lt;strong&gt;Last modified&lt;/strong&gt; column will change from &lt;strong&gt;Deploying&lt;/strong&gt; to a date and time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;At this point, the CloudFront distribution will serve content from the S3 bucket to anyone who requests it. Signed URLs
do NOT protect it until we set them up in the following steps. Test the distribution by accessing a file using the
CloudFront URL.&lt;/p&gt;
&lt;h3 id="create-a-cloudfront-key-pair-and-add-it-to-a-key-group"&gt;&lt;a href="#create-a-cloudfront-key-pair-and-add-it-to-a-key-group" class="header-anchor"&gt;&lt;/a&gt;Create a CloudFront key pair and add it to a key group
&lt;/h3&gt;&lt;p&gt;The recommended method for signing URLs is using trusted key groups. A key group is a collection of public keys that
CloudFront uses to verify signed URLs.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use OpenSSL to generate a private key and a public key:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out private_key.pem &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl rsa -pubout -in private_key.pem -out public_key.pem
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="2"&gt;
&lt;li&gt;Open the &lt;a class="link" href="https://console.aws.amazon.com/cloudfront/" target="_blank" rel="noopener"
&gt;CloudFront console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In the side menu, choose &lt;strong&gt;Key management&lt;/strong&gt; &amp;gt; &lt;strong&gt;Public keys&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create public key&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Enter a name for the key, paste the contents of the &lt;code&gt;public_key.pem&lt;/code&gt; file, and click &lt;strong&gt;Create public key&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Remember the key ID for a later step.&lt;/li&gt;
&lt;li&gt;In the CloudFront side menu, choose &lt;strong&gt;Key management&lt;/strong&gt; &amp;gt; &lt;strong&gt;Key groups&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Create key group&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Enter a name for the key group, select the public key you created, and click &lt;strong&gt;Create key group&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="associate-the-key-group-with-the-cloudfront-distribution"&gt;&lt;a href="#associate-the-key-group-with-the-cloudfront-distribution" class="header-anchor"&gt;&lt;/a&gt;Associate the key group with the CloudFront distribution
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Open the &lt;a class="link" href="https://console.aws.amazon.com/cloudfront/" target="_blank" rel="noopener"
&gt;CloudFront console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Click on the CloudFront distribution you created.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Behaviors&lt;/strong&gt; tab, select a behavior and click &lt;strong&gt;Edit&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;In the &lt;strong&gt;Restrict viewer access&lt;/strong&gt; section, select &lt;strong&gt;Yes&lt;/strong&gt;, choose the key group you created, and &lt;strong&gt;Save changes&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, the CloudFront URL will only serve content to users using a signed URL with the private key. Accessing content
without a signed URL will result in an access denied 403 error.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;Error&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;Code&amp;gt;&lt;/span&gt;MissingKey&lt;span style="color:#f92672"&gt;&amp;lt;/Code&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;Message&amp;gt;&lt;/span&gt;Missing Key-Pair-Id query parameter or cookie value&lt;span style="color:#f92672"&gt;&amp;lt;/Message&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/Error&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="generate-a-signed-url-using-aws-sdks"&gt;&lt;a href="#generate-a-signed-url-using-aws-sdks" class="header-anchor"&gt;&lt;/a&gt;Generate a signed URL using AWS SDKs
&lt;/h3&gt;&lt;p&gt;You can generate signed URLs using the AWS SDKs for various programming languages. Amazon provides
&lt;a class="link" href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html#private-content-overview-sample-code" target="_blank" rel="noopener"
&gt;examples for several languages&lt;/a&gt;.
We will show an example using the Go SDK.&lt;/p&gt;
&lt;p&gt;In a new directory, create a Go project and add the AWS SDK as a dependency:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go mod init cloudfront-signed-urls
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go get github.com/aws/aws-sdk-go-v2/feature/cloudfront/sign@v1.8.3
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Copy the &lt;code&gt;private_key.pem&lt;/code&gt; file to the project directory and create a new Go file with the following code:&lt;/p&gt;
&lt;script type="application/javascript" src="https://gist.github.com/getvictor/7ace01fbf8ef160517cd6cd74a551b20.js"&gt;&lt;/script&gt;
&lt;p&gt;Run the Go program to generate a signed URL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2025/01/06 08:52:46 Signed URL: https://d1nsa5964r3p4i.cloudfront.net/hello-world.txt?Expires&lt;span style="color:#f92672"&gt;=&lt;/span&gt;1736178766&amp;amp;Signature&lt;span style="color:#f92672"&gt;=&lt;/span&gt;HpcpyniNSBkS695mZhkZRjXo6UQ5JtXQ2sk0poLEMDMeF063IjsBj2O56rruzk3lomYFjqoxc3BdnFqEjrEXQSieSALiCufZ2LjTfWffs7f7qnNVZwlkg-upZd5KBfrCHSIyzMYSPhgWFPOpNRVqOc4NFXx8fxRLagK7NBKFAEfCAwo0~KMCSJiof0zWOdY0a8p0NNAbBn0uLqK7vZLwSttVpoK6ytWRaJlnemofWNvLaa~Et3p5wJJRfYGv73AK-pe4FMb8dc9vqGNSZaDAqw2SOdXrLhrpvSMjNmMO3OvTcGS9hVHMtJvBmgqvCMAWmHBK6v5C9BobSh4TCNLIuA__&amp;amp;Key-Pair-Id&lt;span style="color:#f92672"&gt;=&lt;/span&gt;K1HFGXOMBB6TFF
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The signed URL will expire in 1 hour.&lt;/p&gt;
&lt;h2 id="potential-issues"&gt;&lt;a href="#potential-issues" class="header-anchor"&gt;&lt;/a&gt;Potential issues
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Server side encryption (SSE) may be an issue.
&lt;a class="link" href="https://arpadt.com/articles/kms-encrypted-objects-via-cloudfront#32-sse-kms" target="_blank" rel="noopener"
&gt;AWS-managed KMS keys are not supported by CloudFront&lt;/a&gt;.
One solution is to switch to a customer-managed KMS key.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we explained &lt;a class="link" href="../macos-launchd-agents-and-daemons/" &gt;launchd agents and daemons on macOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Previously, we &lt;a class="link" href="../remote-development-environment/" &gt;set up a remote development environment for our web app&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-start-using-cloudfront-signed-urls"&gt;&lt;a href="#watch-how-to-start-using-cloudfront-signed-urls" class="header-anchor"&gt;&lt;/a&gt;Watch how to start using CloudFront signed URLs
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/RzTZExHie88"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Why you should use STDIN to read your program arguments</title><link>https://victoronsoftware.com/posts/get-args-from-stdin/</link><pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/get-args-from-stdin/</guid><description>&lt;img src="https://victoronsoftware.com/posts/get-args-from-stdin/stdin-headline.png" alt="Featured image of post Why you should use STDIN to read your program arguments" /&gt;&lt;h2 id="stdin-is-more-secure-than-environment-variables-or-command-line-arguments"&gt;&lt;a href="#stdin-is-more-secure-than-environment-variables-or-command-line-arguments" class="header-anchor"&gt;&lt;/a&gt;STDIN is more secure than environment variables or command-line arguments
&lt;/h2&gt;&lt;p&gt;When you pass command-line arguments to a program, they are visible to anyone who can run the &lt;code&gt;ps&lt;/code&gt; command. Allowing others to read arguments is a security risk if the arguments contain sensitive information like passwords or API keys.&lt;/p&gt;
&lt;p&gt;Environment variables are also visible to anyone who can run the &lt;code&gt;ps&lt;/code&gt; command. They are also globally visible to the program, so any arbitrary code in your application can extract the environment variables.&lt;/p&gt;
&lt;p&gt;To get the environment variables of a process, run &lt;code&gt;ps eww &amp;lt;PID&amp;gt;&lt;/code&gt;. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ps eww &lt;span style="color:#ae81ff"&gt;1710&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PID TTY STAT TIME COMMAND
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;1710&lt;/span&gt; pts/0 Ss+ 0:00 bash SYSTEMD_EXEC_PID&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1209&lt;/span&gt; SSH_AUTH_SOCK&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/run/user/1000/keyring/ssh SESSION_MANAGER&lt;span style="color:#f92672"&gt;=&lt;/span&gt;local/victor-ubuntu:@/tmp/.ICE-unix/1176,unix/victor-ubuntu:/tmp/.ICE-unix/1176 GNOME_TERMINAL_SCREEN&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/org/gnome/Terminal/screen/ab0b9d6a_a699_4bc5_bb53_628be016afa5 LANG&lt;span style="color:#f92672"&gt;=&lt;/span&gt;en_US.UTF-8 XDG_CURRENT_DESKTOP&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ubuntu:GNOME PWD&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/home/victor WAYLAND_DISPLAY&lt;span style="color:#f92672"&gt;=&lt;/span&gt;wayland-0 DISPLAY&lt;span style="color:#f92672"&gt;=&lt;/span&gt;:0 QT_IM_MODULE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ibus USER&lt;span style="color:#f92672"&gt;=&lt;/span&gt;victor DESKTOP_SESSION&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ubuntu XDG_MENU_PREFIX&lt;span style="color:#f92672"&gt;=&lt;/span&gt;gnome- HOME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/home/victor DBUS_SESSION_BUS_ADDRESS&lt;span style="color:#f92672"&gt;=&lt;/span&gt;unix:path&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/run/user/1000/bus SSH_AGENT_LAUNCHER&lt;span style="color:#f92672"&gt;=&lt;/span&gt;gnome-keyring _&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr/bin/gnome-session XDG_CONFIG_DIRS&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/etc/xdg/xdg-ubuntu:/etc/xdg VTE_VERSION&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;6800&lt;/span&gt; XDG_SESSION_DESKTOP&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ubuntu QT_ACCESSIBILITY&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; GNOME_DESKTOP_SESSION_ID&lt;span style="color:#f92672"&gt;=&lt;/span&gt;this-is-deprecated GNOME_SETUP_DISPLAY&lt;span style="color:#f92672"&gt;=&lt;/span&gt;:1 GTK_MODULES&lt;span style="color:#f92672"&gt;=&lt;/span&gt;gail:atk-bridge LOGNAME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;victor GNOME_TERMINAL_SERVICE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;:1.83 GNOME_SHELL_SESSION_MODE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ubuntu XDG_RUNTIME_DIR&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/run/user/1000 XMODIFIERS&lt;span style="color:#f92672"&gt;=&lt;/span&gt;@im&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ibus SHELL&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/bin/bash XDG_SESSION_TYPE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;wayland PATH&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin USERNAME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;victor COLORTERM&lt;span style="color:#f92672"&gt;=&lt;/span&gt;truecolor XAUTHORITY&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/run/user/1000/.mutter-Xwaylandauth.R816R2 XDG_DATA_DIRS&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop IM_CONFIG_PHASE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; TERM&lt;span style="color:#f92672"&gt;=&lt;/span&gt;xterm-256color GDMSESSION&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ubuntu XDG_SESSION_CLASS&lt;span style="color:#f92672"&gt;=&lt;/span&gt;user
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;STDIN is more secure because it is not visible to the &lt;code&gt;ps&lt;/code&gt; command and is not globally visible to the program. Thus, only the parts of the program that explicitly read from STDIN can access this data.&lt;/p&gt;
&lt;h2 id="how-to-read-program-arguments-from-stdin-with-go"&gt;&lt;a href="#how-to-read-program-arguments-from-stdin-with-go" class="header-anchor"&gt;&lt;/a&gt;How to read program arguments from STDIN with Go
&lt;/h2&gt;&lt;p&gt;In the code example below, we check if any data is being piped in from STDIN with &lt;code&gt;os.ModeNamedPipe&lt;/code&gt;. Then, we wait to read all the data from STDIN with &lt;code&gt;ioutil.ReadAll&lt;/code&gt;. Finally, we parse the STDIN data just like a shell would using the &lt;a class="link" href="https://github.com/kballard/go-shellquote" target="_blank" rel="noopener"
&gt;github.com/kballard/go-shellquote&lt;/a&gt; library and append it to any existing command-line arguments.&lt;/p&gt;
&lt;script type="application/javascript" src="https://gist.github.com/getvictor/c345f324ebf6dfa64df9a8c0919d6672.js"&gt;&lt;/script&gt;
&lt;h2 id="how-to-integrate-with-a-secret-manager"&gt;&lt;a href="#how-to-integrate-with-a-secret-manager" class="header-anchor"&gt;&lt;/a&gt;How to integrate with a secret manager
&lt;/h2&gt;&lt;p&gt;One way to securely pass sensitive information to a program is to store it in a secret manager like &lt;a class="link" href="https://developer.1password.com/docs/cli/secret-references" target="_blank" rel="noopener"
&gt;1Password&lt;/a&gt;. Then, you can read the secret from the secret manager and pass it to the program via STDIN. For example:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;echo --secret $(op read op://employee/example_server/secret) | go run read-args-from-stdin.go
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we discussed how to &lt;a class="link" href="../go-json-unmarshal/" &gt;unmarshal JSON payloads with null, set, and missing keys using Go&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previously, we wrote &lt;a class="link" href="../catch-missed-authorization-checks-during-software-development" &gt;how we catch missed authorization checks in our Go application&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="watch-how-to-read-program-arguments-from-stdin"&gt;&lt;a href="#watch-how-to-read-program-arguments-from-stdin" class="header-anchor"&gt;&lt;/a&gt;Watch how to read program arguments from STDIN
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Jg7xItfa6t8"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Fix security vulnerabilities in Yarn</title><link>https://victoronsoftware.com/posts/fix-security-vulnerabilities-yarn/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/fix-security-vulnerabilities-yarn/</guid><description>&lt;img src="https://victoronsoftware.com/posts/fix-security-vulnerabilities-yarn/cover.png" alt="Featured image of post Fix security vulnerabilities in Yarn" /&gt;&lt;h2 id="why-fix-security-vulnerabilities"&gt;&lt;a href="#why-fix-security-vulnerabilities" class="header-anchor"&gt;&lt;/a&gt;Why fix security vulnerabilities?
&lt;/h2&gt;&lt;p&gt;Security vulnerabilities are a common issue in software development. They can lead to data breaches, unauthorized
access, and other security incidents. It is important to fix security vulnerabilities as soon as possible to protect
your data and users.&lt;/p&gt;
&lt;h2 id="finding-vulnerabilities"&gt;&lt;a href="#finding-vulnerabilities" class="header-anchor"&gt;&lt;/a&gt;Finding vulnerabilities
&lt;/h2&gt;&lt;p&gt;Nowadays, it is possible to integrate various vulnerability scanning tools into your CI/CD pipeline. These tools can
help you identify security vulnerabilities in your code and dependencies. One such tool is
&lt;a class="link" href="https://securityscorecards.dev/" target="_blank" rel="noopener"
&gt;OpenSSF Scorecard&lt;/a&gt;, which combines multiple other tools into a single GitHub action.
It uses the &lt;a class="link" href="https://osv.dev/" target="_blank" rel="noopener"
&gt;OSV service&lt;/a&gt; to find vulnerabilities affecting your project&amp;rsquo;s dependencies. OSV (Open
Source Vulnerabilities) is a Google-based vulnerability database providing information about open-source projects'
vulnerabilities.&lt;/p&gt;
&lt;p&gt;In this article, we will focus on fixing a few recent real-world security vulnerabilities in our &lt;code&gt;yarn.lock&lt;/code&gt;
dependencies.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;score is 3: 6 existing vulnerabilities detected:
Warn: Project is vulnerable to: GHSA-crh6-fp67-6883
Warn: Project is vulnerable to: GHSA-wf5p-g6vw-rhxx
Warn: Project is vulnerable to: GHSA-p6mc-m468-83gw
Warn: Project is vulnerable to: GHSA-566m-qj78-rww5
Warn: Project is vulnerable to: GHSA-7fh5-64p2-3v2j
Warn: Project is vulnerable to: GHSA-4wf5-vphf-c2xc
Click Remediation section below to solve this issue
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="using-local-tools-to-find-vulnerabilities"&gt;&lt;a href="#using-local-tools-to-find-vulnerabilities" class="header-anchor"&gt;&lt;/a&gt;Using local tools to find vulnerabilities
&lt;/h3&gt;&lt;p&gt;In a local environment, we can use &lt;a class="link" href="https://google.github.io/osv-scanner/" target="_blank" rel="noopener"
&gt;OSV-Scanner&lt;/a&gt; to find vulnerabilities in our
dependencies. Running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;osv-scanner scan --lockfile yarn.lock
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It will output the same vulnerabilities mentioned above but with additional details.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;╭─────────────────────────────────────┬──────┬───────────┬────────────────┬─────────┬───────────╮
│ OSV URL │ CVSS │ ECOSYSTEM │ PACKAGE │ VERSION │ SOURCE │
├─────────────────────────────────────┼──────┼───────────┼────────────────┼─────────┼───────────┤
│ https://osv.dev/GHSA-crh6-fp67-6883 │ 9.8 │ npm │ @xmldom/xmldom │ 0.8.3 │ yarn.lock │
│ https://osv.dev/GHSA-wf5p-g6vw-rhxx │ 6.5 │ npm │ axios │ 0.21.4 │ yarn.lock │
│ https://osv.dev/GHSA-p6mc-m468-83gw │ 7.4 │ npm │ lodash.set │ 4.3.2 │ yarn.lock │
│ https://osv.dev/GHSA-566m-qj78-rww5 │ 5.3 │ npm │ postcss │ 6.0.23 │ yarn.lock │
│ https://osv.dev/GHSA-7fh5-64p2-3v2j │ 5.3 │ npm │ postcss │ 6.0.23 │ yarn.lock │
│ https://osv.dev/GHSA-7fh5-64p2-3v2j │ 5.3 │ npm │ postcss │ 7.0.39 │ yarn.lock │
│ https://osv.dev/GHSA-7fh5-64p2-3v2j │ 5.3 │ npm │ postcss │ 8.4.21 │ yarn.lock │
│ https://osv.dev/GHSA-4wf5-vphf-c2xc │ 7.5 │ npm │ terser │ 5.12.1 │ yarn.lock │
╰─────────────────────────────────────┴──────┴───────────┴────────────────┴─────────┴───────────╯
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another way to find these vulnerabilities is by using the built-in &lt;a class="link" href="https://yarnpkg.com/cli/audit" target="_blank" rel="noopener"
&gt;yarn audit&lt;/a&gt; command.&lt;/p&gt;
&lt;h2 id="waiving-vulnerabilities"&gt;&lt;a href="#waiving-vulnerabilities" class="header-anchor"&gt;&lt;/a&gt;Waiving vulnerabilities
&lt;/h2&gt;&lt;p&gt;In some cases, you may decide to waive a vulnerability. This approach means that you examine the vulnerability
documentation and acknowledge it but decide not to fix it.&lt;/p&gt;
&lt;p&gt;To waive a vulnerability for the OSV flow, you can create an &lt;code&gt;osv-scanner.toml&lt;/code&gt; file in the root of your project. For
example, to waive the &lt;code&gt;GHSA-crh6-fp67-6883&lt;/code&gt; vulnerability, you can add the following to the &lt;code&gt;osv-scanner.toml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-toml" data-lang="toml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[[&lt;span style="color:#a6e22e"&gt;IgnoredVulns&lt;/span&gt;]]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;GHSA-crh6-fp67-6883&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;reason&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;We examined this vulnerability and concluded that it does not affect our project for a very good reason.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our example, we will not waive any vulnerabilities, but we will fix them by updating the dependencies.&lt;/p&gt;
&lt;h2 id="updating-an-inner-dependency"&gt;&lt;a href="#updating-an-inner-dependency" class="header-anchor"&gt;&lt;/a&gt;Updating an inner dependency
&lt;/h2&gt;&lt;p&gt;In our example, we have a vulnerability in the &lt;code&gt;@xmldom/xmldom&lt;/code&gt; package. From the vulnerability URL, we know we must
update this package to &lt;code&gt;0.8.4&lt;/code&gt; or later.&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;yarn why @xmldom/xmldom&lt;/code&gt; will show that it is an inner dependency of another package:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;=&amp;gt; Found &amp;#34;@xmldom/xmldom@0.8.3&amp;#34;
info Reasons this module exists
- &amp;#34;msw#@mswjs#interceptors&amp;#34; depends on it
- Hoisted from &amp;#34;msw#@mswjs#interceptors#@xmldom#xmldom&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Looking at &lt;code&gt;yarn.lock&lt;/code&gt; shows:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;#34;@xmldom/xmldom@^0.8.3&amp;#34;:
version &amp;#34;0.8.3&amp;#34;
resolved &amp;#34;https://registry.yarnpkg.com/@xmldom/xmldom/-/xmldom-0.8.3.tgz#beaf980612532aa9a3004aff7e428943aeaa0711&amp;#34;
integrity sha512-Lv2vySXypg4nfa51LY1nU8yDAGo/5YwF+EY/rUZgIbfvwVARcd67ttCM8SMsTeJy51YhHYavEq+FS6R0hW9PFQ==
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We see that &lt;code&gt;0.8.4&lt;/code&gt; will satisfy the dependency requirement of &lt;code&gt;^0.8.3&lt;/code&gt;. We can update the package by deleting the above
section from &lt;code&gt;yarn.lock&lt;/code&gt; and running &lt;code&gt;yarn install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We will then see the update:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;#34;@xmldom/xmldom@^0.8.3&amp;#34;:
version &amp;#34;0.8.10&amp;#34;
resolved &amp;#34;https://registry.yarnpkg.com/@xmldom/xmldom/-/xmldom-0.8.10.tgz#a1337ca426aa61cef9fe15b5b28e340a72f6fa99&amp;#34;
integrity sha512-2WALfTl4xo2SkGCYRt6rDTFfk9R1czmBvUQy12gK2KuRKIpWEhcbbzy8EZXtz/jkRqHX8bFEc6FC1HjX4TUWYw==
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="upgrading-an-inner-dependency-by-overriding-the-version"&gt;&lt;a href="#upgrading-an-inner-dependency-by-overriding-the-version" class="header-anchor"&gt;&lt;/a&gt;Upgrading an inner dependency by overriding the version
&lt;/h2&gt;&lt;p&gt;Our following vulnerability is in the &lt;code&gt;axios&lt;/code&gt; package. We need to update it to &lt;code&gt;0.28.0&lt;/code&gt; or later. By running
&lt;code&gt;yarn why axios&lt;/code&gt; we see that this package is part of a deep dependency chain:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;=&amp;gt; Found &amp;#34;wait-on#axios@0.21.4&amp;#34;
info This module exists because &amp;#34;@storybook#test-runner#jest-playwright-preset#jest-process-manager#wait-on&amp;#34; depends on it.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The needed version &lt;code&gt;0.28.0&lt;/code&gt; does not satisfy the &lt;code&gt;^0.21.4&lt;/code&gt; requirement. We can override the version by adding the
following to the &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;resolutions&amp;#34;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;**/wait-on/axios&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^0.28.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;span style="color:#960050;background-color:#1e0010"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="upgrading-the-parent-dependency"&gt;&lt;a href="#upgrading-the-parent-dependency" class="header-anchor"&gt;&lt;/a&gt;Upgrading the parent dependency
&lt;/h2&gt;&lt;p&gt;The following vulnerability is in the &lt;code&gt;lodash.set&lt;/code&gt; package. The vulnerability URL shows that there is no fix for this
vulnerability. We also see at &lt;a class="link" href="https://www.npmjs.com/package/lodash.set" target="_blank" rel="noopener"
&gt;npmjs.com&lt;/a&gt; that this package was last updated
eight years ago.&lt;/p&gt;
&lt;p&gt;We need to update the parent package that uses &lt;code&gt;lodash.set&lt;/code&gt;. Running &lt;code&gt;yarn why lodash.set&lt;/code&gt; shows:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;info Reasons this module exists
- &amp;#34;nock&amp;#34; depends on it
- Hoisted from &amp;#34;nock#lodash.set&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We update the parent by running &lt;code&gt;yarn upgrade nock@latest&lt;/code&gt;. Luckily, the latest version of &lt;code&gt;nock&lt;/code&gt; does not depend on
&lt;code&gt;lodash.set&lt;/code&gt;, and &lt;code&gt;lodash.set&lt;/code&gt; is removed from &lt;code&gt;yarn.lock&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="removing-a-dependency"&gt;&lt;a href="#removing-a-dependency" class="header-anchor"&gt;&lt;/a&gt;Removing a dependency
&lt;/h2&gt;&lt;p&gt;Sometimes the best way to fix a vulnerability is to remove the vulnerable dependency. This can be done with the
&lt;code&gt;yarn remove &amp;lt;dependency&amp;gt;&lt;/code&gt; command. However, this requires code changes. You must find a different library or implement
the removed functionality yourself.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;&lt;a href="#conclusion" class="header-anchor"&gt;&lt;/a&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;We use the above strategies to fix the vulnerabilities in our project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Updating an inner dependency&lt;/li&gt;
&lt;li&gt;Upgrading an inner dependency by overriding the version&lt;/li&gt;
&lt;li&gt;Upgrading the parent dependency&lt;/li&gt;
&lt;li&gt;Removing a dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can now rerun the vulnerability scanner to verify that we fixed the vulnerabilities.&lt;/p&gt;
&lt;p&gt;In addition, we must run our unit test and integration test suite to ensure that the updates do not break our
application.&lt;/p&gt;
&lt;h2 id="fix-security-vulnerabilities-in-yarn-video"&gt;&lt;a href="#fix-security-vulnerabilities-in-yarn-video" class="header-anchor"&gt;&lt;/a&gt;Fix security vulnerabilities in Yarn video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/59EpVz9mH_w"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS (mTLS): building a client using the system keystore</title><link>https://victoronsoftware.com/posts/mtls/</link><pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls/mtls-handshake.png" alt="Featured image of post Mutual TLS (mTLS): building a client using the system keystore" /&gt;&lt;p&gt;We recently completed a series of articles on mutual TLS (mTLS). In this series, we covered the basics of mTLS, how to
use macOS keychain and Windows certificate store, and how to build an mTLS Go client. Our goal was to show you how to
use mTLS in your applications and securely store your mTLS certificates and keys without exposing them to the
filesystem.&lt;/p&gt;
&lt;p&gt;Here is a summary of the articles in the series:&lt;/p&gt;
&lt;h3 id="mutual-tls-intro-and-hands-on-example"&gt;&lt;a href="#mutual-tls-intro-and-hands-on-example" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-hello-world" &gt;Mutual TLS intro and hands-on example&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;An introduction to mTLS and a hands-on example of using an mTLS client to connect to an mTLS server.&lt;/p&gt;
&lt;h3 id="using-mtls-with-the-macos-keychain"&gt;&lt;a href="#using-mtls-with-the-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-with-apple-keychain" &gt;Using mTLS with the macOS keychain&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;A guide on how to use the macOS system keystore to store your mTLS certificates and keys. We connect to an mTLS server
with applications that use the macOS system keychain to find the mTLS certificates.&lt;/p&gt;
&lt;h3 id="create-an-mtls-go-client"&gt;&lt;a href="#create-an-mtls-go-client" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-go-client" &gt;Create an mTLS Go client&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;We create a standard mTLS client in Go using the &lt;code&gt;crypto/tls&lt;/code&gt; library. This client loads the client certificate and
private key from the filesystem.&lt;/p&gt;
&lt;h3 id="add-a-custom-certificate-signer-to-the-mtls-go-client"&gt;&lt;a href="#add-a-custom-certificate-signer-to-the-mtls-go-client" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-go-custom-signer" &gt;Add a custom certificate signer to the mTLS Go client&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;We implement a custom &lt;code&gt;crypto.Signer&lt;/code&gt; to sign a client certificate during the mTLS handshake. Thus, we are a step closer
to removing our client certificate and private key from the filesystem.&lt;/p&gt;
&lt;h3 id="a-complete-mtls-go-client-using-the-macos-keychain"&gt;&lt;a href="#a-complete-mtls-go-client-using-the-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;A complete mTLS Go client using the macOS keychain&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;In this article, we continue the previous article by connecting our custom signer to the macOS keychain using CGO and
Apple APIs.&lt;/p&gt;
&lt;h3 id="using-mtls-with-the-windows-certificate-store"&gt;&lt;a href="#using-mtls-with-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-with-windows" &gt;Using mTLS with the Windows certificate store&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Switching to Windows, we learn how to use the Windows system keystore to store your mTLS certificates and keys. We
connect to an mTLS server with applications that use the Windows certificate store to find the mTLS certificates.&lt;/p&gt;
&lt;h3 id="create-an-mtls-go-client-using-the-windows-certificate-store"&gt;&lt;a href="#create-an-mtls-go-client-using-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-go-client-windows-certificate-store" &gt;Create an mTLS Go client using the Windows certificate store&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Using the software pattern from the previous articles on the macOS keychain, we build an mTLS client in Go integrated
with the Windows certificate store to store the mTLS certificates and keys.&lt;/p&gt;
&lt;h3 id="mtls-vs-http-signature-faceoff-securing-your-apis"&gt;&lt;a href="#mtls-vs-http-signature-faceoff-securing-your-apis" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-vs-http-signature/" &gt;mTLS vs HTTP signature faceoff: securing your APIs&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Where do mTLS and HTTP message signatures fit, and how to choose the right one for your architecture.&lt;/p&gt;
&lt;h3 id="mutual-tls-mtls-building-a-client-using-the-system-keystore-video-playlist"&gt;&lt;a href="#mutual-tls-mtls-building-a-client-using-the-system-keystore-video-playlist" class="header-anchor"&gt;&lt;/a&gt;Mutual TLS (mTLS): building a client using the system keystore video playlist
&lt;/h3&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
&lt;iframe src="https://www.youtube.com/embed/videoseries?list=PLr-TrdMhEklRF4lQ_bIH0WJTUiY8ldc0W" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"&gt;&lt;/iframe&gt;
&lt;/div&gt;</description></item><item><title>Mutual TLS (mTLS) Go client using Windows certificate store</title><link>https://victoronsoftware.com/posts/mtls-go-client-windows-certificate-store/</link><pubDate>Wed, 20 Mar 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-go-client-windows-certificate-store/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-go-client-windows-certificate-store/mtls-go-windows.png" alt="Featured image of post Mutual TLS (mTLS) Go client using Windows certificate store" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-client" &gt;mTLS Go client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;mTLS Go client using macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-with-windows" &gt;mTLS with Windows certificate store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-use-the-windows-certificate-store"&gt;&lt;a href="#why-use-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Why use the Windows certificate store?
&lt;/h2&gt;&lt;p&gt;Keeping the mTLS client private key on the filesystem is insecure and not recommended. In the &lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;mTLS Go client using macOS keychain&lt;/a&gt;, we demonstrated achieving greater mTLS security with macOS keychain. In this article, we reach a similar level of protection with the Windows certificate store.&lt;/p&gt;
&lt;p&gt;The Windows certificate store is a secure location where certificates and keys can be stored. Many applications, such as Edge and Powershell, use it. The Windows certificate store is an excellent place to store mTLS client certificates and keys.&lt;/p&gt;
&lt;h2 id="building-a-custom-tlscertificate-for-the-windows-certificate-store"&gt;&lt;a href="#building-a-custom-tlscertificate-for-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Building a custom tls.Certificate for the Windows certificate store
&lt;/h2&gt;&lt;p&gt;This work builds on the &lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt; article. We will use the &lt;code&gt;CustomSigner&lt;/code&gt; from that article to build a custom &lt;code&gt;tls.Certificate&lt;/code&gt; that uses the Windows certificate store.&lt;/p&gt;
&lt;p&gt;However, before the application uses the &lt;code&gt;Public&lt;/code&gt; and &lt;code&gt;Sign&lt;/code&gt; methods of the &lt;code&gt;CustomSigner,&lt;/code&gt; we must retrieve the client certificate using Windows APIs.&lt;/p&gt;
&lt;h3 id="retrieving-mtls-client-certificate-from-windows-certificate-store-using-go"&gt;&lt;a href="#retrieving-mtls-client-certificate-from-windows-certificate-store-using-go" class="header-anchor"&gt;&lt;/a&gt;Retrieving mTLS client certificate from Windows certificate store using Go
&lt;/h3&gt;&lt;p&gt;We will use the &lt;a class="link" href="https://pkg.go.dev/golang.org/x/sys/windows" target="_blank" rel="noopener"
&gt;golang.org/x/sys/windows&lt;/a&gt; package to access the Windows APIs. We use the &lt;code&gt;windows&lt;/code&gt; package to call the &lt;a class="link" href="https://learn.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-certopenstore" target="_blank" rel="noopener"
&gt;CertOpenStore&lt;/a&gt;, &lt;a class="link" href="https://learn.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-certfindcertificateinstore" target="_blank" rel="noopener"
&gt;CertFindCertificateInStore&lt;/a&gt;, and &lt;a class="link" href="https://learn.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-cryptacquirecertificateprivatekey" target="_blank" rel="noopener"
&gt;CryptAcquireCertificatePrivateKey&lt;/a&gt; functions from the &lt;code&gt;crypt32&lt;/code&gt; DLL (dynamic link library).&lt;/p&gt;
&lt;p&gt;First, we open the &lt;code&gt;MY&lt;/code&gt; store, which is the personal store for the current user. This store contains our client mTLS certificate.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Open the certificate store&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;storePtr&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UTF16PtrFromString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;windowsStoreName&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;store&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CertOpenStore&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CERT_STORE_PROV_SYSTEM&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CERT_SYSTEM_STORE_CURRENT_USER&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;storePtr&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we find the certificate by the common name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Find the certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pPrevCertContext&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CertContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;certContext&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CertContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;commonNamePtr&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UTF16PtrFromString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;commonName&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;certContext&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CertFindCertificateInStore&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;store&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;X509_ASN_ENCODING&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CERT_FIND_SUBJECT_STR&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;commonNamePtr&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pPrevCertContext&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// We can extract the certificate chain and further filter the certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// we want here.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="converting-the-windows-certificate-to-a-go-x509certificate"&gt;&lt;a href="#converting-the-windows-certificate-to-a-go-x509certificate" class="header-anchor"&gt;&lt;/a&gt;Converting the Windows certificate to a Go &lt;code&gt;x509.Certificate&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;After retrieving the certificate from the Windows certificate store, we convert it to a Go &lt;code&gt;x509.Certificate&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Copy the certificate data so that we have our own copy outside the windows context&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;encodedCert&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Slice&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;certContext&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;EncodedCert&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;certContext&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Length&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;buf&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Clone&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;encodedCert&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ParseCertificate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;buf&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="building-the-custom-tlscertificate"&gt;&lt;a href="#building-the-custom-tlscertificate" class="header-anchor"&gt;&lt;/a&gt;Building the custom &lt;code&gt;tls.Certificate&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;Finally, we put together the custom &lt;code&gt;tls.Certificate&lt;/code&gt; using the &lt;code&gt;x509.Certificate&lt;/code&gt;. We hold on to the &lt;code&gt;certContext&lt;/code&gt; pointer to get the private key later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;customSigner&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;store&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;store&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windowsCertContext&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;certContext&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;customSigner&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;: [][]&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Raw&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;PrivateKey&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;customSigner&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SupportedSignatureAlgorithms&lt;/span&gt;: []&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SignatureScheme&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;supportedAlgorithm&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our example only supports the &lt;code&gt;tls.PSSWithSHA256&lt;/code&gt; signature algorithm to keep the code simple.&lt;/p&gt;
&lt;h2 id="signing-the-mtls-digest-with-the-windows-certificate-store"&gt;&lt;a href="#signing-the-mtls-digest-with-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Signing the mTLS digest with the Windows certificate store
&lt;/h2&gt;&lt;p&gt;As discussed in the previous &lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt; article, we must sign the &lt;code&gt;CertificateVerify&lt;/code&gt; message during the TLS handshake. We will use the &lt;code&gt;CustomSigner&lt;/code&gt; to sign the digest, which implements the &lt;code&gt;crypto.Signer&lt;/code&gt; interface as defined in the Go standard library&amp;rsquo;s &lt;code&gt;crypto&lt;/code&gt; package.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// CustomSigner is a crypto.Signer that uses the client certificate and key to sign&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;store&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Handle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windowsCertContext&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CertContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Public&lt;/span&gt;() &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;crypto.Signer.Public\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Sign&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Reader&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SignerOpts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ) (&lt;span style="color:#a6e22e"&gt;signature&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="retrieve-the-private-key-reference-from-the-windows-certificate-store"&gt;&lt;a href="#retrieve-the-private-key-reference-from-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Retrieve the private key reference from the Windows certificate store
&lt;/h4&gt;&lt;p&gt;We retrieve the private key reference from the Windows certificate store using the &lt;code&gt;CryptAcquireCertificatePrivateKey&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Get private key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Handle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pdwKeySpec&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;uint32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pfCallerFreeProvOrNCryptKey&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CryptAcquireCertificatePrivateKey&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;windowsCertContext&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CRYPT_ACQUIRE_CACHE_FLAG&lt;/span&gt;|&lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CRYPT_ACQUIRE_SILENT_FLAG&lt;/span&gt;|
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;pdwKeySpec&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;pfCallerFreeProvOrNCryptKey&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="signing-the-mtls-digest"&gt;&lt;a href="#signing-the-mtls-digest" class="header-anchor"&gt;&lt;/a&gt;Signing the mTLS digest
&lt;/h4&gt;&lt;p&gt;We will use the &lt;a class="link" href="https://learn.microsoft.com/en-us/windows/win32/api/ncrypt/nf-ncrypt-ncryptsignhash" target="_blank" rel="noopener"
&gt;NCryptSignHash&lt;/a&gt; function from &lt;code&gt;ncrypt.dll&lt;/code&gt; to sign the digest.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;nCrypt&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;MustLoadDLL&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;ncrypt.dll&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;nCryptSignHash&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;nCrypt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;MustFindProc&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;NCryptSignHash&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But before we do that, we must create a &lt;code&gt;BCRYPT_PSS_PADDING_INFO&lt;/code&gt; structure for our supported RSA-PSS algorithm.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;flags&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;nCryptSilentFlag&lt;/span&gt; | &lt;span style="color:#a6e22e"&gt;bCryptPadPss&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;pPaddingInfo&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getRsaPssPadding&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;getRsaPssPadding&lt;/code&gt; is a helper function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getRsaPssPadding&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SignerOpts&lt;/span&gt;) (&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pssOpts&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;ok&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;.(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;rsa&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PSSOptions&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;ok&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pssOpts&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Hash&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SHA256&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;unsupported hash function %s&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;HashFunc&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pssOpts&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SaltLength&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;rsa&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PSSSaltLengthEqualsHash&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;unsupported salt length %d&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;pssOpts&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SaltLength&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sha256&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UTF16PtrFromString&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;SHA256&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Create BCRYPT_PSS_PADDING_INFO structure:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// typedef struct _BCRYPT_PSS_PADDING_INFO {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// LPCWSTR pszAlgId;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ULONG cbSalt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// } BCRYPT_PSS_PADDING_INFO;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pszAlgId&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;uint16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cbSalt&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;uint32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pszAlgId&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;sha256&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cbSalt&lt;/span&gt;: uint32(&lt;span style="color:#a6e22e"&gt;pssOpts&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;HashFunc&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;Size&lt;/span&gt;()),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ), &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we sign the digest using the &lt;code&gt;NCryptSignHash&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Sign the digest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// The first call to NCryptSignHash retrieves the size of the signature&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;size&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;uint32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;success&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;nCryptSignHash&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Call&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;pPaddingInfo&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(len(&lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;flags&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;success&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;NCryptSignHash: failed to get signature length: %#x&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;success&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// The second call to NCryptSignHash retrieves the signature&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;signature&lt;/span&gt; = make([]&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;success&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;nCryptSignHash&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Call&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;pPaddingInfo&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(len(&lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;signature&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;flags&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;success&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;NCryptSignHash: failed to generate signature: %#x&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;success&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;signature&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="putting-it-all-together"&gt;&lt;a href="#putting-it-all-together" class="header-anchor"&gt;&lt;/a&gt;Putting it all together
&lt;/h2&gt;&lt;p&gt;With the above code, we can create our new Go mTLS client that uses the Windows certificate store.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;url&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Parse&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to is required&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Client&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;TLSClientConfig&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Config&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;signer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;MinVersion&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;VersionTLS13&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;MaxVersion&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;VersionTLS13&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Make a GET request to the URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Get&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error making get request: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;() { &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Close&lt;/span&gt;() }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Read the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadAll&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error reading response: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Print the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt;, string(&lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We limit the scope of this example to TLS 1.3&lt;/p&gt;
&lt;h2 id="setting-up-the-environment"&gt;&lt;a href="#setting-up-the-environment" class="header-anchor"&gt;&lt;/a&gt;Setting up the environment
&lt;/h2&gt;&lt;p&gt;The next step is to use the Windows certificate store to store the client certificate and private key. We will use the certificates and keys scripts from the previous &lt;a class="link" href="../mtls-with-windows" &gt;mTLS with Windows certificate store&lt;/a&gt; article. If you still need to generate the certificates and keys, please follow the instructions in that article.&lt;/p&gt;
&lt;p&gt;Finally, as in the &lt;a class="link" href="../mtls-with-windows" &gt;mTLS with Windows certificate store&lt;/a&gt; article, we start two nginx servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://&amp;lt;your_host&amp;gt;:8888 for TLS&lt;/li&gt;
&lt;li&gt;https://&amp;lt;your_host&amp;gt;:8889 for mTLS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="running-the-go-mtls-client-using-the-windows-certificate-store"&gt;&lt;a href="#running-the-go-mtls-client-using-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Running the Go mTLS client using the Windows certificate store
&lt;/h2&gt;&lt;p&gt;We can run our mTLS client without pointing to certificate/key files and retrieving everything from the Windows certificate store. Hitting the ordinary TLS server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run .\client-signer.go --url https&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;//myhost&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8888&lt;/span&gt;/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Returns the expected:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;TLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While hitting the mTLS server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run .\client-signer.go --url https&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;//myhost&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8889&lt;/span&gt;/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Returns a more detailed message, including the print statements in our custom code:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Server requested certificate
Found certificate with common name testClientTLS
crypto.Signer.Public
crypto.Signer.Public
crypto.Signer.Sign with key type *rsa.PublicKey, opts type *rsa.PSSOptions, hash SHA-256
mTLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/mtls-go-windows" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/mtls-go-windows&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mtls-go-client-using-windows-certificate-store-video"&gt;&lt;a href="#mtls-go-client-using-windows-certificate-store-video" class="header-anchor"&gt;&lt;/a&gt;mTLS Go client using Windows certificate store video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/L4uk43i3kyY"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS (mTLS) with Windows certificate store</title><link>https://victoronsoftware.com/posts/mtls-with-windows/</link><pubDate>Wed, 06 Mar 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-with-windows/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-with-windows/mtls-edge.png" alt="Featured image of post Mutual TLS (mTLS) with Windows certificate store" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-client" &gt;mTLS Go client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;mTLS Go client using macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-use-windows-certificate-store"&gt;&lt;a href="#why-use-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Why use Windows certificate store?
&lt;/h2&gt;&lt;p&gt;In our previous articles, we introduced mTLS and demonstrated how to use mTLS client certificates and keys. Keeping the mTLS client private key on the filesystem is insecure and not recommended. In the &lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;mTLS Go client using macOS keychain&lt;/a&gt;, we demonstrated achieving greater mTLS security with macOS keychain. In this article, we start exploring how to achieve the same level of protection with Windows certificate store.&lt;/p&gt;
&lt;p&gt;The Windows certificate store is a secure location to store certificates and keys. Many applications, such as Edge and Powershell use it. The Windows certificate store is an excellent place to store mTLS client certificates and keys.&lt;/p&gt;
&lt;p&gt;The Windows certificate stores have two types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User certificate store: Certificates and keys are stored for the current user, local to a user account.&lt;/li&gt;
&lt;li&gt;Local machine certificate store: Certificates and keys are stored for all users on the computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will store our client mTLS certificate in the user certificate store and the other certificates in the local machine certificate store.&lt;/p&gt;
&lt;h2 id="generating-mtls-certificates-and-keys"&gt;&lt;a href="#generating-mtls-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Generating mTLS certificates and keys
&lt;/h2&gt;&lt;p&gt;We will use the following Powershell script to generate the mTLS certificates and keys. &lt;a class="link" href="https://www.openssl.org/" target="_blank" rel="noopener"
&gt;OpenSSL&lt;/a&gt; must be installed on your computer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;New-Item -ItemType Directory -Force certs
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Private keys for CAs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/server-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/client-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate CA certificates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/server-ca.key -out certs/server-ca.crt -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testServerCA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/client-ca.key -out certs/client-ca.crt -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testClientCA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate a certificate signing request&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt; -nodes -keyout certs/server.key -out certs/server.req -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testServerTLS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt; -nodes -keyout certs/client.key -out certs/client.req -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testClientTLS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Have the CA sign the certificate requests and output the certificates.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/server.req -days &lt;span style="color:#ae81ff"&gt;398&lt;/span&gt; -CA certs/server-ca.crt -CAkey certs/server-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/server.crt -extfile localhost.ext
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/client.req -days &lt;span style="color:#ae81ff"&gt;398&lt;/span&gt; -CA certs/client-ca.crt -CAkey certs/client-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/client.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Create PFX file for importing to certificate store&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl pkcs12 -export -out certs\client.pfx -inkey certs\client.key -in certs\client.crt -passout pass&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Clean up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Remove-Item certs/server.req
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Remove-Item certs/client.req
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The maximum validity period for a TLS certificate is 398 days.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;localhost.ext&lt;/code&gt; file is used to specify the subject alternative name (SAN) for the server certificate. The &lt;code&gt;localhost.ext&lt;/code&gt; file contains the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[alt_names]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;DNS.1 = localhost
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;DNS.2 = myhost
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can access the server using either &lt;code&gt;localhost&lt;/code&gt; or &lt;code&gt;myhost&lt;/code&gt; names.&lt;/p&gt;
&lt;p&gt;The above script generates the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;certs/server-ca.crt&lt;/code&gt;: Server CA certificate&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/server-ca.key&lt;/code&gt;: Server CA private key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/client-ca.crt&lt;/code&gt;: Client CA certificate&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/client-ca.key&lt;/code&gt;: Client CA private key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/server.crt&lt;/code&gt;: Server certificate&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/server.key&lt;/code&gt;: Server private key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/client.crt&lt;/code&gt;: Client certificate&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/client.key&lt;/code&gt;: Client private key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/client.pfx&lt;/code&gt;: Client certificate and private key in PFX format, needed for importing into the Windows certificate store&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="importing-the-client-certificate-and-key-into-the-windows-certificate-store"&gt;&lt;a href="#importing-the-client-certificate-and-key-into-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Importing the client certificate and key into the Windows certificate store
&lt;/h2&gt;&lt;p&gt;We will import the client certificate and key into the user certificate store using the following powershell script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the server CA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Import-Certificate -FilePath &lt;span style="color:#e6db74"&gt;&amp;#34;certs\server-ca.crt&amp;#34;&lt;/span&gt; -CertStoreLocation Cert&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;\LocalMachine\Root
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the client CA so that client TLS certificates can be verified&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Import-Certificate -FilePath &lt;span style="color:#e6db74"&gt;&amp;#34;certs\client-ca.crt&amp;#34;&lt;/span&gt; -CertStoreLocation Cert&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;\LocalMachine\Root
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the client TLS certificate and key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Import-PfxCertificate -FilePath &lt;span style="color:#e6db74"&gt;&amp;#34;certs\client.pfx&amp;#34;&lt;/span&gt; -CertStoreLocation Cert&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;\CurrentUser\My
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The command result should be similar to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PSParentPath: Microsoft.PowerShell.Security\Certificate::LocalMachine\Root
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Thumbprint Subject
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---------- -------
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;0A31BF3C48A3D98A91A2F63B5BD286818311A707 CN=testServerCA, OU=Your Unit, O=Your Organization, L=Austin, S=Texas, C=US
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;7F7E5612F3A90B9EB246762358251F98911A9D1A CN=testClientCA, OU=Your Unit, O=Your Organization, L=Austin, S=Texas, C=US
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PSParentPath: Microsoft.PowerShell.Security\Certificate::CurrentUser\My
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Thumbprint Subject
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---------- -------
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;E2EBB991E3849E32E934D8465FAE42787D34C9ED CN=testClientTLS, OU=Your Unit, O=Your Organization, L=Austin, S=Texas, C=US
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default, the private key is marked as non-exportable. A user or an application cannot export the private key from the certificate store. They can only access the private key via Windows APIs. Using a non-exportable private key is the recommended security approach. You can use the &lt;code&gt;-Exportable&lt;/code&gt; parameter if you need to export the private key.&lt;/p&gt;
&lt;h2 id="verifying-imported-certificates-and-keys"&gt;&lt;a href="#verifying-imported-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Verifying imported certificates and keys
&lt;/h2&gt;&lt;p&gt;As an extra step, we can verify that the certificates and keys exist in the Windows certificate store. We can use the &lt;code&gt;certlm&lt;/code&gt; Local Machine Certificate Manager GUI, &lt;code&gt;certmgr&lt;/code&gt; User Certificate Manager GUI, or the &lt;code&gt;Get-ChildItem&lt;/code&gt; powershell command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Get-ChildItem -Path Cert&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;\LocalMachine\Root |
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Where-Object{$_.Subject &lt;span style="color:#f92672"&gt;-match&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;testServerCA&amp;#39;&lt;/span&gt;} |
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Test-Certificate -Policy SSL
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Get-ChildItem -Path Cert&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;\CurrentUser\My | Where-Object{$_.Subject &lt;span style="color:#f92672"&gt;-match&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;testClientTLS&amp;#39;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="running-the-mtls-server"&gt;&lt;a href="#running-the-mtls-server" class="header-anchor"&gt;&lt;/a&gt;Running the mTLS server
&lt;/h2&gt;&lt;p&gt;We will use the same &lt;code&gt;docker-compose.yml&lt;/code&gt; file from the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article. The &lt;code&gt;docker-compose.yml&lt;/code&gt; file starts two nginx servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://&amp;lt;your_host&amp;gt;:8888 for TLS&lt;/li&gt;
&lt;li&gt;https://&amp;lt;your_host&amp;gt;:8889 for mTLS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can run Docker on WSL (Windows Subsystem for Linux) or another machine. We will run it on a different machine, so we need to copy the &lt;code&gt;certs&lt;/code&gt; directory to the machine running Docker. When running the server on a different machine, we must update the &lt;code&gt;C:\Windows\System32\drivers\etc\hosts&lt;/code&gt; file to point to the other machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;10.0.0.5 myhost
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="connecting-to-the-tls-and-mtls-servers-with-clients"&gt;&lt;a href="#connecting-to-the-tls-and-mtls-servers-with-clients" class="header-anchor"&gt;&lt;/a&gt;Connecting to the TLS and mTLS servers with clients
&lt;/h2&gt;&lt;p&gt;Because we added the server CA to the root certificate store, we can now access the TLS server without any additional flags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Invoke-WebRequest -Uri https&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;//myhost&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8888&lt;/span&gt;/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;StatusCode : 200
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;StatusDescription : OK
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Content : TLS Hello World!
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;RawContent : HTTP/1.1 200 OK
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Connection: keep-alive
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Accept-Ranges: bytes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Content-Length: 17
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Content-Type: text/plain
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Date: Sun, 03 Mar 2024 17:28:29 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ETag: &amp;#34;65b29c19-11&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Last-Modified: Thu, 25 Jan 2024 1...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Forms : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Headers : {[Connection, keep-alive], [Accept-Ranges, bytes], [Content-Length, 17], [Content-Type, text/plain]...}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Images : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;InputFields : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Links : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ParsedHtml : System.__ComObject
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;RawContentLength : 17
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, we cannot access the mTLS server directly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Invoke-WebRequest -Uri https&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;//myhost&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8889&lt;/span&gt;/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The client attempted the TLS handshake, but the server rejected the connection because the client did not provide a certificate. Result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Invoke-WebRequest : 400 Bad Request
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;No required SSL certificate was sent
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;nginx/1.25.3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;At line:1 char:1
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;+ Invoke-WebRequest -Uri https://myhost:8889/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; + CategoryInfo : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebException
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can, however, provide the client certificate thumbprint to access the mTLS server. We saw the thumbprint of the client certificate earlier when we imported it into the Windows certificate store.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Invoke-WebRequest -Uri https&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;//myhost&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8889&lt;/span&gt;/hello-world.txt -CertificateThumbprint E2EBB991E3849E32E934D8465FAE42787D34C9ED
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;StatusCode : 200
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;StatusDescription : OK
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Content : mTLS Hello World!
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;RawContent : HTTP/1.1 200 OK
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Connection: keep-alive
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Accept-Ranges: bytes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Content-Length: 18
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Content-Type: text/plain
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Date: Sun, 03 Mar 2024 17:31:55 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ETag: &amp;#34;65b29c19-12&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Last-Modified: Thu, 25 Jan 2024 1...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Forms : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Headers : {[Connection, keep-alive], [Accept-Ranges, bytes], [Content-Length, 18], [Content-Type, text/plain]...}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Images : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;InputFields : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Links : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ParsedHtml : System.__ComObject
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;RawContentLength : 18
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Edge browser can access the mTLS server. We can verify this by opening the following URL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;https://myhost:8889/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We see the following popup:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/mtls-with-windows/mtls-edge.png"
alt="Edge mTLS popup"&gt;&lt;figcaption&gt;
&lt;p&gt;Edge mTLS popup&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We can click &lt;strong&gt;OK&lt;/strong&gt; to connect to the mTLS server. Future connections will not show the popup and will automatically use the client certificate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Here is a helpful link that may resolve issues trying to use mTLS client certificates on Windows 10: &lt;a class="link" href="https://superuser.com/questions/1181163/unable-to-use-client-certificates-in-chrome-or-ie-on-windows-10" target="_blank" rel="noopener"
&gt;https://superuser.com/questions/1181163/unable-to-use-client-certificates-in-chrome-or-ie-on-windows-10&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on Github
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/mtls-with-windows" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/mtls-with-windows&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="creating-our-own-windows-mtls-client"&gt;&lt;a href="#creating-our-own-windows-mtls-client" class="header-anchor"&gt;&lt;/a&gt;Creating our own Windows mTLS client
&lt;/h2&gt;&lt;p&gt;In the following article, we will &lt;a class="link" href="../mtls-go-client-windows-certificate-store" &gt;create a custom Windows mTLS client using the Windows certificate store&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we wrote an article on &lt;a class="link" href="../test-ndes-scep-server" &gt;testing a Windows NDES SCEP server&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="mtls-with-windows-certificate-store-video"&gt;&lt;a href="#mtls-with-windows-certificate-store-video" class="header-anchor"&gt;&lt;/a&gt;mTLS with Windows certificate store video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/GuubP7vir1g"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS (mTLS) Go client using macOS keychain</title><link>https://victoronsoftware.com/posts/mtls-go-client-using-apple-keychain/</link><pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-go-client-using-apple-keychain/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-go-client-using-apple-keychain/mtls-go-apple-keychain.png" alt="Featured image of post Mutual TLS (mTLS) Go client using macOS keychain" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-client" &gt;mTLS Go client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-use-macos-keychain"&gt;&lt;a href="#why-use-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;Why use macOS keychain?
&lt;/h2&gt;&lt;p&gt;In the &lt;a class="link" href="../mtls-go-client" &gt;mTLS Go client&lt;/a&gt; article, we built a simple Go client that uses mTLS. Our client used Go standard library methods and loaded the client certificate and private key from the filesystem. However, keeping the private key on the filesystem is insecure and not recommended. We aim to build an mTLS client fully integrated with the operating system&amp;rsquo;s keystore.&lt;/p&gt;
&lt;p&gt;The macOS keychain is a secure storage system for passwords and other confidential information. It is used by many Apple applications, such as Safari, Mail, and iCloud, to store the user&amp;rsquo;s passwords and additional sensitive information.&lt;/p&gt;
&lt;h2 id="building-a-custom-tlscertificate-for-macos-keychain"&gt;&lt;a href="#building-a-custom-tlscertificate-for-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;Building a custom tls.Certificate for macOS keychain
&lt;/h2&gt;&lt;p&gt;This work builds on the &lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt; article. We will use the &lt;code&gt;CustomSigner&lt;/code&gt; from that article to build a custom &lt;code&gt;tls.Certificate&lt;/code&gt; that uses the macOS keychain.&lt;/p&gt;
&lt;p&gt;However, before the application uses the &lt;code&gt;Public&lt;/code&gt; and &lt;code&gt;Sign&lt;/code&gt; methods of the &lt;code&gt;CustomSigner,&lt;/code&gt; we need to retrieve the certificate from the keychain using Apple&amp;rsquo;s API.&lt;/p&gt;
&lt;h3 id="retrieving-certificate-from-macos-keychain-with-cgo"&gt;&lt;a href="#retrieving-certificate-from-macos-keychain-with-cgo" class="header-anchor"&gt;&lt;/a&gt;Retrieving certificate from macOS keychain with CGO
&lt;/h3&gt;&lt;p&gt;We will use CGO to call the macOS keychain API to retrieve the client certificate. To set up CGO, we include the following code above our imports:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #cgo LDFLAGS: -framework CoreFoundation -framework Security
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #include &amp;lt;CoreFoundation/CoreFoundation.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #include &amp;lt;Security/Security.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To find the identities from the keychain, we use &lt;a class="link" href="https://developer.apple.com/documentation/security/1398306-secitemcopymatching" target="_blank" rel="noopener"
&gt;SecItemCopyMatching&lt;/a&gt;. An identity is a certificate and its associated private key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryCreateMutable&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFAllocatorDefault&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;maxCertificatesNum&lt;/span&gt;, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFTypeDictionaryKeyCallBacks&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFTypeDictionaryValueCallBacks&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;commonName&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;testClientTLS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;commonNameCFString&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;stringToCFString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;commonName&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;commonNameCFString&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecClass&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecClassIdentity&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecAttrCanSign&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFBooleanTrue&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecMatchSubjectWholeString&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;commonNameCFString&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// To filter by issuers, we must provide a CFDataRef array of DER-encoded ASN.1 items.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// C.CFDictionaryAddValue(identitySearch, unsafe.Pointer(C.kSecMatchIssuers), unsafe.Pointer(issuerCFArray))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecReturnRef&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFBooleanTrue&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecMatchLimit&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecMatchLimitAll&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;identityMatches&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecItemCopyMatching&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;), &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;identityMatches&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;errSecSuccess&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;failed to find client certificate: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityMatches&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our example, we find the identities by a common name, which we hardcode for demonstration purposes. We can filter by the certificate issuer, as shown in the commented-out code. Filtering by issuer requires an array of DER-encoded ASN.1 items, which can be created from the &lt;code&gt;tls.CertificateRequestInfo&lt;/code&gt; object. Another approach to finding the proper certificate is to retrieve all the keychain certificates and filter them in Go code.&lt;/p&gt;
&lt;h3 id="converting-the-apple-identity-to-a-go-x509certificate"&gt;&lt;a href="#converting-the-apple-identity-to-a-go-x509certificate" class="header-anchor"&gt;&lt;/a&gt;Converting the Apple identity to a Go &lt;code&gt;x509.Certificate&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;After we retrieve the array of identities from the keychain, we convert them to Go &lt;code&gt;x509.Certificate&lt;/code&gt; objects and pick the first one that is not expired.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;foundIdentity&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;identityMatchesArrayRef&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFArrayRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityMatches&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;numIdentities&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; int(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFArrayGetCount&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityMatchesArrayRef&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Found %d identities\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;numIdentities&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &amp;lt; &lt;span style="color:#a6e22e"&gt;numIdentities&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;&lt;span style="color:#f92672"&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;identityMatch&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFArrayGetValueAtIndex&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityMatchesArrayRef&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFIndex&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;identityRefToCert&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityMatch&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Make sure certificate is not expired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NotAfter&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;After&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;time&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Now&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;foundIdentity&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityMatch&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Found certificate from issuer %s with public key type %T\n&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Issuer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(), &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;identityRefToCert&lt;/code&gt; function converts the &lt;code&gt;SecIdentityRef&lt;/code&gt; to a Go &lt;code&gt;x509.Certificate&lt;/code&gt; object. It exports the certificate to PEM format using &lt;a class="link" href="https://developer.apple.com/documentation/security/1394828-secitemexport" target="_blank" rel="noopener"
&gt;SecItemExport&lt;/a&gt; and then parses the PEM to get the &lt;code&gt;x509.Certificate&lt;/code&gt; object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;identityRefToCert&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityRef&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityRef&lt;/span&gt;) (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Convert the identity to a certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;certificateRef&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecCertificateRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityCopyCertificate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityRef&lt;/span&gt;, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;certificateRef&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;failed to get certificate from identity: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;certificateRef&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Export the certificate to PEM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// SecItemExport: https://developer.apple.com/documentation/security/1394828-secitemexport&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pemDataRef&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecItemExport&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;certificateRef&lt;/span&gt;), &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecFormatPEMSequence&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecItemPemArmour&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;pemDataRef&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ); &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;failed to export certificate to PEM: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pemDataRef&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;certPEM&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;GoBytes&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataGetBytePtr&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pemDataRef&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.int(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataGetLength&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pemDataRef&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;rest&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Decode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;certPEM&lt;/span&gt;); &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;rest&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;pem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Decode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rest&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Type&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;CERTIFICATE&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ParseCertificate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Bytes&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error parsing client certificate: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="retrieve-the-private-key-reference-from-the-keychain"&gt;&lt;a href="#retrieve-the-private-key-reference-from-the-keychain" class="header-anchor"&gt;&lt;/a&gt;Retrieve the private key reference from the keychain
&lt;/h3&gt;&lt;p&gt;At this point, we also retrieve the private key reference from the keychain. We will use the private key reference to sign the &lt;code&gt;CertificateVerify&lt;/code&gt; message during the TLS handshake. The reference does not contain the private key. When importing private keys to the keychain, they should be marked as non-exportable so that no one can retrieve the private key cleartext from the keychain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecKeyRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityCopyPrivateKey&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;foundIdentity&lt;/span&gt;), &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;failed to copy private key ref from identity: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="building-the-custom-tlscertificate"&gt;&lt;a href="#building-the-custom-tlscertificate" class="header-anchor"&gt;&lt;/a&gt;Building the custom &lt;code&gt;tls.Certificate&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;Finally, we put together the custom &lt;code&gt;tls.Certificate&lt;/code&gt; using the &lt;code&gt;x509.Certificate&lt;/code&gt; and the private key reference.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;customSigner&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;: [][]&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Raw&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;PrivateKey&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;customSigner&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SupportedSignatureAlgorithms&lt;/span&gt;: []&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SignatureScheme&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;supportedAlgorithm&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our example only supports the &lt;code&gt;tls.PSSWithSHA256&lt;/code&gt; signature algorithm to keep the code simple. Adding additional algorithm support is easy since it only requires passing the right parameter to the &lt;code&gt;SecKeyCreateSignature&lt;/code&gt; function, which we will review next.&lt;/p&gt;
&lt;h2 id="signing-the-mtls-digest-with-apples-keychain"&gt;&lt;a href="#signing-the-mtls-digest-with-apples-keychain" class="header-anchor"&gt;&lt;/a&gt;Signing the mTLS digest with Apple&amp;rsquo;s keychain
&lt;/h2&gt;&lt;p&gt;As discussed in the previous &lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt; article, we need to sign the &lt;code&gt;CertificateVerify&lt;/code&gt; message during the TLS handshake. We will use the &lt;code&gt;CustomSigner&lt;/code&gt; to sign the digest, which implements the &lt;code&gt;crypto.Signer&lt;/code&gt; interface as defined in the Go standard library&amp;rsquo;s &lt;code&gt;crypto&lt;/code&gt; package.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecKeyRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Public&lt;/span&gt;() &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;crypto.Signer.Public\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Sign&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Reader&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SignerOpts&lt;/span&gt;) (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;signature&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;crypto.Signer.Sign with key type %T, opts type %T, hash %s\n&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Public&lt;/span&gt;(), &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;HashFunc&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Convert the digest to a CFDataRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;digestCFData&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataCreate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFAllocatorDefault&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UInt8&lt;/span&gt;)(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])), &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFIndex&lt;/span&gt;(len(&lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;digestCFData&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// SecKeyAlgorithm: https://developer.apple.com/documentation/security/seckeyalgorithm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// SecKeyCreateSignature: https://developer.apple.com/documentation/security/1643916-seckeycreatesignature&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;cfErrorRef&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFErrorRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;signCFData&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecKeyCreateSignature&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecKeyAlgorithmRSASignatureDigestPSSSHA256&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;digestCFData&lt;/span&gt;), &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;cfErrorRef&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;cfErrorRef&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;failed to sign data: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;cfErrorRef&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;signCFData&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Convert CFDataRef to Go byte slice&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;GoBytes&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataGetBytePtr&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;signCFData&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.int(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataGetLength&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;signCFData&lt;/span&gt;))), &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We use the &lt;a class="link" href="https://developer.apple.com/documentation/security/1643916-seckeycreatesignature" target="_blank" rel="noopener"
&gt;SecKeyCreateSignature&lt;/a&gt; function to sign the digest. The function takes the private key reference, the algorithm, the digest, and a pointer to a &lt;code&gt;CFErrorRef.&lt;/code&gt; The function returns a CFDataRef, which we convert to a Go byte slice. Additional algorithms can be supported by passing the proper parameter to the &lt;code&gt;SecKeyCreateSignature&lt;/code&gt; function.&lt;/p&gt;
&lt;h2 id="putting-it-all-together"&gt;&lt;a href="#putting-it-all-together" class="header-anchor"&gt;&lt;/a&gt;Putting it all together
&lt;/h2&gt;&lt;p&gt;With the above code, we can create our new Go mTLS client that uses the macOS keychain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;url&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Parse&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to is required&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Client&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;TLSClientConfig&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Config&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;signer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;MinVersion&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;VersionTLS13&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;MaxVersion&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;VersionTLS13&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Make a GET request to the URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Get&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error making get request: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;() { &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Close&lt;/span&gt;() }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Read the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadAll&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error reading response: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Print the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt;, string(&lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We limit the scope of this example to TLS 1.3&lt;/p&gt;
&lt;h2 id="build-the-mtls-client"&gt;&lt;a href="#build-the-mtls-client" class="header-anchor"&gt;&lt;/a&gt;Build the mTLS client
&lt;/h2&gt;&lt;p&gt;With &lt;code&gt;go build client-signer.go&lt;/code&gt;, we generate the &lt;code&gt;client-signer&lt;/code&gt; executable.&lt;/p&gt;
&lt;h2 id="setting-up-the-environment"&gt;&lt;a href="#setting-up-the-environment" class="header-anchor"&gt;&lt;/a&gt;Setting up the environment
&lt;/h2&gt;&lt;p&gt;The next step is to use the macOS keychain to store the client certificate and private key. We will use the same certificates and keys script from the &lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt; article. If you still need to generate the certificates and keys, please follow the instructions in that article.&lt;/p&gt;
&lt;p&gt;We must also import the generated certificates and keys into the macOS keychain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the server CA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain certs/server-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the client CA so that client TLS certificates can be verified&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain certs/client-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the client TLS certificate and key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security import certs/client.crt -k /Library/Keychains/System.keychain
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security import certs/client.key -k /Library/Keychains/System.keychain -x -T $PWD/client-signer -T /usr/bin/curl -T /Applications/Safari.app -T &lt;span style="color:#e6db74"&gt;&amp;#39;/Applications/Google Chrome.app&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We specify our application &lt;code&gt;$PWD/client-signer&lt;/code&gt; as one of the trusted applications that can access the private key. If we do not select the trusted application, we will get a security pop-up whenever our app tries to access the private key.&lt;/p&gt;
&lt;p&gt;Finally, as in the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article, we will use &lt;code&gt;docker compose up&lt;/code&gt; to start two nginx servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://localhost:8888 for TLS&lt;/li&gt;
&lt;li&gt;https://localhost:8889 for mTLS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="running-the-go-mtls-client-using-the-macos-keychain"&gt;&lt;a href="#running-the-go-mtls-client-using-the-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;Running the Go mTLS client using the macOS keychain
&lt;/h2&gt;&lt;p&gt;We can now run our mTLS client without pointing to certificate and key files. Hitting the ordinary TLS server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;./client-signer --url https://localhost:8888/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Returns the expected:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;TLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While hitting the mTLS server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;./client-signer --url https://localhost:8889/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Returns a more detailed message, including the print statements in our custom code:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Server requested certificate
Found 1 identities
Found certificate from issuer CN=testClientCA,OU=Your Unit,O=Your Organization,L=Austin,ST=Texas,C=US with public key type *rsa.PublicKey
crypto.Signer.Public
crypto.Signer.Public
crypto.Signer.Sign with key type *rsa.PublicKey, opts type *rsa.PSSOptions, hash SHA-256
mTLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="using-certificate-and-key-from-the-windows-certificate-store"&gt;&lt;a href="#using-certificate-and-key-from-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Using certificate and key from the Windows certificate store
&lt;/h2&gt;&lt;p&gt;The following article will explore &lt;a class="link" href="../mtls-with-windows" &gt;using the Windows certificate store to hold the mTLS client certificate and private key&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/mtls-go-apple-keychain" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/mtls-go-apple-keychain&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mtls-go-client-using-macos-keychain-video"&gt;&lt;a href="#mtls-go-client-using-macos-keychain-video" class="header-anchor"&gt;&lt;/a&gt;mTLS Go client using macOS keychain video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/iYWPrL4sR5U"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS (mTLS) Go client with custom certificate signer</title><link>https://victoronsoftware.com/posts/mtls-go-custom-signer/</link><pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-go-custom-signer/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-go-custom-signer/signer.png" alt="Featured image of post Mutual TLS (mTLS) Go client with custom certificate signer" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-client" &gt;mTLS Go client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-a-custom-certificate-signer"&gt;&lt;a href="#why-a-custom-certificate-signer" class="header-anchor"&gt;&lt;/a&gt;Why a custom certificate signer?
&lt;/h2&gt;&lt;p&gt;In the &lt;a class="link" href="../mtls-go-client" &gt;mTLS Go client&lt;/a&gt; article, we built a simple Go client that uses mTLS. Our client used Go standard library methods and loaded the client certificate and private key from the filesystem. However, keeping the private key on the filesystem is insecure and not recommended. We aim to build an mTLS client fully integrated with the operating system&amp;rsquo;s keystore.&lt;/p&gt;
&lt;p&gt;The first step toward that goal is to extract the functionality of the mTLS handshake that requires the private key. Luckily, the client&amp;rsquo;s private key is only needed to sign the &lt;code&gt;CertificateVerify&lt;/code&gt; message. The &lt;code&gt;CertificateVerify&lt;/code&gt; message is the last in the mTLS handshake. It proves to the server that the client has the private key associated with the client certificate.&lt;/p&gt;
&lt;figure&gt;&lt;img src="../mtls-hello-world/mtls-handshake.png"
alt="Mutual TLS (mTLS) handshake diagram"&gt;
&lt;/figure&gt;
&lt;p&gt;From &lt;a class="link" href="https://en.wikipedia.org/wiki/Transport_Layer_Security#Client-authenticated_TLS_handshake" target="_blank" rel="noopener"
&gt;Wikipedia entry on TLS&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The client sends a &lt;strong&gt;CertificateVerify&lt;/strong&gt; message, which is a signature over the previous handshake messages using the client&amp;rsquo;s certificate&amp;rsquo;s private key. This signature can be verified by using the client&amp;rsquo;s certificate&amp;rsquo;s public key. This lets the server know that the client has access to the private key of the certificate and thus owns the certificate.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="setting-up-the-environment"&gt;&lt;a href="#setting-up-the-environment" class="header-anchor"&gt;&lt;/a&gt;Setting up the environment
&lt;/h2&gt;&lt;p&gt;We will use the same certificates and keys script from the &lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt; article. If you still need to generate the certificates and keys, please follow the instructions in that article.&lt;/p&gt;
&lt;p&gt;In addition, we will import the generated certificates and keys into the macOS keychain. (In a future article, we will use the Windows Certificate Store instead.)&lt;/p&gt;
&lt;p&gt;Finally, as in the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article, we will use &lt;code&gt;docker compose up&lt;/code&gt; to start two nginx servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://localhost:8888 for TLS&lt;/li&gt;
&lt;li&gt;https://localhost:8889 for mTLS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="building-our-cryptosigner"&gt;&lt;a href="#building-our-cryptosigner" class="header-anchor"&gt;&lt;/a&gt;Building our crypto.Signer
&lt;/h2&gt;&lt;p&gt;We will build a custom &lt;code&gt;crypto.Signer&lt;/code&gt; that signs the &lt;code&gt;CertificateVerify&lt;/code&gt; message. The &lt;code&gt;crypto.Signer&lt;/code&gt; interface is defined in the Go standard library&amp;rsquo;s &lt;code&gt;crypto&lt;/code&gt; package. It is used to sign messages with a private key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// CustomSigner is a crypto.Signer that uses the client certificate and key to sign&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientKeyPath&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Public&lt;/span&gt;() &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;crypto.Signer.Public\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Sign&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rand&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Reader&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SignerOpts&lt;/span&gt;) (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;signature&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;crypto.Signer.Sign\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tlsCert&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;LoadX509KeyPair&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;clientKeyPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error loading client certificate: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Sign using %T\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;tlsCert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PrivateKey&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tlsCert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PrivateKey&lt;/span&gt;.(&lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Signer&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;Sign&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rand&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Although we still use the filesystem to load the client certificate and private key, we now use the &lt;code&gt;crypto.Signer&lt;/code&gt; interface to sign the &lt;code&gt;CertificateVerify&lt;/code&gt; message. In the future, we will replace this code by calls to the operating system&amp;rsquo;s keystore. The vital thing to note is that we only load the private key when we need to sign the digest and do not load the key during the client configuration.&lt;/p&gt;
&lt;h2 id="getting-the-client-certificate"&gt;&lt;a href="#getting-the-client-certificate" class="header-anchor"&gt;&lt;/a&gt;Getting the client certificate
&lt;/h2&gt;&lt;p&gt;Besides building a custom &lt;code&gt;crypto.Signer&lt;/code&gt;, we will implement a custom &lt;code&gt;GetClientCertificate&lt;/code&gt; function. This function will be called during the TLS handshake when the server requests a certificate from the client. The function will load the client certificate and create a &lt;code&gt;CustomSigner&lt;/code&gt; instance. It will not load the private key at this time. Once again, the client certificate is only loaded when needed and not during the client&amp;rsquo;s configuration.&lt;/p&gt;
&lt;p&gt;We set &lt;code&gt;Certificate: [][]byte{cert.Raw},&lt;/code&gt; because the Go implementation of the TLS handshake requires the client certificate here to validate it against the server&amp;rsquo;s CA.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;clientKeyPath&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Server requested certificate\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;clientKeyPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;errors&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;client certificate and key are required&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientBytes&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;os&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadFile&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error reading client certificate: %w&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;cert&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;rest&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Decode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;clientBytes&lt;/span&gt;); &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;rest&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;pem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Decode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rest&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Type&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;CERTIFICATE&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cert&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ParseCertificate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Bytes&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error parsing client certificate: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;: [][]&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Raw&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;PrivateKey&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;cert&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientKeyPath&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;clientKeyPath&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="putting-it-all-together"&gt;&lt;a href="#putting-it-all-together" class="header-anchor"&gt;&lt;/a&gt;Putting it all together
&lt;/h2&gt;&lt;p&gt;With the above customizations, we create our new Go mTLS client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;crypto/tls&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/getvictor/mtls/signer&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;url&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientCert&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;cert&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Client certificate file&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientKey&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;key&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Client key file&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Parse&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to is required&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Client&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;TLSClientConfig&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Config&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;info&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CertificateRequestInfo&lt;/span&gt;) (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;signer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;clientCert&lt;/span&gt;, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;clientKey&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Make a GET request to the URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Get&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error making get request: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;() { &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Close&lt;/span&gt;() }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Read the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadAll&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error reading response: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Print the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt;, string(&lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Trying to hit the mTLS server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run client-signer.go --url https://localhost:8889/hello-world.txt --cert certs/client.crt --key certs/client.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Returns the expected result:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;mTLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="using-certificate-and-key-from-the-macos-keychain"&gt;&lt;a href="#using-certificate-and-key-from-the-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;Using certificate and key from the macOS keychain
&lt;/h2&gt;&lt;p&gt;In the following article, we will &lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;use the macOS keychain to load the client certificate and generate the &lt;code&gt;CertificateVerify&lt;/code&gt; message without extracting the private key&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/mtls-go-custom-signer" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/mtls-go-custom-signer&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mtls-go-client-with-custom-certificate-signer-video"&gt;&lt;a href="#mtls-go-client-with-custom-certificate-signer-video" class="header-anchor"&gt;&lt;/a&gt;mTLS Go client with custom certificate signer video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/FsKMAEfn21w"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS (mTLS) Go client</title><link>https://victoronsoftware.com/posts/mtls-go-client/</link><pubDate>Wed, 07 Feb 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-go-client/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-go-client/go-client.png" alt="Featured image of post Mutual TLS (mTLS) Go client" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-go"&gt;&lt;a href="#what-is-go" class="header-anchor"&gt;&lt;/a&gt;What is Go?
&lt;/h2&gt;&lt;p&gt;Go is a statically typed, compiled programming language designed at Google. It is known for its simplicity, efficiency, and ease of use. Go is often used for building web servers, APIs, and command-line tools. We will use Go to make a client that uses mTLS.&lt;/p&gt;
&lt;h2 id="setting-up-the-environment"&gt;&lt;a href="#setting-up-the-environment" class="header-anchor"&gt;&lt;/a&gt;Setting up the environment
&lt;/h2&gt;&lt;p&gt;We will use the same certificates and keys script from the &lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt; article. If you still need to generate the certificates and keys, please follow the instructions in that article.&lt;/p&gt;
&lt;p&gt;In addition, we will import the generated certificates and keys into the macOS keychain. (In a future article, we will use the Windows Certificate Store instead.) Keeping private keys on the filesystem is insecure and not recommended. We aim to build an mTLS client fully integrated with the operating system&amp;rsquo;s keystore.&lt;/p&gt;
&lt;p&gt;Finally, as in the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article, we will use &lt;code&gt;docker compose up&lt;/code&gt; to start two nginx servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://localhost:8888 for TLS&lt;/li&gt;
&lt;li&gt;https://localhost:8889 for mTLS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="building-the-tls-go-client"&gt;&lt;a href="#building-the-tls-go-client" class="header-anchor"&gt;&lt;/a&gt;Building the TLS Go client
&lt;/h2&gt;&lt;p&gt;Below is a simple Go HTTP client.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;url&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Parse&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to is required&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Client&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Make a GET request to the URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Get&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error making get request: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;() { &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Close&lt;/span&gt;() }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Read the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadAll&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error reading response: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Print the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt;, string(&lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Trying the ordinary TLS server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run client.go --url https://localhost:8888/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Gives the expected result:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;TLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Go client is integrated with the system keystore out of the box.&lt;/p&gt;
&lt;p&gt;However, when trying the mTLS server with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run client.go --url https://localhost:8889/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We get the error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;400 No required SSL certificate was sent&amp;lt;/&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style="color:#f92672"&gt;h1&lt;/span&gt;&amp;gt;400 Bad Request&amp;lt;/&lt;span style="color:#f92672"&gt;h1&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;No required SSL certificate was sent&amp;lt;/&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;hr&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;nginx/1.25.3&amp;lt;/&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Go libraries are not integrated with the system keystore for using the mTLS client certificate and key.&lt;/p&gt;
&lt;h2 id="modifying-the-go-client-for-mtls"&gt;&lt;a href="#modifying-the-go-client-for-mtls" class="header-anchor"&gt;&lt;/a&gt;Modifying the Go client for mTLS
&lt;/h2&gt;&lt;p&gt;We will use the &lt;a class="link" href="https://pkg.go.dev/crypto/tls" target="_blank" rel="noopener"
&gt;crypto/tls&lt;/a&gt; package to build the mTLS client.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;crypto/tls&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;url&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientCert&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;cert&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Client certificate file&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientKey&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;key&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Client key file&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Parse&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to is required&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;clientCert&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;clientKey&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;LoadX509KeyPair&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;clientCert&lt;/span&gt;, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;clientKey&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error loading client certificate: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Client&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;TLSClientConfig&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Config&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Certificates&lt;/span&gt;: []&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Make a GET request to the URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Get&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error making get request: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;() { &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Close&lt;/span&gt;() }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Read the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadAll&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error reading response: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Print the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt;, string(&lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, trying the mTLS server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run client-mtls.go --url https://localhost:8889/hello-world.txt --cert certs/client.crt --key certs/client.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Returns the expected result:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;mTLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, we pass the client certificate and key as command-line arguments. In a real-world scenario, we want to use the system keystore to manage the client certificate and key.&lt;/p&gt;
&lt;h2 id="using-a-custom-signer-for-the-mtls-client-certificate"&gt;&lt;a href="#using-a-custom-signer-for-the-mtls-client-certificate" class="header-anchor"&gt;&lt;/a&gt;Using a custom signer for the mTLS client certificate
&lt;/h2&gt;&lt;p&gt;The following article will cover &lt;a class="link" href="../mtls-go-custom-signer" &gt;creating a custom Go signer for the mTLS client certificate&lt;/a&gt;. This work will pave the way for us to use the system keystore to manage the client certificate and key.&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/mtls-with-go" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/mtls-with-go&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mtls-go-client-video"&gt;&lt;a href="#mtls-go-client-video" class="header-anchor"&gt;&lt;/a&gt;mTLS Go client video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/8lNZUTBkfsU"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS (mTLS) with macOS keychain</title><link>https://victoronsoftware.com/posts/mtls-with-apple-keychain/</link><pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-with-apple-keychain/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-with-apple-keychain/mtls-safari.png" alt="Featured image of post Mutual TLS (mTLS) with macOS keychain" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;. Check out the previous article: &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="securing-mtls-certificates-and-keys"&gt;&lt;a href="#securing-mtls-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Securing mTLS certificates and keys
&lt;/h2&gt;&lt;p&gt;In the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article, we generated mTLS certificates and keys for the client and the server. We also created two certificate authorities (CAs) and signed the client and server certificates with their respective CAs. We ended up with the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server CA: &lt;code&gt;certs/server-ca.crt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;server CA private key: &lt;code&gt;certs/server-ca.key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TLS certificate for localhost server: &lt;code&gt;certs/server.crt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;server TLS certificate private key: &lt;code&gt;certs/server.key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;client CA: &lt;code&gt;certs/client-ca.crt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;client CA private key: &lt;code&gt;certs/client-ca.key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TLS certificate for client: &lt;code&gt;certs/client.crt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;client TLS certificate private key: &lt;code&gt;certs/client.key&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a real-world scenario, we would need to secure these files. The server CA private key and the client CA private key are the most important files to secure. If an attacker gets access to these files, they can create new certificates and impersonate the server or the client. These two files should be secured in a dedicated secure storage.&lt;/p&gt;
&lt;p&gt;The server will need access to the client CA, the server TLS certificate, and the server TLS certificate private key. The server TLS certificate private key is the most important to secure out of these three files.&lt;/p&gt;
&lt;p&gt;The client will need access to the server CA, the client TLS certificate, and the client TLS certificate private key. We can use the macOS keychain to secure these files. In a future article, we will show how to secure these on Windows with certificate stores.&lt;/p&gt;
&lt;h2 id="apples-macos-keychain"&gt;&lt;a href="#apples-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;Apple&amp;rsquo;s macOS keychain
&lt;/h2&gt;&lt;p&gt;As I&amp;rsquo;ve written in &lt;a class="link" href="../inspecting-keychain-files-on-macos" &gt;inspecting keychain files on macOS&lt;/a&gt;, keychains are the macOS&amp;rsquo;s method to track and protect secure information such as passwords, private keys, and certificates.&lt;/p&gt;
&lt;p&gt;The system keychain is located at &lt;code&gt;/Library/Keychains/System.keychain&lt;/code&gt;. It contains the root certificates and other certificates. The login keychain is located at &lt;code&gt;/Users/&amp;lt;username&amp;gt;/Library/Keychains/login.keychain-db&lt;/code&gt;. It contains the user&amp;rsquo;s certificates and private keys. In this example, we will use the system keychain, which all users on the system can access.&lt;/p&gt;
&lt;h2 id="generating-mtls-certificates-and-keys"&gt;&lt;a href="#generating-mtls-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Generating mTLS certificates and keys
&lt;/h2&gt;&lt;p&gt;We will use the following script to generate the mTLS certificates and keys. It resembles the script from the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# This script generates certificates and keys needed for mTLS.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p certs
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Private keys for CAs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/server-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/client-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate CA certificates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/server-ca.key -out certs/server-ca.crt -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testServerCA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/client-ca.key -out certs/client-ca.crt -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testClientCA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate a certificate signing request&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa:2048 -nodes -keyout certs/server.key -out certs/server.req -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testServerTLS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa:2048 -nodes -keyout certs/client.key -out certs/client.req -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testClientTLS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Have the CA sign the certificate requests and output the certificates.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/server.req -days &lt;span style="color:#ae81ff"&gt;398&lt;/span&gt; -CA certs/server-ca.crt -CAkey certs/server-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/server.crt -extfile localhost.ext
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/client.req -days &lt;span style="color:#ae81ff"&gt;398&lt;/span&gt; -CA certs/client-ca.crt -CAkey certs/client-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/client.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Clean up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm certs/server.req
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm certs/client.req
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The maximum validity period for a TLS certificate is 398 days. Apple will reject certificates with a more extended validity period.&lt;/p&gt;
&lt;h2 id="importing-client-mtls-certificates-and-keys-into-the-macos-keychain"&gt;&lt;a href="#importing-client-mtls-certificates-and-keys-into-the-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;Importing client mTLS certificates and keys into the macOS keychain
&lt;/h2&gt;&lt;p&gt;We will import the client mTLS certificates and keys into the macOS keychain using the following script. The script uses the &lt;a class="link" href="https://ss64.com/mac/security.html" target="_blank" rel="noopener"
&gt;security&lt;/a&gt; command line tool. Accessing the system keychain must be run as root (&lt;code&gt;sudo&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# This script imports mTLS certificates and keys into the Apple Keychain.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the server CA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain certs/server-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the client CA so that client TLS certificates can be verified&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain certs/client-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the client TLS certificate and key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security import certs/client.crt -k /Library/Keychains/System.keychain
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security import certs/client.key -k /Library/Keychains/System.keychain -x -T /usr/bin/curl -T /Applications/Safari.app -T &lt;span style="color:#e6db74"&gt;&amp;#39;/Applications/Google Chrome.app&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;-x&lt;/code&gt; option marks the imported key as non-extractable. No application or user can view the private key once it is imported. The private key can only be used indirectly via Apple&amp;rsquo;s APIs.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-T&lt;/code&gt; option specifies the applications that can access the key. Additional applications may be added later to the access control list.&lt;/p&gt;
&lt;h2 id="verifying-imported-certificates-and-keys"&gt;&lt;a href="#verifying-imported-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Verifying imported certificates and keys
&lt;/h2&gt;&lt;p&gt;As an extra step, we can verify the client and server certificates before using them in an application.&lt;/p&gt;
&lt;p&gt;We can verify the server certificate by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security verify-cert -c certs/server.crt -p ssl -s localhost -k /Library/Keychains/System.keychain
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output should include:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;...certificate verification successful.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Apple keychain automatically combines the certificate and the private key into an identity. We can verify the client identity by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security find-identity -p ssl-client /Library/Keychains/System.keychain
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The list of identities should include:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Policy: SSL (client)
Matching identities
1) B307B90CCD374080E74F1B15AF602B35A75D8401 &amp;#34;testClientTLS&amp;#34;
1 identities found
Valid identities only
1) B307B90CCD374080E74F1B15AF602B35A75D8401 &amp;#34;testClientTLS&amp;#34;
1 valid identities found
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;macOS can validate the identity because we also imported the client CA into the system keychain.&lt;/p&gt;
&lt;h2 id="running-the-mtls-server"&gt;&lt;a href="#running-the-mtls-server" class="header-anchor"&gt;&lt;/a&gt;Running the mTLS server
&lt;/h2&gt;&lt;p&gt;As in the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article, we will use &lt;code&gt;docker compose up&lt;/code&gt; to start two nginx servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://localhost:8888 for TLS&lt;/li&gt;
&lt;li&gt;https://localhost:8889 for mTLS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="connecting-to-the-tls-and-mtls-servers-with-clients"&gt;&lt;a href="#connecting-to-the-tls-and-mtls-servers-with-clients" class="header-anchor"&gt;&lt;/a&gt;Connecting to the TLS and mTLS servers with clients
&lt;/h2&gt;&lt;p&gt;Because the server CA was added to the system keychain, curl can now access the TLS server without any additional flags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl https://localhost:8888/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, the built-in curl client cannot access the mTLS server. We use the &lt;code&gt;-v&lt;/code&gt; option for additional information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -v https://localhost:8889/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;* Trying [::1]:8889...
* Connected to localhost (::1) port 8889
* ALPN: curl offers h2,http/1.1
* (304) (OUT), TLS handshake, Client hello (1):
* CAfile: /etc/ssl/cert.pem
* CApath: none
* (304) (IN), TLS handshake, Server hello (2):
* (304) (IN), TLS handshake, Unknown (8):
* (304) (IN), TLS handshake, Request CERT (13):
* (304) (IN), TLS handshake, Certificate (11):
* (304) (IN), TLS handshake, CERT verify (15):
* (304) (IN), TLS handshake, Finished (20):
* (304) (OUT), TLS handshake, Certificate (11):
* (304) (OUT), TLS handshake, Finished (20):
* SSL connection using TLSv1.3 / AEAD-CHACHA20-POLY1305-SHA256
* ALPN: server accepted http/1.1
* Server certificate:
* subject: C=US; ST=Texas; L=Austin; O=Your Organization; OU=Your Unit; CN=testServerTLS
* start date: Jan 28 17:08:10 2024 GMT
* expire date: Mar 1 17:08:10 2025 GMT
* subjectAltName: host &amp;#34;localhost&amp;#34; matched cert&amp;#39;s &amp;#34;localhost&amp;#34;
* issuer: C=US; ST=Texas; L=Austin; O=Your Organization; OU=Your Unit; CN=testServerCA
* SSL certificate verify ok.
* using HTTP/1.1
&amp;gt; GET /hello-world.txt HTTP/1.1
&amp;gt; Host: localhost:8889
&amp;gt; User-Agent: curl/8.4.0
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 400 Bad Request
&amp;lt; Server: nginx/1.25.3
&amp;lt; Date: Sun, 28 Jan 2024 18:28:20 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: 237
&amp;lt; Connection: close
&amp;lt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;400 No required SSL certificate was sent&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;400 Bad Request&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;center&amp;gt;No required SSL certificate was sent&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.25.3&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
* Closing connection
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The client attempted the TLS handshake, but the server rejected the connection because the client did not provide a certificate. Our built-in curl client does not currently support mTLS using the macOS keychain. The client used for this example is:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;curl 8.4.0 (x86_64-apple-darwin23.0) libcurl/8.4.0 (SecureTransport) LibreSSL/3.3.6 zlib/1.2.12 nghttp2/1.55.1
Release-Date: 2023-10-11
Protocols: dict file ftp ftps gopher gophers http https imap imaps ldap ldaps mqtt pop3 pop3s rtsp smb smbs smtp smtps telnet tftp
Features: alt-svc AsynchDNS GSS-API HSTS HTTP2 HTTPS-proxy IPv6 Kerberos Largefile libz MultiSSL NTLM NTLM_WB SPNEGO SSL threadsafe UnixSockets
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On the other hand, Safari can access the mTLS server. We can verify this by opening the following URL in Safari:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;https://localhost:8889/hello-world.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We see the following popup:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/mtls-with-apple-keychain/mtls-safari.png"
alt="Safari mTLS popup"&gt;&lt;figcaption&gt;
&lt;p&gt;Safari mTLS popup&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We can click &lt;strong&gt;Continue&lt;/strong&gt; to connect to the mTLS server. Future connections will not show the popup and will automatically use the client certificate.&lt;/p&gt;
&lt;p&gt;Google Chrome&amp;rsquo;s behavior is similar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If we did not add Safari as an application that can access the client key, Safari would ask for a username and password to connect to the system keychain.&lt;/p&gt;
&lt;h2 id="creating-our-own-mtls-client"&gt;&lt;a href="#creating-our-own-mtls-client" class="header-anchor"&gt;&lt;/a&gt;Creating our own mTLS client
&lt;/h2&gt;&lt;p&gt;In the following article, we will &lt;a class="link" href="../mtls-go-client" &gt;create our own mTLS client with the Go programming language&lt;/a&gt;. This is the first step toward &lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;creating an mTLS client integrated with the macOS keychain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Later, we will &lt;a class="link" href="../mtls-with-windows" &gt;use mTLS with the Windows certificate store&lt;/a&gt; and &lt;a class="link" href="../mtls-go-client-windows-certificate-store" &gt;create an mTLS client integrated with the Windows certificate store&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we explained &lt;a class="link" href="../macos-launchd-agents-and-daemons/" &gt;agents and daemons and plists on macOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also showed &lt;a class="link" href="../script-only-macos-install-package/" &gt;how to convert a script into a macOS install package&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/mtls-with-apple-keychain" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/mtls-with-apple-keychain&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mtls-with-macos-keychain-video"&gt;&lt;a href="#mtls-with-macos-keychain-video" class="header-anchor"&gt;&lt;/a&gt;mTLS with macOS keychain video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Y0y6-cCzz8w"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS intro and hands-on example</title><link>https://victoronsoftware.com/posts/mtls-hello-world/</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-hello-world/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-hello-world/mtls-handshake.png" alt="Featured image of post Mutual TLS intro and hands-on example" /&gt;&lt;h2 id="what-is-mtls-mutual-tls"&gt;&lt;a href="#what-is-mtls-mutual-tls" class="header-anchor"&gt;&lt;/a&gt;What is mTLS (mutual TLS)?
&lt;/h2&gt;&lt;p&gt;TLS stands for Transport Layer Security. It is a cryptographic protocol that provides privacy and data integrity between
two communicating applications. It is the successor to SSL (Secure Sockets Layer).&lt;/p&gt;
&lt;p&gt;In ordinary (non-mutual) TLS, the client authenticates the server, but the server does not authenticate the client. Most
websites use regular TLS. The client (web browser) knows it is talking to the correct server (website), but the server
knows very little about the client. Instead, web applications use other client authentication methods, such as
passwords, cookies, and session tokens.&lt;/p&gt;
&lt;p&gt;Mutual TLS (mTLS) is a way to authenticate both the client and the server in a TLS connection. It is also known as
client certificate authentication. In addition to the server authenticating itself to the client, the client also
authenticates itself to the server.&lt;/p&gt;
&lt;p&gt;mTLS is helpful as an additional layer of security. It is used in many applications, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VPNs&lt;/li&gt;
&lt;li&gt;Microservices&lt;/li&gt;
&lt;li&gt;Service mesh&lt;/li&gt;
&lt;li&gt;IoT (Internet of Things)&lt;/li&gt;
&lt;li&gt;Mobile apps&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-does-fleet-device-management-use-mtls"&gt;&lt;a href="#how-does-fleet-device-management-use-mtls" class="header-anchor"&gt;&lt;/a&gt;How does &lt;a class="link" href="https://fleetdm.com" target="_blank" rel="noopener"
&gt;Fleet Device Management&lt;/a&gt; use mTLS?
&lt;/h2&gt;&lt;p&gt;Many of Fleet&amp;rsquo;s customers use mTLS as an additional layer of security to authenticate the Fleet server to the Fleet
agent. The Fleet agent is a small program that runs on each host device, such as a corporate laptop. It collects
information about the host and sends it to the Fleet server.&lt;/p&gt;
&lt;h2 id="how-does-mtls-work"&gt;&lt;a href="#how-does-mtls-work" class="header-anchor"&gt;&lt;/a&gt;How does mTLS work?
&lt;/h2&gt;&lt;p&gt;TLS is a complex protocol with multiple versions (1.2, 1.3, etc.). We will only go over the basics to understand how
mTLS works.&lt;/p&gt;
&lt;p&gt;TLS uses a handshake protocol to establish a secure connection. The handshake protocol is a series of messages between
the client and the server.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/mtls-hello-world/mtls-handshake.png"
alt="Mutual TLS (mTLS) handshake diagram"&gt;
&lt;/figure&gt;
&lt;p&gt;The client sends a &amp;ldquo;Client Hello&amp;rdquo; message to the server. The server responds with a &amp;ldquo;Server Hello&amp;rdquo; message and sends its
certificate to the client. As an additional step for mTLS, the server requests a certificate from the client.&lt;/p&gt;
&lt;p&gt;The client verifies the server&amp;rsquo;s certificate by checking the certificate&amp;rsquo;s signature and verifying that the certificate
is valid and has not expired. The client also checks that the server&amp;rsquo;s hostname matches the hostname in the certificate.&lt;/p&gt;
&lt;p&gt;The client uses the server&amp;rsquo;s public key to encrypt the messages sent to the server, including the session key and its
certificate. The server decrypts these messages with its private key.&lt;/p&gt;
&lt;p&gt;The client also sends a digital signature, encrypted with its private key, to the server. The server verifies the
signature by decrypting it with the client&amp;rsquo;s public key.&lt;/p&gt;
&lt;p&gt;At this point, both the client and the server have verified each other&amp;rsquo;s identity. They complete the TLS handshake and
can exchange encrypted messages using a symmetric session key.&lt;/p&gt;
&lt;h2 id="generate-certificates-and-keys"&gt;&lt;a href="#generate-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Generate certificates and keys
&lt;/h2&gt;&lt;p&gt;We will use the &lt;a class="link" href="https://www.openssl.org/" target="_blank" rel="noopener"
&gt;OpenSSL&lt;/a&gt; command line tool to generate the certificates. OpenSSL is a popular
open-source library for TLS and SSL protocols.&lt;/p&gt;
&lt;p&gt;The following script generates the certificates and keys for the client and the server. It also creates two certificate
authorities (CAs) and signs the client and server certificates with their respective CA. The same CA may sign the
certificates, but we will use separate CAs for this example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# This script generates files needed for mTLS.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p certs
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Private keys for CAs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/server-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/client-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate CA certificates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/server-ca.key -out certs/server-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/client-ca.key -out certs/client-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate a certificate signing request&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa:2048 -nodes -keyout certs/server.key -out certs/server.req
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa:2048 -nodes -keyout certs/client.key -out certs/client.req
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Have the CA sign the certificate requests and output the certificates.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/server.req -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -CA certs/server-ca.crt -CAkey certs/server-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/server.crt -extfile localhost.ext
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/client.req -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -CA certs/client-ca.crt -CAkey certs/client-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/client.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Clean up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm certs/server.req
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm certs/client.req
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;localhost.ext&lt;/code&gt; file is used to specify the hostname for the server certificate. In our example, we will use
&lt;code&gt;localhost&lt;/code&gt;. The file contains the following:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = localhost
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="run-the-mtls-server"&gt;&lt;a href="#run-the-mtls-server" class="header-anchor"&gt;&lt;/a&gt;Run the mTLS server
&lt;/h2&gt;&lt;p&gt;We will use &lt;a class="link" href="https://www.nginx.com/" target="_blank" rel="noopener"
&gt;nginx&lt;/a&gt; as our mTLS server. nginx is a popular open-source web server.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;docker compose&lt;/code&gt;, we can run two nginx servers. One server will use ordinary TLS, and one will use mutual TLS. We
will use the following &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;version&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;nginx-tls&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;nginx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/server.crt:/etc/nginx/certificates/server.crt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/server.key:/etc/nginx/certificates/server.key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./nginx-tls/nginx.conf:/etc/nginx/conf.d/default.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./nginx-tls/hello-world.txt:/www/data/hello-world.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#34;8888:8888&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;nginx-mtls&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;nginx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/server.crt:/etc/nginx/certificates/server.crt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/server.key:/etc/nginx/certificates/server.key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/client-ca.crt:/etc/nginx/certificates/client-ca.crt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./nginx-mtls/nginx.conf:/etc/nginx/conf.d/default.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./nginx-mtls/hello-world.txt:/www/data/hello-world.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#34;8889:8889&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;nginx-tls&lt;/code&gt; service uses the &lt;code&gt;nginx-tls/nginx.conf&lt;/code&gt; file, which contains the following:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;server {
listen 8888 ssl;
server_name tls-hello-world;
# Server TLS certificate (client must have the CA cert to connect)
ssl_certificate /etc/nginx/certificates/server.crt;
ssl_certificate_key /etc/nginx/certificates/server.key;
location / {
root /www/data;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;nginx-mtls&lt;/code&gt; service uses the &lt;code&gt;nginx-mtls/nginx.conf&lt;/code&gt; file, which contains the following:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;server {
listen 8889 ssl;
server_name mtls-hello-world;
# Server TLS certificate (client must have the CA cert to connect)
ssl_certificate /etc/nginx/certificates/server.crt;
ssl_certificate_key /etc/nginx/certificates/server.key;
# Enable mTLS
ssl_client_certificate /etc/nginx/certificates/client-ca.crt;
ssl_verify_client on;
location / {
root /www/data;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;hello-world.txt&lt;/code&gt; files contain a simple text message.&lt;/p&gt;
&lt;h2 id="connect-to-the-mtls-server-with-curl-client"&gt;&lt;a href="#connect-to-the-mtls-server-with-curl-client" class="header-anchor"&gt;&lt;/a&gt;Connect to the mTLS server with curl client
&lt;/h2&gt;&lt;p&gt;We can connect to the mTLS server with the &lt;code&gt;curl&lt;/code&gt; command line tool. We will use the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl https://localhost:8889/hello-world.txt --cacert ./certs/server-ca.crt --cert ./certs/client.crt --key ./certs/client.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;--cacert&lt;/code&gt; option specifies the CA certificate that signed the server certificate. The &lt;code&gt;--cert&lt;/code&gt; and &lt;code&gt;--key&lt;/code&gt; options
select the client certificate and key.&lt;/p&gt;
&lt;p&gt;To connect to the ordinary TLS server, we do not need to specify the client certificate and key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl https://localhost:8888/hello-world.txt --cacert ./certs/server-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Curl can use &lt;code&gt;--insecure&lt;/code&gt; to ignore the server certificate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl --insecure https://localhost:8888/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, it is impossible to ignore the client certificate for mTLS. The server will reject the connection if the client
does not provide a valid certificate.&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/hello-world" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/hello-world&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="securing-mtls-certificates-and-keys"&gt;&lt;a href="#securing-mtls-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Securing mTLS certificates and keys
&lt;/h2&gt;&lt;p&gt;In the next article, we will
&lt;a class="link" href="../mtls-with-apple-keychain" &gt;secure the mTLS certificates and keys with the macOS keychain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a later article, we also
&lt;a class="link" href="../mtls-with-windows" &gt;secure the mTLS certificates and keys with the Windows certificate store&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class="link" href="../how-to-use-tpm/" &gt;How to Use TPM 2.0 to Secure Private Keys&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;Learn how to create, manage, and use TPM-backed
keys, including parent/child key hierarchies and secure signing.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mtls-hello-world-video"&gt;&lt;a href="#mtls-hello-world-video" class="header-anchor"&gt;&lt;/a&gt;mTLS Hello World video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/WA_RL_QtIgY"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Understanding the intricacies of Fleet policies</title><link>https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/</guid><description>&lt;img src="https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/understanding-the-intricacies-of-fleet-policies-main-policies-page-1999x978@2x.png" alt="Featured image of post Understanding the intricacies of Fleet policies" /&gt;&lt;p&gt;In the ever-evolving landscape of device management and cybersecurity, understanding the mechanics behind tools like Fleet is not just about technical curiosity; it&amp;rsquo;s about empowering IT professionals to safeguard digital assets more effectively. &lt;a class="link" href="https://fleetdm.com" target="_blank" rel="noopener"
&gt;Fleet&lt;/a&gt; gathers telemetry from various devices, from laptops to virtual machines, using &lt;a class="link" href="https://www.osquery.io/" target="_blank" rel="noopener"
&gt;osquery&lt;/a&gt;. At the heart of this system lies a crucial feature: &lt;a class="link" href="https://fleetdm.com/securing/what-are-fleet-policies" target="_blank" rel="noopener"
&gt;Fleet policies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Policies in Fleet are more than just rules; they are the gatekeepers of your device&amp;rsquo;s security, ensuring stringent adherence to security standards. By dissecting how Fleet policies operate &amp;ldquo;under the hood,&amp;rdquo; IT administrators and security professionals can gain invaluable insights. These insights allow for setting up efficient security protocols and rapid response to potential vulnerabilities, a necessity in a landscape where cyber threats are constantly evolving. This article delves into the inner workings of Fleet policies, providing you with the knowledge to better configure, manage, and leverage these policies for optimal device security and efficiency.&lt;/p&gt;
&lt;h2 id="policy-creation"&gt;&lt;a href="#policy-creation" class="header-anchor"&gt;&lt;/a&gt;Policy creation
&lt;/h2&gt;&lt;p&gt;Policies can be created from the web UI, the command-line interface called &lt;code&gt;fleetctl&lt;/code&gt; with config files, or the REST API. The user creates a policy and selects which devices need to be checked using that policy. Policies can be global or team-specific.&lt;/p&gt;
&lt;p&gt;When a policy is created, a record for it is stored in the &lt;strong&gt;policies&lt;/strong&gt; table of the MySQL database. A Fleet deployment consists of several servers behind a load balancer, so storing the record in the DB makes all servers aware of the new policy.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/understanding-the-intricacies-of-fleet-policies-policy-creation-1280x720@2x.png"
alt="Fleet policies block diagram"&gt;
&lt;/figure&gt;
&lt;h2 id="policy-execution"&gt;&lt;a href="#policy-execution" class="header-anchor"&gt;&lt;/a&gt;Policy execution
&lt;/h2&gt;&lt;p&gt;Policies are executed on the devices, which are called &lt;strong&gt;hosts&lt;/strong&gt; in Fleet, according to the &lt;a class="link" href="https://fleetdm.com/docs/configuration/fleet-server-configuration#osquery-policy-update-interval" target="_blank" rel="noopener"
&gt;FLEET_OSQUERY_POLICY_UPDATE_INTERVAL&lt;/a&gt;, which is set to 1 hour by default. This interval can be adjusted with the environment variable or set from the server’s command line.&lt;/p&gt;
&lt;p&gt;Policies are simply SQL queries that return a true or false result, so the flow they use on the hosts is the same as other queries. Hosts check in with Fleet servers every 10 seconds (the default) and access the &lt;code&gt;/api/v1/osquery/distributed/read&lt;/code&gt; API endpoint. The server checks when the policy was last executed to determine whether it should be executed again. If so, the server adds the policy to its response. For example, this policy in the server response checks if the macOS firewall is enabled:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;{
&amp;#34;queries&amp;#34;: {
&amp;#34;fleet_policy_query_9&amp;#34;: &amp;#34;SELECT 1 FROM alf WHERE global_state &amp;gt;= 1;&amp;#34;
},
&amp;#34;discovery&amp;#34;: {
&amp;#34;fleet_policy_query_9&amp;#34;: &amp;#34;SELECT 1&amp;#34;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the host has executed the policy, it writes the result to the server. The server updates the result in the &lt;strong&gt;policy_membership&lt;/strong&gt; table of the MySQL database. At this point, the Host Details page on the web UI is updated with the policy result.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/understanding-the-intricacies-of-fleet-policies-host-policy-view-1818x1999@2x.png"
alt="Fleet policies on host details page"&gt;
&lt;/figure&gt;
&lt;h2 id="force-policy-execution-on-a-device"&gt;&lt;a href="#force-policy-execution-on-a-device" class="header-anchor"&gt;&lt;/a&gt;Force policy execution on a device
&lt;/h2&gt;&lt;p&gt;The user can force the host to execute all of its policies by clicking the &lt;strong&gt;Refetch&lt;/strong&gt; link:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/understanding-the-intricacies-of-fleet-policies-refetch-204x64@2x.png"
alt="Fleet refetch host details"&gt;
&lt;/figure&gt;
&lt;h2 id="policy-results-aggregation"&gt;&lt;a href="#policy-results-aggregation" class="header-anchor"&gt;&lt;/a&gt;Policy results aggregation
&lt;/h2&gt;&lt;p&gt;However, the main &lt;strong&gt;Policies&lt;/strong&gt; page is not updated. This page shows the counts of all passing and failing hosts for each policy. A worker process on one of the Fleet servers updates it once an hour. The worker calculates the counts and stores them in the &lt;strong&gt;policy_stats&lt;/strong&gt; table in the database. This is done for better performance of the UI. For customers with 100,000s of hosts that asynchronously report their policy results, calculating the passing and failing counts in real time was noticeably slow.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/understanding-the-intricacies-of-fleet-policies-main-policies-page-1999x978@2x.png"
alt="Fleet policies page"&gt;
&lt;/figure&gt;
&lt;h2 id="summary"&gt;&lt;a href="#summary" class="header-anchor"&gt;&lt;/a&gt;Summary
&lt;/h2&gt;&lt;p&gt;Understanding the intricacies of Fleet policies is essential for IT professionals managing a fleet of devices. This deep dive into the mechanics of Fleet policies — from creation to execution — provides you with the necessary insights to optimize your cybersecurity strategy effectively. By leveraging these policies, you can ensure stringent security standards across your network, enhancing your organization&amp;rsquo;s digital defense. As the cyber landscape evolves, tools like Fleet remain crucial in maintaining robust and responsive security protocols. We encourage you to apply these insights in your Fleet usage, and as always, we welcome your feedback and experiences in the &lt;a class="link" href="https://fleetdm.com/support" target="_blank" rel="noopener"
&gt;Fleet community Slack channels&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="understanding-the-intricacies-of-fleet-policies-video"&gt;&lt;a href="#understanding-the-intricacies-of-fleet-policies-video" class="header-anchor"&gt;&lt;/a&gt;Understanding the intricacies of Fleet policies video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/A-Qapp7vYJk"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;This article originally appeared in &lt;a class="link" href="https://fleetdm.com/guides/understanding-the-intricacies-of-fleet-policies" target="_blank" rel="noopener"
&gt;Fleet&amp;rsquo;s blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description></item><item><title>Get current telemetry from your devices with live queries</title><link>https://victoronsoftware.com/posts/get-current-telemetry-from-your-devices-with-live-queries/</link><pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/get-current-telemetry-from-your-devices-with-live-queries/</guid><description>&lt;img src="https://victoronsoftware.com/posts/get-current-telemetry-from-your-devices-with-live-queries/Live%20Query.png" alt="Featured image of post Get current telemetry from your devices with live queries" /&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Jh14hNjW0Uo"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="link" href="https://fleetdm.com/" target="_blank" rel="noopener"
&gt;Fleet&lt;/a&gt; is an open-source platform for managing and gathering telemetry from devices such as laptops, desktops, VMs, etc. &lt;a class="link" href="https://www.osquery.io/" target="_blank" rel="noopener"
&gt;Osquery&lt;/a&gt; agents run on these devices and report to the Fleet server. One of Fleet’s features is the ability to query information from the devices in near real-time, called &lt;em&gt;live queries&lt;/em&gt;. This article discusses how live queries work “under the hood.”&lt;/p&gt;
&lt;h2 id="why-a-live-query"&gt;&lt;a href="#why-a-live-query" class="header-anchor"&gt;&lt;/a&gt;Why a live query?
&lt;/h2&gt;&lt;p&gt;Live queries enable administrators to ask near real-time questions of all online devices, such as checking the encryption status of SSH keys across endpoints, or obtaining the uptime of each server within their purview. This enables them to promptly identify and address any issues, thereby reducing downtime and maintaining operational efficiency. These tasks, which would be time-consuming and complex if done manually, are streamlined through live queries, offering real-time insights into the status and posture of the entire fleet of devices helping IT and security.&lt;/p&gt;
&lt;h2 id="live-queries-under-the-hood"&gt;&lt;a href="#live-queries-under-the-hood" class="header-anchor"&gt;&lt;/a&gt;Live queries under the hood
&lt;/h2&gt;&lt;p&gt;Live queries can be run from the web UI, the command-line interface called &lt;code&gt;fleetctl&lt;/code&gt;, or the REST API. The user creates a query and selects which devices will run that query. Here is an example using &lt;code&gt;fleetctl&lt;/code&gt; to obtain the operating system name and version for all devices:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fleetctl query --query &lt;span style="color:#e6db74"&gt;&amp;#34;select name, version from os_version;&amp;#34;&lt;/span&gt; --labels &lt;span style="color:#e6db74"&gt;&amp;#34;All Hosts&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When a client initiates a live query, the server first creates a &lt;strong&gt;Query Campaign&lt;/strong&gt; record in the MySQL database. A Fleet deployment consists of several servers behind a load balancer, so storing the record in the DB makes all servers aware of the new query campaign.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/get-current-telemetry-from-your-devices-with-live-queries/Live%20Query.png"
alt="Query campaign"&gt;&lt;figcaption&gt;
&lt;h4&gt;Query campaign&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As devices called &lt;strong&gt;Hosts&lt;/strong&gt; in Fleet check in with the servers, they receive instructions to run a query. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;queries&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;fleet_distributed_query_140&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;SELECT name, version FROM os_version;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;discovery&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;fleet_distributed_query_140&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;SELECT 1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, the osquery agents run the actual query on their host, and write the result back to a Fleet server. As a server receives the result, it publishes it to the common cache using &lt;a class="link" href="https://redis.io/docs/interact/pubsub/" target="_blank" rel="noopener"
&gt;Redis Pub/Sub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Only the one server communicating with the client subscribes to the results. It processes the data from the cache, keeps track of how many hosts reported back, and communicates results back to the client. The web UI and &lt;code&gt;fleetctl&lt;/code&gt; interfaces use a &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" target="_blank" rel="noopener"
&gt;WebSockets API&lt;/a&gt;, and results are reported as they come in. The REST API, on the other hand, only sends a response after all online hosts have reported their query results.&lt;/p&gt;
&lt;h2 id="discover-more"&gt;&lt;a href="#discover-more" class="header-anchor"&gt;&lt;/a&gt;Discover more
&lt;/h2&gt;&lt;p&gt;Fleet’s live query feature represents a powerful tool in the arsenal of IT and security administrators. By harnessing the capabilities of live queries, tasks that once required extensive manual effort can now be executed swiftly and efficiently. This real-time querying ability enhances operational efficiency and significantly bolsters security and compliance measures across a range of devices.&lt;/p&gt;
&lt;p&gt;The integration of Fleet with Osquery agents, the flexibility offered by interfaces like the web UI, &lt;code&gt;fleetctl&lt;/code&gt;, and the REST API, and the efficient data handling through mechanisms like Redis Pub/Sub and WebSockets API all come together to create a robust, real-time telemetry gathering system. This system is designed to keep you informed about the current state of your device fleet, helping you make informed decisions quickly.&lt;/p&gt;
&lt;p&gt;As you reflect on the capabilities of live queries with Fleet, consider your network environment&amp;rsquo;s unique challenges and needs. &lt;strong&gt;What questions could live queries help you answer about your devices?&lt;/strong&gt; Whether it&amp;rsquo;s security audits, performance monitoring, or compliance checks, live queries offer a dynamic solution to address these concerns.&lt;/p&gt;
&lt;p&gt;We encourage you to explore the possibilities and share your thoughts or questions. Perhaps you’re facing a specific query challenge or an innovative use case you’ve discovered. Whatever it may be, the world of live queries is vast and ripe for exploration. Join us in &lt;a class="link" href="https://fleetdm.com/support" target="_blank" rel="noopener"
&gt;Fleet’s Slack forums&lt;/a&gt; to engage with a community of like-minded professionals and deepen your understanding of what live queries can achieve in your environment.&lt;/p&gt;
&lt;p&gt;API Documentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://fleetdm.com/docs/rest-api/rest-api#run-live-query" target="_blank" rel="noopener"
&gt;Run live query with REST API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://github.com/fleetdm/fleet/blob/6fd06d648601edd89c01e25426e2e35ff2a8a37b/docs/Contributing/API-for-contributors.md#run-live-query" target="_blank" rel="noopener"
&gt;Run live query with WebSockets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;This article originally appeared in &lt;a class="link" href="https://fleetdm.com/guides/get-current-telemetry-from-your-devices-with-live-queries" target="_blank" rel="noopener"
&gt;Fleet&amp;rsquo;s blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description></item><item><title>Physical security meets cybersecurity with Matter</title><link>https://victoronsoftware.com/posts/physical-security-meets-cybersecurity-with-matter/</link><pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/physical-security-meets-cybersecurity-with-matter/</guid><description>&lt;img src="https://victoronsoftware.com/posts/physical-security-meets-cybersecurity-with-matter/cover.png" alt="Featured image of post Physical security meets cybersecurity with Matter" /&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/mIVsLTrUork"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Matter is a recent open-source standard for connecting devices such as light switches, door locks,
motion sensors, and many others. The major goals of the standard are compatibility and
interoperability. This means that you will no longer need to be an expert hacker when trying to
control devices from multiple manufacturers under a single application. Apple, Amazon, and Google
are some of the major members driving the standard. This is great news for the majority of adopters
who haven’t yet fully embraced home automation and security.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/physical-security-meets-cybersecurity-with-matter/matter.jpeg"&gt;
&lt;/figure&gt;
&lt;p&gt;The Matter specification is published by
the &lt;a class="link" href="https://csa-iot.org/" target="_blank" rel="noopener"
&gt;Connectivity Standards Alliance&lt;/a&gt; (CSA) and includes a
&lt;a class="link" href="https://github.com/project-chip/connectedhomeip" target="_blank" rel="noopener"
&gt;software development kit&lt;/a&gt;. Version 1.0 of the
specification was released in October of 2022. In 2023,
we saw a slew of new devices and software upgrades compatible with Matter. Version 1.2 of the
specification was published in October of 2023. However, this latest specification is still missing
support for a few important device categories such as cameras and major appliances. Cameras are a
top priority for the CSA, and we may see Matter-compatible cameras in 2024.&lt;/p&gt;
&lt;p&gt;Matter is an important step for the management of IoT devices because it finally brings true
interoperability where it has been sorely missing for so many years. No longer will device
manufacturers need to decide and budget precious software resources to support Amazon Alexa, Google
Home, Apple HomeKit, or another connectivity hub. Customers will no longer be locked into using one
of the major home automation providers. And home automation solutions from smaller companies will
come onto the market.&lt;/p&gt;
&lt;p&gt;An important feature of Matter is &lt;strong&gt;multi-admin&lt;/strong&gt;, which means that devices can be read and
controlled by multiple clients. In Matter terminology, the device, such as a motion sensor, is
called a server or node, and the applications controlling it are called clients. For example, a
light switch may be simultaneously controlled by the manufacturer’s app, by Alexa, and by the user&amp;rsquo;s
hand-written custom API client.&lt;/p&gt;
&lt;p&gt;Multi-admin support means that a home or business may use one application to control their locks,
switches, and security sensors, and another application for reading telemetry from those same
devices. Businesses will find it easier to integrate physical security with cyber security. For
example, suppose a business’s device management server uses Matter to subscribe to the office door
lock. It receives an alert that &lt;em&gt;User A&lt;/em&gt; has entered their code. Afterwards, via regular scheduled
telemetry, it notices a successful login to &lt;em&gt;Computer B&lt;/em&gt;. The business SIEM (security information and
event management) system should immediately flag this suspicious sequence of events.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/physical-security-meets-cybersecurity-with-matter/cover.png"
alt="Physical security with Matter"&gt;
&lt;/figure&gt;
&lt;p&gt;Of course, the example above can be accomplished today by writing some custom code or using a third party integration. What Matter brings is scalability to such security approaches. The code and integration will no longer need to be redone for each new device and version that comes onto the market.&lt;/p&gt;</description></item><item><title>Inspecting keychain files on macOS</title><link>https://victoronsoftware.com/posts/inspecting-keychain-files-on-macos/</link><pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/inspecting-keychain-files-on-macos/</guid><description>&lt;p&gt;Keychains are the macOS’s method to track and protect secure information such as passwords, private keys, and
certificates. Traditionally, the keychain information was stored in files, such as:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/Library/Keychains/System.keychain
/Library/Keychains/apsd.keychain
/System/Library/Keychains/SystemRootCertificates.keychain
/Users/&amp;lt;username&amp;gt;/Library/Keychains/login.keychain-db
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the last several years, Apple also introduced data protection keychains, such as the iCloud Keychain. Although the
file-based keychains above are on the road to deprecation in favor of data protection keychains, current macOS systems
still heavily rely on them. It is unclear when, if ever, these keychains will be replaced by data protection keychains.&lt;/p&gt;
&lt;p&gt;Inspecting file-based keychains has gotten more difficult as Apple deprecated many of the APIs associated with them,
such as &lt;a class="link" href="https://developer.apple.com/documentation/security/1396431-seckeychainopen" target="_blank" rel="noopener"
&gt;SecKeychainOpen&lt;/a&gt;. In addition,
excessive use of these deprecated APIs may result in corruption of the Login Keychain, as mentioned in this
&lt;a class="link" href="https://github.com/osquery/osquery/issues/7780" target="_blank" rel="noopener"
&gt;osquery issue&lt;/a&gt;. By NOT using the deprecated APIs, the user only has
access to the following keychains from the above list:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/Library/Keychains/System.keychain
/Users/&amp;lt;username&amp;gt;/Library/Keychains/login.keychain-db
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Root certificates are missing. And the APSD (Apple Push Service Daemon) keychain is missing, which is used for device
management, among other things.&lt;/p&gt;
&lt;p&gt;So, how can app developers and IT professionals continue to have access to ALL of these keychain files?&lt;/p&gt;
&lt;p&gt;One way is to continue using deprecated APIs until they stop working. We recommend making a secure copy of the keychain
files before accessing them with the APIs.&lt;/p&gt;
&lt;p&gt;Another option is to use the macOS &lt;a class="link" href="https://ss64.com/osx/security.html" target="_blank" rel="noopener"
&gt;security&lt;/a&gt; command line tool. For example, to
list root certificates, do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo security find-certificate -a /System/Library/Keychains/SystemRootCertificates.keychain
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A third, and hardest, option is to parse the
&lt;a class="link" href="https://github.com/libyal/dtformats/blob/main/documentation/MacOS%20keychain%20database%20file%20format.asciidoc" target="_blank" rel="noopener"
&gt;keychain files&lt;/a&gt;
yourself. Some details on the keychain format are available. Please leave a comment if you or someone else has created a
tool to parse Apple keychains.&lt;/p&gt;
&lt;p&gt;The fourth option is to use an existing tool, such as &lt;a class="link" href="https://www.osquery.io/" target="_blank" rel="noopener"
&gt;osquery&lt;/a&gt;. Osquery is an open-source tool
built for security and IT professionals. Osquery developers are working on fixing any issues to continue providing
access to macOS keychain files via the following tables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://fleetdm.com/tables/certificates" target="_blank" rel="noopener"
&gt;certificates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://fleetdm.com/tables/keychain_acls" target="_blank" rel="noopener"
&gt;keychain_acls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://fleetdm.com/tables/keychain_items" target="_blank" rel="noopener"
&gt;keychain_items&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-inspect-macos-keychain-files"&gt;&lt;a href="#watch-how-to-inspect-macos-keychain-files" class="header-anchor"&gt;&lt;/a&gt;Watch how to inspect macOS keychain files
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/QBn_C2nl2ZE"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Catch missed authorization checks during software development</title><link>https://victoronsoftware.com/posts/catch-missed-authorization-checks-during-software-development/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/catch-missed-authorization-checks-during-software-development/</guid><description>&lt;p&gt;Authorization is giving permission to a user to do an action on the server. As developers, we must ensure that users are
only allowed to do what they are authorized.&lt;/p&gt;
&lt;p&gt;One way to ensure that authorization has happened is to loudly flag when it hasn&amp;rsquo;t. This is how we do it at
&lt;a class="link" href="https://www.fleetdm.com" target="_blank" rel="noopener"
&gt;Fleet Device Management&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In our code base, we use the &lt;a class="link" href="https://github.com/go-kit/kit" target="_blank" rel="noopener"
&gt;go-kit library&lt;/a&gt;. Most of the general endpoints are created
in the
&lt;a class="link" href="https://github.com/fleetdm/fleet/blob/36421bd5055d37a4c39a04e0f9bd96ad47951131/server/service/handler.go#L729" target="_blank" rel="noopener"
&gt;handler.go&lt;/a&gt;
file. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// user-authenticated endpoints&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;ue&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;newUserAuthenticatedEndpointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;svc&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;apiVersions&lt;/span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;ue&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;POST&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/api/_version_/fleet/trigger&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;triggerEndpoint&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;triggerRequest&lt;/span&gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every endpoint calls &lt;strong&gt;kithttp.NewServer&lt;/strong&gt; and wraps the endpoint with our &lt;strong&gt;AuthzCheck&lt;/strong&gt;. From
&lt;a class="link" href="https://github.com/fleetdm/fleet/blob/36421bd5055d37a4c39a04e0f9bd96ad47951131/server/service/handler.go#L729" target="_blank" rel="noopener"
&gt;handler.go&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;authzcheck&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewMiddleware&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;AuthzCheck&lt;/span&gt;()(&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;kithttp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewServer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;decodeFn&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;encodeResponse&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/catch-missed-authorization-checks-during-software-development/AuthzCheck.jpg"
alt="Catch missed authorization check block diagram"&gt;
&lt;/figure&gt;
&lt;p&gt;This means that after the business logic is processed, the AuthzCheck is called. This check ensures that authorization
was checked. Otherwise, an error is returned. From
&lt;a class="link" href="https://github.com/fleetdm/fleet/blob/36421bd5055d37a4c39a04e0f9bd96ad47951131/server/service/middleware/authzcheck/authzcheck.go#L51" target="_blank" rel="noopener"
&gt;authzcheck.go&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// If authorization was not checked, return a response that will&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// marshal to a generic error and log that the check was missed.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;authzctx&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Checked&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Getting to here means there is an authorization-related bug in our code.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;authz&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CheckMissingWithResponse&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;response&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This additional check is useful during our development and QA process, to ensure that authorization always happens in
our business logic.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we improved our app&amp;rsquo;s security by &lt;a class="link" href="../get-args-from-stdin" &gt;reading program arguments from STDIN&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="watch-how-we-catch-missed-authorization-checks"&gt;&lt;a href="#watch-how-we-catch-missed-authorization-checks" class="header-anchor"&gt;&lt;/a&gt;Watch how we catch missed authorization checks
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/jbkPLQpzPtc"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This article originally appeared in
&lt;a class="link" href="https://fleetdm.com/guides/catch-missed-authorization-checks-during-software-development" target="_blank" rel="noopener"
&gt;Fleet&amp;rsquo;s blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description></item></channel></rss>