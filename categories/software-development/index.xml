<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Development on Victor on Software</title><link>https://victoronsoftware.com/categories/software-development/</link><description>Recent content in Software Development on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 19 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/categories/software-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Multitasking with AI agents: When it works and when it fails</title><link>https://victoronsoftware.com/posts/multitasking-with-ai-agents/</link><pubDate>Tue, 19 Aug 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/multitasking-with-ai-agents/</guid><description>&lt;img src="https://victoronsoftware.com/posts/multitasking-with-ai-agents/multitasking-with-ai-agents-headline.png" alt="Featured image of post Multitasking with AI agents: When it works and when it fails" /&gt;&lt;p&gt;AI agents are changing the way we work. They can handle coding, debugging, and research tasks while we focus on other
things. But just because an AI can work in parallel does not mean you should. The real question is: when is it worth
multitasking, and when will it hurt your results?&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m a firm believer that humans cannot multitask. Every popular psychology book I have read, and I have read quite a
few, says that humans cannot multitask, even though many believe they can. Studies show that when humans do two tasks in
series, they finish faster and with higher quality than when switching between them.&lt;/p&gt;
&lt;p&gt;But that&amp;rsquo;s not the whole story. Humans can multitask in particular situations. For example, when driving a car and
talking on the phone (with a Bluetooth headset, of course), we are clearly multitasking. Would our driving and
conversational quality be better if we did these tasks separately? Probably. But the difference, depending on the
person, might not be that big. Driving is habitual for many people, so we can pair it with another cognitive task
without dramatically dropping performance.&lt;/p&gt;
&lt;p&gt;What about throwing AI agents in the mix? It is Wednesday morning. You told your AI agent to do a job. You hope it will
only take one minute, but it might take up to 15 minutes. What do you do now?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; We will use the term &amp;ldquo;task&amp;rdquo; to refer to work a human does, and &amp;ldquo;job&amp;rdquo; to refer to work an AI agent does.&lt;/p&gt;
&lt;h2 id="task-switching"&gt;&lt;a href="#task-switching" class="header-anchor"&gt;&lt;/a&gt;Task switching
&lt;/h2&gt;&lt;p&gt;Research from the American Psychological Association suggests that switching between tasks can cost up to 40% of
someone&amp;rsquo;s productive time. A University of Michigan study found it takes an average of 23 minutes and 15 seconds to
fully return to a task after an interruption. Even brief mental blocks from shifting between tasks can cost significant
time.&lt;/p&gt;
&lt;p&gt;So, if your AI agent is running, can you do something else while waiting to check the results? If you switch to another
task, such as looking at another bug or feature, you will spend time ramping up on that second task, and then even more
time switching back to the first. Yes, people do it all the time, but you will not be fully engaged in either task. You
are more likely to miss something important, like the agent using the wrong method or skipping a critical feature
requirement. And yes, that happens in real life.&lt;/p&gt;
&lt;h2 id="when-not-to-task-switch"&gt;&lt;a href="#when-not-to-task-switch" class="header-anchor"&gt;&lt;/a&gt;When not to task switch
&lt;/h2&gt;&lt;p&gt;Avoid switching when working on a significant, important feature or bug. You need your full mental capacity in the
context of that task to deliver the best software.&lt;/p&gt;
&lt;p&gt;Instead of switching, consider these options.&lt;/p&gt;
&lt;h3 id="plan-ahead"&gt;&lt;a href="#plan-ahead" class="header-anchor"&gt;&lt;/a&gt;Plan ahead
&lt;/h3&gt;&lt;p&gt;After the agent completes its job, what will you do? Will you check the results and then start the next phase? Is that
next phase directly related to the current one? Can you spin up a parallel environment and have another agent start the
next step?&lt;/p&gt;
&lt;p&gt;If waiting for the agent is your bottleneck, parallelize jobs or ensure the agent is always working on something useful.
Keeping the agent busy may mean reviewing the agent&amp;rsquo;s work while it jumps ahead and works on the next phase.&lt;/p&gt;
&lt;h3 id="make-sure-the-agent-is-efficient"&gt;&lt;a href="#make-sure-the-agent-is-efficient" class="header-anchor"&gt;&lt;/a&gt;Make sure the agent is efficient
&lt;/h3&gt;&lt;p&gt;Watch the agent&amp;rsquo;s progress to make sure it is not doing unnecessary work. If it is trying to find information you
already know, stop it and provide the answer. If you do not know the answer, you may find it faster than the agent.&lt;/p&gt;
&lt;p&gt;For example, as of August 2025, Claude Code does not create a vector database of the codebase, making it slower for
certain queries about the codebase. For example, asking where a specific feature is tested. You might ask Cursor, which
does a semantic index of the codebase, to find the answer faster and then feed the answer back to Claude Code.&lt;/p&gt;
&lt;p&gt;Agents can go off track. Many use brute-force approaches, repeatedly trying solutions until something works, even if the
&amp;ldquo;working solution&amp;rdquo; is not optimal. By monitoring progress, you can redirect the agent when needed.&lt;/p&gt;
&lt;h3 id="prepare-for-manual-qa"&gt;&lt;a href="#prepare-for-manual-qa" class="header-anchor"&gt;&lt;/a&gt;Prepare for manual QA
&lt;/h3&gt;&lt;p&gt;Once the feature is ready for manual testing, is your environment ready? Do you need to populate database data, deploy
other services, or sign up for cloud accounts? Prepare these ahead of time.&lt;/p&gt;
&lt;h3 id="fix-ci-and-code-review-issues"&gt;&lt;a href="#fix-ci-and-code-review-issues" class="header-anchor"&gt;&lt;/a&gt;Fix CI and code review issues
&lt;/h3&gt;&lt;p&gt;Commit regularly, ideally after each agent job run. This lets you run CI checks and even have AI review your code. Fix
any lint issues or failing tests, and address review feedback early.&lt;/p&gt;
&lt;h2 id="when-to-task-switch"&gt;&lt;a href="#when-to-task-switch" class="header-anchor"&gt;&lt;/a&gt;When to task switch
&lt;/h2&gt;&lt;p&gt;Task switching is fine for small, low-risk work, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixing a single failing unit test&lt;/li&gt;
&lt;li&gt;Resolving a simple bug&lt;/li&gt;
&lt;li&gt;Addressing straightforward code review comments&lt;/li&gt;
&lt;li&gt;Minor refactoring&lt;/li&gt;
&lt;li&gt;Adding logging statements&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These tasks require little mental setup, so switching costs are minimal. Any quality issues are easier to spot.&lt;/p&gt;
&lt;h2 id="work-modes-single-tasking-vs-multitasking"&gt;&lt;a href="#work-modes-single-tasking-vs-multitasking" class="header-anchor"&gt;&lt;/a&gt;Work modes: single-tasking vs multitasking
&lt;/h2&gt;&lt;p&gt;Categorize tasks before starting them to decide whether they need full attention or can run in parallel.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Aspect&lt;/th&gt;
&lt;th&gt;🎯 Single-Task Mode&lt;/th&gt;
&lt;th&gt;🔄 Multitask Mode&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Focus Level&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;🧠 Deep focus required&lt;/td&gt;
&lt;td&gt;😌 Light mental load&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Task Types&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;🏗️ Complex features&lt;/td&gt;
&lt;td&gt;🔧 Minor refactoring&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;🚨 Production bug fixes&lt;/td&gt;
&lt;td&gt;📝 Code review comments&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;🏛️ Architecture decisions&lt;/td&gt;
&lt;td&gt;✅ Simple bug fixes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;⚡ Performance optimization&lt;/td&gt;
&lt;td&gt;📊 Adding logging&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Context Switching&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;❌ Avoid at all costs&lt;/td&gt;
&lt;td&gt;✅ Switch freely&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Agent Strategy&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;🎪 One or more agents on same task&lt;/td&gt;
&lt;td&gt;🎭 Multiple agents on different tasks&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Monitoring&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;👁️ Watch progress closely&lt;/td&gt;
&lt;td&gt;📱 Check periodically&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Risk Level&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;⚠️ High - mistakes costly&lt;/td&gt;
&lt;td&gt;🟢 Low - easy to spot issues&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Mental Setup&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;🏔️ Significant ramp-up time&lt;/td&gt;
&lt;td&gt;🏃 Quick to start&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Quality Impact&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;💎 Quality critical&lt;/td&gt;
&lt;td&gt;👍 Quality easier to verify&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Best For&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;🚀 Mission-critical work&lt;/td&gt;
&lt;td&gt;📋 Routine repeatable work&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Single-task mode&lt;/strong&gt; is for deep-focus work. Run one or more AI agent jobs focused on this task. Monitor progress while
planning ahead or preparing test environments. Keep your context intact.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multitask mode&lt;/strong&gt; is for routine, well-defined work. Run multiple AI agent jobs in parallel across different branches.
Switch freely between these smaller tasks as agents finish.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../ai-for-software-developers/" &gt;AI for software developers&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Explore how AI tools are changing developer workflows and when to embrace AI assistance versus maintaining human
control.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../will-ai-agents-replace-developers/" &gt;Will AI agents replace software developers?&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Understand the evolving role of developers in an AI-driven world and why human judgment remains irreplaceable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-discuss-multitasking-with-ai-agents"&gt;&lt;a href="#watch-us-discuss-multitasking-with-ai-agents" class="header-anchor"&gt;&lt;/a&gt;Watch us discuss multitasking with AI agents
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/HSDrhYvE3g0"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Why transparency beats everything else in engineering</title><link>https://victoronsoftware.com/posts/engineering-transparency/</link><pubDate>Tue, 12 Aug 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/engineering-transparency/</guid><description>&lt;img src="https://victoronsoftware.com/posts/engineering-transparency/engineering-transparency-headline.png" alt="Featured image of post Why transparency beats everything else in engineering" /&gt;&lt;p&gt;Have you ever felt like you&amp;rsquo;re working in a fog? Where everyone&amp;rsquo;s busy, everyone&amp;rsquo;s trying, but somehow nothing important
gets done? I&amp;rsquo;ve been there. The problem isn&amp;rsquo;t the people. It&amp;rsquo;s the system. And specifically, it&amp;rsquo;s the lack of
transparency and accountability.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#taking-action-what-you-can-do-when-you-have-no-visibility" &gt;Taking action: What you can do when you have no visibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#key-takeaways" &gt;Key takeaways&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-weekly-dance-of-non-delivery"&gt;&lt;a href="#the-weekly-dance-of-non-delivery" class="header-anchor"&gt;&lt;/a&gt;The weekly dance of non-delivery
&lt;/h2&gt;&lt;p&gt;Let me take you back a couple of years. I was a tech lead at a large company, working on a project that depended on
another upstream engineering team. Every week, we&amp;rsquo;d have a joint meeting with both teams. And every week, I&amp;rsquo;d ask the
same question, trying to keep my tone professional:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Hey Alex, any update on that component we need from your side?&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;And every week, Alex would say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Ah, I meant to, but I got pulled into something else. I&amp;rsquo;ll try to get to it this week.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;At first, I gave it the benefit of the doubt. Stuff happens. Priorities shift.&lt;/p&gt;
&lt;p&gt;But then it kept happening. Two weeks, three, four. Same story. No progress. No accountability. No one stepping in.&lt;/p&gt;
&lt;p&gt;I was &lt;em&gt;boiling&lt;/em&gt; inside.&lt;/p&gt;
&lt;p&gt;I kept thinking:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Why is no one telling Alex to work on this? Why don&amp;rsquo;t we have a project manager? Who&amp;rsquo;s making the call on what really
matters?&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;We technically had a roadmap. But let&amp;rsquo;s be honest: people didn&amp;rsquo;t actually take it seriously. If something couldn&amp;rsquo;t get
done, it quietly disappeared from the plan. Deadlines slipped. Commitments evaporated. Meanwhile, I had to face my boss
again with another non-update.&lt;/p&gt;
&lt;h2 id="years-in-the-fog"&gt;&lt;a href="#years-in-the-fog" class="header-anchor"&gt;&lt;/a&gt;Years in the fog
&lt;/h2&gt;&lt;p&gt;The frustration started eating at me. I&amp;rsquo;d sit in those meetings, and darker thoughts would creep in:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;How did Alex even get promoted? He can&amp;rsquo;t deliver anything.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Why am I killing myself here when clearly no one cares? Maybe I should take off for the rest of the day.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Maybe I should just get a side gig? At least someone would pay me for work that actually ships.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This situation wasn&amp;rsquo;t just a few bad weeks. It was years of my life, years of pretending everything was fine when it
wasn&amp;rsquo;t, years of wondering if this was just how companies worked.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d go home exhausted, not from hard work, but from the sheer weight of organizational dysfunction. My wife would ask
how my day was, and I&amp;rsquo;d just shrug. What was there to say? Another day, another meeting, another non-update.&lt;/p&gt;
&lt;h2 id="the-moment-of-clarity"&gt;&lt;a href="#the-moment-of-clarity" class="header-anchor"&gt;&lt;/a&gt;The moment of clarity
&lt;/h2&gt;&lt;p&gt;Then I switched companies.&lt;/p&gt;
&lt;p&gt;And everything changed.&lt;/p&gt;
&lt;p&gt;In my new company, everyone has access to clear company priorities: what we are building, why it is important, which
customer requests are critical, and who our key customers are. Engineers are empowered to make their own decisions based
on this shared context. If someone can&amp;rsquo;t deliver, they openly communicate why and offer alternatives grounded in the
company&amp;rsquo;s priorities.&lt;/p&gt;
&lt;p&gt;There is no hiding or pretending. Just reality, laid bare.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s when it hit me. The problem at my old company wasn&amp;rsquo;t Alex. He wasn&amp;rsquo;t slacking off. He was overwhelmed, like the
rest of us. Everyone was reacting to the noise instead of following the signal. No one had the authority or clarity to
say what actually mattered.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This wasn&amp;rsquo;t a communication problem. It was a trust and transparency problem.&lt;/strong&gt; And the absence of that created a
frustrating, demoralizing fog. Everyone thought they were doing the right thing, yet nothing moved forward.&lt;/p&gt;
&lt;p&gt;That experience changed my understanding of leadership.&lt;/p&gt;
&lt;p&gt;Because here&amp;rsquo;s the truth: Without shared visibility and shared accountability, even the best engineers will lose
direction. Polite status meetings won&amp;rsquo;t save you from a broken system.&lt;/p&gt;
&lt;p&gt;As leaders, our job isn&amp;rsquo;t just to set direction. It&amp;rsquo;s to make the invisible visible and to make sure it matters.&lt;/p&gt;
&lt;pre class="mermaid"&gt;
---
title: The hidden work iceberg
---
graph TD
subgraph Above[&amp;#34;🌊 Above water&amp;lt;br/&amp;gt;What management sees&amp;#34;]
Spacer1[&amp;#34; &amp;#34;]
A1[&amp;#34;Weekly Status Updates&amp;lt;br/&amp;gt;✓ &amp;#39;Working on it&amp;#39;&amp;#34;]
A2[&amp;#34;Sprint Deliverables&amp;lt;br/&amp;gt;✓ &amp;#39;In progress&amp;#39;&amp;#34;]
A3[&amp;#34;Meeting Attendance&amp;lt;br/&amp;gt;✓ &amp;#39;Present&amp;#39;&amp;#34;]
Spacer1 -.-&amp;gt; A1
Spacer1 -.-&amp;gt; A2
Spacer1 -.-&amp;gt; A3
end
subgraph Below[&amp;#34;🧊 Below water&amp;lt;br/&amp;gt;The reality&amp;#34;]
direction TB
subgraph Row1[&amp;#34; &amp;#34;]
B1[&amp;#34;❌ Blocked by&amp;lt;br/&amp;gt;dependencies&amp;#34;]
B2[&amp;#34;❌ Unclear&amp;lt;br/&amp;gt;priorities&amp;#34;]
B3[&amp;#34;❌ Context&amp;lt;br/&amp;gt;switching&amp;#34;]
end
subgraph Row2[&amp;#34; &amp;#34;]
B4[&amp;#34;❌ Waiting for&amp;lt;br/&amp;gt;decisions&amp;#34;]
B5[&amp;#34;❌ Duplicate&amp;lt;br/&amp;gt;work&amp;#34;]
B6[&amp;#34;❌ Technical&amp;lt;br/&amp;gt;debt&amp;#34;]
end
subgraph Row3[&amp;#34; &amp;#34;]
B7[&amp;#34;❌ No authority&amp;lt;br/&amp;gt;to say no&amp;#34;]
B8[&amp;#34;❌ Overwhelmed&amp;lt;br/&amp;gt;with requests&amp;#34;]
end
end
Above -.-&amp;gt;|&amp;#34;Without Transparency&amp;#34;| Below
style Above fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000
style Below fill:#ffebee,stroke:#d32f2f,stroke-width:2px,color:#000
style Row1 fill:none,stroke:none
style Row2 fill:none,stroke:none
style Row3 fill:none,stroke:none
style Spacer1 fill:none,stroke:none
&lt;/pre&gt;
&lt;h2 id="taking-action-what-you-can-do-when-you-have-no-visibility"&gt;&lt;a href="#taking-action-what-you-can-do-when-you-have-no-visibility" class="header-anchor"&gt;&lt;/a&gt;Taking action: What you can do when you have no visibility
&lt;/h2&gt;&lt;p&gt;At the first level, you need to be aligned with your manager. You need to know your manager&amp;rsquo;s priorities, which means
knowing what your manager knows. You should strive to know about 90% of what your manager knows.&lt;/p&gt;
&lt;p&gt;If your manager attends cross-functional meetings with other managers where priorities and goals are discussed, you need
to know what&amp;rsquo;s happening at those meetings. There are a few ways to do that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Watch the recordings of those meetings. If they&amp;rsquo;re not recorded, ask if they could be.&lt;/li&gt;
&lt;li&gt;Read the meeting notes from those meetings. Could your company employ an AI notetaker?&lt;/li&gt;
&lt;li&gt;Ask your manager for a readout from those meetings in your weekly one-on-one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you feel like you&amp;rsquo;re on the same page as your manager, repeat the process with your manager&amp;rsquo;s manager. If you&amp;rsquo;re
not meeting regularly with your manager&amp;rsquo;s manager, ask for a skip-level meeting and afterwards extend the ask for a
recurring skip-level meeting.&lt;/p&gt;
&lt;h3 id="how-to-ask-for-more-visibility"&gt;&lt;a href="#how-to-ask-for-more-visibility" class="header-anchor"&gt;&lt;/a&gt;How to ask for more visibility
&lt;/h3&gt;&lt;p&gt;Here&amp;rsquo;s a sample script you can adapt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey [Manager], I&amp;rsquo;ve been thinking about how I can be more effective in my role and better support our team&amp;rsquo;s goals.
I&amp;rsquo;d love to have more visibility into the broader priorities and context that drive our work.&lt;/p&gt;
&lt;p&gt;Specifically, I&amp;rsquo;m interested in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understanding the key decisions and trade-offs being discussed in cross-functional meetings&lt;/li&gt;
&lt;li&gt;Getting insight into upcoming priorities that might affect our team&amp;rsquo;s roadmap&lt;/li&gt;
&lt;li&gt;Learning about dependencies or blockers other teams are facing that might impact us&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Would it be possible to either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get access to recordings/notes from your planning meetings, or&lt;/li&gt;
&lt;li&gt;Have a brief weekly sync where you share the key takeaways?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I believe having this context would help me make better day-to-day decisions, spot potential issues earlier, and
contribute more strategically to our team&amp;rsquo;s success.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="key-takeaways"&gt;&lt;a href="#key-takeaways" class="header-anchor"&gt;&lt;/a&gt;Key takeaways
&lt;/h2&gt;&lt;p&gt;Looking back on my journey from frustration to clarity, here are the lessons that transformed how I work:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s not a communication problem, it&amp;rsquo;s a trust and transparency problem.&lt;/strong&gt; We had meetings. We had updates. What we
didn&amp;rsquo;t have was visibility into what actually mattered.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The absence of transparency creates a demoralizing fog.&lt;/strong&gt; When priorities aren&amp;rsquo;t clear and accountability doesn&amp;rsquo;t
exist, everyone thinks they&amp;rsquo;re doing the right thing while nothing moves forward.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Great engineers need visibility to thrive.&lt;/strong&gt; Alex wasn&amp;rsquo;t slacking. He was overwhelmed and reacting to noise instead of
signal because no one had the clarity to say what mattered.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You need to know what your manager knows.&lt;/strong&gt; Aim for 90% visibility into your manager&amp;rsquo;s context through meeting
recordings, notes, or regular readouts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Leaders must make the invisible visible.&lt;/strong&gt; Their job isn&amp;rsquo;t just to set direction. It is to ensure that priorities,
trade-offs, and blockers are explicit and public.&lt;/p&gt;
&lt;p&gt;The fog I worked in for years wasn&amp;rsquo;t inevitable. It was a broken system where politeness trumped progress. You can build
better systems. You just need to start asking for and creating transparency.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../github-code-review-issues/" &gt;Top 3 issues with GitHub code review process&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Discover how poor visibility in code reviews creates bottlenecks and what you can do to improve team collaboration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../engineering-metrics-no-cost/" &gt;Full-featured engineering metrics—for free&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Build transparency dashboards that make engineering work visible to everyone using free tools and GitHub data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../readable-code/" &gt;What is readable code and why is it important?&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Learn how code clarity impacts team velocity and why transparency starts at the code level.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-discuss-engineering-transparency"&gt;&lt;a href="#watch-us-discuss-engineering-transparency" class="header-anchor"&gt;&lt;/a&gt;Watch us discuss engineering transparency
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/3oSdwkC7iiI"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Why developers should use OpenTelemetry in dev</title><link>https://victoronsoftware.com/posts/opentelemetry-for-devs/</link><pubDate>Tue, 05 Aug 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/opentelemetry-for-devs/</guid><description>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/opentelemetry-for-devs-headline.png" alt="Featured image of post Why developers should use OpenTelemetry in dev" /&gt;&lt;p&gt;We&amp;rsquo;ve changed our tune on OpenTelemetry.&lt;/p&gt;
&lt;p&gt;In our &lt;a class="link" href="../opentelemetry-with-jaeger/" &gt;previous article on OpenTelemetry with Jaeger&lt;/a&gt;, we were skeptical about its value
for the average developer. The tooling seemed more suited for production monitoring than day-to-day development work.
However, recent production issues have made us reconsider.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#feature-1-api-request-and-response-bodies" &gt;Feature 1: API request and response bodies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#feature-2-database-query-instrumentation" &gt;Feature 2: Database query instrumentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#feature-3-outgoing-http-requests" &gt;Feature 3: Outgoing HTTP requests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#feature-4-trace-log-correlation" &gt;Feature 4: Trace-log correlation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#feature-5-comprehensive-error-handling" &gt;Feature 5: Comprehensive error handling&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-wake-up-call"&gt;&lt;a href="#the-wake-up-call" class="header-anchor"&gt;&lt;/a&gt;The wake-up call
&lt;/h2&gt;&lt;p&gt;We discovered a critical gap in our production telemetry: several key API endpoints weren&amp;rsquo;t instrumented. When issues
arose, we were flying blind. No traces. No visibility. Just frustrated customers and scrambling engineers.&lt;/p&gt;
&lt;p&gt;This experience taught us an important lesson: &lt;strong&gt;telemetry isn&amp;rsquo;t just an operations concern, it&amp;rsquo;s a development
concern&lt;/strong&gt;. If developers don&amp;rsquo;t use and understand telemetry during development, we end up with half-baked
instrumentation in production.&lt;/p&gt;
&lt;p&gt;The solution? Developers must dogfood their own telemetry.&lt;/p&gt;
&lt;h2 id="setting-up-opentelemetry-for-development"&gt;&lt;a href="#setting-up-opentelemetry-for-development" class="header-anchor"&gt;&lt;/a&gt;Setting up OpenTelemetry for development
&lt;/h2&gt;&lt;p&gt;Using OpenTelemetry during development provides immediate benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complete instrumentation coverage before production&lt;/li&gt;
&lt;li&gt;Faster debugging with familiar tooling (same tooling in dev and production)&lt;/li&gt;
&lt;li&gt;Better understanding of code behavior&lt;/li&gt;
&lt;li&gt;Early detection of performance issues&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We built a TODO application to demonstrate key OpenTelemetry features for developers. The examples use
&lt;a class="link" href="https://signoz.io/docs/install/docker/" target="_blank" rel="noopener"
&gt;SigNoz&lt;/a&gt; as the backend, but any OpenTelemetry-compatible system works (Jaeger,
Grafana, Datadog, etc.).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: In development, we often want more detailed telemetry than in production. Production may limit telemetry due
to performance or security reasons. Many of the features we&amp;rsquo;ll demonstrate should have environment-specific toggles.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="feature-1-api-request-and-response-bodies"&gt;&lt;a href="#feature-1-api-request-and-response-bodies" class="header-anchor"&gt;&lt;/a&gt;Feature 1: API request and response bodies
&lt;/h2&gt;&lt;p&gt;Seeing actual request and response bodies is invaluable during development. While you&amp;rsquo;d avoid this in production for
security reasons, it&amp;rsquo;s essential for debugging locally.&lt;/p&gt;
&lt;h3 id="key-opentelemetry-concepts-attributes-vs-events"&gt;&lt;a href="#key-opentelemetry-concepts-attributes-vs-events" class="header-anchor"&gt;&lt;/a&gt;Key OpenTelemetry concepts: attributes vs events
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Attributes&lt;/strong&gt;: Key-value pairs attached to spans that provide metadata. They&amp;rsquo;re indexed and searchable (e.g.,
&lt;code&gt;http.method&lt;/code&gt;, &lt;code&gt;http.status_code&lt;/code&gt;, &lt;code&gt;user.id&lt;/code&gt;). Use attributes for the data you need to query or filter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Events&lt;/strong&gt;: Timestamped records within a span that capture what happened at a specific moment. They&amp;rsquo;re perfect for
logging request/response bodies, error messages, or any detailed information that doesn&amp;rsquo;t need to be searchable but
provides context when debugging.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our TODO app, we recorded request and response bodies as events:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;AddEvent&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;http.request.body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithAttributes&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;requestBody&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;AddEvent&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;http.response.body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithAttributes&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;responseBody&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This approach provides full API context without bloating searchable attributes.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/api-request-response.png"
alt="SigNoz showing API request and response bodies as events in a trace span"&gt;
&lt;/figure&gt;
&lt;h2 id="feature-2-database-query-instrumentation"&gt;&lt;a href="#feature-2-database-query-instrumentation" class="header-anchor"&gt;&lt;/a&gt;Feature 2: Database query instrumentation
&lt;/h2&gt;&lt;p&gt;Database queries often cause performance bottlenecks. OpenTelemetry captures both query timing and the actual SQL
executed.&lt;/p&gt;
&lt;p&gt;Standard instrumentation shows parameterized queries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; todos &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; user_id &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; status &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For debugging, we need the actual values. Our enhanced instrumentation includes both:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/database-query-instrumentation.png"
alt="SigNoz showing database queries with both parameterized and populated SQL statements"&gt;
&lt;/figure&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetAttributes&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;db.statement&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;SELECT * FROM todos WHERE user_id = ? AND status = ?&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;db.statement.formatted&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;SELECT * FROM todos WHERE user_id = 123 AND status = &amp;#39;active&amp;#39;&amp;#34;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This dual approach maintains security (prepared statements against SQL injection) while providing debugging context. Use
populated queries to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reproduce issues by running the exact query&lt;/li&gt;
&lt;li&gt;Understand why a query returned unexpected results&lt;/li&gt;
&lt;li&gt;Debug complex queries with multiple parameters&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alternatively, you could log the populated query statements instead of adding them as span attributes. Putting them in
the logs gives you more flexibility in controlling data retention policies, as logs and traces often have different
storage durations and access controls in production environments.&lt;/p&gt;
&lt;h2 id="feature-3-outgoing-http-requests"&gt;&lt;a href="#feature-3-outgoing-http-requests" class="header-anchor"&gt;&lt;/a&gt;Feature 3: Outgoing HTTP requests
&lt;/h2&gt;&lt;p&gt;Modern applications integrate with external APIs and microservices. Outgoing HTTP calls need the same visibility as
incoming requests.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/outgoing-http-requests.png"
alt="SigNoz displaying outgoing HTTP request details"&gt;
&lt;/figure&gt;
&lt;p&gt;Our TODO app instruments outgoing HTTP requests, capturing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Before making the request&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;AddEvent&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;http.request.body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithAttributes&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;requestBody&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Int&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;size&amp;#34;&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;requestBody&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// After receiving the response&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;AddEvent&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;http.response.body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithAttributes&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;body&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;responseBody&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Int&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;size&amp;#34;&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;responseBody&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attribute&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Int&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;status_code&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;resp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;StatusCode&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This visibility is crucial when:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Third-party APIs return unexpected results&lt;/li&gt;
&lt;li&gt;You need to debug authentication or request formatting issues&lt;/li&gt;
&lt;li&gt;Performance bottlenecks come from external dependencies&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re troubleshooting integration problems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;External calls receive the same instrumentation as internal operations, eliminating black boxes during development.&lt;/p&gt;
&lt;h2 id="feature-4-trace-log-correlation"&gt;&lt;a href="#feature-4-trace-log-correlation" class="header-anchor"&gt;&lt;/a&gt;Feature 4: Trace-log correlation
&lt;/h2&gt;&lt;p&gt;OpenTelemetry connects traces with logs, enabling seamless navigation between high-level trace data and detailed log
output.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/trace-log-correlation.png"
alt="SigNoz showing correlated logs for a specific trace with direct navigation links"&gt;
&lt;/figure&gt;
&lt;h3 id="key-opentelemetry-concepts-spans-vs-traces"&gt;&lt;a href="#key-opentelemetry-concepts-spans-vs-traces" class="header-anchor"&gt;&lt;/a&gt;Key OpenTelemetry concepts: spans vs traces
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Span&lt;/strong&gt;: A single unit of work within a trace. It represents an operation like a database query, HTTP request, or
function call. Each span has a unique &lt;code&gt;span_id&lt;/code&gt; and may have a &lt;code&gt;parent_span_id&lt;/code&gt; to form a tree. Spans are connected
through these relationships to reflect the call hierarchy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Trace&lt;/strong&gt;: The complete journey of a request through your system, composed of multiple spans that all share the same
&lt;code&gt;trace_id&lt;/code&gt;. The root span has no parent and marks the start of the trace. Think of a trace as the tree, and spans as
the branches and leaves.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our TODO app, we inject trace context into all log entries:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;logger&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;With&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;trace_id&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SpanContext&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;TraceID&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;span_id&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SpanContext&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;SpanID&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;logger&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Info&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Creating new TODO item&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;user_id&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;userID&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;title&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;todo&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Title&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This correlation enables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quick navigation from a slow span to its detailed logs&lt;/li&gt;
&lt;li&gt;Understanding the sequence of operations within a request&lt;/li&gt;
&lt;li&gt;Debugging complex flows across multiple services&lt;/li&gt;
&lt;li&gt;Maintaining context when troubleshooting issues&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Viewing traces and logs together reduces debugging time significantly.&lt;/p&gt;
&lt;h2 id="feature-5-comprehensive-error-handling"&gt;&lt;a href="#feature-5-comprehensive-error-handling" class="header-anchor"&gt;&lt;/a&gt;Feature 5: Comprehensive error handling
&lt;/h2&gt;&lt;p&gt;OpenTelemetry captures complete error context and propagation paths throughout your system.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/error-handling.png"
alt="SigNoz showing errors"&gt;
&lt;/figure&gt;
&lt;p&gt;Error counts may appear inflated because they&amp;rsquo;re counted at each span level:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Database layer throws an error (count: 1)&lt;/li&gt;
&lt;li&gt;Service layer catches and returns error response (count: 2)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This propagation helps identify error origins and their path through application layers.&lt;/p&gt;
&lt;p&gt;Example error instrumentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Simple error recording&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;RecordError&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetStatus&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;codes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Error&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Error&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// With stack trace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;span&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;RecordError&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithStackTrace&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With proper error instrumentation, you get:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complete stack traces for debugging&lt;/li&gt;
&lt;li&gt;Error propagation paths through your system&lt;/li&gt;
&lt;li&gt;Direct links to the failing trace&lt;/li&gt;
&lt;li&gt;Associated logs with full context&lt;/li&gt;
&lt;li&gt;Performance impact of error handling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All debugging information exists in one place, reducing troubleshooting from hours to minutes.&lt;/p&gt;
&lt;h2 id="moving-forward"&gt;&lt;a href="#moving-forward" class="header-anchor"&gt;&lt;/a&gt;Moving forward
&lt;/h2&gt;&lt;p&gt;Our next step is implementing this approach in our production application. The benefits are clear:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Complete visibility&lt;/strong&gt;: No more blind spots in our API endpoints&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Faster debugging&lt;/strong&gt;: All context in one place&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Better habits&lt;/strong&gt;: Developers who use telemetry build better instrumented code&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Proactive monitoring&lt;/strong&gt;: Issues are caught before they impact users&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Telemetry isn&amp;rsquo;t an afterthought. It&amp;rsquo;s a development tool that we can use from day one.&lt;/p&gt;
&lt;h2 id="try-it-yourself"&gt;&lt;a href="#try-it-yourself" class="header-anchor"&gt;&lt;/a&gt;Try it yourself
&lt;/h2&gt;&lt;p&gt;See these concepts in action with our &lt;a class="link" href="https://github.com/getvictor/todo-app" target="_blank" rel="noopener"
&gt;instrumented TODO application on GitHub&lt;/a&gt;.
The AI-generated code has readability issues, but effectively demonstrates all telemetry concepts.&lt;/p&gt;
&lt;p&gt;To get started with your own setup:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install &lt;a class="link" href="https://signoz.io/docs/install/docker/" target="_blank" rel="noopener"
&gt;SigNoz using Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Clone the TODO app repository&lt;/li&gt;
&lt;li&gt;Run the app with OpenTelemetry enabled&lt;/li&gt;
&lt;li&gt;Start exploring your traces!&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The goal isn&amp;rsquo;t perfect code. It&amp;rsquo;s perfect visibility into code behavior.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../software-load-testing/" &gt;Top 5 metrics for software load testing performance&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Learn which telemetry metrics matter most when load testing your applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../optimizing-performance-of-go-app/" &gt;How to benchmark performance of Go serializers&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Discover performance optimization techniques using Go&amp;rsquo;s built-in profiling tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../opentelemetry-with-jaeger/" &gt;Is OpenTelemetry useful for the average software developer?&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Our initial skeptical take on OpenTelemetry and its challenges for development use.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; What&amp;rsquo;s your experience with OpenTelemetry? Have you found other creative ways to use telemetry during
development?&lt;/p&gt;
&lt;h2 id="watch-us-demonstrate-opentelemetry-features-useful-for-developers"&gt;&lt;a href="#watch-us-demonstrate-opentelemetry-features-useful-for-developers" class="header-anchor"&gt;&lt;/a&gt;Watch us demonstrate OpenTelemetry features useful for developers
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/1a8f8FWRWS0"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Will AI agents replace software developers?</title><link>https://victoronsoftware.com/posts/will-ai-agents-replace-developers/</link><pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/will-ai-agents-replace-developers/</guid><description>&lt;img src="https://victoronsoftware.com/posts/will-ai-agents-replace-developers/ai-agents-replace-developers-headline.png" alt="Featured image of post Will AI agents replace software developers?" /&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; AI coding agents are becoming mainstream, but their impact is focused mainly on implementation and automated
testing. Productivity gains are real but capped, and engineers must still actively guide and supervise these tools.
Complete developer replacement is unlikely anytime soon.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#requirements-gathering" &gt;Requirements gathering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#design" &gt;Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#implementation" &gt;Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#testing" &gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#deployment" &gt;Deployment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#maintenance" &gt;Maintenance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#ai-coding-agent-impact-across-the-sdlc" &gt;AI coding agent impact across the SDLC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#will-ai-coding-agents-replace-software-developers" &gt;Will AI coding agents replace software developers?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="introduction"&gt;&lt;a href="#introduction" class="header-anchor"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;&lt;p&gt;AI is no longer just autocomplete. With AI coding agents, it is becoming a collaborator. But what happens when that
collaborator starts writing and testing entire chunks of your codebase? Will software engineers become managers of
fleets of AI agents, or will their jobs evolve in less dramatic ways?&lt;/p&gt;
&lt;p&gt;Our previous article covered the &lt;a class="link" href="../ai-for-software-developers/" &gt;AI trends in the first half of 2025&lt;/a&gt;. Using AI for
code completion and code generation was becoming mainstream. Today, in the second half of 2025, we can expect most
software developers to be using AI, off and on, for these tasks. But what about using AI coding agents to make
significant changes to the codebase, including automatically running and fixing tests? Recent surveys show that most
software engineers are NOT using AI agents. With AI code completion tools like GitHub Copilot being widely adopted
within about one year, we can reasonably assume that AI agents will likewise be widely adopted by the second half
of 2026. With that in mind, what will a typical engineer&amp;rsquo;s day look like in 2026?&lt;/p&gt;
&lt;h3 id="ai-tools-adoption-timeline-in-software-development"&gt;&lt;a href="#ai-tools-adoption-timeline-in-software-development" class="header-anchor"&gt;&lt;/a&gt;AI tools adoption timeline in software development
&lt;/h3&gt;&lt;pre class="mermaid"&gt;
timeline
2022-2023 : GitHub Copilot Launch
: Early AI code completion
: Developer experimentation
2024 : Code completion mainstream
: ChatGPT for development
: Basic code generation
2025 : Advanced code generation
: AI debugging tools
: Early AI agents (experimental)
2026 : AI agents widely adopted
: Automated testing with AI
: AI code review assistants
2027+ : AI-native development workflows
: Advanced agent orchestration
: Full SDLC integration
&lt;/pre&gt;
&lt;p&gt;Let&amp;rsquo;s walk through the software development lifecycle (SDLC) and understand where these new AI coding agents can be
used. We will focus specifically on the new capabilities that AI coding agents bring, and not on the existing and
largely mainstream capabilities of AI code completion and chatbots.&lt;/p&gt;
&lt;pre class="mermaid"&gt;
---
title: SDLC
---
graph LR
Requirements[Requirements gathering] --&amp;gt; Design[Design]
Design --&amp;gt; Implementation[Implementation]
Implementation --&amp;gt; Testing[Testing]
Testing --&amp;gt; Deployment[Deployment]
Deployment --&amp;gt; Maintenance[Maintenance]
%% Color coding based on AI agent impact level
%% Low impact - light blue
%% Medium impact - yellow/orange
%% High impact - green
classDef lowImpact fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000
classDef mediumImpact fill:#fff3e0,stroke:#f57c00,stroke-width:2px,color:#000
classDef highImpact fill:#e8f5e8,stroke:#388e3c,stroke-width:2px,color:#000
class Requirements,Deployment lowImpact
class Design,Maintenance mediumImpact
class Implementation,Testing highImpact
&lt;/pre&gt;
&lt;h2 id="requirements-gathering"&gt;&lt;a href="#requirements-gathering" class="header-anchor"&gt;&lt;/a&gt;Requirements gathering
&lt;/h2&gt;&lt;p&gt;In requirements gathering, we need to figure out why we are adding a feature and what the feature is, at a high level.
We have two major sources of product features. The first one is a strategic feature that will open up new sources of
revenue for us. The second is a customer request, which we must build to keep our customers happy. A single feature
could be both of these.&lt;/p&gt;
&lt;p&gt;To understand the customer, we actually need to talk to the customer. Barring that, we could do market analysis to see
what similar features our competition has. ChatGPT can speed up this process by aggregating and explaining the
information. In this case, ChatGPT makes research more efficient, much like Google made research more efficient than
going to the library. But this is not a new AI use case. Product managers have been using AI to speed up their work for
years now.&lt;/p&gt;
&lt;p&gt;As far as figuring out what we&amp;rsquo;re building and why, AI coding agents may have little to add. That said, they may have
some use cases, such as writing a script to fetch and analyze data from a public API.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Requirements gathering combines the planning and requirements analysis phases, assuming we use a fast-paced
Agile iterative process.&lt;/p&gt;
&lt;h2 id="design"&gt;&lt;a href="#design" class="header-anchor"&gt;&lt;/a&gt;Design
&lt;/h2&gt;&lt;p&gt;In the design phase, we get into the details of what we&amp;rsquo;re building. We specify the UI requirements, API changes,
integrations with other services, and other technical requirements.&lt;/p&gt;
&lt;h3 id="spike-stories-and-proof-of-concepts-pocs"&gt;&lt;a href="#spike-stories-and-proof-of-concepts-pocs" class="header-anchor"&gt;&lt;/a&gt;Spike stories and proof of concepts (POCs)
&lt;/h3&gt;&lt;p&gt;Often, there are enough uncertainties in the feature that software engineers must do a spike story or build a POC. A
spike story is an Agile user story to research a technical question. Spike stories uncover things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technical feasibility (e.g., can we use TPM to sign HTTP messages?)&lt;/li&gt;
&lt;li&gt;Implementation approach (e.g., should we use webhooks or polling?)&lt;/li&gt;
&lt;li&gt;Integration behavior (e.g., how does this 3rd party API handle pagination and errors?)&lt;/li&gt;
&lt;li&gt;Tool or library evaluation (e.g., does this 3rd party library provide all the features we need?)&lt;/li&gt;
&lt;li&gt;Unknown complexities or risk (e.g., will this actually work?)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a spike story or POC, we often write quick throwaway code without other architectural considerations, such as
maintainability. And this is where AI coding agents can help. Theoretically, an AI coding agent can create a whole POC
with only a cursory review from the software developer. But this is an extreme case. In most cases, the work will be a
mix of coding, reviewing technical documentation, searching the web, and talking with ChatGPT.&lt;/p&gt;
&lt;p&gt;So, with the help of an AI coding agent, we could finish our spike story faster. If the work was timeboxed, the end
result should be higher quality.&lt;/p&gt;
&lt;h3 id="final-design"&gt;&lt;a href="#final-design" class="header-anchor"&gt;&lt;/a&gt;Final design
&lt;/h3&gt;&lt;p&gt;After the spike story, we still need to finish the design, providing all the technical specifications required for
estimation and implementation. These details include an understanding of how this feature interacts with all the other
parts of our application, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UI&lt;/li&gt;
&lt;li&gt;configuration&lt;/li&gt;
&lt;li&gt;authentication&lt;/li&gt;
&lt;li&gt;monitoring and logging&lt;/li&gt;
&lt;li&gt;error handling&lt;/li&gt;
&lt;li&gt;scalability and performance&lt;/li&gt;
&lt;li&gt;internationalization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although some of these aspects are shared between features, we, as software developers, still need to consider and
investigate the new feature&amp;rsquo;s implications. AI coding agents are of little help here, besides providing boilerplate
requirements.&lt;/p&gt;
&lt;h2 id="implementation"&gt;&lt;a href="#implementation" class="header-anchor"&gt;&lt;/a&gt;Implementation
&lt;/h2&gt;&lt;p&gt;After the feature has been designed and estimated, it is time to get down to the work of coding. Can an AI agent do all
of this? Well, we may not be able to take the design and feed it to our agent. A product manager or another engineer may
have done the design, and this design may lack enough details for implementation. So we have to add details, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Function names (e.g., &lt;code&gt;sendEmailNotification&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Constant and enum names (e.g., &lt;code&gt;RoleAdmin&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;File and package structure (e.g., &lt;code&gt;handlers/user.go&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Error handling strategy (e.g., wrap errors and add context)&lt;/li&gt;
&lt;li&gt;Interface design (e.g., create a new interface to simplify testing)&lt;/li&gt;
&lt;li&gt;Security considerations (e.g., validate inputs)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Yes, an AI coding agent may indeed come up with some of these on its own. However, we must consciously consider these to
ensure our codebase is maintainable, testable, scalable, and handles corner cases.&lt;/p&gt;
&lt;p&gt;So, once we know what we need to code, we can write a prompt to the AI coding agent and let it do its work. Today&amp;rsquo;s AI
coding agents are not very fast. In our experience, we ask an AI agent to do a chunk of work, and it completes it in
several minutes. Then we do a brief review of what it did and come back to it with corrections. Corrections often
include things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using the correct coding standards for our codebase&lt;/li&gt;
&lt;li&gt;Removing unneeded code (e.g., handling cases that we know cannot happen)&lt;/li&gt;
&lt;li&gt;Removing/merging duplicate code&lt;/li&gt;
&lt;li&gt;Using better names for functions/variables (e.g., don&amp;rsquo;t use &lt;code&gt;err2&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we let the AI agent do a bigger chunk of work (30+ minutes), there is a greater chance that it will go off the rails,
and all the work must be redone. For example, an AI agent could decide to implement a third-party library itself because
it couldn&amp;rsquo;t figure out how to use the existing one.&lt;/p&gt;
&lt;pre class="mermaid"&gt;
---
title: AI agent development workflow
---
flowchart TD
A[Developer writes prompt] --&amp;gt; B[AI agent codes&amp;lt;br/&amp;gt;3-5 minutes]
B --&amp;gt; C[Human reviews code]
C --&amp;gt; D{Code acceptable?}
D --&amp;gt;|No| E[Developer provides&amp;lt;br/&amp;gt;corrections]
E --&amp;gt; B
D --&amp;gt;|Yes| F[Final code review]
F --&amp;gt; G[Ask AI agent to review code]
G --&amp;gt; H[Human peer review]
H --&amp;gt; I[Ready for QA]
%% Styling
classDef humanTask fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000
classDef aiTask fill:#fff3e0,stroke:#f57c00,stroke-width:2px,color:#000
classDef reviewTask fill:#e8f5e8,stroke:#388e3c,stroke-width:2px,color:#000
class A,C,E,F,H humanTask
class B,G aiTask
class D,I reviewTask
&lt;/pre&gt;
&lt;p&gt;Once we reach a good stopping point, we need to review all the code changes that we and our AI agent have made. Since
much of the code was autogenerated, we must take extra care to do a thorough review. The goal is to fully understand the
implementation so that we can speak about it as if we coded all of it ourselves.&lt;/p&gt;
&lt;p&gt;Once we have checked in the code or opened a PR, we can ask another AI agent to review it. With multiple LLMs and coding
agents out there, it is good practice to have one AI agent check the work of another AI agent for anything that we may
have missed. Unfortunately, this means wading through a few false positives. However, the end result is higher-quality
code that is ready for one of our peers to review.&lt;/p&gt;
&lt;h3 id="multitasking-with-multiple-ai-agents"&gt;&lt;a href="#multitasking-with-multiple-ai-agents" class="header-anchor"&gt;&lt;/a&gt;Multitasking with multiple AI agents
&lt;/h3&gt;&lt;p&gt;Some developers report using multiple AI agents to work on numerous projects simultaneously. In our workflow, this
approach is not practical. We know from behavioral science research that it takes a human up to 15 minutes to entirely
switch between different tasks because they must reload and recall all of the context associated with the new task into
their brain. So, if we switch between tasks every 5-10 minutes, the result is that we&amp;rsquo;re never deeply engaged with any
of these tasks, likely leading to lower quality software.&lt;/p&gt;
&lt;p&gt;Perhaps two AI coding agents can work on two tasks for the same feature. However, in this case, the two tasks must be
independent, which is more of an exception than the norm.&lt;/p&gt;
&lt;p&gt;Even if we decide to save some time by switching from AI agent coding to a longer task, such as a code review for one of
our peers, when we return to the agent, we will need to recall what we told the agent to do and what our expectations
were.&lt;/p&gt;
&lt;h3 id="integration-with-the-rest-of-the-codebase"&gt;&lt;a href="#integration-with-the-rest-of-the-codebase" class="header-anchor"&gt;&lt;/a&gt;Integration with the rest of the codebase
&lt;/h3&gt;&lt;p&gt;A lot of software development work involves hooking up the feature into the existing codebase. For example, we need to
create the new object and properly do dependency injection. These things often only take a few lines of code. Although
AI coding agents can do these integrations, it is often just as fast and more reliable to manually code these smaller
snippets.&lt;/p&gt;
&lt;h3 id="full-stack-development"&gt;&lt;a href="#full-stack-development" class="header-anchor"&gt;&lt;/a&gt;Full stack development
&lt;/h3&gt;&lt;p&gt;AI coding agents can help you write in a programming language you&amp;rsquo;re unfamiliar with. The agent will do the brunt work,
getting the syntax (mostly) right, and you can review the code to make sure it looks reasonable. This means software
developers can easily expand beyond their functional specialty into other languages and parts of the codebase.&lt;/p&gt;
&lt;p&gt;From an SDLC perspective, a single feature is now more likely to be assigned to a single developer instead of being
partitioned across backend/frontend or server/client boundaries. In this case, a single developer should be able to
finish a feature faster, without the handoffs and the issues they entail.&lt;/p&gt;
&lt;p&gt;Overall, AI coding agents can significantly help speed up the implementation phase. However, we must note that AI agent
effectiveness varies by task. Specifically, agents struggle with complex/niche designs and unfamiliar contexts.&lt;/p&gt;
&lt;h2 id="testing"&gt;&lt;a href="#testing" class="header-anchor"&gt;&lt;/a&gt;Testing
&lt;/h2&gt;&lt;p&gt;The two main testing areas are automated tests, including unit and integration tests, and manual tests.&lt;/p&gt;
&lt;h3 id="automated-unit-tests"&gt;&lt;a href="#automated-unit-tests" class="header-anchor"&gt;&lt;/a&gt;Automated (unit) tests
&lt;/h3&gt;&lt;p&gt;Writing tests has been a primary use case for generative AI over the past few years. So, given detailed instructions
regarding the scenarios to test, an AI coding agent should be able to write the test, run the test, and fix any issues.
The software developer will still need to review and adjust the tests. Some common problems with agent-generated tests
include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not following project standards regarding the test helper methods being used (e.g., wrong HTTP client, wrong assert
method)&lt;/li&gt;
&lt;li&gt;Wordy and hard to maintain tests (e.g., not following a table test approach, not using subtests)&lt;/li&gt;
&lt;li&gt;Duplicated tests (e.g., testing a case that was covered elsewhere in the test suite)&lt;/li&gt;
&lt;li&gt;Using numbers in test variables instead of descriptive names (e.g., rsp1, err2)&lt;/li&gt;
&lt;li&gt;Not actually testing anything (e.g., hard-coding test expectations in the source implementation)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The AI agent may come up with some corner cases to test, but it cannot be relied on for full functional correctness.
Since the AI agent can see the implementation, it often bases its tests on what has been implemented. It lacks an
understanding of the intended requirements and, hence, what should be tested.&lt;/p&gt;
&lt;h3 id="manual-tests"&gt;&lt;a href="#manual-tests" class="header-anchor"&gt;&lt;/a&gt;Manual tests
&lt;/h3&gt;&lt;p&gt;Before handing over the implementation to the QA team, the software developer should review the test plan themselves and
perform all the manual tests. Any issues found can be candidates for additional automated tests.&lt;/p&gt;
&lt;p&gt;There is no AI agent today that can replace manual testers, but engineers can try to take advantage of AI to help in
some areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Convert natural language to test steps&lt;/li&gt;
&lt;li&gt;Identify visual (UI) regressions&lt;/li&gt;
&lt;li&gt;Accessibility testing&lt;/li&gt;
&lt;li&gt;Auto-healing tests: updating tests when UI changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, for the testing phase, AI coding agents provide much help with creating and fixing automated tests, but not so much
with manual testing.&lt;/p&gt;
&lt;h2 id="deployment"&gt;&lt;a href="#deployment" class="header-anchor"&gt;&lt;/a&gt;Deployment
&lt;/h2&gt;&lt;p&gt;Before deploying the app to customers, engineers should do a release readiness check covering items like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All committed features implemented&lt;/li&gt;
&lt;li&gt;Testing and QA complete&lt;/li&gt;
&lt;li&gt;Security checks passed&lt;/li&gt;
&lt;li&gt;Load testing complete&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After deployment, engineers should conduct smoke tests and health checks to ensure the app is working.&lt;/p&gt;
&lt;p&gt;In addition, deployment involves communication tasks, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;demos, guides, FAQs&lt;/li&gt;
&lt;li&gt;release notes and changelogs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Generative AI is being used to generate some communication content. AI coding agents can provide little additional value
in the deployment phase.&lt;/p&gt;
&lt;h2 id="maintenance"&gt;&lt;a href="#maintenance" class="header-anchor"&gt;&lt;/a&gt;Maintenance
&lt;/h2&gt;&lt;p&gt;The maintenance phase of the software development lifecycle includes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Answering customer and internal questions&lt;/li&gt;
&lt;li&gt;Responding to alerts and incidents (e.g., investigating high CPU usage, resolving a failed background job)&lt;/li&gt;
&lt;li&gt;Reproducing and fixing customer-reported bugs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AI search tools have been helpful with searching the codebase and documentation to answer questions. Some upcoming tools
are trying to close the loop between production monitoring and source code fixes, and this is a great area to watch.
Reproducing bugs is still very much a manual process.&lt;/p&gt;
&lt;p&gt;Fixing bugs is an implementation task, so AI coding agents can help create the fix and a unit test. However, bug fixes
tend to be small in nature, with most of the software engineer&amp;rsquo;s time spent figuring out where the bug is and how best
to fix it.&lt;/p&gt;
&lt;h2 id="ai-coding-agent-impact-across-the-sdlc"&gt;&lt;a href="#ai-coding-agent-impact-across-the-sdlc" class="header-anchor"&gt;&lt;/a&gt;AI coding agent impact across the SDLC
&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SDLC Phase&lt;/th&gt;
&lt;th&gt;AI Agent Impact&lt;/th&gt;
&lt;th&gt;🔍 Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;📝 Requirements&lt;/td&gt;
&lt;td&gt;❌ Low&lt;/td&gt;
&lt;td&gt;Some research support, but little for strategic/product thinking&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;🧠 Design&lt;/td&gt;
&lt;td&gt;⚠️ Low–Medium&lt;/td&gt;
&lt;td&gt;Help limited to spike stories and boilerplate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;💻 Implementation&lt;/td&gt;
&lt;td&gt;✅ High&lt;/td&gt;
&lt;td&gt;Most benefit seen here (code gen, agent pair programming)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;🧪 Automated Testing&lt;/td&gt;
&lt;td&gt;✅ High&lt;/td&gt;
&lt;td&gt;Strong at generating/fixing tests, needs human oversight&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;🧍 Manual Testing&lt;/td&gt;
&lt;td&gt;❌ Low&lt;/td&gt;
&lt;td&gt;Still mostly a human-driven process&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;🚀 Deployment&lt;/td&gt;
&lt;td&gt;❌ Low&lt;/td&gt;
&lt;td&gt;Some help with writing release notes, limited technical role&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;🔧 Maintenance&lt;/td&gt;
&lt;td&gt;⚠️ Medium&lt;/td&gt;
&lt;td&gt;Good at fixes; weak at reproducing or analyzing issues&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id="risk-and-tradeoffs"&gt;&lt;a href="#risk-and-tradeoffs" class="header-anchor"&gt;&lt;/a&gt;Risk and tradeoffs
&lt;/h2&gt;&lt;p&gt;While AI coding agents offer clear benefits, they also introduce new risks and tradeoffs that teams must actively
manage:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Shallow code understanding&lt;/strong&gt;: Engineers may be tempted to rely on agents without fully understanding the generated
code. This erodes accountability and leads to slower debugging when issues arise.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Inconsistent quality&lt;/strong&gt;: Agent-generated code can be verbose, redundant, or subtly incorrect. Without careful review,
these issues can slip into production.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Developer deskilling&lt;/strong&gt;: Over-reliance on agents may reduce hands-on practice with fundamentals, particularly for
junior engineers who are still developing intuition.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security and compliance&lt;/strong&gt;: Agents can unknowingly introduce vulnerabilities or use unsafe patterns, especially when
integrating with third-party APIs or handling sensitive data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In short, AI agents amplify output, but without discipline and oversight, they can amplify problems too. Teams must
treat agent-generated code with &lt;strong&gt;greater&lt;/strong&gt; rigor than human-written code.&lt;/p&gt;
&lt;h2 id="will-ai-coding-agents-replace-software-developers"&gt;&lt;a href="#will-ai-coding-agents-replace-software-developers" class="header-anchor"&gt;&lt;/a&gt;Will AI coding agents replace software developers?
&lt;/h2&gt;&lt;p&gt;Recent studies suggest that current AI tools improve productivity by 10% to 20%.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://arxiv.org/abs/2410.12944" target="_blank" rel="noopener"
&gt;AI speeds up Google engineers by 21%&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://nypost.com/2025/03/14/business/jpmorgan-credits-coding-assistant-tool-for-boosting-engineers-efficiency/" target="_blank" rel="noopener"
&gt;JPMorgan claims AI boosts efficiency by up to 20%&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.itpro.com/software/development/atlassian-says-ai-has-created-an-unexpected-paradox-for-software-developers-theyre-saving-over-10-hours-a-week-but-theyre-still-overworked-and-losing-an-equal-amount-of-time-due-to-organizational-inefficiencies" target="_blank" rel="noopener"
&gt;Atlassian says AI is saving over 10 hours per week&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.reuters.com/business/ai-slows-down-some-experienced-software-developers-study-finds-2025-07-10" target="_blank" rel="noopener"
&gt;AI slows down some developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, will the productivity improvements jump with AI coding agents becoming mainstream? Will one engineer be able to do
the work of a whole team?&lt;/p&gt;
&lt;p&gt;Looking at the whole software development process, we see that the most significant gains from AI coding agents are in
the implementation and automated testing phases. The consensus from studies and industry reports is that software
engineers spend only about 30% of their time writing code. The rest of the time is spent in the other phases of the
SDLC, as well as on other tasks such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;attending and preparing for meetings (e.g., planning, retros, 1:1s)&lt;/li&gt;
&lt;li&gt;mentoring, teaching, and continuous learning&lt;/li&gt;
&lt;li&gt;context switching and task juggling&lt;/li&gt;
&lt;li&gt;recruiting, interviewing, and candidate evaluation&lt;/li&gt;
&lt;li&gt;writing or reviewing internal documentation, ADRs, and RFCs&lt;/li&gt;
&lt;li&gt;developer advocacy, blogging, and community engagement&lt;/li&gt;
&lt;li&gt;travel for conferences, offsites, or customer visits&lt;/li&gt;
&lt;li&gt;improving tooling, automation, and developer environments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Even assuming AI agents completely automate coding tasks (30% of work), the maximum productivity gain would be 43%: if
70% of work remains unchanged, then 30% time savings translates to doing 1.43x the work. In other words, 7 people can
now do the work of 10 people. This is far from the popular claims that AI will replace all software engineers.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/will-ai-agents-replace-developers/productivity-gain.svg"&gt;
&lt;/figure&gt;
&lt;p&gt;In summary, AI in general and AI coding agents in particular should continue to have a noticeable impact on software
developer productivity. However, developers&amp;rsquo; work is complex and varied, and AI can only provide efficiency improvements
and not wholesale replacement. AI coding agents won&amp;rsquo;t replace developers, but developers who know how to use them will
replace those who don&amp;rsquo;t.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../ai-for-software-developers/" &gt;How to use AI for software development (2025)&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;What every software engineer needs to know about AI right now: code completion, generation, and AI agents.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../introducing-mcp/" &gt;Introducing MCP: Lessons from building an AI-driven server&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;How we taught an AI agent to use our product with MCP.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../multitasking-with-ai-agents/" &gt;Multitasking with AI agents: When it works and when it fails&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;Practical strategies for managing multiple AI agents and avoiding the productivity traps of task switching.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-discuss-whether-ai-agents-can-replace-software-developers"&gt;&lt;a href="#watch-us-discuss-whether-ai-agents-can-replace-software-developers" class="header-anchor"&gt;&lt;/a&gt;Watch us discuss whether AI agents can replace software developers
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/fdBxpWXajSE"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to use TPM 2.0 to secure private keys</title><link>https://victoronsoftware.com/posts/how-to-use-tpm/</link><pubDate>Wed, 02 Jul 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/how-to-use-tpm/</guid><description>&lt;img src="https://victoronsoftware.com/posts/how-to-use-tpm/tpm-key-hierarchy-headline.png" alt="Featured image of post How to use TPM 2.0 to secure private keys" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#tpm-architecture" &gt;TPM architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#tpm-key-storage" &gt;TPM key storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#tpm-key-hierarchy-model" &gt;TPM key hierarchy model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#tpm-signing" &gt;TPM signing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Trusted Platform Module (TPM) is a secure cryptoprocessor for many security applications requiring strong device
identity, data protection, and platform integrity. Some uses include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device identity and attestation&lt;/li&gt;
&lt;li&gt;Secure boot&lt;/li&gt;
&lt;li&gt;Key storage&lt;/li&gt;
&lt;li&gt;Disk encryption&lt;/li&gt;
&lt;li&gt;Digital signatures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TPM 1.2 was standardized in 2009 as ISO/IEC 11889:2009. TPM 2.0, the most common today, came out in 2015 with the
&lt;a class="link" href="https://www.iso.org/standard/66510.html" target="_blank" rel="noopener"
&gt;ISO/IEC 11889:2015 standard&lt;/a&gt;. The link is for part 1 of the standard (out of
4).&lt;/p&gt;
&lt;p&gt;Although many people think of TPM as a hardware chip, it has many possible implementations. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A dedicated TPM chip&lt;/li&gt;
&lt;li&gt;Integrated TPM as part of another chip (e.g., an ARM-based SoC)&lt;/li&gt;
&lt;li&gt;Firmware TPMs (fTPMs) that run in the CPU&amp;rsquo;s trusted execution environment&lt;/li&gt;
&lt;li&gt;Virtual TPMs (vTPMs) are provided by hypervisors to provide security to virtual environments&lt;/li&gt;
&lt;li&gt;Software TPMs are emulators of TPMs. They are helpful for development purposes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article, we will focus on the use case of storing a private key in TPM 2.0.&lt;/p&gt;
&lt;h2 id="tpm-architecture"&gt;&lt;a href="#tpm-architecture" class="header-anchor"&gt;&lt;/a&gt;TPM architecture
&lt;/h2&gt;&lt;pre class="mermaid"&gt;
graph TD
subgraph TPM
subgraph Memory
VM[&amp;lt;b&amp;gt;Volatile Memory&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;Temporary keys, Sessions,&amp;lt;br/&amp;gt;Buffers]
NV[&amp;lt;b&amp;gt;Non-Volatile Memory&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;EK, SRK, Policies,&amp;lt;br/&amp;gt;NV indexes]
end
subgraph Crypto engine
CC[Cryptographic Coprocessor]
RNG[Random Number Generator]
KGEN[Key Generation Logic]
CC --&amp;gt;|Uses| RNG
KGEN --&amp;gt;|Uses| RNG
CC --&amp;gt;|Performs| ENC[Encryption/Decryption]
CC --&amp;gt;|Performs| SIG[Digital Signature / Hashing]
end
subgraph Control logic
PCR[&amp;#34;Platform Configuration&amp;lt;br/&amp;gt;Registers&amp;lt;br/&amp;gt;(PCRs)&amp;#34;]
MM[Command Processing&amp;lt;br/&amp;gt;Engine /&amp;lt;br/&amp;gt;State Machine]
end
end
style TPM fill:#5c2d91,stroke:#fff,stroke-width:2px,color:#fff
style CC fill:#1f4e79,stroke:#fff,color:#fff
style KGEN fill:#1f4e79,stroke:#fff,color:#fff
style RNG fill:#2e7d32,stroke:#fff,color:#fff
style NV fill:#5d4037,stroke:#fff,color:#fff
style VM fill:#5d4037,stroke:#fff,color:#fff
style PCR fill:#7b1fa2,stroke:#fff,color:#fff
style MM fill:#37474f,stroke:#fff,color:#fff
style ENC fill:#455a64,stroke:#fff,stroke-dasharray: 5 5,color:#fff
style SIG fill:#455a64,stroke:#fff,stroke-dasharray: 5 5,color:#fff
&lt;/pre&gt;
&lt;p&gt;This TPM architecture diagram illustrates the internal components of a Trusted Platform Module, highlighting its secure
cryptographic engine, non-volatile and volatile memory, and control subsystems. Key elements include the cryptographic
coprocessor, random number generator, and key generation logic, all operating within a hardware-isolated boundary. The
platform configuration registers (PCRs) and command processing engine manage system state and policy enforcement, while
non-volatile memory stores persistent keys and metadata. Non-volatile storage includes the Endorsement Key (EK), a
unique, factory-installed identity key, and the Storage Root Key (SRK), which anchors the TPM&amp;rsquo;s key hierarchy.&lt;/p&gt;
&lt;h2 id="tpm-key-storage"&gt;&lt;a href="#tpm-key-storage" class="header-anchor"&gt;&lt;/a&gt;TPM key storage
&lt;/h2&gt;&lt;p&gt;TPM defines four main authorization hierarchies, each rooted in a different seed and intended for various use cases:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hierarchy&lt;/th&gt;
&lt;th&gt;Seed Used&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Owner&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Storage Seed&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Storage keys, general-purpose keys&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Endorsement&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Endorsement Seed&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Identity, attestation (e.g. EK)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Platform&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Platform Seed&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Firmware-level trust &amp;amp; control&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Null&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(None)&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Ephemeral keys not tied to any seed&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Each hierarchy has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Its own &lt;strong&gt;seed&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Its own &lt;strong&gt;authorization policy&lt;/strong&gt; (e.g., owner password)&lt;/li&gt;
&lt;li&gt;Its own &lt;strong&gt;logical namespace&lt;/strong&gt; for creating keys&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will focus on the &lt;strong&gt;Owner&lt;/strong&gt; hierarchy.&lt;/p&gt;
&lt;p&gt;While TPMs are capable of securely storing cryptographic keys, most applications avoid storing keys directly in the TPM
in practice. This is because the amount of available non-volatile storage varies significantly between TPM models and is
often limited. Instead, keys are typically generated or loaded temporarily into the TPM or stored externally in
encrypted form and only used inside the TPM when needed.&lt;/p&gt;
&lt;h2 id="tpm-key-hierarchy-model"&gt;&lt;a href="#tpm-key-hierarchy-model" class="header-anchor"&gt;&lt;/a&gt;TPM key hierarchy model
&lt;/h2&gt;&lt;p&gt;In addition to the authorization hierarchies, the TPM organizes keys in a hierarchy. This model helps balance
performance, security, and the TPM&amp;rsquo;s limited storage.&lt;/p&gt;
&lt;p&gt;Storage Seed → Parent Key → Child Key&lt;/p&gt;
&lt;h3 id="storage-seed-owner"&gt;&lt;a href="#storage-seed-owner" class="header-anchor"&gt;&lt;/a&gt;Storage seed (Owner)
&lt;/h3&gt;&lt;p&gt;The seed is a non-exportable, hardware-internal value that acts as the TPM&amp;rsquo;s true root key. You can&amp;rsquo;t access it, but you
can use it indirectly. &lt;strong&gt;The storage seed cannot be modified.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="parent-key"&gt;&lt;a href="#parent-key" class="header-anchor"&gt;&lt;/a&gt;Parent key
&lt;/h3&gt;&lt;p&gt;Parent keys are stored persistently in TPM non-volatile memory or reloaded as needed. A parent key is any key used to
encrypt (wrap) one or more child keys. The parent key must be already loaded in the TPM to load/use any of its children.&lt;/p&gt;
&lt;p&gt;When creating a parent key, the TPM &lt;strong&gt;does not randomly generate&lt;/strong&gt; the key unless you explicitly ask it to. Instead, if
you provide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The same hierarchy (e.g., the Owner ties it to the storage seed)&lt;/li&gt;
&lt;li&gt;The same key template (same attributes, algorithms, policy)&lt;/li&gt;
&lt;li&gt;The same authorization (e.g., null password)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip; then the TPM will derive &lt;strong&gt;the exact same key&lt;/strong&gt; every time.&lt;/p&gt;
&lt;p&gt;The TPM uses a deterministic KDF (key derivation function). This determinism means the application does not need to
store the parent key explicitly. It can be recreated when needed.&lt;/p&gt;
&lt;h4 id="create-a-parent-key-example"&gt;&lt;a href="#create-a-parent-key-example" class="header-anchor"&gt;&lt;/a&gt;Create a parent key example
&lt;/h4&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/tpm2-software/tpm2-tools" target="_blank" rel="noopener"
&gt;tpm2-tools&lt;/a&gt; is the official CLI toolset for interacting with TPM 2.0 via
the TPM2 Software Stack (tss). Install it on Ubuntu/Debian like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt update
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install tpm2-tools
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;tpm2-tss&lt;/code&gt; should already be installed or pulled in as part of &lt;code&gt;tpm2-tools&lt;/code&gt; installation. You can check for these
libraries with: &lt;code&gt;dpkg -l | grep libtss2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To interact with the TPM device using &lt;code&gt;tpm2-tools&lt;/code&gt;, the user must either be root or a member of the &lt;code&gt;tss&lt;/code&gt; group, which
has access to &lt;code&gt;/dev/tpmrm0&lt;/code&gt;. To add the user to the &lt;code&gt;tss&lt;/code&gt; group, you can:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo usermod -aG tss $USER
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then &lt;strong&gt;log out and log back in&lt;/strong&gt; for the group change to take effect.&lt;/p&gt;
&lt;p&gt;Our examples use &lt;code&gt;tpm2-tools&lt;/code&gt; version 5.6. See
&lt;a class="link" href="https://tpm2-tools.readthedocs.io/en/latest/" target="_blank" rel="noopener"
&gt;the tpm2-tools documentation&lt;/a&gt; for details. To create a transient parent
key in TPM 2.0 using TSS (tpm2-tools) CLI, use the &lt;code&gt;tpm2_createprimary&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_createprimary &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --hierarchy&lt;span style="color:#f92672"&gt;=&lt;/span&gt;owner &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;rsa &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --hash-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;sha256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --attributes&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;fixedtpm|fixedparent|sensitivedataorigin|userwithauth|decrypt|restricted&amp;#34;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;parent.ctx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command creates the &lt;code&gt;parent.ctx&lt;/code&gt; context file, which can be used in later commands.&lt;/p&gt;
&lt;p&gt;Below is an equivalent example of creating the parent key using the &lt;a class="link" href="https://github.com/google/go-tpm" target="_blank" rel="noopener"
&gt;go-tpm&lt;/a&gt; library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create a parent key template with the required attributes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;parentTemplate&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New2B&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTPublic&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Type&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgRSA&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;NameAlg&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgSHA256&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ObjectAttributes&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAObject&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;FixedTPM&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// bound to TPM that created it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;FixedParent&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Required&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SensitiveDataOrigin&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// key material generated internally&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;UserWithAuth&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Required, even if we use nil password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Decrypt&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Allows key to be used for decryption/unwrapping&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Restricted&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Limits use to decryption of child keys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Parameters&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUPublicParms&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgRSA&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMSRSAParms&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;KeyBits&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Symmetric&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTSymDefObject&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Algorithm&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgAES&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;KeyBits&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUSymKeyBits&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgAES&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMKeyBits&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;128&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Mode&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUSymMode&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgAES&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgCFB&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;primaryKey&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CreatePrimary&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;PrimaryHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMRHOwner&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InPublic&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;parentTemplate&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;device&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="child-key"&gt;&lt;a href="#child-key" class="header-anchor"&gt;&lt;/a&gt;Child key
&lt;/h3&gt;&lt;p&gt;A &lt;strong&gt;child key&lt;/strong&gt; in TPM 2.0 is created &lt;strong&gt;under a parent key&lt;/strong&gt; (which must already exist or be loaded). The child key is
&lt;strong&gt;wrapped (encrypted)&lt;/strong&gt; by the parent key and is not usable on its own—it must be &lt;strong&gt;unwrapped (loaded)&lt;/strong&gt; by the TPM
using the correct parent key.&lt;/p&gt;
&lt;p&gt;To create a child ECC key using &lt;code&gt;tpm2-tools&lt;/code&gt;, use the &lt;code&gt;tpm2-create&lt;/code&gt; command, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_create &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --parent-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;parent.ctx &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ecc_nist_p256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --hash-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;sha256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --attributes&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;fixedtpm|fixedparent|sensitivedataorigin|userwithauth|sign|decrypt&amp;#34;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --public&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.pub &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --private&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.priv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command creates the &lt;code&gt;child.pub&lt;/code&gt; and &lt;code&gt;child.priv&lt;/code&gt; files which can be used in later commands.&lt;/p&gt;
&lt;p&gt;To load the child key into the TPM using &lt;code&gt;tpm2-tools&lt;/code&gt;, use the &lt;code&gt;tpm2_load&lt;/code&gt; command, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_load &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --parent-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;parent.ctx &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --public&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.pub &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --private&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.priv &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.ctx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command creates the &lt;code&gt;child.ctx&lt;/code&gt; context file which can be used later.&lt;/p&gt;
&lt;p&gt;Below is an equivalent example of creating the child key using the &lt;a class="link" href="https://github.com/google/go-tpm" target="_blank" rel="noopener"
&gt;go-tpm&lt;/a&gt; library,
loading the key into the TPM, and saving the context for subsequent reuse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create an ECC key template for the child key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;eccTemplate&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New2B&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTPublic&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Type&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgECC&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;NameAlg&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgSHA256&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ObjectAttributes&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAObject&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;FixedTPM&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;FixedParent&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SensitiveDataOrigin&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;UserWithAuth&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Required even if the password is nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SignEncrypt&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Decrypt&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Parameters&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUPublicParms&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgECC&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMSECCParms&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;CurveID&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;curveID&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create the key under the transient parent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;createKey&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Create&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ParentHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;parentKeyHandle&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InPublic&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;eccTemplate&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;device&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Load the key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;loadedKey&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Load&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ParentHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;parentKeyHandle&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InPrivate&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;createKey&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;OutPrivate&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InPublic&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;createKey&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;OutPublic&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;device&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Save the key context&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;keyContext&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ContextSave&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SaveHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;loadedKey&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ObjectHandle&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;device&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="-where-can-a-child-key-be-persisted"&gt;&lt;a href="#-where-can-a-child-key-be-persisted" class="header-anchor"&gt;&lt;/a&gt;📁 Where can a child key be persisted?
&lt;/h4&gt;&lt;p&gt;The most common approach is to persist the child keys outside the TPM.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You store the child&amp;rsquo;s public key and private key blob on a disk, in a secure database, or in a file system.&lt;/li&gt;
&lt;li&gt;When you need to use the key, you &lt;strong&gt;load it into the TPM&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This storage approach is safe because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The private key is always encrypted with the TPM&amp;rsquo;s parent key&lt;/li&gt;
&lt;li&gt;Only the correct TPM with the correct parent key can decrypt/use it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is also a de facto standard for
&lt;a class="link" href="https://www.hansenpartnership.com/draft-bottomley-tpm2-keys.html" target="_blank" rel="noopener"
&gt;storing TPM 2.0 key files using ASN.1 structure&lt;/a&gt;.
OpenConnect VPN and several other tools use this standard.&lt;/p&gt;
&lt;h2 id="tpm-signing"&gt;&lt;a href="#tpm-signing" class="header-anchor"&gt;&lt;/a&gt;TPM signing
&lt;/h2&gt;&lt;p&gt;TPM can sign data using the child key. The output signature is in raw binary.&lt;/p&gt;
&lt;p&gt;To sign using &lt;code&gt;tpm2-tools&lt;/code&gt;, use the &lt;code&gt;tpm2_sign&lt;/code&gt; command, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Create dummy data and a dummy digest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; data.in.raw
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat data.in.raw | openssl dgst -sha256 -binary &amp;gt; digest.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Sign the digest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_sign &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.ctx &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --hash-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;sha256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --digest &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --format&lt;span style="color:#f92672"&gt;=&lt;/span&gt;plain &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --signature&lt;span style="color:#f92672"&gt;=&lt;/span&gt;signature.plain digest.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Now we will verify the signature using openssl.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# First, we need the child public key in PEM format.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_readpublic &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --object-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.ctx &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --output&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.pem &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --format&lt;span style="color:#f92672"&gt;=&lt;/span&gt;pem
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Now, we can verify the signature.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl dgst &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -sha256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -verify&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.pem &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -keyform&lt;span style="color:#f92672"&gt;=&lt;/span&gt;pem &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -signature&lt;span style="color:#f92672"&gt;=&lt;/span&gt;signature.plain &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; data.in.raw
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Below is an example of signing using the &lt;a class="link" href="https://github.com/google/go-tpm" target="_blank" rel="noopener"
&gt;go-tpm&lt;/a&gt; library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;sign&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Sign&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;KeyHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;childKeyHandle&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Digest&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPM2BDigest&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Buffer&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InScheme&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTSigScheme&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Scheme&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgECDSA&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Details&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUSigScheme&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgECDSA&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMSSchemeHash&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;HashAlg&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;hashAlg&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Validation&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTTKHashCheck&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Tag&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMSTHashCheck&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sign&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tpm&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Get the ECDSA signature&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;ecdsaSig&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Signature&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Signature&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ECDSA&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../mtls-hello-world/" &gt;Mutual TLS intro and hands-on example: mTLS Hello World&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;A quick and practical
introduction to mutual TLS (mTLS), including how client certificate authentication works and how to try it with a
simple example.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../mtls-vs-http-signature/" &gt;Comparing mTLS and HTTP signatures&lt;/a&gt;&lt;/strong&gt; A practical guide to securing HTTP requests with
transport-layer or application-layer authentication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../why-you-need-vlan/" &gt;What is a VLAN and why you need it in your home network&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;Learn how VLANs isolate devices
to improve home network security and what you need to configure on your router, switch, and access points.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-the-explanation-of-securing-private-keys-with-tpm"&gt;&lt;a href="#watch-the-explanation-of-securing-private-keys-with-tpm" class="header-anchor"&gt;&lt;/a&gt;Watch the explanation of securing private keys with TPM
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/zwnznp5KeQs"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>My first conference talk experience</title><link>https://victoronsoftware.com/posts/first-conference-talk/</link><pubDate>Wed, 28 May 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/first-conference-talk/</guid><description>&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/devdays-talk-headline.jpg" alt="Featured image of post My first conference talk experience" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#monday-arrival" &gt;Monday: Arrival&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#tuesday-speakers-dinner" &gt;Tuesday: Speaker&amp;rsquo;s dinner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#wednesday-panel-discussion" &gt;Wednesday: Panel discussion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#thursday-showtime" &gt;Thursday: Showtime&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#friday-conclusion" &gt;Friday: Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Giving the first speech at a conference was an emotional rollercoaster. When I left home, flew overseas, checked into
the hotel, and unpacked, there was a constant undercurrent of anxiety that was not going away. And it was going to stay
with me for the next several days. Every so often, I remembered what was coming, and my stomach tightened, a wave of
vulnerability washing over me. There was a heavy fear of the unknown—I&amp;rsquo;d never been to this city, the audience was not
Americans, and the conference was held in a movie theater. The anticipation was exhausting, yet I couldn&amp;rsquo;t relax.&lt;/p&gt;
&lt;p&gt;I will never forget the &lt;a class="link" href="https://devdays.lt/" target="_blank" rel="noopener"
&gt;DevDays Europe 2025&lt;/a&gt; conference. When an experience is highly
charged—whether with fear, excitement, anxiety, or even joy—the brain marks it as important, and we remember more
details about it. This situation is called &lt;strong&gt;emotional arousal&lt;/strong&gt;, and it&amp;rsquo;s why people remember things like their first
kiss, a car accident, or, in this case, a first conference talk. So the anxiety, vulnerability, and fear you feel before
your first big speech don&amp;rsquo;t just make it more challenging—they also make it unforgettable.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/devdays-ricky.jpeg"
alt="Speaker in front of a big crowd."&gt;&lt;figcaption&gt;
&lt;h4&gt;The MC introducing the next speaker. Photo courtesy of Data Miner.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="monday-arrival"&gt;&lt;a href="#monday-arrival" class="header-anchor"&gt;&lt;/a&gt;Monday: Arrival
&lt;/h2&gt;&lt;p&gt;Of course, I knew I was going to be anxious. At the start of my career, I attended Toastmasters over 20 years ago, and I
knew all about the fear of public speaking. I knew the best weapon against this fear was preparation. So, I prepared. I
started on my slide deck two months before the conference. One month before, I finished the deck and recorded two dry
runs of my talk. &lt;a class="link" href="https://fleetdm.com" target="_blank" rel="noopener"
&gt;Fleet&lt;/a&gt;&amp;rsquo;s co-founder,
&lt;a class="link" href="https://www.linkedin.com/in/zacharywasserman/" target="_blank" rel="noopener"
&gt;Zach Wasserman&lt;/a&gt;, helped me with the slides and provided invaluable
feedback. I did four more full dry runs of the 1-hour talk, tweaking the talk a little bit each time. And yes, preparing
and practicing the talk took way longer than expected.&lt;/p&gt;
&lt;p&gt;One hour is a long time for a talk. During practice, I noticed my mouth was drying, and I began losing my voice around
40 minutes in. I don&amp;rsquo;t talk much during my typical day, spending most of my time coding. I just needed more practice
talking this long in a single stretch.&lt;/p&gt;
&lt;p&gt;I also noticed that I was getting tired halfway through my talk and had difficulty keeping my energy level up. I tried
to motivate myself and give myself a pep talk:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m an experienced software engineer, and I like to encourage and teach others&lt;/li&gt;
&lt;li&gt;The audience is my people—engineers, and I want to spend time with them&lt;/li&gt;
&lt;li&gt;This is an exciting new experience, and I should be excited&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I missed my connecting flight in Frankfurt due to slow passport control and arrived Monday evening. The conference
started on Wednesday, with a speaker&amp;rsquo;s dinner the night before. I arrived early to be well-rested for the speaker&amp;rsquo;s
dinner and the conference. I also didn&amp;rsquo;t eat on the plane to try and help my body adjust to the 8-hour time change.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/vilnius-airport.png"
alt="Bird&amp;#39;s eye view of Vilnius airport."&gt;&lt;figcaption&gt;
&lt;h4&gt;Photo by Augustas Didžgalvis&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The conference organizers set up a WhatsApp chat for the speakers. The chat was very active, with people discussing
their arrival times and things to do around town. It was great to have a community on arrival already.&lt;/p&gt;
&lt;h2 id="tuesday-speakers-dinner"&gt;&lt;a href="#tuesday-speakers-dinner" class="header-anchor"&gt;&lt;/a&gt;Tuesday: Speaker&amp;rsquo;s dinner
&lt;/h2&gt;&lt;p&gt;I worked, practiced my talk, and visited a local grocery store during the day.&lt;/p&gt;
&lt;p&gt;In the evening, I walked to La Boheme restaurant from my hotel. At the drinks reception, I spoke to many Europeans.
However, I had a hard time understanding their accents at first. The thought running through my mind was, why did I
apply to a European conference? I can&amp;rsquo;t even understand these people. This is going to suck.&lt;/p&gt;
&lt;p&gt;Yes, it seemed difficult to understand some accents initially, but my brain adjusted to the patterns, and it was fine.&lt;/p&gt;
&lt;p&gt;I had a great time with the other speakers, including a long chat with
&lt;a class="link" href="https://www.linkedin.com/in/paulconroy2/" target="_blank" rel="noopener"
&gt;Paul Conroy&lt;/a&gt; about AI and other topics. One of the top benefits of
conferences is chatting with other really smart people who are curious and passionate about technology.&lt;/p&gt;
&lt;p&gt;After dinner, we took a walking tour of Vilnius Old Town. This outing was also a great decision by the organizers, as I
probably wouldn&amp;rsquo;t have done it myself.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/devdays-tour.png"
alt="Conference attendees listen to the tour guide."&gt;&lt;figcaption&gt;
&lt;h4&gt;Tour guide talks about the Vilnius Presidential Palace&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When I returned to the hotel after 10 pm, I had no interest in sleeping. I was excited by all the new experiences and
anxious about the next day.&lt;/p&gt;
&lt;h2 id="wednesday-panel-discussion"&gt;&lt;a href="#wednesday-panel-discussion" class="header-anchor"&gt;&lt;/a&gt;Wednesday: Panel discussion
&lt;/h2&gt;&lt;p&gt;I ended up falling asleep around 6 am and woke up with my 8 am alarm.&lt;/p&gt;
&lt;p&gt;In the speaker&amp;rsquo;s chat, I saw that a couple of speakers could not make it to the conference, and conference organizers
were looking for anyone to give another talk. Although I had ideas for other talks, I had nothing ready. Other speakers
who had already given talks at different conferences jumped in.&lt;/p&gt;
&lt;p&gt;When I arrived at the conference, its scale hit me. All these professionals were mature, intelligent, technical people.
Hundreds of people. Most of them were going to watch my talk. It was unbelievable.&lt;/p&gt;
&lt;p&gt;I came to the main hall and sat down for the keynote. It was the biggest auditorium in the movie theater. There were
many volunteers, an MC, and an audio-visual technician controlling the excellent sound system, the giant extra-wide
screen, and the bright lights for the stage. There were also video cameras and photographers. Wow, talk about
intimidating for a first-time speaker. Were they expecting a TED talk from me?&lt;/p&gt;
&lt;p&gt;Suddenly, the lights dimmed, and a male acrobat came out and started dancing on a pole. Then, he was joined by a female
acrobat. I thought, where am I? That&amp;rsquo;s not something I expected at a conference. Wait, will there be a show like this
before my talk, too?&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/devdays-acrobat.jpeg"
alt="Acrobat performance."&gt;&lt;figcaption&gt;
&lt;h4&gt;Photo courtesy of Data Miner.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The opening keynote speaker, &lt;a class="link" href="https://www.linkedin.com/in/romanoroth/" target="_blank" rel="noopener"
&gt;Romano Roth&lt;/a&gt;, was great. I noticed he used a
hand-held clicker to advance the slides, which also doubled as a laser pointer. Wow, I didn&amp;rsquo;t even think of that. A
fellow speaker mentioned that presenters typically bring their own clickers to conferences.&lt;/p&gt;
&lt;p&gt;A few months ago, after my talk proposal was accepted, Ugne Krasauskaite, the organizer, asked who was interested in
participating in a panel. At first, I wasn&amp;rsquo;t sure—wasn&amp;rsquo;t one talk enough, and wouldn&amp;rsquo;t I already be stressed? Apparently
not. When I do something, I want to do it right, and I want to do it all. I was going to be at the conference anyway, so
I figured I might as well get some experience with my first conference panel.&lt;/p&gt;
&lt;p&gt;So, my panel was on the first day of the conference, and my talk was on the second. I would get the lay of the land and
practice being on stage.&lt;/p&gt;
&lt;p&gt;Like a good boy, I wanted to prepare for the panel—to know what I would say and the questions the moderator would ask.
However, that&amp;rsquo;s not always the case. The moderator may not tell you the questions upfront or rely on the audience for
the questions. I figured this was my first time on a panel, so I could always say, &amp;ldquo;Yes, I agree with my fellow
panelist.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The panelists got hand mics. When &lt;a class="link" href="https://www.linkedin.com/in/kenneth-rohde-christiansen/" target="_blank" rel="noopener"
&gt;Kenneth Rohde Christiansen&lt;/a&gt;,
the moderator, introduced me on stage, I started speaking and immediately heard my voice boom via the movie theater
speakers. I knew my mic was on.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/devdays-panel.jpeg"
alt="The panel, consisting of 5 guys sitting on red couches on stage in bright lights."&gt;&lt;figcaption&gt;
&lt;h4&gt;Photo courtesy of Data Miner.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;I was nervous the whole time. It was like a job interview—I didn&amp;rsquo;t know the questions, but I better have some good
answers. My fellow panelists were extremely knowledgeable and impressive. I was glad to ride on their coattails and make
a comment here and there. The other panelists were &lt;a class="link" href="https://www.linkedin.com/in/romanoroth/" target="_blank" rel="noopener"
&gt;Romano Roth&lt;/a&gt;,
&lt;a class="link" href="https://www.linkedin.com/in/pauldragoonis/" target="_blank" rel="noopener"
&gt;Paul Dragoonis&lt;/a&gt;, and
&lt;a class="link" href="https://www.linkedin.com/in/alexolivier/" target="_blank" rel="noopener"
&gt;Alex Olivier&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/devdays-panel-2.jpg"
alt="Victor speaking at the panel."&gt;&lt;figcaption&gt;
&lt;h4&gt;Photo courtesy of Data Miner.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;After the last talk, I asked the audio-visual technician if I could test the connection. It was pretty straightforward.
There was a USB-C hub that you plug into your computer. The hub connects the external monitor and the presentation
clicker. I was glad I would have a hand clicker. A monitor in front of the stage showed what was presented on the
massive screen behind the speaker.&lt;/p&gt;
&lt;p&gt;I do not recommend being jet lagged for your first conference talk. Since I didn&amp;rsquo;t sleep the night before, my brain felt
like goo. I wanted to meet up with fellow speakers after the day but also needed sleep. Back at the hotel, I took a
sleeping pill and slept for 11 hours that night.&lt;/p&gt;
&lt;h2 id="thursday-showtime"&gt;&lt;a href="#thursday-showtime" class="header-anchor"&gt;&lt;/a&gt;Thursday: Showtime
&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve been in tech for over 25 years, but why didn&amp;rsquo;t I speak at a conference before? The simple answer is that my career
and personal goals never really aligned with conference speaking. I was always looking to do something different in my
career than what I was doing at the time. Whether it was to get a master&amp;rsquo;s, switch my technical area from hardware to
software, become a manager, try to get my startup off the ground, etc. Speaking at conferences seemed like a huge
time-sink that wouldn&amp;rsquo;t help me with my shorter-term goals. Also, I didn&amp;rsquo;t think conferences were valuable due to travel
time, preparation, and time away from potentially more useful activities.&lt;/p&gt;
&lt;p&gt;So, what changed? I&amp;rsquo;ve gotten calmer and more mature. I decided to try out conference speaking and see if I liked it.
Also, as a senior developer at &lt;a class="link" href="https://fleetdm.com" target="_blank" rel="noopener"
&gt;Fleet&lt;/a&gt;, getting external exposure seemed like a good idea. Plus, I
had written enough blog content to repackage some of it as conference talks.&lt;/p&gt;
&lt;p&gt;On the day of my talk, I put on the nice sweater my wife packed for me. &amp;ldquo;You&amp;rsquo;re going to Europe,&amp;rdquo; she told me, &amp;ldquo;so you
need to dress properly.&amp;rdquo; The day was humid and warm, so I started sweating when I got in the Uber to go to the venue.
The sun was shining at me through the window of the moving car, which made things even worse. I moved to the other side
of the vehicle, and the driver looked at me suspiciously. I ended up sweating most of the day.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/devdays-dark-hallway.jpeg"
alt="Dark, crowded movie theater hallway of the conference."&gt;&lt;figcaption&gt;
&lt;h4&gt;Photo courtesy of Data Miner.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;My talk was the closing keynote of the day. As I watched other people&amp;rsquo;s talks, I saw that they all used a dark theme—a
dark background for their slides—and it looked great on the large movie screens. My talk used the light Fleet template.
Well, I thought, I can&amp;rsquo;t do anything about that now.&lt;/p&gt;
&lt;p&gt;I spent the hour before my talk in the speaker&amp;rsquo;s lounge. I reviewed my slides and then sat there, paying attention to my
emotions. I wished my talk was over already. I reminded myself that this was an exciting experience, and I should savor
it. Then, I walked down into the main hall where I would be presenting.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;You look pretty calm,&amp;rdquo; Mattias, a conference volunteer, said.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Well, I prepared as much as I could. Can&amp;rsquo;t do much else at this point,&amp;rdquo; I replied.&lt;/p&gt;
&lt;p&gt;I left my phone and my conference badge in my bag. The audio-visual technician put on the Britney Spears mic and
attached it to my clothes. I was ready to go.&lt;/p&gt;
&lt;p&gt;I remembered another piece of advice—ask someone to take pictures of you so you can share them on LinkedIn. Although the
conference had professional photographers, those pictures would not be available for a few days. I asked Ricky, the MC,
to take some photos of me.&lt;/p&gt;
&lt;p&gt;There were no acrobats before my talk, but there was a group game where people could win prizes. People were pouring
in—I&amp;rsquo;m guessing around 300 people in the seats.&lt;/p&gt;
&lt;p&gt;The game consisted of 10 multiple-choice questions, and people voted with their phones. As I sat there watching, I
wondered how weird it would be if I were also playing this game and then I won.&lt;/p&gt;
&lt;p&gt;And then it was time—time for action, time to let my practice take over. There was no time to think or worry. Stick to
the script, try to make eye contact with the audience, and move around once in a while.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/devdays-talk-1.jpg"
alt="Victor on stage presenting."&gt;&lt;figcaption&gt;
&lt;h4&gt;Photo courtesy of Data Miner.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The clicker may have been a mistake. To use the laser, I always looked down to make sure I was pressing the right
button. &lt;a class="link" href="https://www.linkedin.com/in/miro-horacek/" target="_blank" rel="noopener"
&gt;Miro Horacek&lt;/a&gt; later told me he saw me having trouble with the thing.
I didn&amp;rsquo;t think it was so obvious at the time. The lesson here is to practice with the clicker. You want to be pressing
the right buttons without having to look down.&lt;/p&gt;
&lt;p&gt;About halfway through the talk, my nerves calmed down. I felt so calm that it was weird. I felt like I was simply
talking to another engineer next to me. It&amp;rsquo;s unbelievable how the brain works and how quickly you can get used to the
patterns around you. I was in front of a giant screen, in the bright lights, with 100s of people looking at me (plus
some unknown number watching the live stream). This calm experience is often called &lt;strong&gt;settling in&lt;/strong&gt; or &lt;strong&gt;stage
comfort&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I finished my presentation five minutes faster than any of my practice runs. Afterward, I answered a few questions. I
didn&amp;rsquo;t understand a couple of them, so I asked the person to come to talk to me afterward.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/devdays-talk-2.jpg"
alt="Victor on stage presenting."&gt;&lt;figcaption&gt;
&lt;h4&gt;Photo courtesy of Data Miner.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Ricky forgot to take pictures during my presentation, so I got back up on stage, and he took one as if I were still
presenting.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/devdays-after-presentation.png"
alt="Victor on stage posing."&gt;
&lt;/figure&gt;
&lt;p&gt;I was high with excitement and relief as I headed to the after-party. Several people made positive comments about my
talk. It felt like a great evening. I was riding the &lt;strong&gt;post-performance high&lt;/strong&gt; (also known as &lt;strong&gt;speaker&amp;rsquo;s high&lt;/strong&gt;). This
high was so nice that I could see how it could be addicting—you purposefully put yourself into high-stakes public events
to get it.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/devdays-afterparty.jpeg"&gt;&lt;figcaption&gt;
&lt;h4&gt;Jon Bennalick, Alfonso Sandoval Rosas, Victor Lyuboslavsky, and Eleni Grosdouli&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;After the party, I had a great dinner with three other speakers,
&lt;a class="link" href="https://www.linkedin.com/in/jonbennallick/" target="_blank" rel="noopener"
&gt;Jon Bennalick&lt;/a&gt;,
&lt;a class="link" href="https://www.linkedin.com/in/kallesirkesalo/" target="_blank" rel="noopener"
&gt;Kalle Sirkesalo&lt;/a&gt;, and
&lt;a class="link" href="https://www.linkedin.com/in/miro-horacek/" target="_blank" rel="noopener"
&gt;Miro Horacek&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="friday-conclusion"&gt;&lt;a href="#friday-conclusion" class="header-anchor"&gt;&lt;/a&gt;Friday: Conclusion
&lt;/h2&gt;&lt;p&gt;I attended a couple of panels on Friday, and I noticed that when a panelist was speaking, they were on camera and taking
up the entire giant screen behind them. Now that&amp;rsquo;s a close-up. It&amp;rsquo;s a good thing I wasn&amp;rsquo;t aware of that during my panel.&lt;/p&gt;
&lt;p&gt;Besides the great talks, a considerable value of the conference comes from talking with other smart people, also known
as &lt;strong&gt;the hallway track&lt;/strong&gt;. As a speaker, it felt easy to start a conversation with other speakers by asking about their
talk, etc. A few people approached me to discuss my talk, and these discussions were also educational.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/devdays-hallway.jpeg"
alt="Victor talking to two other speakers."&gt;&lt;figcaption&gt;
&lt;h4&gt;Photo courtesy of Data Miner.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;People tend to be friendlier and more open in any new situation, such as a conference. So, I left my comfort zone and
talked to other engineers. It&amp;rsquo;s not often that you get so much technical talent in one place. I had some great
conversations with &lt;a class="link" href="https://www.linkedin.com/in/dmytro-sukhariev/" target="_blank" rel="noopener"
&gt;Dmytro Sukhariev&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/first-conference-talk/devdays-speakers.jpg"
alt="Group photo of the conference speakers."&gt;&lt;figcaption&gt;
&lt;h4&gt;Speakers&amp;#39; photo. Courtesy of Data Miner.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;The original article the talk was based on: &lt;a class="link" href="../readable-code/" &gt;Readable code&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="keynote--readable-code-the-secret-to-clean-productive-software"&gt;&lt;a href="#keynote--readable-code-the-secret-to-clean-productive-software" class="header-anchor"&gt;&lt;/a&gt;Keynote | Readable Code: The Secret to Clean, Productive Software
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/lQBYQvyGPLE"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id="panel-discussion--building-the-future-trends-in-modern-application-architecture"&gt;&lt;a href="#panel-discussion--building-the-future-trends-in-modern-application-architecture" class="header-anchor"&gt;&lt;/a&gt;Panel Discussion | Building the Future: Trends in Modern Application Architecture
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/w31U6TkYbgw"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id="watch-me-discuss-my-first-conference-talk-experience"&gt;&lt;a href="#watch-me-discuss-my-first-conference-talk-experience" class="header-anchor"&gt;&lt;/a&gt;Watch me discuss my first conference talk experience
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/IaY9oT0Mr68"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Full-featured engineering metrics—for free</title><link>https://victoronsoftware.com/posts/engineering-metrics-no-cost/</link><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/engineering-metrics-no-cost/</guid><description>&lt;img src="https://victoronsoftware.com/posts/engineering-metrics-no-cost/engineering-metrics-headline.png" alt="Featured image of post Full-featured engineering metrics—for free" /&gt;&lt;p&gt;Tracking engineering metrics doesn&amp;rsquo;t have to mean signing up for another expensive SaaS tool. This guide will show you
how to build a flexible, powerful, and completely free metrics dashboard using open-source tools like Grafana and a fast
analytical database. Whether you&amp;rsquo;re monitoring cycle time, bug fix velocity, or pull request activity, this setup gives
you deep visibility that your team will actually want to look at.&lt;/p&gt;
&lt;p&gt;In our previous &lt;a class="link" href="../track-engineering-metrics/" &gt;engineering metrics guide&lt;/a&gt;, we showed a basic way to track metrics using
GitHub Actions and the Google Sheets API. The data in Google Sheets can be visualized using a tool like
&lt;a class="link" href="https://lookerstudio.google.com/" target="_blank" rel="noopener"
&gt;Google&amp;rsquo;s Looker Studio&lt;/a&gt;. However, we wanted more powerful visualizations that could
be dynamically sliced, diced, and drilled down into. Also, we wanted the tools to be free so we wouldn&amp;rsquo;t need to justify
the costs to our management.&lt;/p&gt;
&lt;h2 id="the-free-engineering-benchmarks-stack"&gt;&lt;a href="#the-free-engineering-benchmarks-stack" class="header-anchor"&gt;&lt;/a&gt;The free engineering benchmarks stack
&lt;/h2&gt;&lt;p&gt;As in our previous example, we used &lt;a class="link" href="https://github.com/features/actions" target="_blank" rel="noopener"
&gt;GitHub Actions&lt;/a&gt; to schedule our metrics
collection and compute the data we wanted to track.&lt;/p&gt;
&lt;p&gt;For visualizations, we decided on &lt;a class="link" href="https://grafana.com/oss/grafana/" target="_blank" rel="noopener"
&gt;Grafana&lt;/a&gt;. Grafana is a leader in visualizing data,
is open source, and can be self-hosted. We used Grafana&amp;rsquo;s free cloud tier for this example since we didn&amp;rsquo;t want to spin
up any infrastructure ourselves.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/engineering-metrics-no-cost/grafana-cloud-free.png"
alt="Free observability plan with generous limits: 10k metrics, 50GB logs, 50GB traces, 50GB profiles, 500 VUh of k6 testing, 50k frontend sessions, 2,232 app observability host hours, 2,232 Kubernetes monitoring host hours, 37,944 container hours, 14-day data retention, and support for 3 active users."&gt;
&lt;/figure&gt;
&lt;p&gt;However, the problem with Grafana Cloud&amp;rsquo;s free tier is that data is retained for only 14 days. We wanted to keep and
compare our engineering metrics year over year. Due to its generous free tier, we decided to use
&lt;a class="link" href="https://cloud.google.com/bigquery?hl=en" target="_blank" rel="noopener"
&gt;Google&amp;rsquo;s BigQuery&lt;/a&gt; analytics database.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Storage: The first 10 GiB per month is free.&lt;/li&gt;
&lt;li&gt;Queries: The first 1 TiB of query data processed per month is free.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We created a project in Google Cloud Console, created a dataset (github_metrics), made a service account with BigQuery
roles, and created a JWT key for the service account to use with our app.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/engineering-metrics-no-cost/bigquery-service-account.png"
alt="Roles for the BigQuery service account."&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; BigQuery has a sandbox mode that does not require a credit card. However, it has some API limitations. We
recommend enabling billing on the account and monitoring your usage to ensure you stay within the free limits.&lt;/p&gt;
&lt;h2 id="picking-the-metric-to-track-pickup-time"&gt;&lt;a href="#picking-the-metric-to-track-pickup-time" class="header-anchor"&gt;&lt;/a&gt;Picking the metric to track: pickup time
&lt;/h2&gt;&lt;p&gt;There are many engineering benchmark metrics we could have started with, but we decided to start with one that we&amp;rsquo;ve
been keenly aware of at many points in our development life. When developers finish implementing and testing their
feature and put it up for review, sometimes the PR sits there for days at a time. This waiting time is a frustrating
experience for developers, especially if they or others depend on those changes to make progress in their work. This
time to review has a direct impact on engineering velocity.&lt;/p&gt;
&lt;p&gt;We define pickup time as the time from when the PR is marked as ready for review until the code review is done. The
reviewer does not need to approve the change; they can also reject or simply comment on it. We are measuring the time
from when the developer finishes their work until they get feedback on their work.&lt;/p&gt;
&lt;h2 id="implementing-metrics-gathering"&gt;&lt;a href="#implementing-metrics-gathering" class="header-anchor"&gt;&lt;/a&gt;Implementing metrics gathering
&lt;/h2&gt;&lt;p&gt;Since we knew our code would run in a GitHub Actions workflow, we implemented it as a
&lt;a class="link" href="../github-reusable-workflows-and-steps/#reusable-steps-composite-action" &gt;reusable GitHub action&lt;/a&gt;. We decided to use
JavaScript (not TypeScript) to simplify the action.&lt;/p&gt;
&lt;p&gt;We used the &lt;a class="link" href="https://github.com/octokit/octokit.js" target="_blank" rel="noopener"
&gt;octokit.js GitHub API client&lt;/a&gt; to fetch the pull requests from our
repo, extract the timeline events and review events from the PRs, and calculate the pickup time.&lt;/p&gt;
&lt;p&gt;In our initial review of the data, we noticed occasional spikes in pickup time on Mondays. That&amp;rsquo;s because pull requests
created on Friday were sitting around over the weekend until being reviewed on Monday. Since we don&amp;rsquo;t expect our
software developers to work weekends, we removed weekends from our calculations. Removing weekends was one of the most
time-consuming implementation details. We created a unit test to make sure we got the details right.&lt;/p&gt;
&lt;p&gt;We added a &lt;code&gt;--print-only&lt;/code&gt; option to our program to manually examine the data before we uploaded it to the analytical
database.&lt;/p&gt;
&lt;p&gt;To interface with BigQuery, we used &lt;a class="link" href="https://github.com/googleapis/nodejs-bigquery" target="_blank" rel="noopener"
&gt;Google&amp;rsquo;s BigQuery Node.js client&lt;/a&gt;.
Our table schema was:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;fields&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; { &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;review_date&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;DATE&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;mode&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;REQUIRED&amp;#39;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; { &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;pr_creator&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;STRING&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;mode&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;REQUIRED&amp;#39;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; { &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;pr_url&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;STRING&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;mode&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;REQUIRED&amp;#39;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; { &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;pickup_time_seconds&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;INTEGER&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;mode&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;REQUIRED&amp;#39;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; { &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;repository&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;STRING&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;mode&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;REQUIRED&amp;#39;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; { &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;pr_number&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;INTEGER&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;mode&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;REQUIRED&amp;#39;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; { &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;target_branch&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;STRING&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;mode&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;REQUIRED&amp;#39;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; { &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;ready_time&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;TIMESTAMP&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;mode&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;REQUIRED&amp;#39;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; { &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;first_review_time&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;TIMESTAMP&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;mode&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;REQUIRED&amp;#39;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;pr_number&lt;/code&gt; was the primary key. Once we calculate and save the pickup time for a PR, we do not update it on future
runs.&lt;/p&gt;
&lt;h2 id="creating-grafana-chart"&gt;&lt;a href="#creating-grafana-chart" class="header-anchor"&gt;&lt;/a&gt;Creating Grafana chart
&lt;/h2&gt;&lt;p&gt;In Grafana, we created a data source connected to our BigQuery database. Then, we created a new dashboard with a new
pickup time chart. We had to decide how to visualize the data. We decided on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;7-day moving average&lt;/li&gt;
&lt;li&gt;filter by time range&lt;/li&gt;
&lt;li&gt;filter by GitHub username&lt;/li&gt;
&lt;li&gt;filter by user group (e.g., engineering)&lt;/li&gt;
&lt;li&gt;include the PR numbers for each data point for drill down&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We created Grafana variables to filter by username/group.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/engineering-metrics-no-cost/grafana-variables.png"
alt="List of Grafana dashboard variables, including user and user_group."&gt;
&lt;/figure&gt;
&lt;p&gt;Creating the correct SQL query that gathered all the data and integrated with Grafana&amp;rsquo;s features took considerable time.
Below is the query we came up with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;WITH&lt;/span&gt; daily &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; DATE(first_review_time, &lt;span style="color:#e6db74"&gt;&amp;#34;America/Chicago&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;day&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;COUNT&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; pr_count,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SUM&lt;/span&gt;(pickup_time_seconds) &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; total_seconds
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;`&lt;/span&gt;engineering&lt;span style="color:#f92672"&gt;-&lt;/span&gt;metrics&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;123456&lt;/span&gt;.github_metrics.pr_pickup_time&lt;span style="color:#f92672"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; first_review_time &lt;span style="color:#66d9ef"&gt;BETWEEN&lt;/span&gt; TIMESTAMP_SUB(TIMESTAMP_MILLIS(&lt;span style="color:#960050;background-color:#1e0010"&gt;$&lt;/span&gt;__from), INTERVAL &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DAY&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; TIMESTAMP_MILLIS(&lt;span style="color:#960050;background-color:#1e0010"&gt;$&lt;/span&gt;__to)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;-- No filters selected: show all
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;-- Only user filter applied
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; pr_creator &lt;span style="color:#66d9ef"&gt;IN&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;UNNEST&lt;/span&gt;(SPLIT(&lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;-- Only user_group filter applied
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; pr_creator &lt;span style="color:#66d9ef"&gt;IN&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;UNNEST&lt;/span&gt;(SPLIT(&lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;-- Both filters applied → take intersection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; pr_creator &lt;span style="color:#66d9ef"&gt;IN&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; val &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;UNNEST&lt;/span&gt;(SPLIT(&lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)) val
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;INTERSECT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DISTINCT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; val &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;UNNEST&lt;/span&gt;(SPLIT(&lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;)) val
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;GROUP&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;BY&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;day&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;calendar &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;-- Build list of days in the visible Grafana range
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;day&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;UNNEST&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; GENERATE_DATE_ARRAY(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; DATE(TIMESTAMP_MILLIS(&lt;span style="color:#960050;background-color:#1e0010"&gt;$&lt;/span&gt;__from)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; DATE(TIMESTAMP_MILLIS(&lt;span style="color:#960050;background-color:#1e0010"&gt;$&lt;/span&gt;__to))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ) &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;day&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rolling_avg &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;c&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;day&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;TIMESTAMP&lt;/span&gt;(CONCAT(&lt;span style="color:#66d9ef"&gt;CAST&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;c&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;day&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; STRING), &lt;span style="color:#e6db74"&gt;&amp;#39; 12:00:00&amp;#39;&lt;/span&gt;)) &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; time,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;-- True 7-day weighted average
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SUM&lt;/span&gt;(d.total_seconds)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; daily d
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; d.&lt;span style="color:#66d9ef"&gt;day&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;BETWEEN&lt;/span&gt; DATE_SUB(&lt;span style="color:#66d9ef"&gt;c&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;day&lt;/span&gt;, INTERVAL &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DAY&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;c&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;day&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SUM&lt;/span&gt;(d.pr_count)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; daily d
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; d.&lt;span style="color:#66d9ef"&gt;day&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;BETWEEN&lt;/span&gt; DATE_SUB(&lt;span style="color:#66d9ef"&gt;c&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;day&lt;/span&gt;, INTERVAL &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DAY&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;c&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;day&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ) &lt;span style="color:#f92672"&gt;/&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;3600&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; moving_avg_hours
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; calendar &lt;span style="color:#66d9ef"&gt;c&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r.time,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r.moving_avg_hours,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;-- Optional: attach PR numbers per window
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ARRAY_AGG(&lt;span style="color:#66d9ef"&gt;DISTINCT&lt;/span&gt; pr_number)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;`&lt;/span&gt;engineering&lt;span style="color:#f92672"&gt;-&lt;/span&gt;metrics&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;459517&lt;/span&gt;.github_metrics.pr_pickup_time&lt;span style="color:#f92672"&gt;`&lt;/span&gt; p
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; DATE(p.first_review_time, &lt;span style="color:#e6db74"&gt;&amp;#34;America/Chicago&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;BETWEEN&lt;/span&gt; DATE(DATE_SUB(r.time, INTERVAL &lt;span style="color:#ae81ff"&gt;6&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DAY&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; DATE(r.time)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;-- No filters selected: show all
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;-- Only user filter applied
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; pr_creator &lt;span style="color:#66d9ef"&gt;IN&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;UNNEST&lt;/span&gt;(SPLIT(&lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;-- Only user_group filter applied
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; pr_creator &lt;span style="color:#66d9ef"&gt;IN&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;UNNEST&lt;/span&gt;(SPLIT(&lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;OR&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;-- Both filters applied → take intersection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;__all&amp;#39;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;AND&lt;/span&gt; pr_creator &lt;span style="color:#66d9ef"&gt;IN&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; val &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;UNNEST&lt;/span&gt;(SPLIT(&lt;span style="color:#e6db74"&gt;&amp;#39;${user:csv}&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)) val
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;INTERSECT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;DISTINCT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; val &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;UNNEST&lt;/span&gt;(SPLIT(&lt;span style="color:#e6db74"&gt;&amp;#39;${user_group:csv}&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;)) val
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ) &lt;span style="color:#66d9ef"&gt;AS&lt;/span&gt; pr_numbers_window
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; rolling_avg r
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;ORDER&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;BY&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; r.time
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above query, we used Grafana-specific variables such as &lt;code&gt;$__from&lt;/code&gt;, &lt;code&gt;$__to&lt;/code&gt;, &lt;code&gt;${user:csv}&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;We also had to deal with the timestamp shift problem, where the chart data was off by 1 day, since we were stripping the
time from &lt;code&gt;first_review_time&lt;/code&gt; but displaying the data in local time (the day before UTC midnight). This statement
attempts to fix the problem by changing the time to noon: &lt;code&gt;TIMESTAMP(CONCAT(CAST(c.day AS STRING), '12:00:00')) AS time&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The final chart looked like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/engineering-metrics-no-cost/grafana-chart.png"
alt="7-day moving average of pickup time for Fleet&amp;#39;s engineering team."&gt;
&lt;/figure&gt;
&lt;p&gt;We can inspect the data to drill down into the PR numbers for each data point:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/engineering-metrics-no-cost/grafana-inspect-data.png"
alt="Raw data from the database query, including PR numbers."&gt;
&lt;/figure&gt;
&lt;p&gt;With the PR numbers, we can explore our data using the following query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;-- Sample query to dig into the details. Replace the PR numbers list.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;FROM&lt;/span&gt; &lt;span style="color:#f92672"&gt;`&lt;/span&gt;engineering&lt;span style="color:#f92672"&gt;-&lt;/span&gt;metrics&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;123456&lt;/span&gt;.github_metrics.pr_pickup_time&lt;span style="color:#f92672"&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; pr_number &lt;span style="color:#66d9ef"&gt;IN&lt;/span&gt; (&lt;span style="color:#ae81ff"&gt;28625&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;28570&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;28417&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;28658&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;28382&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;28538&lt;/span&gt;,&lt;span style="color:#ae81ff"&gt;28608&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;ORDER&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;BY&lt;/span&gt; pickup_time_seconds &lt;span style="color:#66d9ef"&gt;DESC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="creating-the-github-actions-workflow"&gt;&lt;a href="#creating-the-github-actions-workflow" class="header-anchor"&gt;&lt;/a&gt;Creating the GitHub Actions workflow
&lt;/h2&gt;&lt;p&gt;Once everything worked, we set up a GitHub workflow to run daily and automatically update the metrics.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Collect PR Pickup Time Metrics&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;schedule&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;cron&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;0 9 * * *&amp;#39;&lt;/span&gt; &lt;span style="color:#75715e"&gt;# Run at 4am CDT (9am UTC)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;workflow_dispatch&lt;/span&gt;: &lt;span style="color:#75715e"&gt;# Allow manual triggering&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;collect-metrics&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runs-on&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;ubuntu-latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Checkout code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;actions/checkout@v4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Set up Node.js&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;actions/setup-node@v4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;node-version&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;16&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;cache&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;npm&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Install dependencies&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;npm ci&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Create service account key file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: |&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; echo &amp;#39;${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}&amp;#39; &amp;gt; service-account-key.json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; # Verify the file is valid JSON
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; cat service-account-key.json | jq . &amp;gt; /dev/null&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Collect and upload metrics&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;./&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;github-token&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;config-path&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;./config.json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;bigquery-project&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ secrets.BIGQUERY_PROJECT_ID }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;bigquery-dataset&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;github_metrics&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;bigquery-table&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;pr_pickup_time&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;target-branch&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;main&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;lookback-days&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;30&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;print-only&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;false&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;GITHUB_TOKEN&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;BIGQUERY_PROJECT_ID&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ secrets.BIGQUERY_PROJECT_ID }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;SERVICE_ACCOUNT_KEY_PATH&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;./service-account-key.json&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="code-on-github"&gt;&lt;a href="#code-on-github" class="header-anchor"&gt;&lt;/a&gt;Code on GitHub
&lt;/h2&gt;&lt;p&gt;Our code is available on GitHub at: &lt;a class="link" href="https://github.com/getvictor/pickup-time" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/pickup-time&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class="link" href="../engineering-transparency/" &gt;Why transparency beats everything else in engineering&lt;/a&gt;&lt;br&gt;
How visibility into priorities and work creates accountability and transforms engineering culture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class="link" href="../code-complexity-metrics/" &gt;How to spot and reduce code complexity&lt;/a&gt;&lt;br&gt;
A practical guide to the most useful metrics for understanding and improving code structure and maintainability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class="link" href="../readable-code/" &gt;Turning messy code into clean, readable systems&lt;/a&gt;&lt;br&gt;
Why code readability matters—and how to measure and improve it for long-term productivity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-set-up-free-engineering-metrics"&gt;&lt;a href="#watch-how-to-set-up-free-engineering-metrics" class="header-anchor"&gt;&lt;/a&gt;Watch how to set up free engineering metrics
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/okYOm8IPeKM"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Introducing MCP: Lessons from building an AI-driven server</title><link>https://victoronsoftware.com/posts/introducing-mcp/</link><pubDate>Thu, 08 May 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/introducing-mcp/</guid><description>&lt;img src="https://victoronsoftware.com/posts/introducing-mcp/introducing-mcp-headline.png" alt="Featured image of post Introducing MCP: Lessons from building an AI-driven server" /&gt;&lt;p&gt;Recently, we developed a proof of concept using an MCP(Model Context Protocol) server to control
&lt;a class="link" href="https://fleetdm.com/" target="_blank" rel="noopener"
&gt;Fleet&amp;rsquo;s device management server&lt;/a&gt;. This server made a successful
&lt;a class="link" href="https://youtu.be/eKoOvT-fr2I" target="_blank" rel="noopener"
&gt;demo video&lt;/a&gt;. The takeaways from the video were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🧠 Natural language understanding — no commands to memorize&lt;/li&gt;
&lt;li&gt;🤖 Actionable context awareness — the AI remembers what you&amp;rsquo;re asking about&lt;/li&gt;
&lt;li&gt;🔗 Tool selection and orchestration — chooses the proper action automatically&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article, we&amp;rsquo;ll talk about our process for integrating our API with agentic AI, mistakes made, and lessons
learned.&lt;/p&gt;
&lt;h2 id="what-is-mcp-and-why-do-i-need-one"&gt;&lt;a href="#what-is-mcp-and-why-do-i-need-one" class="header-anchor"&gt;&lt;/a&gt;What is MCP, and why do I need one?
&lt;/h2&gt;&lt;p&gt;MCP (Model Context Protocol) is a client-server framework that enables AI agents to interact with your tools and APIs
through natural language. MCP was introduced by &lt;a class="link" href="https://www.anthropic.com/news/model-context-protocol" target="_blank" rel="noopener"
&gt;Anthropic&lt;/a&gt; in
November 2024. Its primary use case was to use local tools available on your local machine, such as databases.&lt;/p&gt;
&lt;p&gt;But, some may ask why we need another framework—aren&amp;rsquo;t AI agents good enough to use those tools directly? Yes, it is
true that by providing AI agents with instructions on how to use an arbitrary tool, the AI agent should be able to use
it. However, MCP standardizes this approach. Thus, an MCP server created for one tool can be reused by many developers
and by many AI agents.&lt;/p&gt;
&lt;p&gt;Instead of telling your AI agent about every tool, imagine that the AI agent has access to a library of MCP servers that
it can install whenever you want to &amp;ldquo;teach&amp;rdquo; it about a tool. Think of MCP as an intelligent middleware that allows AI
agents to understand and use your system&amp;rsquo;s capabilities appropriately. With MCP, the AI can dynamically learn and adapt
to your system&amp;rsquo;s interface.&lt;/p&gt;
&lt;h3 id="the-mcp-protocol"&gt;&lt;a href="#the-mcp-protocol" class="header-anchor"&gt;&lt;/a&gt;The MCP protocol
&lt;/h3&gt;&lt;p&gt;The MCP protocol consists of several key components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Tools: These are functions or actions that can be performed. Tools are defined by name, description, and parameters
they accept. They represent the capabilities your system provides to AI agents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resources: These are data objects that tools can operate on. Resources have properties and relationships with other
resources. For example, a &lt;code&gt;User&lt;/code&gt; resource might have properties like name and email.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prompts: These are reusable prompt templates and workflows intended to standardize common LLM interactions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schema Definition: The protocol uses a schema to describe available tools and resources, making it easy for AI agents
to understand possible actions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The main distinction between tools and resources is that tools are actions (verbs), while resources are objects (nouns)
on which these actions may operate. For example, a &lt;code&gt;createUser&lt;/code&gt; tool might operate on a &lt;code&gt;User&lt;/code&gt; resource. In practice,
however, you can create a &lt;code&gt;User&lt;/code&gt; tool that returns a user and not worry about associating it with a resource. The
semantics of tools are simpler than those of resources, so it might be faster only to use tools if your goal is to get
something working quickly.&lt;/p&gt;
&lt;h2 id="building-an-mcp-server-with-agentic-ai"&gt;&lt;a href="#building-an-mcp-server-with-agentic-ai" class="header-anchor"&gt;&lt;/a&gt;Building an MCP server with agentic AI
&lt;/h2&gt;&lt;p&gt;Our biggest mistake was asking our AI agent (&lt;a class="link" href="https://roocode.com/" target="_blank" rel="noopener"
&gt;Roo Code&lt;/a&gt;) to build an MCP server without fully
understanding the MCP details ourselves. To summarize, this process was not successful.&lt;/p&gt;
&lt;p&gt;MCP has SDKs available for multiple languages. We decided to build our MCP server with TypeScript. Our AI agent pulled
in the right &lt;a class="link" href="https://github.com/modelcontextprotocol/typescript-sdk" target="_blank" rel="noopener"
&gt;TypeScript MCP SDK&lt;/a&gt;. However, it couldn&amp;rsquo;t get the
compile to work, so it removed the SDK and implemented the MCP protocol from scratch. We allowed our agent to proceed
since we didn&amp;rsquo;t know any better.&lt;/p&gt;
&lt;p&gt;After implementing a basic tool, we couldn&amp;rsquo;t get the MCP server to work reliably. It worked using &lt;code&gt;curl&lt;/code&gt;, but the
&lt;a class="link" href="https://github.com/modelcontextprotocol/inspector" target="_blank" rel="noopener"
&gt;MCP inspector&lt;/a&gt; debug tool couldn&amp;rsquo;t connect to our MCP server.
Another mistake we made was not telling the AI agent to use liberal debug messages up front, which would have sped up
the debug effort.&lt;/p&gt;
&lt;p&gt;After letting our AI agent waste our API credits for too long, we told it to rewrite the code using the TypeScript SDK.
We copied and pasted the examples that our agent could reference. After that, things went smoothly.&lt;/p&gt;
&lt;p&gt;Another engineer suggested that using the Python SDK would have been more effective and required less handholding.&lt;/p&gt;
&lt;p&gt;Our proof of concept &lt;a class="link" href="https://github.com/getvictor/fleet-mcp" target="_blank" rel="noopener"
&gt;MCP server for Fleet API&lt;/a&gt; is on GitHub. Here&amp;rsquo;s a code
example for the &lt;code&gt;install_software&lt;/code&gt; tool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Register the install_software tool
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;mcpServer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;tool&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;install_software&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;Install software on a host managed by Fleet&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;host_id&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;z.string&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;describe&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Required. The host ID&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;software_id&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;z.string&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;describe&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Required. The software title ID&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;async&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;params&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;host_id&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;software_id&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; }) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;`Installing software ID &lt;/span&gt;&lt;span style="color:#e6db74"&gt;${&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;params&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;software_id&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; on host ID &lt;/span&gt;&lt;span style="color:#e6db74"&gt;${&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;params&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;host_id&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;url&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;`/api/v1/fleet/hosts/&lt;/span&gt;&lt;span style="color:#e6db74"&gt;${&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;params&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;host_id&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;/software/&lt;/span&gt;&lt;span style="color:#e6db74"&gt;${&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;params&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;software_id&lt;/span&gt;&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;/install`&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;response&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;this&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;axiosInstance&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;post&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;url&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Fleet API install request successful&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;content&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;JSON.stringify&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;response&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;Fleet API error:&amp;#39;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;throw&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;code&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;internal_error&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;message&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;`Fleet API error: &lt;/span&gt;&lt;span style="color:#e6db74"&gt;${&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;instanceof&lt;/span&gt; Error &lt;span style="color:#f92672"&gt;?&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;error.message&lt;/span&gt; : &lt;span style="color:#66d9ef"&gt;String&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;)&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt;`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see above, the code is pretty straightforward. We&amp;rsquo;re simply wrapping an existing API call with an MCP tool.&lt;/p&gt;
&lt;h3 id="overall-impressions"&gt;&lt;a href="#overall-impressions" class="header-anchor"&gt;&lt;/a&gt;Overall impressions
&lt;/h3&gt;&lt;p&gt;AI agent interactions with our MCP server are complex to test and challenging to debug. First, as an MCP server
developer, you must be familiar with AI agents, MCP protocol, and the tool interface you&amp;rsquo;re trying to use. For example,
in one case, the AI agent didn&amp;rsquo;t use the proper parameter to call the tool and came up with wrong conclusions. Since we
are dealing with AI, it is hard to tell how often such mistakes will happen and also hard to fix or prevent them. Also,
we don&amp;rsquo;t know exactly how customers may use the MCP server, so the QA test space is quite large.&lt;/p&gt;
&lt;p&gt;Our product already has an API, a CLI, and a UI interface. Adding MCP to the mix feels hard to justify—are customers
going to use all these ways to interact with our product? For a small product team, investing in MCP support might not
make sense until a customer is ready to pay for it.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;We recently covered &lt;a class="link" href="../will-ai-agents-replace-developers/" &gt;the broader implications of AI agents in software development&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Previously, we discussed &lt;a class="link" href="../ai-for-software-developers/" &gt;what every software engineer needs to know about AI right now&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-we-taught-an-ai-agent-to-use-our-product-with-mcp"&gt;&lt;a href="#watch-how-we-taught-an-ai-agent-to-use-our-product-with-mcp" class="header-anchor"&gt;&lt;/a&gt;Watch how we taught an AI agent to use our product with MCP
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/1RLh3SpfytQ"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to speed up a large Go test suite</title><link>https://victoronsoftware.com/posts/large-go-test-suite/</link><pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/large-go-test-suite/</guid><description>&lt;img src="https://victoronsoftware.com/posts/large-go-test-suite/large-go-test-suite-headline.png" alt="Featured image of post How to speed up a large Go test suite" /&gt;&lt;p&gt;Fast Continuous Integration (CI) test results are crucial for maintaining a good developer velocity. Quick test results
give developers immediate feedback on their changes, resulting in a more enjoyable development process. For critical
changes, slow tests can become a bottleneck, delaying deployments.&lt;/p&gt;
&lt;p&gt;Previously, we covered &lt;a class="link" href="../go-test-execution-time/" &gt;how to accurately measure the execution time of Go tests&lt;/a&gt;. This
article will demonstrate one approach to breaking apart a large Go test suite and running each part in parallel. This
approach should reduce the CI cycle time, benefitting developers and the organization.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#split-up-the-go-test-suite" &gt;Split up the Go test suite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#create-parallel-go-test-jobs-in-ci" &gt;Create parallel Go test jobs in CI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="understanding-your-go-test-suite"&gt;&lt;a href="#understanding-your-go-test-suite" class="header-anchor"&gt;&lt;/a&gt;Understanding your Go test suite
&lt;/h2&gt;&lt;p&gt;The standard way to run all the tests in your Go project is with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go test ./...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will compile all the Go packages and their tests, each compiling to a separate binary. The Go toolchain
will then run each binary in parallel. The &lt;code&gt;-p&lt;/code&gt; flag controls this parallel test behavior, which defaults to the number
of CPUs on your machine.&lt;/p&gt;
&lt;p&gt;Splitting up the test suite makes sense if you have a lot of packages to test. If you have few packages or if you have 1
or 2 packages that dominate your project&amp;rsquo;s test run time, then a simple split may not help much. You may need to
refactor your code or split the tests in a single Go package across multiple CI jobs. Splitting a single package is
generally inefficient since each CI job must compile the same package separately, and we will not cover this approach.&lt;/p&gt;
&lt;p&gt;To find all the packages in your project, you can list them with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go list ./...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To identify time-consuming packages, you can run your test suite with the &lt;code&gt;-json&lt;/code&gt; switch and save the results. Then,
find the elapsed time of each package and sort the times. This operation can be done with &lt;a class="link" href="https://jqlang.org/" target="_blank" rel="noopener"
&gt;jq&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat test-result.json | jq -s &lt;span style="color:#e6db74"&gt;&amp;#39;map(select(has(&amp;#34;Test&amp;#34;) | not)) | group_by(.Package) | map({package: .[0].Package, elapsed: (map(.Elapsed) | add)}) | sort_by(.elapsed) | reverse&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="split-up-the-go-test-suite"&gt;&lt;a href="#split-up-the-go-test-suite" class="header-anchor"&gt;&lt;/a&gt;Split up the Go test suite
&lt;/h2&gt;&lt;p&gt;You can specify the packages at the end of the &lt;code&gt;go test&lt;/code&gt; command to run a subset of packages in a CI job. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go test ./cmd/fleetctl/... ./server/service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, manually create groups of packages and identify them with a name.&lt;/p&gt;
&lt;p&gt;To create a catchall group for packages that were not explicitly assigned to a group, you can use the Linux
&lt;a class="link" href="https://linux.die.net/man/1/comm" target="_blank" rel="noopener"
&gt;comm&lt;/a&gt; command to generate the remaining packages. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;comm -23 &amp;lt;&lt;span style="color:#f92672"&gt;(&lt;/span&gt;go list ./... | sort&lt;span style="color:#f92672"&gt;)&lt;/span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;({&lt;/span&gt; go list ./cmd/fleetctl/... &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; go list ./server/service/... ;&lt;span style="color:#f92672"&gt;}&lt;/span&gt; | sort&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above command returns the packages unique to the first list, which includes all the packages (&lt;code&gt;./...&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The following is a real-world example from Fleet&amp;rsquo;s Makefile that creates test suite groups with identifiers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-Makefile" data-lang="Makefile"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Set up packages for CI testing.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;DEFAULT_PKGS_TO_TEST &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; ./cmd/... ./ee/... ./orbit/pkg/... ./orbit/cmd/orbit ./pkg/... ./server/... ./tools/...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# fast tests are quick and do not require out-of-process dependencies (such as MySQL, etc.)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;FAST_PKGS_TO_TEST &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; ./ee/tools/mdm &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; ./orbit/pkg/cryptoinfo &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; ./orbit/pkg/dataflatten &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; ./orbit/pkg/keystore &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; ./server/goose &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; ./server/mdm/apple/appmanifest &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; ./server/mdm/lifecycle &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; ./server/mdm/scep/challenge &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; ./server/mdm/scep/x509util &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; ./server/policies
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;FLEETCTL_PKGS_TO_TEST &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; ./cmd/fleetctl/...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;MYSQL_PKGS_TO_TEST &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; ./server/datastore/mysql/... ./server/mdm/android/mysql
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;SCRIPTS_PKGS_TO_TEST &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; ./orbit/pkg/scripts
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;SERVICE_PKGS_TO_TEST &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; ./server/service
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;VULN_PKGS_TO_TEST &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; ./server/vulnerabilities/...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;ifeq&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;(&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;CI_TEST_PKG&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;,&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;main)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;# This is the bucket of all the tests that are not in a specific group. We take a diff between DEFAULT_PKG_TO_TEST and all the specific *_PKGS_TO_TEST.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; CI_PKG_TO_TEST&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;shell /bin/bash -c &lt;span style="color:#e6db74"&gt;&amp;#34;comm -23 &amp;lt;(go list &lt;/span&gt;&lt;span style="color:#e6db74"&gt;${&lt;/span&gt;DEFAULT_PKGS_TO_TEST&lt;span style="color:#e6db74"&gt;}&lt;/span&gt;&lt;span style="color:#e6db74"&gt; | sort) &amp;lt;({ \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; go list &lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;FAST_PKGS_TO_TEST&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt; &amp;amp;&amp;amp; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; go list &lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;FLEETCTL_PKGS_TO_TEST&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt; &amp;amp;&amp;amp; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; go list &lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;MYSQL_PKGS_TO_TEST&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt; &amp;amp;&amp;amp; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; go list &lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;SCRIPTS_PKGS_TO_TEST&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt; &amp;amp;&amp;amp; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; go list &lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;SERVICE_PKGS_TO_TEST&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt; &amp;amp;&amp;amp; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; go list &lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;VULN_PKGS_TO_TEST&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#e6db74"&gt; \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; ;} | sort)&amp;#34;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;else&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;ifeq&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;(&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;CI_TEST_PKG&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;,&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;fast)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CI_PKG_TO_TEST&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;FAST_PKGS_TO_TEST&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;else&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;ifeq&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;(&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;CI_TEST_PKG&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;,&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;fleetctl)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CI_PKG_TO_TEST&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;FLEETCTL_PKGS_TO_TEST&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;else&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;ifeq&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;(&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;CI_TEST_PKG&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;,&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;mysql)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CI_PKG_TO_TEST&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;MYSQL_PKGS_TO_TEST&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;else&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;ifeq&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;(&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;CI_TEST_PKG&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;,&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;scripts)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CI_PKG_TO_TEST&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;SCRIPTS_PKGS_TO_TEST&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;else&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;ifeq&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;(&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;CI_TEST_PKG&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;,&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;service)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CI_PKG_TO_TEST&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;SERVICE_PKGS_TO_TEST&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;else&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;ifeq&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;(&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;CI_TEST_PKG&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;,&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;vuln)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CI_PKG_TO_TEST&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;VULN_PKGS_TO_TEST&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CI_PKG_TO_TEST&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;$(&lt;/span&gt;DEFAULT_PKGS_TO_TEST&lt;span style="color:#66d9ef"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;endif&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="create-parallel-go-test-jobs-in-ci"&gt;&lt;a href="#create-parallel-go-test-jobs-in-ci" class="header-anchor"&gt;&lt;/a&gt;Create parallel Go test jobs in CI
&lt;/h2&gt;&lt;p&gt;The major CI tools provide a way to start multiple jobs in parallel. In GitHub, this is done with a
&lt;a class="link" href="https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow" target="_blank" rel="noopener"
&gt;matrix strategy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the previous step, we gave an example of named test suites. Now, we feed those names into the GitHub matrix job:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;test-go&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;strategy&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;matrix&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;suite&lt;/span&gt;: [&lt;span style="color:#e6db74"&gt;&amp;#34;fast&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;fleetctl&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;main&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;mysql&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;service&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;vuln&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;os&lt;/span&gt;: [&lt;span style="color:#ae81ff"&gt;ubuntu-latest]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runs-on&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ matrix.os }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Checkout Code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9&lt;/span&gt; &lt;span style="color:#75715e"&gt;# v3.5.3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Install Go&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32&lt;/span&gt; &lt;span style="color:#75715e"&gt;# v5.0.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;go-version-file&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;go.mod&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Run Go Tests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;CI_TEST_PKG=${{ matrix.suite }} make test-go&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above workflow runs our test suites in parallel, speeding up our overall CI cycle time.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we covered &lt;a class="link" href="../analyze-go-build/" &gt;analyzing Go build times&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the past, we reviewed &lt;a class="link" href="../fuzz-testing-with-go/" &gt;the state of fuzz testing in Go&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="watch-how-to-break-apart-a-large-go-test-suite"&gt;&lt;a href="#watch-how-to-break-apart-a-large-go-test-suite" class="header-anchor"&gt;&lt;/a&gt;Watch how to break apart a large Go test suite
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/AFVlbf5LZwc"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>4 key Mermaid diagrams for software developers</title><link>https://victoronsoftware.com/posts/mermaid-intro/</link><pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mermaid-intro/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mermaid-intro/mermaid-intro-headline.png" alt="Featured image of post 4 key Mermaid diagrams for software developers" /&gt;&lt;h2 id="importance-of-technical-diagrams"&gt;&lt;a href="#importance-of-technical-diagrams" class="header-anchor"&gt;&lt;/a&gt;Importance of technical diagrams
&lt;/h2&gt;&lt;p&gt;Diagrams are an effective way to communicate technical concepts to other engineers or business stakeholders. They even
help us better understand technical concepts while creating the diagrams. Effective senior engineers frequently use
diagrams in their documentation and presentations. The top Mermaid diagrams are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#sequence-diagrams" &gt;Sequence diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#flowcharts" &gt;Flowcharts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#class-diagrams" &gt;Class diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#entity-relationship-diagrams-erds" &gt;Entity relationship diagrams (ERDs)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-mermaid"&gt;&lt;a href="#what-is-mermaid" class="header-anchor"&gt;&lt;/a&gt;What is Mermaid
&lt;/h2&gt;&lt;p&gt;Mermaid is a popular JavaScript-based diagramming tool that allows anyone to create diagrams using a simple text-based
syntax. Some key reasons for its popularity include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Text-based syntax&lt;/strong&gt;: Mermaid is easy to write and version control, fitting seamlessly into code reviews and
collaborative workflows.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integration with Markdown&lt;/strong&gt;: Mermaid works well with Markdown, which is widely used in documentation and static site
generators.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integration with GitHub and GitLab&lt;/strong&gt;: These top Git hosting platforms allow you to put Mermaid diagrams almost
anywhere on their site.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Versatility&lt;/strong&gt;: Mermaid supports various diagram types, from flowcharts and sequence diagrams to ERDs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automation-friendly&lt;/strong&gt;: Diagrams can be generated programmatically, enabling dynamic updates and integration with
CI/CD pipelines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessibility&lt;/strong&gt;: Mermaid does not need specialized software; diagrams can be created and rendered within code
editors or browsers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our experience, Mermaid&amp;rsquo;s text-based syntax is simple enough to be used for ad hoc diagramming, as opposed to the
proverbial &amp;ldquo;back of the napkin&amp;rdquo; drawing.&lt;/p&gt;
&lt;p&gt;The above features make Mermaid an invaluable tool for creating maintainable technical diagrams. We recommend creating
your first diagram on &lt;a class="link" href="https://www.mermaidchart.com/play" target="_blank" rel="noopener"
&gt;Mermaid Playground&lt;/a&gt; to get started.&lt;/p&gt;
&lt;h2 id="sequence-diagrams"&gt;&lt;a href="#sequence-diagrams" class="header-anchor"&gt;&lt;/a&gt;Sequence diagrams
&lt;/h2&gt;&lt;p&gt;Sequence diagrams depict how users and entities interact with each other over time. They are handy for modeling the flow
of messages, events, or data and are great for visualizing customer use cases, API interactions, or the behavior of
distributed systems.&lt;/p&gt;
&lt;p&gt;We love sequence diagrams because they are clear and consistent. Mermaid displays sequence diagrams consistently, which
greatly speeds up understanding.&lt;/p&gt;
&lt;p&gt;Below is a basic sequence diagram, which starts with the keyword &lt;code&gt;sequenceDiagram&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sequenceDiagram
UI-&amp;gt;&amp;gt;MDM Server: Upload profile
MDM Server-&amp;gt;&amp;gt;Apple: Request push notification
Apple-&amp;gt;&amp;gt;macOS: Push notification
macOS-&amp;gt;&amp;gt;MDM Server: Request command
MDM Server-&amp;gt;&amp;gt;macOS: InstallProfile command
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above Mermaid diagram is rendered as follows:&lt;/p&gt;
&lt;pre class="mermaid"&gt;
sequenceDiagram
UI-&amp;gt;&amp;gt;MDM server: Upload profile
MDM server-&amp;gt;&amp;gt;Apple: Request push notification
Apple-&amp;gt;&amp;gt;macOS: Push notification
macOS-&amp;gt;&amp;gt;MDM server: Request command
MDM server-&amp;gt;&amp;gt;macOS: InstallProfile command
&lt;/pre&gt;
&lt;p&gt;The above syntax consists of &lt;code&gt;&amp;lt;entity&amp;gt;-&amp;gt;&amp;gt;&amp;lt;entity&amp;gt;: &amp;lt;description&amp;gt;&lt;/code&gt;. In many cases, that&amp;rsquo;s all that&amp;rsquo;s necessary. We can
quickly create a simple sequence diagram to explain a flow during a meeting.&lt;/p&gt;
&lt;p&gt;To add a title to your diagram, add the following at the top:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;---
title: My diagram
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To go beyond the basics, we recommend learning some additional syntax from
&lt;a class="link" href="https://mermaid.js.org/syntax/sequenceDiagram.html" target="_blank" rel="noopener"
&gt;sequence diagram docs&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;actor&lt;/code&gt;: Actors (aka people)&lt;/li&gt;
&lt;li&gt;Aliases&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--&amp;gt;&amp;gt;&lt;/code&gt;: Dotted line with arrow for responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--)&lt;/code&gt;: Dotted line with empty arrow for async messages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;activate &amp;lt;entity&amp;gt;&lt;/code&gt; and &lt;code&gt;deactivate &amp;lt;entity&amp;gt;&lt;/code&gt;: Activations of actors&lt;/li&gt;
&lt;li&gt;Loops(&lt;code&gt;loop&lt;/code&gt;), alternative paths(&lt;code&gt;alt&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt;), and parallel actions(&lt;code&gt;par&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autonumber&lt;/code&gt;: Sequence numbers&lt;/li&gt;
&lt;li&gt;Notes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the updated diagram with additional syntax:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;---
title: Upload macOS configuration profile flow
---
sequenceDiagram
autonumber
actor Admin
participant mdm as MDM server
Admin-&amp;gt;&amp;gt;mdm: Upload profile
activate mdm
mdm--&amp;gt;&amp;gt;Admin: OK
deactivate mdm
Note right of mdm: After 30 seconds max
mdm-&amp;gt;&amp;gt;Apple: Request push notification
activate mdm
activate Apple
Apple--&amp;gt;&amp;gt;mdm: OK
deactivate mdm
Apple--)macOS: Push notification
deactivate Apple
activate macOS
macOS-&amp;gt;&amp;gt;mdm: Request command (Idle)
activate mdm
mdm--&amp;gt;&amp;gt;macOS: InstallProfile command
deactivate mdm
macOS-&amp;gt;&amp;gt;macOS: Install profile
macOS-&amp;gt;&amp;gt;mdm: Acknowledge
activate mdm
mdm--&amp;gt;&amp;gt;macOS: No more commands
deactivate mdm
deactivate macOS
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="mermaid"&gt;
---
title: Upload macOS configuration profile flow
---
sequenceDiagram
autonumber
actor Admin
participant mdm as MDM server
Admin-&amp;gt;&amp;gt;mdm: Upload profile
activate mdm
mdm--&amp;gt;&amp;gt;Admin: OK
deactivate mdm
Note right of mdm: After 30 seconds max
mdm-&amp;gt;&amp;gt;Apple: Request push notification
activate mdm
activate Apple
Apple--&amp;gt;&amp;gt;mdm: OK
deactivate mdm
Apple--)macOS: Push notification
deactivate Apple
activate macOS
macOS-&amp;gt;&amp;gt;mdm: Request command (Idle)
activate mdm
mdm--&amp;gt;&amp;gt;macOS: InstallProfile command
deactivate mdm
macOS-&amp;gt;&amp;gt;macOS: Install profile
macOS-&amp;gt;&amp;gt;mdm: Acknowledge
activate mdm
mdm--&amp;gt;&amp;gt;macOS: No more commands
deactivate mdm
deactivate macOS
&lt;/pre&gt;
&lt;h2 id="flowcharts"&gt;&lt;a href="#flowcharts" class="header-anchor"&gt;&lt;/a&gt;Flowcharts
&lt;/h2&gt;&lt;p&gt;Flowcharts are graphical representations of processes, workflows, or decision logic. They use standardized symbols, such
as rectangles, diamonds, and arrows, to illustrate the flow of steps or tasks visually. Flowcharts are generic diagrams
that can be adapted to any purpose. They are often used to explain concepts to non-technical stakeholders.&lt;/p&gt;
&lt;p&gt;Below is a basic flowchart diagram:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;flowchart
Admin-- &amp;#34;Uses&amp;#34; ---&amp;gt;Server
agent-- &amp;#34;Checks in&amp;#34; ---&amp;gt;Server
Server-- &amp;#34;Accesses&amp;#34; ---&amp;gt;MySQL
Server-- &amp;#34;Accesses&amp;#34; ---&amp;gt;Redis
Server-- &amp;#34;Upload analytics&amp;#34; ---&amp;gt;fleetdm.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which renders as follows:&lt;/p&gt;
&lt;pre class="mermaid"&gt;
flowchart
Admin-- &amp;#34;Uses&amp;#34; ---&amp;gt;Server
agent-- &amp;#34;Checks in&amp;#34; ---&amp;gt;Server
Server-- &amp;#34;Accesses&amp;#34; ---&amp;gt;MySQL
Server-- &amp;#34;Accesses&amp;#34; ---&amp;gt;Redis
Server-- &amp;#34;Upload analytics&amp;#34; ---&amp;gt;fleetdm.com
&lt;/pre&gt;
&lt;p&gt;The above example is a simple block diagram that can quickly demonstrate the basic parts of your
system/container/component. Explore additional syntax at &lt;a class="link" href="https://mermaid.js.org/syntax/flowchart.html" target="_blank" rel="noopener"
&gt;flowchart docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is another flowchart example:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;flowchart LR
S([Start])
PD[Process
data]
E([End])
S --&amp;gt; PD
PD --&amp;gt; V{Valid data?}
V -- &amp;#34;No&amp;#34; ---&amp;gt; E
V -- &amp;#34;Yes&amp;#34; ---&amp;gt; W[Send webhook]
W --&amp;gt; E
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which renders as follows:&lt;/p&gt;
&lt;pre class="mermaid"&gt;
flowchart LR
S([Start])
PD[Process
data]
E([End])
S --&amp;gt; PD
PD --&amp;gt; V{Valid data?}
V -- &amp;#34;No&amp;#34; ---&amp;gt; E
V -- &amp;#34;Yes&amp;#34; ---&amp;gt; W[Send webhook]
W --&amp;gt; E
&lt;/pre&gt;
&lt;p&gt;We defined some of the elements up front. The &lt;code&gt;Process data&lt;/code&gt; rectangle contains multi-line text.&lt;/p&gt;
&lt;p&gt;Note the direction of the flowchart is left-to-right, as specified by &lt;code&gt;LR&lt;/code&gt; after &lt;code&gt;flowchart&lt;/code&gt;. The direction options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TB&lt;/code&gt;: Top-to-bottom&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BT&lt;/code&gt;: Bottom-to-top&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RL&lt;/code&gt;: Right-to-left&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LR&lt;/code&gt;: Left-to-right&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="standard-symbols-used-in-flowcharts"&gt;&lt;a href="#standard-symbols-used-in-flowcharts" class="header-anchor"&gt;&lt;/a&gt;Standard symbols used in flowcharts
&lt;/h3&gt;&lt;p&gt;Flowcharts use a variety of standardized symbols to represent different types of actions, processes, and decisions.
Below are some of the most commonly used symbols:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Terminator (Oval)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Represents the start or end of a process.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;([Start])&lt;/code&gt; or &lt;code&gt;([End])&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;&lt;strong&gt;Process (Rectangle)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Represents a step or task in the process.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;[Calculate sum]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;strong&gt;Decision (Diamond)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Represents a decision point with two or more possible outcomes.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;{Is user authenticated?}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="4"&gt;
&lt;li&gt;&lt;strong&gt;Arrow (Line)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Represents the flow or direction of the process.&lt;/li&gt;
&lt;li&gt;Example: Connects steps in a process.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="5"&gt;
&lt;li&gt;&lt;strong&gt;Input/Output (Parallelogram)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Represents input to or output from a process.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;[/User enters credentials/]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="6"&gt;
&lt;li&gt;&lt;strong&gt;Database (Cylinder)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Represents a data store&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;[(MySQL)]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional symbols may be used for specialized diagrams or contexts, depending on the needs of the specific workflow.&lt;/p&gt;
&lt;h2 id="class-diagrams"&gt;&lt;a href="#class-diagrams" class="header-anchor"&gt;&lt;/a&gt;Class diagrams
&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;class diagram&lt;/strong&gt; is one of the core components of the Unified Modeling Language (UML) and is used to visually
represent the static structure of a system. Traditionally, it models classes, their attributes, operations (methods),
and the relationships among the classes in the system.&lt;/p&gt;
&lt;p&gt;However, we found that the most helpful use of class diagrams is to model relationships between higher-level entities.
We can also model higher-level entities with a flowchart, but the benefit of using a class diagram is the ability to use
standard relationships.&lt;/p&gt;
&lt;p&gt;Below is an example diagram modeling some domain concepts:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;---
config:
class:
hideEmptyMembersBox: true
---
classDiagram
Fleet o-- Host: &amp;#34;manages&amp;#34;
Fleet o-- Policy: &amp;#34;checks (may enforce)&amp;#34;
Host o-- IdPUser: &amp;#34;assigned to&amp;#34;
Host &amp;lt;|-- MacOS
Host &amp;lt;|-- Windows
Host &amp;lt;|-- Linux
Fleet --&amp;gt; Apple: communicates with
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It renders as follows:&lt;/p&gt;
&lt;pre class="mermaid"&gt;
---
config:
class:
hideEmptyMembersBox: true
---
classDiagram
Fleet o-- Host: &amp;#34;manages&amp;#34;
Fleet o-- Policy: &amp;#34;checks (may enforce)&amp;#34;
Host o-- IdPUser: &amp;#34;assigned to&amp;#34;
Host &amp;lt;|-- MacOS
Host &amp;lt;|-- Windows
Host &amp;lt;|-- Linux
Fleet --&amp;gt; Apple: communicates with
&lt;/pre&gt;
&lt;p&gt;The syntax is straightforward, as in the basic examples of previous diagrams, and we can quickly throw together this
type of diagram during a meeting.&lt;/p&gt;
&lt;p&gt;Six standard types of relationships can be modeled in a class diagram:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Association&lt;/strong&gt;: A &amp;ldquo;uses-a&amp;rdquo; relationship.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;User --&amp;gt; Order : &amp;quot;places&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;&lt;strong&gt;Inheritance (Generalization)&lt;/strong&gt;: An &amp;ldquo;is-a&amp;rdquo; relationship.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;Vehicle &amp;lt;|-- Car&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;strong&gt;Aggregation&lt;/strong&gt;: A &amp;ldquo;has-a&amp;rdquo; relationship (whole-part with shared ownership).&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;School o-- Student : &amp;quot;contains&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="4"&gt;
&lt;li&gt;&lt;strong&gt;Composition&lt;/strong&gt;: A stronger form of aggregation (whole-part with exclusive ownership).&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;Car *-- Engine: &amp;quot;includes&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="5"&gt;
&lt;li&gt;&lt;strong&gt;Dependency&lt;/strong&gt;: Shows that a class depends on another class.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;Payment &amp;lt;.. Invoice : &amp;quot;depends on&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="6"&gt;
&lt;li&gt;&lt;strong&gt;Realization&lt;/strong&gt;: Represents an &amp;ldquo;implements&amp;rdquo; relationship.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;Interface &amp;lt;|.. Class&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Class diagrams can also include data members and methods. This amount of detail is generally too much to maintain in a
diagram. We recommend only adding this detail when presenting a snapshot or a one-time proposal.&lt;/p&gt;
&lt;p&gt;Here is an example of a class diagram which includes data members and methods:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;classDiagram
class Person {
- name: String
- age: Integer
+ getName(): String
+ setName(name: String): void
}
class Student {
- studentId: Integer
+ enroll(course: Course): void
}
class Course {
- courseName: String
- courseCode: String
+ getDetails(): String
}
Person &amp;lt;|-- Student
Student *-- Course
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The diagram is rendered as follows:&lt;/p&gt;
&lt;pre class="mermaid"&gt;
classDiagram
class Person {
- name: String
- age: Integer
+ getName(): String
+ setName(name: String): void
}
class Student {
- studentId: Integer
+ enroll(course: Course): void
}
class Course {
- courseName: String
- courseCode: String
+ getDetails(): String
}
Person &amp;lt;|-- Student
Student *-- Course
&lt;/pre&gt;
&lt;h2 id="entity-relationship-diagrams-erds"&gt;&lt;a href="#entity-relationship-diagrams-erds" class="header-anchor"&gt;&lt;/a&gt;Entity relationship diagrams (ERDs)
&lt;/h2&gt;&lt;p&gt;An &lt;strong&gt;Entity-Relationship Diagram (ERD)&lt;/strong&gt; is a type of diagram used for visualizing the structure of a database. There
are tools for automatically creating Mermaid ERD diagrams from database schemas. In our experience, ER diagrams are
helpful in proposing changes or examining a snapshot in time. You should not actively maintain ERDs to always match the
current database schema.&lt;/p&gt;
&lt;p&gt;Below is an example schema change proposal:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;erDiagram
HOST_SCIM {
host_id uint PK
scim_user_id uint FK
}
SCIM_USERS {
id string PK
user_name string
first_name string
middle_name string
family_name string
active bool
}
SCIM_USER_EMAILS {
scim_user_id string PK
email string PK
primary bool
type string
}
SCIM_USER_GROUPS {
scim_user_id string PK &amp;#34;FK&amp;#34;
group_id uint PK &amp;#34;FK&amp;#34;
}
SCIM_GROUPS {
id uint PK
name string &amp;#34;Unique&amp;#34;
}
HOST_SCIM }|--|| SCIM_USERS : &amp;#34;multiple hosts can have the same SCIM user&amp;#34;
SCIM_USERS ||--o{ SCIM_USER_GROUPS: &amp;#34;zero-to-many&amp;#34;
SCIM_USER_GROUPS }|--|| SCIM_GROUPS: &amp;#34;one-to-many&amp;#34;
SCIM_USERS ||--o{ SCIM_USER_EMAILS: &amp;#34;zero-to-many&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It renders as follows:&lt;/p&gt;
&lt;pre class="mermaid"&gt;
erDiagram
HOST_SCIM {
host_id uint PK
scim_user_id uint FK
}
SCIM_USERS {
id string PK
user_name string
first_name string
middle_name string
family_name string
active bool
}
SCIM_USER_EMAILS {
scim_user_id string PK
email string PK
primary bool
type string
}
SCIM_USER_GROUPS {
scim_user_id string PK &amp;#34;FK&amp;#34;
group_id uint PK &amp;#34;FK&amp;#34;
}
SCIM_GROUPS {
id uint PK
name string &amp;#34;Unique&amp;#34;
}
HOST_SCIM }|--|| SCIM_USERS : &amp;#34;multiple hosts can have the same SCIM user&amp;#34;
SCIM_USERS ||--o{ SCIM_USER_GROUPS: &amp;#34;zero-to-many&amp;#34;
SCIM_USER_GROUPS }|--|| SCIM_GROUPS: &amp;#34;one-to-many&amp;#34;
SCIM_USERS ||--o{ SCIM_USER_EMAILS: &amp;#34;zero-to-many&amp;#34;
&lt;/pre&gt;
&lt;p&gt;In Mermaid diagrams, cardinality defines the numerical relationship between entities. It specifies how many instances of
one entity can be related to instances of another. Commonly used cardinality syntax in ER diagrams is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;||--||&lt;/code&gt; means &amp;ldquo;one-to-one&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||--o{&lt;/code&gt; means &amp;ldquo;zero-to-many&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||--|{&lt;/code&gt; means &amp;ldquo;one-to-many&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;}|--|{&lt;/code&gt; means &amp;ldquo;many-to-many&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The left and right parts of the above cardinality examples can be flipped as needed.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we explained &lt;a class="link" href="../software-modularity/" &gt;the business benefits of software modularity and cohesion&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also discussed
&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" &gt;how to scale your codebase with evolutionary architecture&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-the-intro-to-the-key-mermaid-diagrams"&gt;&lt;a href="#watch-the-intro-to-the-key-mermaid-diagrams" class="header-anchor"&gt;&lt;/a&gt;Watch the intro to the key Mermaid diagrams
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/aMMDMQvSzmc"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>6 business benefits of software modularity and cohesion</title><link>https://victoronsoftware.com/posts/software-modularity/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/software-modularity/</guid><description>&lt;img src="https://victoronsoftware.com/posts/software-modularity/software-modularity-headline.png" alt="Featured image of post 6 business benefits of software modularity and cohesion" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;strong&gt;technical debt&lt;/strong&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../readable-code/" &gt;Why readable code is essential&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" &gt;Incrementally scaling a codebase with evolutionary architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../code-complexity-metrics/" &gt;Top software code complexity metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="introduction"&gt;&lt;a href="#introduction" class="header-anchor"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;&lt;p&gt;Modularity and cohesion are key software engineering concepts that software engineers frequently misunderstand.
Frequently, software developers know that modularity is good in some vague general sense, but they can&amp;rsquo;t quantify the
benefits. This lack of understanding leads to poor decisions when adding new functionality or fixing system bugs, often
leading to the proverbial big ball of mud codebase. Sometimes, engineers feel like it is their manager or software
architect&amp;rsquo;s job to define the modules of a system, and they are simply responsible for implementing the details in the
quickest way they know how.&lt;/p&gt;
&lt;p&gt;This article provides
&lt;a class="link" href="#business-benefits-of-a-modular-codebase" &gt;specific reasons why using or adding modularity to your existing growing codebase is a good business decision&lt;/a&gt;.
Sometimes, engineers intuitively know how to do a good job, but they can&amp;rsquo;t explain it to business stakeholders. We try
to explain.&lt;/p&gt;
&lt;h2 id="its-all-about-complexity"&gt;&lt;a href="#its-all-about-complexity" class="header-anchor"&gt;&lt;/a&gt;It&amp;rsquo;s all about complexity
&lt;/h2&gt;&lt;p&gt;One of the challenging problems in software engineering is managing complexity. Modularity is a tool for managing
complexity. When we speak of complexity, we are referring to a mature, growing codebase with 10 or more software
developers. A young codebase with a couple of developers will benefit from modularity but not as much as a bigger, more
complex codebase.&lt;/p&gt;
&lt;p&gt;Bigger organizations must manage the complexity of both people and systems. People must be able to work independently at
maximum velocity without being slowed down by others. Systems must be simple enough to think about without being
overwhelmed. Complexity increases the cost of ownership of software because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;engineers cannot move at maximum velocity due to coupling to other teams or parts of the codebase&lt;/li&gt;
&lt;li&gt;engineers cannot understand the code, leading to slow development and more bugs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="the-hero-engineer-anti-pattern"&gt;&lt;a href="#the-hero-engineer-anti-pattern" class="header-anchor"&gt;&lt;/a&gt;The &amp;ldquo;hero engineer&amp;rdquo; anti-pattern
&lt;/h3&gt;&lt;p&gt;Complex codebases often have &amp;ldquo;hero developers&amp;rdquo; who know the codebase and become the go-to people for solving critical
issues or implementing complex features. The prevalence of such heroes may be a sign that your codebase is too complex
and that you must change things to scale your business.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;hero engineer&amp;rdquo; may be contributing to the complexity issue by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;focusing on quick fixes rather than long-term solutions&lt;/li&gt;
&lt;li&gt;insisting that the current codebase is just fine because &amp;ldquo;that&amp;rsquo;s how we&amp;rsquo;ve always done it&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-modularity-and-cohesion"&gt;&lt;a href="#what-is-modularity-and-cohesion" class="header-anchor"&gt;&lt;/a&gt;What is modularity and cohesion
&lt;/h2&gt;&lt;p&gt;Modularity is the process of breaking up a complex system into smaller, independent, and interchangeable modules. Small
means small enough to easily understand. Independent means that we can compile and test the module independently of all
the other modules. Interchangeable means that we can substitute other implementations of modules in our system, which
often happens during testing.&lt;/p&gt;
&lt;p&gt;Cohesion refers to the degree to which the functionality inside a module belongs together. It is the metric we use for
creating modules. A good module has high cohesion. Logical changes in that module should generally not leak to other
modules. This metric means that a module comprising random functions is not a good one.&lt;/p&gt;
&lt;h2 id="business-benefits-of-a-modular-codebase"&gt;&lt;a href="#business-benefits-of-a-modular-codebase" class="header-anchor"&gt;&lt;/a&gt;Business benefits of a modular codebase
&lt;/h2&gt;&lt;h3 id="1-faster-development-and-easier-maintenance"&gt;&lt;a href="#1-faster-development-and-easier-maintenance" class="header-anchor"&gt;&lt;/a&gt;1. Faster development and easier maintenance
&lt;/h3&gt;&lt;p&gt;Modularity increases engineering velocity, which in turn lowers labor costs and reduces time to market. Since modules
are cohesive and easy to understand, engineers focus their changes on a limited set of modules without wading through
the whole codebase.&lt;/p&gt;
&lt;p&gt;Since modules are independent and interchangeable, they are easier to test. Writing tests becomes faster and easier.&lt;/p&gt;
&lt;h3 id="2-risk-reduction"&gt;&lt;a href="#2-risk-reduction" class="header-anchor"&gt;&lt;/a&gt;2. Risk reduction
&lt;/h3&gt;&lt;p&gt;A frequent occurrence in a complex codebase is that a change in one place introduces a bug in another seemingly
unrelated functionality. Because modules are cohesive and independent, a bug in one module is less likely to bring down
the entire system. Also, since modules are more straightforward to test, they are less likely to have bugs in the first
place.&lt;/p&gt;
&lt;h3 id="3-organizational-scalability"&gt;&lt;a href="#3-organizational-scalability" class="header-anchor"&gt;&lt;/a&gt;3. Organizational scalability
&lt;/h3&gt;&lt;p&gt;Management expects the software output to scale proportionally as the engineering organization scales. However, this is
not always the case. Adding more people to a codebase causes merge conflicts, ownership confusion, duplicated effort,
and communication overheads.&lt;/p&gt;
&lt;p&gt;Modularity allows engineers to work in parallel. Each person or team can work in parallel on their modules, minimizing
organizational coupling.&lt;/p&gt;
&lt;p&gt;The main reason microservices have become so popular is that engineers can work on them in parallel. The organizational
scalability benefits outweigh the added complexity of microservices.&lt;/p&gt;
&lt;h3 id="4-faster-onboarding"&gt;&lt;a href="#4-faster-onboarding" class="header-anchor"&gt;&lt;/a&gt;4. Faster onboarding
&lt;/h3&gt;&lt;p&gt;When new developers join the team, the engineering velocity often dips as senior developers help with onboarding.&lt;/p&gt;
&lt;p&gt;Since modules are small, they can &amp;ldquo;fit in your head&amp;rdquo; without having to understand all other parts of the system. New
developers can contribute more quickly by focusing their initial contributions on a limited set of modules. This
&amp;ldquo;simplicity&amp;rdquo; of the codebase means fewer distractions and less hand-holding for senior staff.&lt;/p&gt;
&lt;h3 id="5-flexibility"&gt;&lt;a href="#5-flexibility" class="header-anchor"&gt;&lt;/a&gt;5. Flexibility
&lt;/h3&gt;&lt;p&gt;Modularity gives the business more options for the product&amp;rsquo;s future direction since small modules are more
straightforward to modify or replace with new functionality.&lt;/p&gt;
&lt;p&gt;Modularity also allows engineers to experiment with newer and potentially better approaches. For example, an engineer
can try a different JSON library on one module. Engineering management would not consider such a library change in a
monolithic codebase since it would pose too much risk to existing functionality.&lt;/p&gt;
&lt;h3 id="6-professional-growth-for-software-engineers"&gt;&lt;a href="#6-professional-growth-for-software-engineers" class="header-anchor"&gt;&lt;/a&gt;6. Professional growth for software engineers
&lt;/h3&gt;&lt;p&gt;What about the engineers who have been with the company for years and are comfortable with (or used to) the current
monolithic approach?&lt;/p&gt;
&lt;p&gt;Modular software architectures are becoming the norm in the software industry. Building and maintaining a genuinely
modular codebase provides a valuable experience that engineers can carry to future projects within and beyond the
current company. If we interviewed a candidate whose preferred working style was to minimize the number of modules in
the codebase, that would be a serious red flag.&lt;/p&gt;
&lt;h2 id="downsides-of-a-modular-codebase"&gt;&lt;a href="#downsides-of-a-modular-codebase" class="header-anchor"&gt;&lt;/a&gt;Downsides of a modular codebase
&lt;/h2&gt;&lt;h3 id="1-initial-module-creation-overhead"&gt;&lt;a href="#1-initial-module-creation-overhead" class="header-anchor"&gt;&lt;/a&gt;1. Initial module creation overhead
&lt;/h3&gt;&lt;p&gt;Creating a new module requires defining its interface and directory structure and writing a new test harness. These
steps require more up-front work than simply dumping the code into an existing package.&lt;/p&gt;
&lt;h3 id="2-ci-complexity"&gt;&lt;a href="#2-ci-complexity" class="header-anchor"&gt;&lt;/a&gt;2. CI complexity
&lt;/h3&gt;&lt;p&gt;We can compile and test modules independently. To maximize the development speed of modules, each one can have its own
CI run. However, as the number of modules grows, this process can become complicated over time.&lt;/p&gt;
&lt;h3 id="3-cross-cutting-features-can-become-trickier"&gt;&lt;a href="#3-cross-cutting-features-can-become-trickier" class="header-anchor"&gt;&lt;/a&gt;3. Cross-cutting features can become trickier
&lt;/h3&gt;&lt;p&gt;Some features, such as security and auditing, affect multiple modules. Ensuring consistency while keeping modules
independent can require extra thought and coordination.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Check out our other articles in the &lt;strong&gt;technical debt&lt;/strong&gt; series. Links are at the top of this article.&lt;/li&gt;
&lt;li&gt;Recently, examined &lt;a class="link" href="../mermaid-intro/" &gt;the 4 key Mermaid diagrams for software developers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Previously, we &lt;a class="link" href="../go-modules-and-packages/" &gt;explained the difference between Go modules and Go packages&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-explain-the-business-benefits-of-software-modularity"&gt;&lt;a href="#watch-us-explain-the-business-benefits-of-software-modularity" class="header-anchor"&gt;&lt;/a&gt;Watch us explain the business benefits of software modularity
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/UmSsmGFufTg"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>6 lessons from literate programming</title><link>https://victoronsoftware.com/posts/literate-programming-lessons/</link><pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/literate-programming-lessons/</guid><description>&lt;img src="https://victoronsoftware.com/posts/literate-programming-lessons/literate-programming-headline.png" alt="Featured image of post 6 lessons from literate programming" /&gt;&lt;p&gt;This article examines the literate programming paradigm introduced in 1984 by
&lt;a class="link" href="https://en.wikipedia.org/wiki/Donald_Knuth" target="_blank" rel="noopener"
&gt;Donald Knuth&lt;/a&gt;. We go through a &amp;ldquo;Hello World&amp;rdquo; example and extract the key
lessons relevant to making today&amp;rsquo;s software more readable and maintainable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#literate-programming-hello-world-example" &gt;Literate programming example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#key-takeaways-from-literate-programming" &gt;Key takeaways from literate programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-literate-programming"&gt;&lt;a href="#what-is-literate-programming" class="header-anchor"&gt;&lt;/a&gt;What is literate programming
&lt;/h2&gt;&lt;p&gt;Literate programming is a paradigm in which a computer program is written in a natural language, such as English. The
programming language source code is embedded into the program&amp;rsquo;s description. The aim was to create an artifact that a
human can easily read without jumping back and forth between different sections of the code file. The writer completely
controls the flow of the document, which can be reorganized in any fashion.&lt;/p&gt;
&lt;p&gt;Knuth called his implementation of literate programming &lt;a class="link" href="https://en.wikipedia.org/wiki/Web_%28programming_system%29" target="_blank" rel="noopener"
&gt;WEB&lt;/a&gt;
to emphasize that a computer program is built from many different pieces. He picked the name before the World Wide Web
was prominent. To produce source code, the user runs the &lt;strong&gt;tangle&lt;/strong&gt; command. To create documentation, the user runs the
&lt;strong&gt;weave&lt;/strong&gt; command.&lt;/p&gt;
&lt;h2 id="literate-programming-hello-world-example"&gt;&lt;a href="#literate-programming-hello-world-example" class="header-anchor"&gt;&lt;/a&gt;Literate programming &amp;ldquo;Hello World&amp;rdquo; example
&lt;/h2&gt;&lt;h3 id="writing-a-literate-program"&gt;&lt;a href="#writing-a-literate-program" class="header-anchor"&gt;&lt;/a&gt;Writing a literate program
&lt;/h3&gt;&lt;p&gt;To demonstrate literate programming, we will use the &lt;a class="link" href="https://github.com/nrnrnr/noweb" target="_blank" rel="noopener"
&gt;noweb&lt;/a&gt; literate programming tool
to write a simple program in Go.&lt;/p&gt;
&lt;p&gt;We create a &lt;code&gt;hello.nw&lt;/code&gt; file and start it with:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;This program teaches us how to print to the screen using:
&amp;lt;&amp;lt;print&amp;gt;&amp;gt;=
fmt.Println(message)
@
To print &amp;#34;Hello World&amp;#34;, pass a literal string to the function:
&amp;lt;&amp;lt;message&amp;gt;&amp;gt;=
&amp;#34;Hello World&amp;#34;
@
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We wrote the program in text with embedded code starting with &lt;code&gt;&amp;lt;&amp;lt;name&amp;gt;&amp;gt;=&lt;/code&gt; and ending with &lt;code&gt;@&lt;/code&gt;. The &lt;code&gt;&amp;lt;&amp;lt;name&amp;gt;&amp;gt;&lt;/code&gt; sections
are macros that we can reuse in other sections of the document, such as:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Now, we can create a function that prints a message:
&amp;lt;&amp;lt;mypackage_print&amp;gt;&amp;gt;=
func Print(message string) {
&amp;lt;&amp;lt;print&amp;gt;&amp;gt;
}
@
Finally, we can call this function from the main function:
&amp;lt;&amp;lt;main_call&amp;gt;&amp;gt;=
mypackage.Print(&amp;lt;&amp;lt;message&amp;gt;&amp;gt;)
@
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See &lt;a class="link" href="https://github.com/getvictor/noweb_example/blob/main/hello.nw" target="_blank" rel="noopener"
&gt;the complete literate program&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h3 id="generating-code-and-documentation-from-the-literate-program"&gt;&lt;a href="#generating-code-and-documentation-from-the-literate-program" class="header-anchor"&gt;&lt;/a&gt;Generating code and documentation from the literate program
&lt;/h3&gt;&lt;p&gt;To install the noweb tool with &lt;code&gt;brew&lt;/code&gt; on macOS, run the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install noweb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To generate the Go source code (tangle):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;notangle -Rgo.mod hello.nw &amp;gt; go.mod
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p mypackage
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;notangle -R&lt;span style="color:#e6db74"&gt;&amp;#39;mypackage/mypackage.go&amp;#39;&lt;/span&gt; hello.nw &amp;gt; mypackage/mypackage.go
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;notangle -Rmain.go hello.nw &amp;gt; main.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can run the program: &lt;code&gt;go run main.go&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To generate the HTML documentation (weave):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;noweave -html hello.nw &amp;gt; hello.html
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can open the &lt;code&gt;hello.html&lt;/code&gt; documentation in our web browser.&lt;/p&gt;
&lt;h2 id="key-takeaways-from-literate-programming"&gt;&lt;a href="#key-takeaways-from-literate-programming" class="header-anchor"&gt;&lt;/a&gt;Key takeaways from literate programming
&lt;/h2&gt;&lt;h3 id="1-the-developer-orders-the-code-for-maximum-readability"&gt;&lt;a href="#1-the-developer-orders-the-code-for-maximum-readability" class="header-anchor"&gt;&lt;/a&gt;1. The developer orders the code for maximum readability
&lt;/h3&gt;&lt;p&gt;Most of today&amp;rsquo;s programming languages were not designed with readability as their top guiding principle. They often
require the developer to put code in specific file sections, distracting the reader trying to understand the code. Some
examples include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;imports&lt;/li&gt;
&lt;li&gt;function and variable declarations, including nested functions&lt;/li&gt;
&lt;li&gt;error handling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Today&amp;rsquo;s IDEs (Integrated Development Environments) have tried to help with the situation by automatically collapsing
boilerplate sections. However, we have not seen them take the next step of entirely hiding or virtually relocating
distracting code. This area is where today&amp;rsquo;s programming languages and IDEs need to improve.&lt;/p&gt;
&lt;h3 id="2-comments-are-first-class-citizens"&gt;&lt;a href="#2-comments-are-first-class-citizens" class="header-anchor"&gt;&lt;/a&gt;2. Comments are first-class citizens
&lt;/h3&gt;&lt;p&gt;In literate programming, comments (natural language) are the main body of the program. Source code, on the other hand,
is delegated to macros. Comments are easy to write and can be enhanced with additional processing, such as Markdown,
Mermaid diagrams, etc.&lt;/p&gt;
&lt;p&gt;Many of today&amp;rsquo;s language toolchains also have processors that generate HTML documentation from the comments. However,
none can mix arbitrary pieces of code with their documentation.&lt;/p&gt;
&lt;p&gt;Linting requirements to include comments often lead to meaningless comments that make the code less readable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// This is a class.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Today, the closest mainstream approaches to literate programming are computational notebooks such as
&lt;a class="link" href="https://jupyter.org/" target="_blank" rel="noopener"
&gt;Jupyter&lt;/a&gt; and various online tutorials. These are great for sharing examples and small programs
with others but not sufficient for larger software projects.&lt;/p&gt;
&lt;p&gt;Some IDEs support rendering comments in a different style than the rest of the code, including rendering diagrams.
However, no standard works across IDEs and version control hosting systems like GitHub.&lt;/p&gt;
&lt;h3 id="3-code-from-multiple-source-files-can-be-present-in-one-place"&gt;&lt;a href="#3-code-from-multiple-source-files-can-be-present-in-one-place" class="header-anchor"&gt;&lt;/a&gt;3. Code from multiple source files can be present in one place
&lt;/h3&gt;&lt;p&gt;Literate programming allows us to include arbitrary source files in one program file. This behavior is helpful when you
want to keep related code in one place, such as an interface (abstract class) and its implementation.&lt;/p&gt;
&lt;p&gt;Modern IDEs can find all the implementations of an interface and often have a quick shortcut, allowing the developer to
jump between the two.&lt;/p&gt;
&lt;p&gt;Developers may also write their own preprocessors that split a single file into several modules or compile units.&lt;/p&gt;
&lt;p&gt;Although having more code in one file is sometimes useful, today&amp;rsquo;s developers typically have issues with splitting and
decoupling code files that have become too large and are no longer scalable.&lt;/p&gt;
&lt;h3 id="4-writing-code-is-more-difficult"&gt;&lt;a href="#4-writing-code-is-more-difficult" class="header-anchor"&gt;&lt;/a&gt;4. Writing code is more difficult
&lt;/h3&gt;&lt;p&gt;The main issue with literate programming is that it makes writing code much more difficult for the developer. It
introduces another level of abstraction and another set of tools and concepts that the software developer must be
familiar with.&lt;/p&gt;
&lt;p&gt;This general lesson applies to any system that tries to enhance the coding experience by adding another layer between
the user and the code. The new system must provide overwhelming benefits for software developers to switch to it.
TypeScript is an example of a successful layer over JavaScript.&lt;/p&gt;
&lt;h3 id="5-macros-make-reading-code-more-difficult"&gt;&lt;a href="#5-macros-make-reading-code-more-difficult" class="header-anchor"&gt;&lt;/a&gt;5. Macros make reading code more difficult
&lt;/h3&gt;&lt;p&gt;The literate program contains macros with their own names, adding to the namespace of functions and variables already
present in the computer program. These additional names increase the cognitive load of both reading and creating
literate programs.&lt;/p&gt;
&lt;p&gt;Today&amp;rsquo;s standard guidance is to make your variable and function names descriptive so the reader knows what they do
without additional comments. We can effectively replicate much of literate programming by replacing the literate
programming macros with our own well-named functions and ordering these functions in a file for maximum comprehension.&lt;/p&gt;
&lt;h3 id="6-no-tooling-support"&gt;&lt;a href="#6-no-tooling-support" class="header-anchor"&gt;&lt;/a&gt;6. No tooling support
&lt;/h3&gt;&lt;p&gt;Since literate programming is not widely used, it has little to no tooling support, syntax highlighting, or IDE support.
There is also no standard build system. Instead, the literate programming user must maintain their own custom build
system for the &amp;ldquo;tangle&amp;rdquo; and &amp;ldquo;weave&amp;rdquo; flows.&lt;/p&gt;
&lt;h2 id="see-literate-programming-example-code-on-github"&gt;&lt;a href="#see-literate-programming-example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;See literate programming example code on GitHub
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://github.com/getvictor/noweb_example" target="_blank" rel="noopener"
&gt;Literate programming example using noweb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Previously, we explained &lt;a class="link" href="../readable-code/" &gt;what readable code is and why it is important&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also reviewed &lt;a class="link" href="../code-complexity-metrics/" &gt;the top code complexity metrics&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-the-literate-programming-example-and-takeaways"&gt;&lt;a href="#watch-the-literate-programming-example-and-takeaways" class="header-anchor"&gt;&lt;/a&gt;Watch the literate programming example and takeaways
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/8cwxxioVbfA"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Top code complexity metrics every software dev should know</title><link>https://victoronsoftware.com/posts/code-complexity-metrics/</link><pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/code-complexity-metrics/</guid><description>&lt;img src="https://victoronsoftware.com/posts/code-complexity-metrics/code-complexity-headline.png" alt="Featured image of post Top code complexity metrics every software dev should know" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;strong&gt;technical debt&lt;/strong&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../readable-code/" &gt;Ways to improve your code for readability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" &gt;How to scale a codebase with evolutionary architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="intro-to-code-complexity-metrics"&gt;&lt;a href="#intro-to-code-complexity-metrics" class="header-anchor"&gt;&lt;/a&gt;Intro to code complexity metrics
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#code-style" &gt;Code style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#code-size" &gt;Code size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#cyclomatic-complexity" &gt;Cyclomatic complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#cognitive-complexity" &gt;Cognitive complexity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the previous article on &lt;a class="link" href="../readable-code/" &gt;readable code&lt;/a&gt;, we discussed a few metrics for measuring unreadable code.
In this article, we will expand on some of those ideas and specifically focus on code complexity.&lt;/p&gt;
&lt;p&gt;Code complexity primarily refers to the difficulty of understanding a piece of code or a piece of the codebase, such as
a module. Complex code is difficult to modify because engineers must spend considerable mental energy to understand it.
Frequently, engineers will not understand the code well enough, so they&amp;rsquo;ll make a change to fix a bug, and the change
will introduce a new bug somewhere else. Lack of understanding also leads to
&lt;a class="link" href="https://victoronsoftware.com/posts/common-refactorings/#why-are-engineers-afraid-of-refactoring" target="_blank" rel="noopener"
&gt;a fear of refactoring&lt;/a&gt;,
because engineers don&amp;rsquo;t want to break the codebase.&lt;/p&gt;
&lt;h2 id="code-complexity-metrics"&gt;&lt;a href="#code-complexity-metrics" class="header-anchor"&gt;&lt;/a&gt;Code complexity metrics
&lt;/h2&gt;&lt;p&gt;Many code complexity measures overlap since they all try to measure the same thing.&lt;/p&gt;
&lt;h3 id="code-style"&gt;&lt;a href="#code-style" class="header-anchor"&gt;&lt;/a&gt;Code style
&lt;/h3&gt;&lt;p&gt;A standard code style is helpful for readability. For example, if I opened a file and saw that it had no indentation,
the max line length was 20, and somebody named all the variables with a leading &lt;code&gt;iwuzhere&lt;/code&gt;, I would be confused. I would
have to stop and carefully process the file. I would not have to slow down if the code style were consistent.&lt;/p&gt;
&lt;p&gt;The metric to track is the number of code style violations or the number of files violating the code style. Most
companies enforce a code style with their CI pipeline. Modern tooling can automatically reformat code to match the
agreed-upon code style, so code style should no longer be a complexity or readability issue.&lt;/p&gt;
&lt;h3 id="code-size"&gt;&lt;a href="#code-size" class="header-anchor"&gt;&lt;/a&gt;Code size
&lt;/h3&gt;&lt;p&gt;How much code is there? The more code there is, the longer it takes to read and understand it. The common metrics are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;program size or lines of code (LOC)
&lt;ul&gt;
&lt;li&gt;in a function&lt;/li&gt;
&lt;li&gt;in a file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;number of functions/classes/modules/files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The motivation for tracking these metrics is to help engineers split their functions/files/projects into smaller, more
manageable pieces. James Lewis from ThoughtWorks said that &amp;ldquo;a microservice should be as big as my head.&amp;rdquo; His idea is
that one person should be able to understand the entire codebase. The smaller the piece of code, the easier it is to
understand.&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://en.wikipedia.org/wiki/Halstead_complexity_measures" target="_blank" rel="noopener"
&gt;Halstead introduced a set of software complexity measures&lt;/a&gt;
in 1977, and one of his metrics was the Halstead volume, which is directly related to code size. We can approximate the
Halstead volume by ignoring all comments and whitespace, then multiplying the average code line length by the number of
lines of code. This approximation is a good enough metric for our purposes.&lt;/p&gt;
&lt;h3 id="cyclomatic-complexity"&gt;&lt;a href="#cyclomatic-complexity" class="header-anchor"&gt;&lt;/a&gt;Cyclomatic complexity
&lt;/h3&gt;&lt;p&gt;&lt;a class="link" href="https://en.wikipedia.org/wiki/Cyclomatic_complexity" target="_blank" rel="noopener"
&gt;Cyclomatic complexity&lt;/a&gt; measures the number of linearly independent
paths through a program&amp;rsquo;s source code. It is often used as the master metric for code complexity, uncovering
maintainability and hard-to-test parts of the codebase.&lt;/p&gt;
&lt;p&gt;A typical calculation of cyclomatic complexity is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 is the base complexity for a function&lt;/li&gt;
&lt;li&gt;for each &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or other branching statement, add 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good cyclomatic complexity is 10 or less. A score of 20 or more is generally considered difficult to understand. This
metric encourages us to write smaller functions.&lt;/p&gt;
&lt;h3 id="cognitive-complexity"&gt;&lt;a href="#cognitive-complexity" class="header-anchor"&gt;&lt;/a&gt;Cognitive complexity
&lt;/h3&gt;&lt;p&gt;An alternative to cyclomatic complexity is
&lt;a class="link" href="https://www.sonarsource.com/docs/CognitiveComplexity.pdf" target="_blank" rel="noopener"
&gt;cognitive complexity&lt;/a&gt;. This metric tries to adjust the
cyclomatic complexity metric to focus on the human reader&amp;rsquo;s mental load &amp;ndash; on the maintainability, and not on the
testability, of the code.&lt;/p&gt;
&lt;p&gt;The key differences in the calculation are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for nested structures, extra incremental penalties are added&lt;/li&gt;
&lt;li&gt;recursion is penalized&lt;/li&gt;
&lt;li&gt;jumps to labels, such as &lt;code&gt;goto LABEL&lt;/code&gt;, are penalized&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switch&lt;/code&gt; is preferred over nested &lt;code&gt;if&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;groups of similar logical operators are NOT penalized
&lt;ul&gt;
&lt;li&gt;for example, &lt;code&gt;a &amp;amp;&amp;amp; b &amp;amp;&amp;amp; c &amp;amp;&amp;amp; d&lt;/code&gt; is easier to understand than &lt;code&gt;a &amp;amp;&amp;amp; b || c &amp;amp;&amp;amp; d&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This metric is more difficult to calculate than cyclomatic complexity, but it is generally considered a better
approximation of code complexity. Many companies are adopting this metric.&lt;/p&gt;
&lt;h2 id="tool-and-language-specific-considerations"&gt;&lt;a href="#tool-and-language-specific-considerations" class="header-anchor"&gt;&lt;/a&gt;Tool and language-specific considerations
&lt;/h2&gt;&lt;p&gt;Modern tools can help with code maintainability issues. For example, AI tools that index the codebase can help explain
how a piece of code (or a feature) works. IDEs can also help by collapsing boilerplate code or improving readability in
other ways.&lt;/p&gt;
&lt;p&gt;In the Go programming language, the idiomatic way to check for errors is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code is repeated everywhere and is typically collapsed by modern IDEs. However, cyclomatic complexity and
cognitive complexity metrics penalize it.&lt;/p&gt;
&lt;p&gt;We need a complexity tool where the user can adjust the penalties. This way, an engineering team can agree on what is
considered complex code based on their experience, language, and code style.&lt;/p&gt;
&lt;h3 id="go-complexity-metrics"&gt;&lt;a href="#go-complexity-metrics" class="header-anchor"&gt;&lt;/a&gt;Go complexity metrics
&lt;/h3&gt;&lt;p&gt;For measuring cyclomatic complexity, Go has &lt;a class="link" href="https://github.com/fzipp/gocyclo" target="_blank" rel="noopener"
&gt;gocyclo&lt;/a&gt;. For measuring cognitive
complexity, there is &lt;a class="link" href="https://github.com/uudashr/gocognit" target="_blank" rel="noopener"
&gt;gocognit&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="what-is-modularity-and-why-is-it-important"&gt;&lt;a href="#what-is-modularity-and-why-is-it-important" class="header-anchor"&gt;&lt;/a&gt;What is modularity and why is it important
&lt;/h3&gt;&lt;p&gt;In the next article of this &lt;strong&gt;technical debt&lt;/strong&gt; series, we
&lt;a class="link" href="../software-modularity/" &gt;explain what is modularity and why it is important for modern scalable software systems&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class="link" href="../engineering-metrics-no-cost/" &gt;Track your team’s engineering performance with open-source tools&lt;/a&gt;&lt;br&gt;
A step-by-step guide to setting up meaningful metrics using free-tier infrastructure—no SaaS subscriptions required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recently, we &lt;a class="link" href="../literate-programming-lessons/" &gt;showed an example and key takeaways from literate programming&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We also wrote &lt;a class="link" href="../ai-for-software-developers/" &gt;an overview of using AI in software development&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-discuss-and-show-examples-of-code-complexity-metrics"&gt;&lt;a href="#watch-us-discuss-and-show-examples-of-code-complexity-metrics" class="header-anchor"&gt;&lt;/a&gt;Watch us discuss and show examples of code complexity metrics
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/HzZQqrhX3cg"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to use AI for software development (2025)</title><link>https://victoronsoftware.com/posts/ai-for-software-developers/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/ai-for-software-developers/</guid><description>&lt;img src="https://victoronsoftware.com/posts/ai-for-software-developers/ai-building-software.png" alt="Featured image of post How to use AI for software development (2025)" /&gt;&lt;p&gt;The AI landscape is changing rapidly. A new tool seems to come out weekly, or we hear about a breakthrough. As a
software engineer, it is hard to keep up with all the latest developments and even harder to figure out what is relevant
to your day-to-day work. Many tech leaders claim that AI is helping them achieve greater engineering velocity, improving
the quality of their code, and enhancing the engineering experience, to name a few. But how can you leverage AI to
improve your work as a software engineer? And, most importantly, what is the most effective way to use AI right now?&lt;/p&gt;
&lt;p&gt;We have followed AI since the early 2000s, when Jeff Hawkins published
&lt;a class="link" href="https://en.wikipedia.org/wiki/On_Intelligence" target="_blank" rel="noopener"
&gt;On Intelligence&lt;/a&gt;. AI has come a long way since then. Today, most
software engineers can benefit from some AI.&lt;/p&gt;
&lt;p&gt;The top AI use cases for software engineers are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#code-completion" &gt;Code completion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#code-generation" &gt;Code generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#summarizing-or-explaining-code" &gt;Summarizing or explaining code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#agentic-coding" &gt;Agentic coding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some software developers have other use cases for AI, such as image generation, but this article will focus on the above
ones.&lt;/p&gt;
&lt;h2 id="code-completion"&gt;&lt;a href="#code-completion" class="header-anchor"&gt;&lt;/a&gt;Code completion
&lt;/h2&gt;&lt;p&gt;The original GitHub Copilot popularized AI code completion. It is a tool that can be integrated into your IDE and can
perform multi-line code completions. GitHub Copilot and similar tools have been extremely popular with software
developers. We found AI code completion extremely helpful, even though it occasionally generates function signatures and
other code that is not quite right.&lt;/p&gt;
&lt;p&gt;For example, after creating the &lt;code&gt;PubSubMessage&lt;/code&gt; struct in our code, Copilot recommended the &lt;code&gt;PubSubMessageAttributes&lt;/code&gt;
struct. Opening the completions window shows other multi-line suggestions.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/ai-for-software-developers/copilot-example.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;GitHub Copilot code completion example&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The code completion is not only for software code. We used it for documentation, such as writing a user guide for a new
feature. AI is most useful for boilerplate introductory content. However, beware that some search engines may be able to
detect the use of AI in your documentation and reduce your search ranking.&lt;/p&gt;
&lt;h2 id="code-generation"&gt;&lt;a href="#code-generation" class="header-anchor"&gt;&lt;/a&gt;Code generation
&lt;/h2&gt;&lt;p&gt;Code generation is similar to code completion, but the desired result is a complete function or code block. Typically,
engineers use a chat interface such as ChatGPT and provide it with a description of the desired function. Providing a
detailed description along with inputs and outputs is key to getting the best results.&lt;/p&gt;
&lt;p&gt;For example, given the following prompt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Write a Golang function that takes path.URL, makes a GET request to that URL, parses the JSON response, and returns
the &amp;ldquo;attributes&amp;rdquo; and &amp;ldquo;data&amp;rdquo; fields of the response.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;ChatGPT o1 model generated the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// FetchAttributesAndData makes a GET request to the provided URL, parses&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// the JSON response, and returns the &amp;#34;attributes&amp;#34; and &amp;#34;data&amp;#34; fields.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FetchAttributesAndData&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;u&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;url&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;URL&lt;/span&gt;) (&lt;span style="color:#66d9ef"&gt;map&lt;/span&gt;[&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;]&lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt;{}, &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt;{}, &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;resp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Get&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;u&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;resp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Close&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// You may also check resp.StatusCode for error handling if desired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;resp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;StatusCode&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;StatusOK&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;unexpected status code: %d&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;resp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;StatusCode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Define a struct to capture the JSON structure&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;result&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Attributes&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;map&lt;/span&gt;[&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;]&lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt;{} &lt;span style="color:#e6db74"&gt;`json:&amp;#34;attributes&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Data&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt;{} &lt;span style="color:#e6db74"&gt;`json:&amp;#34;data&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;json&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewDecoder&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;resp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;Decode&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;result&lt;/span&gt;); &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;result&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Attributes&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;result&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Data&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ChatGPT also provided some documentation and a usage example.&lt;/p&gt;
&lt;p&gt;Previously, software engineers would accomplish this task by searching Google or StackOverflow for similar code
snippets. Now, they can use AI chatbots to generate this code. This approach is most useful when you need to generate
code that&amp;rsquo;s not your area of expertise.&lt;/p&gt;
&lt;p&gt;Some programming languages have dedicated AI code-generation tools. For example, you can create Go functions and
packages online with &lt;a class="link" href="https://sketch.dev/" target="_blank" rel="noopener"
&gt;sketch.dev&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="summarizing-or-explaining-code"&gt;&lt;a href="#summarizing-or-explaining-code" class="header-anchor"&gt;&lt;/a&gt;Summarizing or explaining code
&lt;/h2&gt;&lt;p&gt;When software engineers work on a large codebase, they often need to understand code written by other engineers, some of
whom may have left the company, and they may also need to find a specific piece of code in the codebase.&lt;/p&gt;
&lt;p&gt;AI can help by reading the codebase and adding it to its context. This is an example of Retrieval-Augmented Generation
(RAG), where AI combines its general knowledge with the specific context of the codebase.&lt;/p&gt;
&lt;p&gt;To understand the codebase, the AI tool needs to add the code to its context or to index the codebase. Then, the tool
can use a combination of AI and deterministic search to find the relevant code. Below is an example of a question we
asked &lt;a class="link" href="https://www.cursor.com/" target="_blank" rel="noopener"
&gt;Cursor&lt;/a&gt; IDE about our codebase:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In which Go files is macOS disk encryption code located?&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Cursor provided a list of files and additional information on the top hits.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/ai-for-software-developers/cursor-example.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Cursor codebase search example&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Codebase-wide queries are a great way to find information yourself before asking the broader team. They are also a
decent way to learn the codebase.&lt;/p&gt;
&lt;h2 id="agentic-coding"&gt;&lt;a href="#agentic-coding" class="header-anchor"&gt;&lt;/a&gt;Agentic coding
&lt;/h2&gt;&lt;p&gt;Agentic coding refers to using an AI agent to write code and perform tasks on your behalf. Using agents is a more
advanced use case, requiring you to know the AI tools, processes, and LLMs well. A good AI agent can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write code, including creating and moving files&lt;/li&gt;
&lt;li&gt;Write and run tests, including Browser UI tests&lt;/li&gt;
&lt;li&gt;Write, read, and follow documentation&lt;/li&gt;
&lt;li&gt;Do terminal operations such as installing applications&lt;/li&gt;
&lt;li&gt;Do Git operations such as pushing&lt;/li&gt;
&lt;li&gt;Connect to other servers with SSH&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently, the top agentic coding tools are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://github.com/RooVetGit/Roo-Code" target="_blank" rel="noopener"
&gt;Roo Code&lt;/a&gt; (VSCode plugin)&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://cline.bot/" target="_blank" rel="noopener"
&gt;Cline&lt;/a&gt; (VSCode plugin)&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.cursor.com/" target="_blank" rel="noopener"
&gt;Cursor&lt;/a&gt; (IDE built on top of VSCode)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many other tools and platforms available. GitHub Copilot also announced Agent mode, which is available in
preview as of this writing. JetBrains has announced &lt;a class="link" href="https://www.jetbrains.com/junie/" target="_blank" rel="noopener"
&gt;Junie&lt;/a&gt;, which is only available
via the Early Access Program.&lt;/p&gt;
&lt;p&gt;As the agentic coding tools are still in their early stages, changing rapidly, and require a lot of handholding, it is
reasonable to wait 6 to 12 months before revisiting them.&lt;/p&gt;
&lt;h3 id="ai-coding-agent-workflows"&gt;&lt;a href="#ai-coding-agent-workflows" class="header-anchor"&gt;&lt;/a&gt;AI coding agent workflows
&lt;/h3&gt;&lt;p&gt;The following are some workflow suggestions for using an AI coding agent to create a small application.&lt;/p&gt;
&lt;p&gt;First, start with some context regarding what you want to build. Create a README or a plan outlining how you want to
structure the application and the steps to implement it. You can use another general-purse AI, such as ChatGPT, to help
you create the high-level plan.&lt;/p&gt;
&lt;p&gt;For example, we asked ChatGPT to create a high-level plan with the following prompt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We want to create a mock Google Android Management API server using an AI agent. The server is written in Golang and
will interact with our MDM solution during testing. It should hold the state for enterprises, profiles, and fake
devices enrolled in it. The server should have a mock PubSub webhook that will push notifications regarding ENROLLMENT
and STATUS_REPORTs. Please create a plan that another AI agent can implement in several steps.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Next, ask the AI agent to read the plan, update it, and create a more detailed plan. It may make sense to break the plan
into smaller parts and treat each part as a separate project. In effect, you act as the AI agent&amp;rsquo;s project manager.&lt;/p&gt;
&lt;p&gt;Make sure to have documentation and have the AI agent update it regularly. In addition to the README, you can have API
specs, secrets, and other documentation files.&lt;/p&gt;
&lt;p&gt;Tell the AI agent to initialize a git repo, create the project structure, and start implementing the plan. For each
step, ask the AI agent to create tests. After each step, ask the AI agent to update the documentation and commit the
changes. This way, you can easily rollback if the AI agent gets stuck or goes off the rails.&lt;/p&gt;
&lt;p&gt;Try to be as precise as possible in your prompts.&lt;/p&gt;
&lt;p&gt;When adding a new feature, you can start a new session with the AI agent and ask it to read all the documentation. This
will &amp;ldquo;initialize&amp;rdquo; the AI agent with the project context.&lt;/p&gt;
&lt;p&gt;Work in small development iterations with your AI agent.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/ai-for-software-developers/ai-agent-workflow.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;AI agent workflow&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Learn about your AI agent&amp;rsquo;s specific features to level up your skills. Often, there are ways to provide context to the
agent or give special meaning to certain words or files.&lt;/p&gt;
&lt;p&gt;At some point, you may want to take over the maintenance of the code from the AI agent. For example, check the code into
your main repository and maintain it as any other human-written code.&lt;/p&gt;
&lt;h3 id="ai-coding-agent-issues"&gt;&lt;a href="#ai-coding-agent-issues" class="header-anchor"&gt;&lt;/a&gt;AI coding agent issues
&lt;/h3&gt;&lt;p&gt;The main issue with AI coding agents is that they make mistakes. If you spot their mistake, you can tell them about it,
and they will generally correct it. However, if you can&amp;rsquo;t spot their mistake, the agent may end up in a loop where it
keeps trying to fix the issue, but your application still doesn&amp;rsquo;t work. That is why it is essential to work in small
iterations where you can roll back and start over.&lt;/p&gt;
&lt;p&gt;The other issue is that AI agents are slow. Often, they need to take several steps to make progress, and the human is
left waiting—being there just in case they need help or go off track. Theoretically, a single human could manage
multiple AI agents, but in practice, it is hard for people to frequently switch between multiple cognitively demanding
tasks.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../will-ai-agents-replace-developers/" &gt;Will AI agents replace software developers?&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
A realistic look at how AI coding agents are reshaping software development and what engineers need to do to stay ahead.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../introducing-mcp/" &gt;Introducing MCP: Lessons from building an AI-driven server&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Our lessons learned from building an AI-driven MCP server and how we taught an AI agent to use our product.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../multitasking-with-ai-agents/" &gt;Multitasking with AI agents: When it works and when it fails&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Practical tips on managing AI agent workflows and balancing focus with efficiency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" &gt;How to scale your codebase with incremental design&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Learn evolutionary architecture patterns that help your codebase grow without becoming unmaintainable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../readable-code/" &gt;What is readable code and why is it important?&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Understand how code clarity impacts team velocity and why readability should be a priority.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-use-ai-for-software-development"&gt;&lt;a href="#watch-how-to-use-ai-for-software-development" class="header-anchor"&gt;&lt;/a&gt;Watch how to use AI for software development
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/PVdqwcwc2_o"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to analyze Go build times</title><link>https://victoronsoftware.com/posts/analyze-go-build/</link><pubDate>Wed, 19 Feb 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/analyze-go-build/</guid><description>&lt;img src="https://victoronsoftware.com/posts/analyze-go-build/analyze-go-build-headline.png" alt="Featured image of post How to analyze Go build times" /&gt;&lt;p&gt;Go is designed for fast compilation. However, sometimes, you notice that your builds have gotten slower or that certain
code changes cause an unexpectedly long recompile time. In this article, we show how to analyze your compilation times
and take steps to improve them.&lt;/p&gt;
&lt;h2 id="turn-on-the-go-build-cache"&gt;&lt;a href="#turn-on-the-go-build-cache" class="header-anchor"&gt;&lt;/a&gt;Turn on the Go build cache
&lt;/h2&gt;&lt;p&gt;First, you must know that Go is very good at caching build artifacts. If you make a small change and rerun the build,
the rerun will be significantly faster because Go will reuse the cached artifacts from the previous build. However, if
you update the Go version, change the build flags, or pull in new or different dependencies, Go may rebuild everything
from scratch.&lt;/p&gt;
&lt;p&gt;The first step in improving your build time is to make sure you are using a build cache. The cache is enabled by default
on your development machine, but that may not be true on your CI/CD system. Ensure you use a build cache across multiple
CI/CD runs. For example, the GitHub Actions
&lt;a class="link" href="https://github.com/actions/setup-go?tab=readme-ov-file#caching-dependency-files-and-build-outputs" target="_blank" rel="noopener"
&gt;&lt;code&gt;setup-go&lt;/code&gt; action has caching turned on by default&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="analyze-a-go-build"&gt;&lt;a href="#analyze-a-go-build" class="header-anchor"&gt;&lt;/a&gt;Analyze a Go build
&lt;/h2&gt;&lt;p&gt;We can clear the build cache with the following:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;go clean -cache
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, we can run a clean build with the &lt;code&gt;-debug-trace&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;time go build -debug-trace=debug-trace.json ./cmd/fleet
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We use the &lt;code&gt;time&lt;/code&gt; command to measure the time the build takes. It is good practice to always use the &lt;code&gt;time&lt;/code&gt; command when
measuring performance. The &lt;code&gt;time&lt;/code&gt; command is built into our Z shell (zsh), but a similar command is available in other
shells and OSes.&lt;/p&gt;
&lt;p&gt;In the time output, we see how long our build took:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;79.25s user 20.13s system 518% cpu 19.183 total
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The total time (19.183s) is the wall clock time we waited for the build to finish. The user and system times are spent
executing user and system code. They are larger than the wall clock time because we use a multi-core machine.&lt;/p&gt;
&lt;p&gt;The debug trace is in
&lt;a class="link" href="https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/preview" target="_blank" rel="noopener"
&gt;Trace Event Format&lt;/a&gt; and looks
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{&lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;Running build command&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ph&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ts&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;1739801608027038&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;tid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;,{&lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;load.PackagesAndErrors&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ph&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ts&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;1739801608027222&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;tid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;,{&lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;modfetch.download github.com/WatchBeam/clock@v0.0.0-20170901150240-b08e6b4da7ea&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ph&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ts&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;1739801608038996&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;tid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;,{&lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;modfetch.download github.com/WatchBeam/clock@v0.0.0-20170901150240-b08e6b4da7ea&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ph&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;E&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ts&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;1739801608039035&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;tid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;,{&lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;modfetch.download github.com/briandowns/spinner@v1.23.1&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ph&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ts&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;1739801608039382&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;tid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;,{&lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;modfetch.download github.com/briandowns/spinner@v1.23.1&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ph&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;E&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ts&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;1739801608039410&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;tid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;,{&lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;modfetch.download github.com/e-dard/netbug@v0.0.0-20151029172837-e64d308a0b20&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ph&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ts&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;1739801608039643&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;tid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;,{&lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;modfetch.download github.com/e-dard/netbug@v0.0.0-20151029172837-e64d308a0b20&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ph&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;E&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ts&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;1739801608039808&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;tid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;,{&lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;modfetch.download github.com/getsentry/sentry-go@v0.18.0&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ph&amp;#34;&lt;/span&gt;:&lt;span style="color:#e6db74"&gt;&amp;#34;B&amp;#34;&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;ts&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;1739801608053496&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;pid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,&lt;span style="color:#f92672"&gt;&amp;#34;tid&amp;#34;&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;...&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;and&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;so&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;on&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A widespread tool for visualizing Trace Event Format is &lt;a class="link" href="https://ui.perfetto.dev/" target="_blank" rel="noopener"
&gt;Perfetto&lt;/a&gt;. Click &lt;code&gt;Open trace file&lt;/code&gt;
and upload your trace. Use &lt;code&gt;Ctrl&lt;/code&gt; + &lt;code&gt;Scroll&lt;/code&gt; to zoom in and out and &lt;code&gt;Shift&lt;/code&gt; + &lt;code&gt;Scroll&lt;/code&gt; to move right or left. The &lt;code&gt;WASD&lt;/code&gt;
keyboard keys also work.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/analyze-go-build/debug-trace-clean.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;The Perfetto tool showing a Go build debug trace&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The trace shows that our &lt;a class="link" href="https://github.com/mattn/go-sqlite3" target="_blank" rel="noopener"
&gt;https://github.com/mattn/go-sqlite3&lt;/a&gt; dependency is taking most of the build time. The fact that
we have 16 cores doesn&amp;rsquo;t help because Go is not parallelizing the build for this dependency. This dependency uses CGO,
so the build takes time to compile C files.&lt;/p&gt;
&lt;p&gt;We attempted to speed up the build by adding the &lt;code&gt;go-sqlite3&lt;/code&gt; dependency to our top &lt;code&gt;./cmd/fleet&lt;/code&gt; package, assuming the
build tool would start compiling it first. However, the total build took longer because the subsequent link step became
much slower.&lt;/p&gt;
&lt;p&gt;As we mentioned above, the initial compile time is usually not a big concern if you are using a build cache. So, let&amp;rsquo;s
try making a small change and analyzing the recompile time. We make a change to a frequently modified package.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;echo &amp;#39;var _ = &amp;#34;bozo&amp;#34;&amp;#39; &amp;gt;&amp;gt; ./server/datastore/mysql/mysql.go
time go build -debug-trace=debug-trace-recompile.json ./cmd/fleet
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The total recompile time is 1.229s, and the trace looks like this:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/analyze-go-build/debug-trace-recompile.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;The Perfetto tool showing a Go recompile debug trace&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We see that the &lt;code&gt;mysql&lt;/code&gt; package we modified is taking about half the recompile time. The &lt;code&gt;load.PackagesAndErrors&lt;/code&gt; step
takes ~300ms and is not parallelized. This step is part of the Go toolchain. Modifying a smaller package would reduce
the recompile time. If you have a large package that is frequently modified, you can improve the build time by splitting
it into smaller packages.&lt;/p&gt;
&lt;h2 id="find-why-dependencies"&gt;&lt;a href="#find-why-dependencies" class="header-anchor"&gt;&lt;/a&gt;Find why dependencies are included in the build
&lt;/h2&gt;&lt;p&gt;In a previous article, we described &lt;a class="link" href="../go-package-dependencies" &gt;how to find Go package dependencies&lt;/a&gt;. A way to analyze
the build and see why a dependency is being pulled in is to use the &lt;code&gt;-debug-actiongraph&lt;/code&gt; flag:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;go clean -cache
time go build -debug-actiongraph=actiongraph.json ./cmd/fleet
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The resulting &lt;code&gt;actiongraph.json&lt;/code&gt; is a JSON file containing an array of entries such as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;ID&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;27&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Mode&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;build&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/fleetdm/fleet/v4/server/datastore/filesystem&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Deps&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;11&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;23&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;33&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;93&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;97&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;180&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;103&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Objdir&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;/var/folders/r6/br06kz3s6lxb_75zz6dkjvvc0000gn/T/go-build3105381437/b845/&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Priority&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;843&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;NeedBuild&amp;#34;&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;ActionID&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;JGOAJdypDJJbwlHvaUPE&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;BuildID&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;JGOAJdypDJJbwlHvaUPE/B47ZHL3FCDKdll6TubU2&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;TimeReady&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2025-02-18T09:02:54.257806-06:00&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;TimeStart&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2025-02-18T09:02:54.272756-06:00&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;TimeDone&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2025-02-18T09:02:54.293356-06:00&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Cmd&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;/opt/homebrew/Cellar/go/1.23.4/libexec/pkg/tool/darwin_arm64/compile -o /var/folders/r6/br06kz3s6lxb_75zz6dkjvvc0000gn/T/go-build3105381437/b845/_pkg_.a -trimpath \&amp;#34;/var/folders/r6/br06kz3s6lxb_75zz6dkjvvc0000gn/T/go-build3105381437/b845=\u003e\&amp;#34; -p github.com/fleetdm/fleet/v4/server/datastore/filesystem -lang=go1.23 -complete -buildid JGOAJdypDJJbwlHvaUPE/JGOAJdypDJJbwlHvaUPE -goversion go1.23.4 -c=4 -shared -nolocalimports -importcfg /var/folders/r6/br06kz3s6lxb_75zz6dkjvvc0000gn/T/go-build3105381437/b845/importcfg -pack /Users/victor/work/fleet/server/datastore/filesystem/software_installer.go&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;CmdReal&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;17479792&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;CmdUser&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;17327000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;CmdSys&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;5692000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;span style="color:#960050;background-color:#1e0010"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;CmdReal&lt;/code&gt;, &lt;code&gt;CmdUser&lt;/code&gt;, and &lt;code&gt;CmdSys&lt;/code&gt; fields show the real, user, and system time spent executing the command. The
&lt;code&gt;Deps&lt;/code&gt; field shows the package&amp;rsquo;s dependencies.&lt;/p&gt;
&lt;p&gt;Although we can write our own tool to analyze the &lt;code&gt;actiongraph.json&lt;/code&gt; file, we can also use the
&lt;a class="link" href="https://github.com/icio/actiongraph" target="_blank" rel="noopener"
&gt;https://github.com/icio/actiongraph&lt;/a&gt; tool. Install the tool with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go install github.com/icio/actiongraph@latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can find the longest compile steps with:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;actiongraph -f actiongraph.json top
13.786s 16.14% build github.com/mattn/go-sqlite3
1.396s 17.78% build runtime/cgo
1.327s 19.33% build github.com/aws/aws-sdk-go/service/s3
1.295s 20.85% build github.com/aws/aws-sdk-go/aws/endpoints
1.095s 22.13% build github.com/google/go-github/v37/github
1.078s 23.39% build github.com/elastic/go-sysinfo/providers/darwin
0.983s 24.55% build github.com/open-policy-agent/opa/ast
0.975s 25.69% build github.com/klauspost/compress/zstd
0.916s 26.76% build github.com/shoenig/go-m1cpu
0.755s 27.64% build crypto/tls
0.742s 28.51% build github.com/fleetdm/fleet/v4/server/fleet
0.722s 29.36% build github.com/shirou/gopsutil/v3/process
0.664s 30.14% build net
0.626s 30.87% build github.com/open-policy-agent/opa/topdown
0.625s 31.60% build runtime
0.622s 32.33% build google.golang.org/protobuf/internal/impl
0.609s 33.04% build github.com/fleetdm/fleet/v4/server/datastore/mysql
0.605s 33.75% build golang.org/x/net/http2
0.577s 34.43% build github.com/aws/aws-sdk-go/service/lambda
0.576s 35.10% build github.com/spf13/pflag
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The tool also has a &lt;code&gt;graph&lt;/code&gt; subcommand to highlight all import paths from the build target to the package indicated by
&lt;code&gt;--why&lt;/code&gt;. We can convert the &lt;code&gt;.dot&lt;/code&gt; file to an SVG file with the &lt;a class="link" href="https://graphviz.org/" target="_blank" rel="noopener"
&gt;Graphviz&lt;/a&gt; &lt;code&gt;dot&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;actiongraph -f actiongraph.json graph --why github.com/mattn/go-sqlite3 &amp;gt; actiongraph-sqlite3.dot
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;dot -Tsvg &amp;lt; actiongraph-sqlite3.dot &amp;gt; actiongraph-sqlite3.svg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/analyze-go-build/actiongraph-sqlite3.svg"&gt;&lt;figcaption&gt;
&lt;h4&gt;Why the go-sqlite3 package is included in the build&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We can use this knowledge to refactor the codebase or, perhaps, hide the problematic dependency behind a build flag.&lt;/p&gt;
&lt;p&gt;There is no official documentation for the above debug flags. However, they can be found in the
&lt;a class="link" href="https://go.dev/src/cmd/go/internal/work/build.go" target="_blank" rel="noopener"
&gt;Go source code&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Undocumented, unstable debugging flags.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;StringVar&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;cfg&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;DebugActiongraph&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;debug-actiongraph&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;StringVar&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;cfg&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;DebugRuntimeTrace&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;debug-runtime-trace&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cmd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;StringVar&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;cfg&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;DebugTrace&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;debug-trace&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Previously, we explained &lt;a class="link" href="../go-test-execution-time/" &gt;how to accurately measure the execution time of Go tests&lt;/a&gt; and
&lt;a class="link" href="../large-go-test-suite/" &gt;how to break apart a large Go test suite&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also &lt;a class="link" href="../common-refactorings/" &gt;demonstrated some common code refactorings that can be done with your IDE&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-analyze-go-builds"&gt;&lt;a href="#watch-how-to-analyze-go-builds" class="header-anchor"&gt;&lt;/a&gt;Watch how to analyze Go builds
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/fs81KvxhwhI"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Top code refactorings every software engineer should know</title><link>https://victoronsoftware.com/posts/common-refactorings/</link><pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/common-refactorings/</guid><description>&lt;img src="https://victoronsoftware.com/posts/common-refactorings/common-refactorings-headline.png" alt="Featured image of post Top code refactorings every software engineer should know" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#extract-method-aka-extract-function" &gt;Extract method (aka extract function)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#inline-variable" &gt;Inline variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#extract-variable" &gt;Extract variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#inline-method-aka-inline-function" &gt;Inline method (aka inline function)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-code-refactoring"&gt;&lt;a href="#what-is-code-refactoring" class="header-anchor"&gt;&lt;/a&gt;What is code refactoring?
&lt;/h2&gt;&lt;p&gt;Code refactoring involves modifying existing software code without changing its observable behavior. Refactoring improves the code base&amp;rsquo;s readability and maintainability. See our previous article on &lt;a class="link" href="../readable-code/" &gt;why readable code is important&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-are-engineers-afraid-of-refactoring"&gt;&lt;a href="#why-are-engineers-afraid-of-refactoring" class="header-anchor"&gt;&lt;/a&gt;Why are engineers afraid of refactoring?
&lt;/h2&gt;&lt;p&gt;Refactoring is essential to software development and should be done regularly as part of day-to-day work. Unfortunately, many engineers are afraid of refactoring, don&amp;rsquo;t know how to do it, or don&amp;rsquo;t consider it part of their job responsibilities.&lt;/p&gt;
&lt;p&gt;Some engineers fear that refactoring will introduce bugs or break existing functionality. The root cause of this fear is the lack of automated tests. Without automated tests, ensuring that the refactored code behaves as expected is difficult. A code base without automated tests is a ticking time bomb and cannot be maintained by any sane engineer. Before refactoring code in such a code base, you should add automated tests for the targeted code.&lt;/p&gt;
&lt;p&gt;Other engineers fear that refactoring will take too much time. This fear is often unfounded, as refactoring can be done incrementally and in small steps. For example, after refactoring the code for an hour or less, merge your changes to your main branch and, if needed, continue doing the next small refactoring steps. Your organization should never allocate weeks of development for &amp;ldquo;large refactorings.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Engineers may also fear refactoring because they don&amp;rsquo;t want to make too many changes to the code, making it difficult for reviewers to review the changes. The issue is that many current code review systems don&amp;rsquo;t understand the code changes&amp;rsquo; semantics (i.e., the meaning). These systems only understand line changes and are frequently confused by relocated code. In this case, the coder should explain the changes to the reviewer. Alternatively, the organization can adopt a better code review tool. For a further discussion of &lt;a class="link" href="../github-code-review-issues/" &gt;issues with GitHub code reviews, see our previous article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article will show some common refactorings you can safely do with automation from your IDE (Integrated Development Environment).&lt;/p&gt;
&lt;h2 id="extract-method-aka-extract-function"&gt;&lt;a href="#extract-method-aka-extract-function" class="header-anchor"&gt;&lt;/a&gt;Extract method (aka extract function)
&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;extract method&lt;/code&gt; refactoring takes a piece of code and moves it into a new method. There are several reasons to do this, all of which improve the readability and maintainability of the code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The code is too long and must be broken into smaller, more manageable pieces.&lt;/li&gt;
&lt;li&gt;The code is duplicated in multiple places and needs to be consolidated into a single method.&lt;/li&gt;
&lt;li&gt;We want to separate the code implementation from the code intention. The code implementation is what the code does, and the code intention is why it does it. Move the code implementation into its own method and name the new method based on the code intention.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, consider the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pt&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;PackageTest&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;expandPackages&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;slices&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ContainsFunc&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contains&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// lots more code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When entering the &lt;code&gt;expandPackages&lt;/code&gt; method, the reader is immediately confronted with a complex expression. They must stop and think about what the code does. Even though the amount of code is small, it still hampers readability. The code implementation is mixed with the code intention. One way to improve the situation is to add a comment. A better way is to extract the code into its own method and name the new method based on the code intention.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pt&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;PackageTest&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;expandPackages&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;needExpansion&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// lots more code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;needExpansion&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;packages&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;slices&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ContainsFunc&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;packages&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contains&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most IDEs automatically perform this refactoring. Highlight the code you want to extract, open the refactoring menu, and select the &lt;code&gt;Extract Method&lt;/code&gt; option.&lt;/p&gt;
&lt;h2 id="inline-variable"&gt;&lt;a href="#inline-variable" class="header-anchor"&gt;&lt;/a&gt;Inline variable
&lt;/h2&gt;&lt;p&gt;Every variable should have a purpose and a good explanatory name that describes its intent. As the number of variables grows in a method, it becomes increasingly difficult to understand the code. One way to improve the readability of the code is to inline variables. Inlining a variable is replacing the variable with the right-hand side of the assignment.&lt;/p&gt;
&lt;p&gt;For example, consider the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;packageDependency&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;chain&lt;/span&gt;() (&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// lots more code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The variable &lt;code&gt;name&lt;/code&gt; does not add any value to the code. It is simply a copy of the &lt;code&gt;pd.name&lt;/code&gt; field. We can inline the variable to improve the readability of the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;packageDependency&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;chain&lt;/span&gt;() (&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// lots more code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Many IDEs automatically perform this refactoring. Highlight the variable you want to inline, open the refactoring menu, and select the &lt;code&gt;Inline&lt;/code&gt; option.&lt;/p&gt;
&lt;h2 id="extract-variable"&gt;&lt;a href="#extract-variable" class="header-anchor"&gt;&lt;/a&gt;Extract variable
&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;extract variable&lt;/code&gt; refactoring takes a complex expression and moves it into a new variable. Mechanically, it is the opposite of the above &lt;code&gt;inline variable&lt;/code&gt; refactoring. There are several reasons to do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The expression is complex and must be broken into smaller, more manageable pieces.&lt;/li&gt;
&lt;li&gt;The meaning of the expression is unclear and needs to be clarified with a descriptive variable name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes, you have a choice between extracting a method or a variable. In general, you should extract a method to make the code more readable. However, if the method is only used once and the parent function is not complex, it may be better to extract a variable.&lt;/p&gt;
&lt;p&gt;For example, consider the same code from our &lt;code&gt;extract method&lt;/code&gt; example above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pt&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;PackageTest&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;expandPackages&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;slices&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ContainsFunc&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contains&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// lots more code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can extract the complex expression into a variable to improve the readability of the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pt&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;PackageTest&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;expandPackages&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;needExpansion&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;slices&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ContainsFunc&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contains&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;needExpansion&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// lots more code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Many IDEs automatically perform this refactoring. Highlight the expression you want to extract, open the refactoring menu, and select the &lt;code&gt;Extract Variable&lt;/code&gt; or &lt;code&gt;Introduce Variable&lt;/code&gt; option.&lt;/p&gt;
&lt;h2 id="inline-method-aka-inline-function"&gt;&lt;a href="#inline-method-aka-inline-function" class="header-anchor"&gt;&lt;/a&gt;Inline method (aka inline function)
&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;inline method&lt;/code&gt; refactoring takes a method and moves its code into the caller. Mechanically, it is the opposite of the &lt;code&gt;extract method&lt;/code&gt; refactoring. There are several reasons to do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The method is too simple, and its body is as clear as its name.&lt;/li&gt;
&lt;li&gt;We want to simplify code and remove a level of indirection.&lt;/li&gt;
&lt;li&gt;We must regroup code into a single method before proceeding with a better refactoring.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, consider the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// method code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;dep&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;has&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;expandedPackages&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// more coe ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;packageDependency&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;has&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;slices&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contains&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can inline the &lt;code&gt;has&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// method code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;slices&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contains&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;expandedPackages&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// more coe ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Many IDEs automatically perform this refactoring. Highlight the method call you want to inline, open the refactoring menu, and select the &lt;code&gt;Inline Function/Method&lt;/code&gt; option.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;The code examples above are from our article on &lt;a class="link" href="../go-package-dependencies/" &gt;finding package dependencies of a Go package&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also discussed &lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" &gt;how to scale your codebase with evolutionary architecture&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;And &lt;a class="link" href="../analyze-go-build/" &gt;how to analyze Go build times&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-examples-of-top-code-refactorings"&gt;&lt;a href="#watch-examples-of-top-code-refactorings" class="header-anchor"&gt;&lt;/a&gt;Watch examples of top code refactorings
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Mzj9XQlieHk"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to find package dependencies of a Go package</title><link>https://victoronsoftware.com/posts/go-package-dependencies/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/go-package-dependencies/</guid><description>&lt;img src="https://victoronsoftware.com/posts/go-package-dependencies/go-dependencies-headline.png" alt="Featured image of post How to find package dependencies of a Go package" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#find-package-dependencies-using-go-list" &gt;Find package dependencies using &lt;code&gt;go list&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#find-package-dependencies-using-go-code" &gt;Find package dependencies using Go code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-are-package-dependencies-and-module-dependencies"&gt;&lt;a href="#what-are-package-dependencies-and-module-dependencies" class="header-anchor"&gt;&lt;/a&gt;What are package dependencies and module dependencies?
&lt;/h2&gt;&lt;p&gt;A package dependency is another package that your Go package imports. When you import a package in Go, you create a dependency on that package. The Go compiler will not compile your package if it cannot find and compile the package you depend on.&lt;/p&gt;
&lt;p&gt;On the other hand, a module dependency is a dependency on a module. A module is a collection of related Go packages that are versioned together. You declare your module dependencies in your &lt;code&gt;go.mod&lt;/code&gt; file. Your code may use one or more packages from your module dependencies.&lt;/p&gt;
&lt;h2 id="why-are-package-dependencies-important"&gt;&lt;a href="#why-are-package-dependencies-important" class="header-anchor"&gt;&lt;/a&gt;Why are package dependencies important?
&lt;/h2&gt;&lt;p&gt;Understanding your package dependencies is essential because they:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;indicate the amount of internal coupling in your codebase&lt;/li&gt;
&lt;li&gt;help you understand the structure of your codebase&lt;/li&gt;
&lt;li&gt;help you avoid too many dependencies&lt;/li&gt;
&lt;li&gt;help you avoid circular dependencies&lt;/li&gt;
&lt;li&gt;help you optimize your build times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As your codebase grows, keeping track of package dependencies is vital to ensure that the codebase remains maintainable. Many developers import dependencies without considering the consequences. In modern IDE tools, they quickly click &lt;code&gt;Import&lt;/code&gt; in a pop-up to make the squiggly lines go away. In some cases, IDEs add imports without even asking the developer. However, code with many dependencies becomes coupled to other potentially unrelated code. This entanglement makes the codebase harder to understand, test, and maintain. For additional details, see &lt;a class="link" href="../scaling-codebase-evolutionary-architecture/#problems-with-the-current-architecture" &gt;the list of problems with a coupled architecture&lt;/a&gt; from our previous article.&lt;/p&gt;
&lt;h3 id="what-is-an-architectural-test"&gt;&lt;a href="#what-is-an-architectural-test" class="header-anchor"&gt;&lt;/a&gt;What is an architectural test?
&lt;/h3&gt;&lt;p&gt;An architectural test is a test that makes sure your code follows the architectural rules that you have defined. Codebases tend to devolve into a Big Ball of Mud as time passes. Architectural tests are one way to keep your codebase clean.&lt;/p&gt;
&lt;p&gt;In our example below, we will check to ensure that our Go package is NOT dependent on another package in our codebase. This is a common scenario when you want to refactor your codebase and remove a dependency or add a new package and want to ensure that it is not dependent on other parts of the codebase.&lt;/p&gt;
&lt;h2 id="find-package-dependencies-using-go-list"&gt;&lt;a href="#find-package-dependencies-using-go-list" class="header-anchor"&gt;&lt;/a&gt;Find package dependencies using &lt;code&gt;go list&lt;/code&gt;
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;go list&lt;/code&gt; is a powerful tool that you can use to list information about Go packages. You can use the &lt;code&gt;-deps&lt;/code&gt; flag with &lt;code&gt;go list&lt;/code&gt; to find package dependencies. Here is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go list -deps ./server/android...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result is a list of all the direct and indirect package dependencies of the &lt;code&gt;./server/android&lt;/code&gt; and its subpackages. To filter out standard library packages and sort the list, you can use the following command on macOS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go list -deps ./server/android... | grep -E &lt;span style="color:#e6db74"&gt;&amp;#39;^[^\/]*\.[^\/]*\/&amp;#39;&lt;/span&gt; | sort
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above regular expression looks for packages with a &lt;code&gt;.&lt;/code&gt; before the first &lt;code&gt;/&lt;/code&gt; in the package path. This regex filters out standard library packages. The &lt;code&gt;sort&lt;/code&gt; command sorts the list alphabetically.&lt;/p&gt;
&lt;p&gt;To check if a package is dependent on another package, you can use the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;! &lt;span style="color:#f92672"&gt;(&lt;/span&gt;go list -deps ./server/android... | grep -q &lt;span style="color:#e6db74"&gt;&amp;#39;github.com/fleetdm/fleet/v4/server/mdm/nanomdm/mdm&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The leading &lt;code&gt;!&lt;/code&gt; inverts the command&amp;rsquo;s exit status. If the package is dependent on the specified package, the command will return &lt;code&gt;1&lt;/code&gt;; if it is not, the command will return &lt;code&gt;0&lt;/code&gt;. You can use this command in your CI/CD pipelines to ensure that your package is not dependent on a specific package.&lt;/p&gt;
&lt;h2 id="find-package-dependencies-using-go-code"&gt;&lt;a href="#find-package-dependencies-using-go-code" class="header-anchor"&gt;&lt;/a&gt;Find package dependencies using Go code
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://pkg.go.dev/golang.org/x/tools/go/packages" target="_blank" rel="noopener"
&gt;packages&lt;/a&gt; is a Go package that allows one to load, parse, type-check, and import Go packages. We will use the &lt;code&gt;Load&lt;/code&gt; function to get a list of &lt;code&gt;Package&lt;/code&gt; values. In addition, we will use &lt;a class="link" href="https://pkg.go.dev/go/build#Context.Import" target="_blank" rel="noopener"
&gt;Context.Import method from build package&lt;/a&gt; to recursively find dependencies.&lt;/p&gt;
&lt;p&gt;Below is an example architecture test you can add to your test suite.&lt;/p&gt;
&lt;script type="application/javascript" src="https://gist.github.com/getvictor/17f495021211dcca087b16cd2d4b24d1.js"&gt;&lt;/script&gt;
&lt;p&gt;The above example is based on &lt;a class="link" href="https://github.com/matthewmcnew/archtest" target="_blank" rel="noopener"
&gt;https://github.com/matthewmcnew/archtest&lt;/a&gt;. You can &lt;a class="link" href="https://youtu.be/yIZcbTQvpCE?t=440&amp;amp;si=T2AqNGc9_YMjbCTx" target="_blank" rel="noopener"
&gt;jump to the code example section&lt;/a&gt; of the video below for a full explanation.&lt;/p&gt;
&lt;p&gt;A failing run of our architecture test will look like this:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;=== RUN TestPackageDependencies
arch_test.go:41: Error: package dependency not allowed. Dependency chain:
github.com/fleetdm/fleet/v4/server/android/service
github.com/fleetdm/fleet/v4/server/fleet
github.com/fleetdm/fleet/v4/server/mdm/nanomdm/mdm
--- FAIL: TestPackageDependencies (14.66s)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="find-how-a-dependency-is-included-in-the-build"&gt;&lt;a href="#find-how-a-dependency-is-included-in-the-build" class="header-anchor"&gt;&lt;/a&gt;Find how a dependency is included in the build
&lt;/h2&gt;&lt;p&gt;In our article on &lt;a class="link" href="../analyze-go-build" &gt;analyzing Go build times&lt;/a&gt;, we show how to use the &lt;code&gt;-debug-actiongraph&lt;/code&gt; flag to find &lt;a class="link" href="../analyze-go-build#find-why-dependencies" &gt;why a dependency is included in the build&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;In the previous article, we discussed &lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" &gt;how to scale your codebase with evolutionary architecture&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Before that, we &lt;a class="link" href="../go-modules-and-packages/" &gt;explained the difference between Go modules and Go packages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also covered &lt;a class="link" href="../common-refactorings/" &gt;common code refactorings in Go for readability and maintainability&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-find-package-dependencies-of-a-go-package"&gt;&lt;a href="#watch-how-to-find-package-dependencies-of-a-go-package" class="header-anchor"&gt;&lt;/a&gt;Watch how to find package dependencies of a Go package
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/yIZcbTQvpCE"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to scale your codebase with evolutionary architecture</title><link>https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/</link><pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/</guid><description>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/evolutionary-architecture-headline.png" alt="Featured image of post How to scale your codebase with evolutionary architecture" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;strong&gt;technical debt&lt;/strong&gt;. Check out the previous article:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../readable-code/" &gt;Why readable code is important and how to refactor code for readability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="intro-to-evolutionary-architecture"&gt;&lt;a href="#intro-to-evolutionary-architecture" class="header-anchor"&gt;&lt;/a&gt;Intro to evolutionary architecture
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#current-architecture" &gt;Current architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#problems-with-the-current-architecture" &gt;Problems with the current architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#good-architecture" &gt;Good architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#evolutionary-architecture" &gt;Evolutionary architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Evolutionary architecture refers to a software design approach that embraces change as a fundamental aspect of system
development. Instead of aiming to create a fixed and perfect architecture upfront, it allows the system to evolve in
response to new requirements, technologies, and insights. Evolutionary architecture is a critical tool for reducing
technical debt.&lt;/p&gt;
&lt;p&gt;Evolutionary design, or incremental design, is another term for this approach. Generally, evolutionary design refers to
changes on a smaller scale, such as refactoring code or adding new features. On the other hand, evolutionary
architecture refers to changes on a larger scale, such as reorganizing the codebase or splitting a monolithic
application into microservices. That said, there is no strict boundary between the two terms. We will use the term
evolutionary architecture.&lt;/p&gt;
&lt;p&gt;In this article, we provide an example of scaling your codebase to accommodate a growing number of features and
developers.&lt;/p&gt;
&lt;h2 id="current-architecture"&gt;&lt;a href="#current-architecture" class="header-anchor"&gt;&lt;/a&gt;Current architecture
&lt;/h2&gt;&lt;p&gt;We base our example on a theoretical codebase, but real-world experiences inspire it. The problems and solutions we
discuss are common in software development, especially in startups and small companies.&lt;/p&gt;
&lt;p&gt;The initial state of our example codebase is a web application developed in a mono-repository. The application was built
from the ground up with a simple architecture, focusing on adding new features and finding product-market fit.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/current-design.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Current design with a few large modules.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The current design divides the codebase into a few large modules. We use the term &lt;em&gt;module&lt;/em&gt; to mean a logical grouping of
code in the same files and directories.&lt;/p&gt;
&lt;p&gt;However, after a couple of years, the application has grown significantly in features, complexity, and team size. The
organization now has three product teams working on different functional areas of the application. No one has updated
the initial architecture, which is insufficient to support the growing codebase and development team.&lt;/p&gt;
&lt;h2 id="problems-with-the-current-architecture"&gt;&lt;a href="#problems-with-the-current-architecture" class="header-anchor"&gt;&lt;/a&gt;Problems with the current architecture
&lt;/h2&gt;&lt;p&gt;A significant problem that the engineering team has been facing is &lt;strong&gt;an increase in bugs and a longer time to fix
them&lt;/strong&gt;. The code for each feature is sprinkled throughout the codebase and tightly coupled to other seemingly unrelated
features. This complexity makes it difficult to understand, test, and keep existing features working as new ones are
added.&lt;/p&gt;
&lt;p&gt;Speaking of new features, the team has been struggling to add them on time. The codebase has become a tangled web of
dependencies, and any change in one part of the codebase can have unintended consequences in other parts. Adding a
feature requires modifying many parts of the codebase, which requires understanding the entire codebase, which many
developers lack. The lack of knowledge and the changes to many parts of the codebase have led to &lt;strong&gt;features taking
significantly longer to implement&lt;/strong&gt; than initially estimated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Maintaining feature branches&lt;/strong&gt; for over a few days and making patch fixes to existing releases has become impossible.
The codebase is so intertwined that any changes may cause merge conflicts. The increased likelihood of merge conflicts
has discouraged developers from refactoring and cleaning up the code base. This tendency to leave the code as-is has
perpetuated the slide in code quality.&lt;/p&gt;
&lt;p&gt;Tests have also become a problem. The &lt;strong&gt;test suite has been in a frequent state of disrepair&lt;/strong&gt;. There is no clear
ownership of tests, so engineers have been reluctant to fix them. Some engineers have stopped paying attention to
failing CI alerts, figuring that the problems are caused by one of the other two teams.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tests have also become slower&lt;/strong&gt; and slower, especially the integration tests that test the API and include the service
layer, the datastore layer, and an actual database. These tests do not run in parallel; every additional feature slows
down the compile and increases test time. Test files have become bloated with tests for multiple features, making them
slow to load in the editor, difficult to navigate, and impossible to diff for PR reviews.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;strong&gt;onboarding time for new developers has been growing&lt;/strong&gt;. It takes weeks for new developers to understand
the codebase and start contributing.&lt;/p&gt;
&lt;h2 id="good-architecture"&gt;&lt;a href="#good-architecture" class="header-anchor"&gt;&lt;/a&gt;Good architecture
&lt;/h2&gt;&lt;p&gt;At this point in the company&amp;rsquo;s life, an exemplary architecture would be separate groups of modules corresponding to the
three product teams.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/ideal-design.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Good design with dedicated modules for each product team.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Each team would be responsible for its own set of modules, which aligns with Agile principles. The modules would be
loosely coupled, and the teams would be able to work independently on their features without affecting other teams. The
amount of code that each engineer has to understand and change would be drastically reduced.&lt;/p&gt;
&lt;p&gt;This architecture would have eliminated or significantly reduced the problems that the engineering team has been facing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The reduced complexity and increased understanding of the codebase would lead to fewer and faster to fix bugs&lt;/li&gt;
&lt;li&gt;Faster feature development due to cleaner code and fewer dependencies&lt;/li&gt;
&lt;li&gt;Reduced merge conflicts for PRs, especially for database migrations and schema changes&lt;/li&gt;
&lt;li&gt;Rarely failing test suite due to clear ownership of tests&lt;/li&gt;
&lt;li&gt;Faster tests due to each team focusing on testing their slice of the product. Limited complete product integration
tests would still be present.&lt;/li&gt;
&lt;li&gt;Faster onboarding time for new developers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, the company does not have this architecture. Building this architecture upfront would have been foolish since
it would have consumed critical engineering time. Yes, there was value in creating this structure upfront because it
would have saved time in the long run, but this value was insufficient for a young company that may not be around in a
few months.&lt;/p&gt;
&lt;h2 id="evolutionary-architecture"&gt;&lt;a href="#evolutionary-architecture" class="header-anchor"&gt;&lt;/a&gt;Evolutionary architecture
&lt;/h2&gt;&lt;p&gt;Many companies and engineers find themselves in this situation. They have a codebase with poor architecture for today&amp;rsquo;s
reality, blame the organization for not thinking about these problems earlier, and feel like they can&amp;rsquo;t improve the
situation.&lt;/p&gt;
&lt;p&gt;Evolutionary architecture is a way to incrementally improve the architecture of a codebase without having to do a big
rewrite. It is a way to make the codebase better today than it was yesterday and better tomorrow than it is today.&lt;/p&gt;
&lt;p&gt;This situation is not unique to this company. It is the norm. Most companies start with a simple architecture and
codebase that is good enough for the first few features. As the company grows, the architecture becomes a bottleneck.
Instead of worrying about not making the right decisions in the past, consider where the architecture needs to be a year
or two from now and start moving towards that.&lt;/p&gt;
&lt;p&gt;For example, when adding a new prominent feature to the product, decouple it from the rest of the codebase.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/evolutionary-design.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Evolutionary design with big features going into dedicated modules.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Our example shows all the modules decoupled, but it may be OK to decouple one or two.&lt;/p&gt;
&lt;p&gt;Decoupling a feature from the rest of the codebase has many benefits similar to those we listed above for &amp;ldquo;good
architecture.&amp;rdquo; Additional benefits include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most of the feature can be tested by itself, reducing test time.&lt;/li&gt;
&lt;li&gt;The business gets the option to create a new team dedicated to the feature quickly &amp;ndash; the code is already
separate/independent&lt;/li&gt;
&lt;li&gt;Engineering can scale the feature separately from the rest of the product. For example, assign a dedicated database or
split the feature into a microservice.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code-example-of-splitting-the-database-schema"&gt;&lt;a href="#code-example-of-splitting-the-database-schema" class="header-anchor"&gt;&lt;/a&gt;Code example of splitting the database schema
&lt;/h2&gt;&lt;p&gt;It is nice to read about a theoretical example, but seeing an actual code example is even better. In this code example,
we begin with a monolithic application that has a single database schema. We then split the schema into two separate
schemas. It is the starting point and a reference for decoupling a new feature from the rest of the codebase. Since this
code example is a bit long and requires some context regarding the current implementation, we will not cover it in this
article. Instead, &lt;a class="link" href="https://www.youtube.com/watch?v=Li1GZzQVXWw&amp;amp;t=1070s" target="_blank" rel="noopener"
&gt;jump to the code example section&lt;/a&gt; of the video
below.&lt;/p&gt;
&lt;p&gt;Link to the
&lt;a class="link" href="https://github.com/fleetdm/fleet/compare/main...victor/feature-set-up" target="_blank" rel="noopener"
&gt;source code example decoupling a new backend feature from the rest of the codebase&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="track-code-complexity-metrics"&gt;&lt;a href="#track-code-complexity-metrics" class="header-anchor"&gt;&lt;/a&gt;Track code complexity metrics
&lt;/h2&gt;&lt;p&gt;In the next article of this &lt;strong&gt;technical debt&lt;/strong&gt; series, we
&lt;a class="link" href="../code-complexity-metrics/" &gt;go over the top code complexity metrics every software engineer should know&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we covered &lt;a class="link" href="../track-engineering-metrics/" &gt;how to easily track engineering metrics&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Previously, we demonstrated
&lt;a class="link" href="../github-code-review-issues/" &gt;the most significant issues with GitHub&amp;rsquo;s code review process&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also showed &lt;a class="link" href="../go-package-dependencies/" &gt;how to create an architectural test that finds Go package dependencies&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also published an article on &lt;a class="link" href="../common-refactorings/" &gt;the common code refactorings to improve code readability&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In addition, we summarized &lt;a class="link" href="../ai-for-software-developers/" &gt;what every software engineer should know about AI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Lastly, we &lt;a class="link" href="../mermaid-intro/" &gt;introduced the top Mermaid diagrams for software developers&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-scale-your-codebase-with-evolutionary-architecture"&gt;&lt;a href="#watch-how-to-scale-your-codebase-with-evolutionary-architecture" class="header-anchor"&gt;&lt;/a&gt;Watch how to scale your codebase with evolutionary architecture
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Li1GZzQVXWw"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>What is readable code and why is it important?</title><link>https://victoronsoftware.com/posts/readable-code/</link><pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/readable-code/</guid><description>&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-headline.png" alt="Featured image of post What is readable code and why is it important?" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#metrics-for-unreadable-code" &gt;Metrics for unreadable code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#how-to-make-your-codebase-more-readable" &gt;How to make your codebase more readable&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#fix-poor-software-structure" &gt;Fix poor software structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#refactor-local-code-for-understanding" &gt;Refactor local code for understanding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#use-unit-and-integration-tests" &gt;Use unit and integration tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#useful-comments" &gt;Useful comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Readable code is software code that is easy to understand and easy to change.&lt;/p&gt;
&lt;p&gt;Unreadable code is a common complaint among software developers and one of the main contributors to technical debt.
Abandoning unreadable code is one of the reasons engineers love to work on greenfield projects—there is no legacy code
to deal with.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ve probably heard comments like, &amp;ldquo;It would take me longer to understand this code than to rewrite it from scratch.&amp;rdquo;
This sentiment illustrates the problem with unreadable code: it slows down the development process.&lt;/p&gt;
&lt;p&gt;Some engineers refer to readable code as &amp;ldquo;clean code.&amp;rdquo; In our opinion, &amp;ldquo;readable code&amp;rdquo; and &amp;ldquo;clean code&amp;rdquo; are synonymous,
and the term &amp;ldquo;readable code&amp;rdquo; is easier to understand and, therefore, more &amp;ldquo;readable.&amp;rdquo;&lt;/p&gt;
&lt;h2 id="why-is-unreadable-code-a-problem"&gt;&lt;a href="#why-is-unreadable-code-a-problem" class="header-anchor"&gt;&lt;/a&gt;Why is unreadable code a problem?
&lt;/h2&gt;&lt;p&gt;Although the &amp;ldquo;unreadable code&amp;rdquo; claim feels like a subjective opinion, it has a concrete business impact on software
projects.&lt;/p&gt;
&lt;p&gt;We want our code to be readable to speed up adding new features and bug fixes.&lt;/p&gt;
&lt;p&gt;For example, we recently spent three hours figuring out how a feature worked, only to realize there was a documentation
bug. Unfortunately, we made no improvements to make the code more readable, and the next developer will likely have the
same problem. This next developer may be ourselves one year from now when we will have forgotten everything we learned
about the feature.&lt;/p&gt;
&lt;h3 id="metrics-for-unreadable-code"&gt;&lt;a href="#metrics-for-unreadable-code" class="header-anchor"&gt;&lt;/a&gt;Metrics for unreadable code
&lt;/h3&gt;&lt;p&gt;You can use several metrics to measure your code&amp;rsquo;s readability. The ideal metric would be the time it takes to
understand the code, but this isn&amp;rsquo;t easy to measure. Instead, you can use the following proxies:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time to fix a bug&lt;/strong&gt;—Measure the time from when a developer starts working on a bug until the bug fix is ready for code
review. Alternatively, measure the time from when a developer starts working on a bug until their first commit. A first
commit is a good proxy for understanding the bug and starting to fix it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time to add a new feature&lt;/strong&gt;—Measure the time from when a developer starts working on a new feature until it is ready
for code review.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time to onboard a new team member&lt;/strong&gt;—Measure the time it takes for a new team member to make their first commit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code style violations&lt;/strong&gt;—Measure the codebase&amp;rsquo;s number of code style violations. Code style violations can be measured
using linters or static analysis tools. Some examples of code style violations relevant to readability are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Long functions&lt;/li&gt;
&lt;li&gt;Long files&lt;/li&gt;
&lt;li&gt;Deeply nested control structures&lt;/li&gt;
&lt;li&gt;Poorly named variables, such as 1-character variable names&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of measuring these style code violations, you can also enforce them in your CI pipeline. Most languages have
linters that update your code to match a standard style. For example, Go has &lt;a class="link" href="https://pkg.go.dev/cmd/gofmt" target="_blank" rel="noopener"
&gt;&lt;code&gt;gofmt&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="how-to-make-your-codebase-more-readable"&gt;&lt;a href="#how-to-make-your-codebase-more-readable" class="header-anchor"&gt;&lt;/a&gt;How to make your codebase more readable
&lt;/h2&gt;&lt;p&gt;Readability is not a goal but a process. You can&amp;rsquo;t make your codebase readable overnight, but you can start making
incremental improvements. Whenever you touch a piece of code, try to make it more readable.&lt;/p&gt;
&lt;h3 id="fix-poor-software-structure"&gt;&lt;a href="#fix-poor-software-structure" class="header-anchor"&gt;&lt;/a&gt;Fix poor software structure
&lt;/h3&gt;&lt;p&gt;One pattern we see frequently is that the functionality of a core feature is spread across multiple software modules.
The first problem this creates is that the software developer trying to understand the feature has to discover all the
modules that implement the feature. Often, this requires grepping the codebase for key names &amp;ndash; a tedious and
error-prone process. The second problem is that the developer has to jump between files and directories to understand
how the feature works, files that often have tons of other unrelated and distracting code.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-before.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Hard to understand feature due to poor software design&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Poor software structure often arises when we hurry to implement a feature and don&amp;rsquo;t consider future developers needing
to make changes. This behavior is reactive software design—one developer reacts to the immediate need to implement a
feature. Later, when implementing new features becomes almost impossible due to unreadable code, they react again by
restructuring the code or rewriting old functionality from scratch. This process makes sense for prototypes or early
products looking for product-market fit, but it is not sustainable for mature long-term software projects.&lt;/p&gt;
&lt;p&gt;Often, developers may not be able to create a good software design when they start working on a new feature because they
don&amp;rsquo;t understand all its ramifications. However, they should restructure their work before moving on to the next
task—the best time to improve code is when you have all the context in your head.&lt;/p&gt;
&lt;p&gt;We can restructure the above code example to move all the feature&amp;rsquo;s functionality into one or two modules. This
reorganization makes it easier to understand the feature because we have to look at a much smaller number of files and
are not distracted by unrelated code.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-after.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Easier to understand feature encapsulated in separate modules&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="refactor-local-code-for-understanding"&gt;&lt;a href="#refactor-local-code-for-understanding" class="header-anchor"&gt;&lt;/a&gt;Refactor local code for understanding
&lt;/h3&gt;&lt;p&gt;When entering a function, you should quickly understand what it does. The function code should be readable. If an
engineer who first sees the function can&amp;rsquo;t understand it, it is too complex and should be refactored.&lt;/p&gt;
&lt;p&gt;Long functions are difficult to understand because they require the developer to simultaneously keep a lot of
information in their head. Oftentimes, the function presents implementation details to the developer before they can
grasp the big picture. This process is cognitively demanding and error-prone.&lt;/p&gt;
&lt;p&gt;Instead, we can refactor extended functions into smaller functions that each do one thing. This refactoring makes the
code easier to understand because we can understand each small function in isolation. Hide complex logic in functions
with descriptive names.&lt;/p&gt;
&lt;p&gt;In addition, use descriptive names for variables. Good names make the code self-documenting and reduce the need for
comments.&lt;/p&gt;
&lt;p&gt;As an example of a function before and after refactoring, see this
&lt;a class="link" href="https://gist.github.com/getvictor/740c940ec06735ee02bc652f1093e0b8" target="_blank" rel="noopener"
&gt;refactoring example gist&lt;/a&gt;. For a full explanation,
you can &lt;a class="link" href="https://www.youtube.com/watch?v=HCGyWuE9zbY&amp;amp;t=720s" target="_blank" rel="noopener"
&gt;jump to the refactoring section&lt;/a&gt; of the video below.&lt;/p&gt;
&lt;p&gt;For more examples of common refactorings, see our article on
&lt;a class="link" href="../common-refactorings/" &gt;top refactorings every software developer should know&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="use-unit-and-integration-tests"&gt;&lt;a href="#use-unit-and-integration-tests" class="header-anchor"&gt;&lt;/a&gt;Use unit and integration tests
&lt;/h3&gt;&lt;p&gt;From a readability perspective, tests are a form of documentation. They show how the code is supposed to work. When
reading a test, you can see how the code is supposed to behave in different scenarios.&lt;/p&gt;
&lt;p&gt;Tests should also be readable. The same restructuring and refactoring principles apply to tests.&lt;/p&gt;
&lt;p&gt;Another essential benefit of tests is that they allow developers to refactor code with confidence. When you refactor
code, you can run the tests to ensure that the code still works as expected. Unfortunately, this means that when you
want to make a change in legacy code without tests, you either have to write tests first or do a lot of manual testing
to ensure that the code still works.&lt;/p&gt;
&lt;h3 id="useful-comments"&gt;&lt;a href="#useful-comments" class="header-anchor"&gt;&lt;/a&gt;Useful comments
&lt;/h3&gt;&lt;p&gt;Comments should explain why the code is written the way it is, not what the code does. The code should be
self-explanatory with descriptive variable and function names and encapsulated implementation details.&lt;/p&gt;
&lt;p&gt;Sometimes, it is hard to tell the difference between &amp;ldquo;why&amp;rdquo; and &amp;ldquo;what,&amp;rdquo; so feel free to err on the side of commenting.&lt;/p&gt;
&lt;p&gt;You can remove the comment if you renamed a variable or a function, and now the comment duplicates the code. One problem
with comments is that they can get out of date, which is worse than no comments.&lt;/p&gt;
&lt;p&gt;For example, before refactoring, you had this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// figure out which declarations we should not delete, and put those into keepNames list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;keepNames&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; make([]&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;existingDecls&lt;/span&gt;)&lt;span style="color:#f92672"&gt;+&lt;/span&gt;len(&lt;span style="color:#a6e22e"&gt;fleetmdm&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ListFleetReservedMacOSDeclarationNames&lt;/span&gt;()))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;p&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;range&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;existingDecls&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;newP&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;incomingDecls&lt;/span&gt;[&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Name&lt;/span&gt;]; &lt;span style="color:#a6e22e"&gt;newP&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;keepNames&lt;/span&gt; = append(&lt;span style="color:#a6e22e"&gt;keepNames&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;p&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;keepNames&lt;/span&gt; = append(&lt;span style="color:#a6e22e"&gt;keepNames&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fleetmdm&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ListFleetReservedMacOSDeclarationNames&lt;/span&gt;()&lt;span style="color:#f92672"&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After refactoring, the comment is a duplicate and no longer needed. It is even worse in this case because we renamed the
variable, but the comment still refers to the old name. The comment is not only a duplicate but also misleading:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// figure out which declarations we should not delete, and put those into keepNames list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;namesToKeep&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;namesOfDeclarationsToNotDelete&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;existingDecls&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;enrichedDeclarations&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="language-features-that-make-the-code-less-readable"&gt;&lt;a href="#language-features-that-make-the-code-less-readable" class="header-anchor"&gt;&lt;/a&gt;Language features that make the code less readable
&lt;/h2&gt;&lt;p&gt;Some language features can make the code less readable. We will give an example from Go because we are familiar with Go,
but the same principles apply to other languages.&lt;/p&gt;
&lt;h3 id="go-nested-functions"&gt;&lt;a href="#go-nested-functions" class="header-anchor"&gt;&lt;/a&gt;Go nested functions
&lt;/h3&gt;&lt;p&gt;Go supports nested functions like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;outer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;foo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Foo&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;bar&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Bar&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;inner&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Item&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// many lines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// of implementation details&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// many lines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// of additional code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;range&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;something&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;inner&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// more code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Upon entering the function as a reader, the first thing you see is the &lt;code&gt;inner&lt;/code&gt; function. The reader is presented with
specific implementation details before understanding the big picture. Instead, the reader should know where the nested
function is used before reading these implementation details.&lt;/p&gt;
&lt;p&gt;One way to solve this issue is to forbid nested functions in your style guide. Always extract nested functions to the
struct level or file level. However, this approach loses the benefits of closures and increases the number of functions
at the struct/file level.&lt;/p&gt;
&lt;p&gt;We hope that the Go team will improve the readability of nested functions in the future. For example, they could allow
nested functions to be defined at the end of the function after the primary implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;outer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;foo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Foo&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;bar&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Bar&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// many lines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// of additional code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;range&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;something&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;inner&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// more code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// nested functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;inner&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Item&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// many lines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// of implementation details&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternatively, IDE vendors can improve readability by entirely hiding nested functions by default.&lt;/p&gt;
&lt;h2 id="additional-benefits-of-readable-code"&gt;&lt;a href="#additional-benefits-of-readable-code" class="header-anchor"&gt;&lt;/a&gt;Additional benefits of readable code
&lt;/h2&gt;&lt;p&gt;As you improve the readability of your code, you will notice several side effects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many bugs will be easier to spot&lt;/li&gt;
&lt;li&gt;Other developers will be less likely to interrupt you with questions about your code&lt;/li&gt;
&lt;li&gt;If your code is open source, you may get more contributions&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="make-bigger-improvements-to-your-codebase-with-evolutionary-architecture"&gt;&lt;a href="#make-bigger-improvements-to-your-codebase-with-evolutionary-architecture" class="header-anchor"&gt;&lt;/a&gt;Make bigger improvements to your codebase with evolutionary architecture
&lt;/h2&gt;&lt;p&gt;In the following article, we
&lt;a class="link" href="../scaling-codebase-evolutionary-architecture" &gt;discuss how to make bigger improvements to your codebase with evolutionary architecture&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../engineering-transparency/" &gt;Why transparency beats everything else in engineering&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
How making work visible transforms teams from frustrated to high-performing through organizational transparency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../first-conference-talk/" &gt;My first conference talk experience&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Lessons learned from presenting about readable code at a major software engineering conference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../engineering-metrics-no-cost/" &gt;Build beautiful engineering dashboards—without paying a dime&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Learn how to use GitHub, Grafana, and SQL to create powerful, drill-down metrics using only free tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../literate-programming-lessons/" &gt;Key takeaways from literate programming&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Discover how Donald Knuth&amp;rsquo;s literate programming principles can improve your code documentation practices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../track-engineering-metrics/" &gt;How to easily track engineering metrics with GitHub Actions and Google APIs&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Build automated systems to measure and visualize your team&amp;rsquo;s engineering performance over time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../go-test-execution-time/" &gt;Measuring and improving the execution time of Go tests&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Optimize your test suite performance and reduce CI/CD pipeline duration with practical techniques.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../github-code-review-issues/" &gt;Top 3 issues with GitHub&amp;rsquo;s code review process&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Understand the scalability and developer experience problems with GitHub&amp;rsquo;s default review workflow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../ai-for-software-developers/" &gt;Common use cases of AI for today&amp;rsquo;s software developers&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Explore how AI tools can enhance productivity without replacing the need for readable, maintainable code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-discuss-why-readable-code-is-important"&gt;&lt;a href="#watch-us-discuss-why-readable-code-is-important" class="header-anchor"&gt;&lt;/a&gt;Watch us discuss why readable code is important
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/HCGyWuE9zbY"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Top 5 metrics for software load testing performance</title><link>https://victoronsoftware.com/posts/software-load-testing/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/software-load-testing/</guid><description>&lt;img src="https://victoronsoftware.com/posts/software-load-testing/loadtest-fail.png" alt="Featured image of post Top 5 metrics for software load testing performance" /&gt;&lt;ol&gt;
&lt;li&gt;&lt;a class="link" href="#server-cpu-and-memory-utilization" &gt;Server CPU and memory utilization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#server-errors" &gt;Server errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#server-api-latency-response-time" &gt;Server API latency (response time)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#database-slow-queries" &gt;Database slow queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#database-performance-metrics" &gt;Database performance metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="what-is-software-load-testing"&gt;&lt;a href="#what-is-software-load-testing" class="header-anchor"&gt;&lt;/a&gt;What is software load testing?
&lt;/h2&gt;&lt;p&gt;Software load testing is a type of performance testing that simulates real-world user load on a software application.
Load tests usually run in a test environment identical to the production environment.&lt;/p&gt;
&lt;p&gt;The goals of load testing may include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure the application meets the required performance criteria&lt;/li&gt;
&lt;li&gt;Ensure the application performance did not degrade after changes&lt;/li&gt;
&lt;li&gt;Test a new feature&amp;rsquo;s performance before releasing it to production&lt;/li&gt;
&lt;li&gt;Identify bottlenecks in the application to reduce compute costs and/or risks&lt;/li&gt;
&lt;li&gt;Run &lt;a class="link" href="https://en.wikipedia.org/wiki/Chaos_engineering" target="_blank" rel="noopener"
&gt;chaos engineering&lt;/a&gt; performance experiments&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Load testing can be done manually or automatically. Many open-source and commercial tools are available to help you run
load tests. Some features of load testing tools include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Record and replay user interactions, including simulating unique users&lt;/li&gt;
&lt;li&gt;Simulate different user loads&lt;/li&gt;
&lt;li&gt;Monitor the application&amp;rsquo;s performance during the test&lt;/li&gt;
&lt;li&gt;Generate reports with performance metrics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article lists the key metrics you should gather during a software load test of your web application.&lt;/p&gt;
&lt;h2 id="server-cpu-and-memory-utilization"&gt;&lt;a href="#server-cpu-and-memory-utilization" class="header-anchor"&gt;&lt;/a&gt;Server CPU and memory utilization
&lt;/h2&gt;&lt;p&gt;CPU utilization is the percentage of time the CPU is busy processing instructions, and memory utilization is the
percentage of memory used by the server. Companies deploy multiple instances of the same application web server, and the
load balancer distributes the user requests among them. These metrics are averages across all instances.&lt;/p&gt;
&lt;p&gt;High CPU or memory utilization can indicate a bottleneck in the application or server. It may also signal that the
application needs to be scaled horizontally (add more instances) or vertically (increase the server&amp;rsquo;s resources).&lt;/p&gt;
&lt;p&gt;Low CPU or memory utilization may indicate that the application is over-provisioned, and infrastructure engineers could
reduce resources to save costs.&lt;/p&gt;
&lt;p&gt;Typical expectations for CPU and memory utilization are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU utilization should be below 80% on average&lt;/li&gt;
&lt;li&gt;Memory utilization should be below 80% on average&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/software-load-testing/cpu-utilization.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;High CPU utilization during load test&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="server-errors"&gt;&lt;a href="#server-errors" class="header-anchor"&gt;&lt;/a&gt;Server errors
&lt;/h2&gt;&lt;p&gt;Server errors are error messages in the application logs or 5XX HTTP status codes. They can indicate that the
application is not handling the load well, has a bug, or is misconfigured.&lt;/p&gt;
&lt;p&gt;Error logs are a key debugging tool for developers. They can help identify the root cause of a functional or performance
error and fix it. As such, developers must use error logs to report actual server errors and not just informational
messages. For example, a 404 error is typically not a server error but a client error. A website user requesting a
resource that does not exist is a common scenario. Client errors should be logged as informational messages or tagged
appropriately to be excluded from the server error metric.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/software-load-testing/server-errors.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;AWS Logs Insights JSON error filter and sample error patterns&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The ideal number of server errors is zero. However, in practice, some errors are expected. For example, some startup or
shutdown-related errors may occur if application servers are scaling up or down due to load. Note the expected errors in
the test plan and adjust the error filter accordingly.&lt;/p&gt;
&lt;h2 id="server-api-latency-response-time"&gt;&lt;a href="#server-api-latency-response-time" class="header-anchor"&gt;&lt;/a&gt;Server API latency (response time)
&lt;/h2&gt;&lt;p&gt;API latency is the time it takes for the server to respond to a request, measured in milliseconds. Typically, the
business cares about user-facing API endpoints, such as the login, checkout, or search endpoints.&lt;/p&gt;
&lt;p&gt;API latency is a critical metric for user experience. High latency can lead to user frustration and abandonment.&lt;/p&gt;
&lt;p&gt;One standard metric is the 95th percentile latency. This metric indicates the latency that 95% of the requests are
faster than. It is a good indicator of the user experience because it filters out outliers.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/software-load-testing/api-latency.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Example spike in latency during a load test experiment&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Telemetry tools such as &lt;a class="link" href="https://opentelemetry.io/" target="_blank" rel="noopener"
&gt;OpenTelemetry&lt;/a&gt; can help you gather API latency metrics and correlate
them with other metrics, such as server errors or CPU utilization.&lt;/p&gt;
&lt;h2 id="database-slow-queries"&gt;&lt;a href="#database-slow-queries" class="header-anchor"&gt;&lt;/a&gt;Database slow queries
&lt;/h2&gt;&lt;p&gt;Query response time is the time it takes for the database to respond to a query. Slow queries can indicate that the
query is not optimized or that the table needs an index.&lt;/p&gt;
&lt;p&gt;Slow queries can lead to high API latency and server errors. They can also lead to high CPU and memory utilization on
the database server.&lt;/p&gt;
&lt;p&gt;Typically, we want to look at the average query response time multiplied by the number of queries per second for each
query signature. This will identify the queries that have the most impact on database performance.&lt;/p&gt;
&lt;p&gt;The list of slow queries should remain stable during a load test. If it changes, it may indicate a new unoptimized query
or a new bug in the application.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/software-load-testing/db-slow-queries.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;AWS RDS Performance Insights uses Average Active Sessions (AAS) as its slow query metric&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="database-performance-metrics"&gt;&lt;a href="#database-performance-metrics" class="header-anchor"&gt;&lt;/a&gt;Database performance metrics
&lt;/h2&gt;&lt;p&gt;Along with slow queries, we always gather the following database performance metrics:&lt;/p&gt;
&lt;h3 id="database-cpu-utilization"&gt;&lt;a href="#database-cpu-utilization" class="header-anchor"&gt;&lt;/a&gt;Database CPU utilization
&lt;/h3&gt;&lt;p&gt;Just like the server, we monitor the database&amp;rsquo;s CPU utilization. The typical expectation is that CPU utilization should
be below 80% on average.&lt;/p&gt;
&lt;p&gt;Memory utilization may not be as critical for the database as for the server. We expect the database to use as much
memory as possible to cache data and speed up queries.&lt;/p&gt;
&lt;h3 id="database-threads-running-sessions"&gt;&lt;a href="#database-threads-running-sessions" class="header-anchor"&gt;&lt;/a&gt;Database threads running (sessions)
&lt;/h3&gt;&lt;p&gt;Database threads running is the number of database connections actively processing queries. High thread counts can
indicate that the database is under heavy load.&lt;/p&gt;
&lt;p&gt;The number of threads should be at or below the number of CPUs on the database server.&lt;/p&gt;
&lt;h3 id="database-io-operations-per-second-iops"&gt;&lt;a href="#database-io-operations-per-second-iops" class="header-anchor"&gt;&lt;/a&gt;Database IO operations per second (IOPS)
&lt;/h3&gt;&lt;p&gt;Database IOPS is the number of disk read and write operations the database performs per second. High IOPS can indicate
that the database is not effectively caching data or that too many writes are occurring.&lt;/p&gt;
&lt;p&gt;IOPS should be in line with the database&amp;rsquo;s provisioned IOPS. If IOPS are consistently higher than provisioned, the
database may need to be scaled up.&lt;/p&gt;
&lt;h2 id="additional-metrics"&gt;&lt;a href="#additional-metrics" class="header-anchor"&gt;&lt;/a&gt;Additional metrics
&lt;/h2&gt;&lt;p&gt;The following metrics may also be necessary. However, these additional metrics may be more situational than the above
top 5 metrics.&lt;/p&gt;
&lt;h3 id="network-traffic"&gt;&lt;a href="#network-traffic" class="header-anchor"&gt;&lt;/a&gt;Network traffic
&lt;/h3&gt;&lt;p&gt;Network traffic includes the number of bytes sent and received by the server. Typically, the data received by the server
is the user&amp;rsquo;s request, and the data sent by the server is the response.&lt;/p&gt;
&lt;p&gt;However, in microservices architectures and servers with 3rd party integrations, our server may also make requests to
other web servers.&lt;/p&gt;
&lt;p&gt;User traffic is typically consistent from load test to load test. Traffic to other servers may change as engineers add
new features. If the network traffic changes significantly, it may indicate a new bug in the application, such as
application servers making too many requests to a 3rd party service.&lt;/p&gt;
&lt;h3 id="performance-profile"&gt;&lt;a href="#performance-profile" class="header-anchor"&gt;&lt;/a&gt;Performance profile
&lt;/h3&gt;&lt;p&gt;Many performance tools and modern programming languages can generate a performance profile. A performance profile is a
breakdown of the time spent in each function of the application. It can help identify bottlenecks in the application
code.&lt;/p&gt;
&lt;p&gt;If code performance is a significant concern, take a performance profile during the load test and compare it to a
baseline or the previous load test profile. If the profile changes significantly, it may indicate a new bug in the
application or a new performance bottleneck.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/software-load-testing/performance-profile.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Example performance profile from Go pprof&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="database-replication-lag"&gt;&lt;a href="#database-replication-lag" class="header-anchor"&gt;&lt;/a&gt;Database replication lag
&lt;/h3&gt;&lt;p&gt;If the database is replicated, the replication lag is the time it takes for changes to be sent from the primary database
and applied to the replica database. High replication lag can indicate that the replica is not keeping up with the
primary database.&lt;/p&gt;
&lt;p&gt;High replication lag can lead to a bad user experience &amp;ndash; for example, if the user saves data, then immediately
retrieves it and receives stale data.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../opentelemetry-for-devs/" &gt;OpenTelemetry: A developer&amp;rsquo;s best friend for production-ready code&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
See how developers can leverage OpenTelemetry during development to build better instrumented applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../opentelemetry-with-jaeger/" &gt;Is OpenTelemetry useful for the average software developer?&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Our initial exploration of OpenTelemetry&amp;rsquo;s practical value for everyday development tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../optimizing-performance-of-go-app/" &gt;How to benchmark performance of Go serializers&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Measure and optimize your Go application&amp;rsquo;s performance with effective benchmarking techniques.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-discuss-the-software-load-testing-performance-metrics"&gt;&lt;a href="#watch-us-discuss-the-software-load-testing-performance-metrics" class="header-anchor"&gt;&lt;/a&gt;Watch us discuss the software load testing performance metrics
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/KHS4D2QfsFk"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to override methods in Go</title><link>https://victoronsoftware.com/posts/method-overriding-in-go/</link><pubDate>Wed, 01 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/method-overriding-in-go/</guid><description>&lt;img src="https://victoronsoftware.com/posts/method-overriding-in-go/method-overriding-headline.png" alt="Featured image of post How to override methods in Go" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#method-overriding-with-embedded-structs" &gt;Example of method overriding with embedded structs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-method-overriding"&gt;&lt;a href="#what-is-method-overriding" class="header-anchor"&gt;&lt;/a&gt;What is method overriding?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://en.wikipedia.org/wiki/Method_overriding" target="_blank" rel="noopener"
&gt;Method overriding&lt;/a&gt; is a feature of object-oriented programming
languages that allows a subclass to provide a specific implementation of a method already defined in its superclass.
When a subclass overrides a method, the subclass&amp;rsquo;s method is called instead of the superclass&amp;rsquo;s method when the object
is of the subclass type. Method overriding is an example of polymorphism, where the same method name can have different
implementations depending on the object&amp;rsquo;s type.&lt;/p&gt;
&lt;p&gt;Go does not have classes, but it has structs and interfaces that can be used to achieve similar functionality.&lt;/p&gt;
&lt;h2 id="embedded-structs"&gt;&lt;a href="#embedded-structs" class="header-anchor"&gt;&lt;/a&gt;Embedded structs
&lt;/h2&gt;&lt;p&gt;Go favors composition over inheritance. Multiple smaller types can be combined to create a larger type. A clean way to
do this is through &lt;a class="link" href="https://golang.org/doc/effective_go#embedding" target="_blank" rel="noopener"
&gt;embedded structs&lt;/a&gt;. When a struct embeds another
struct, it inherits the embedded struct&amp;rsquo;s fields and methods. For example, consider the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyPrint&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyPrint&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Do&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello, World! %d\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;&lt;span style="color:#f92672"&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyComposedPrint&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;MyPrint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Base:&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyPrint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Do&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Do&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Composed:&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyComposedPrint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Do&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Do&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code outputs the following when run:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Base:
Hello, World! 0
Hello, World! 1
Composed:
Hello, World! 0
Hello, World! 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The composed struct forwards the method call to the embedded struct.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/method-overriding-in-go/embedded-struct.png"
alt="MyPrint struct inside the MyComposedPrint struct."&gt;
&lt;/figure&gt;
&lt;h2 id="method-overriding-with-embedded-structs"&gt;&lt;a href="#method-overriding-with-embedded-structs" class="header-anchor"&gt;&lt;/a&gt;Method overriding with embedded structs
&lt;/h2&gt;&lt;p&gt;To override a method in Go, you can define a method with the same name and parameters in the composed struct. For
example, consider the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyPrint&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyPrint&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Do&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello, World! %d\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;&lt;span style="color:#f92672"&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyComposedPrint&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;MyPrint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;MyComposedPrint&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Do&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// call the parent method, similar to super.Do() in other languages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;MyPrint&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Do&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello, Composed World! %d\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;&lt;span style="color:#f92672"&gt;++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Base:&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyPrint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Do&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;m&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Do&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Composed:&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MyComposedPrint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Do&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Do&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code outputs the following when run:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Base:
Hello, World! 0
Hello, World! 1
Composed:
Hello, World! 0
Hello, Composed World! 1
Hello, World! 2
Hello, Composed World! 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;MyComposedPrint.Do&lt;/code&gt; overrides &lt;code&gt;MyPrint.Do&lt;/code&gt;. When deciding which method to call, Go first looks for the method in the
type itself. If the method is not found, Go looks for the method in the embedded types.&lt;/p&gt;
&lt;h2 id="method-overriding-and-interfaces"&gt;&lt;a href="#method-overriding-and-interfaces" class="header-anchor"&gt;&lt;/a&gt;Method overriding and interfaces
&lt;/h2&gt;&lt;p&gt;Method overriding is often used in conjunction with interfaces. An interface defines a set of methods a type must
implement to satisfy the interface. When a type implements an interface, it can be used wherever the interface is
expected. An interface is another example of polymorphism in Go.&lt;/p&gt;
&lt;p&gt;One typical pattern is overriding a method in a 3rd party library. For example, you can embed a type from a library and
override a method to add additional functionality. However, you will still pass the new type in your code using the
library&amp;rsquo;s original interface.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;We recently described &lt;a class="link" href="../go-modules-and-packages/" &gt;the differences between Go modules and packages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Previously, we explained &lt;a class="link" href="../go-json-unmarshal/" &gt;how to properly unmarshal JSON null, set, and missing fields in Go&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also explained &lt;a class="link" href="../nil-slice-versus-empty-slice-in-go/" &gt;the difference between nil slice and empty slice in Go&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-method-overriding-in-go-video"&gt;&lt;a href="#watch-method-overriding-in-go-video" class="header-anchor"&gt;&lt;/a&gt;Watch method overriding in Go video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/OW42Lv8HjUk"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to easily track engineering metrics</title><link>https://victoronsoftware.com/posts/track-engineering-metrics/</link><pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/track-engineering-metrics/</guid><description>&lt;img src="https://victoronsoftware.com/posts/track-engineering-metrics/engineering-metrics.png" alt="Featured image of post How to easily track engineering metrics" /&gt;&lt;p&gt;Engineering metrics are essential for tracking your team&amp;rsquo;s progress and productivity and identifying areas for
improvement. However, manually collecting and updating these metrics can be time-consuming and error-prone. In this
article, we will show you how to automate the tracking of engineering metrics and visualize them in the Google Office
suite.&lt;/p&gt;
&lt;p&gt;Some standard engineering metrics include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number of bugs&lt;/li&gt;
&lt;li&gt;Lead time for changes (or bug fixes)&lt;/li&gt;
&lt;li&gt;Code coverage&lt;/li&gt;
&lt;li&gt;Build/test success rate&lt;/li&gt;
&lt;li&gt;Deployment frequency&lt;/li&gt;
&lt;li&gt;Number of incidents&lt;/li&gt;
&lt;li&gt;Mean time to recovery&lt;/li&gt;
&lt;li&gt;Delivered story points&lt;/li&gt;
&lt;li&gt;and many more&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Engineering metrics can be further sliced and diced in various ways. For example, you can track bugs by severity or on a
per-team basis.&lt;/p&gt;
&lt;h2 id="building-an-engineering-metrics-tracker"&gt;&lt;a href="#building-an-engineering-metrics-tracker" class="header-anchor"&gt;&lt;/a&gt;Building an engineering metrics tracker
&lt;/h2&gt;&lt;p&gt;For our example metrics tracker, we will gather the number of GitHub open bugs for a team, update the numbers in a
Google Sheet, automate the process with GitHub Actions, and display the data in Google Docs.&lt;/p&gt;
&lt;p&gt;All the tools for this flow are freely available, and this process does not rely on costly third-party metrics-gathering
services. We will use the Go programming language in our example.&lt;/p&gt;
&lt;h2 id="gathering-the-number-of-open-bugs"&gt;&lt;a href="#gathering-the-number-of-open-bugs" class="header-anchor"&gt;&lt;/a&gt;Gathering the number of open bugs
&lt;/h2&gt;&lt;p&gt;The &lt;a class="link" href="https://docs.github.com/en/rest" target="_blank" rel="noopener"
&gt;GitHub API&lt;/a&gt; is a well-documented way to query issues in a repository.&lt;/p&gt;
&lt;p&gt;There are also many quality client libraries for the API. We will use the
&lt;a class="link" href="https://github.com/google/go-github" target="_blank" rel="noopener"
&gt;go-github&lt;/a&gt; client.&lt;/p&gt;
&lt;p&gt;Create a git repository and set up a new Go module. Here is our code snippet to get the number of open bugs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/google/go-github/v67/github&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getGitHubIssues&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;context&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Context&lt;/span&gt;) ([]&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;github&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Issue&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;githubToken&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;os&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Getenv&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;GITHUB_TOKEN&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;github&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewClient&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;WithAuthToken&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;githubToken&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Get issues.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;allIssues&lt;/span&gt; []&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;github&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Issue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;github&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;IssueListByRepoOptions&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;State&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;open&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Labels&lt;/span&gt;: []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;{&lt;span style="color:#e6db74"&gt;&amp;#34;#g-mdm&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;:release&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;bug&amp;#34;&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;issues&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;resp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Issues&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ListByRepo&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;fleetdm&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;fleet&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;allIssues&lt;/span&gt; = append(&lt;span style="color:#a6e22e"&gt;allIssues&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;issues&lt;/span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;resp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NextPage&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Page&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;resp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NextPage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;allIssues&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code snippet uses a &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; environment variable to authenticate with the GitHub API. You can create a
personal access token in your GitHub account settings. Later, we will show how to set this token in GitHub Actions
automatically. The token is optional for public repositories but required for private repositories.&lt;/p&gt;
&lt;p&gt;The code snippet queries the open issues in the public &lt;code&gt;fleetdm/fleet&lt;/code&gt; repository with the labels &lt;code&gt;#g-mdm&lt;/code&gt;, &lt;code&gt;:release&lt;/code&gt;,
and &lt;code&gt;bug&lt;/code&gt;. Fleet&amp;rsquo;s MDM product team currently uses these labels for bugs in progress or ready to be worked on.&lt;/p&gt;
&lt;h2 id="updating-the-google-sheets-spreadsheet"&gt;&lt;a href="#updating-the-google-sheets-spreadsheet" class="header-anchor"&gt;&lt;/a&gt;Updating the Google Sheets spreadsheet
&lt;/h2&gt;&lt;p&gt;To update the Google Sheets spreadsheet, we will use the &lt;a class="link" href="https://developers.google.com/sheets/api" target="_blank" rel="noopener"
&gt;Google Sheets API&lt;/a&gt;
with the &lt;a class="link" href="https://pkg.go.dev/google.golang.org/api@v0.214.0/sheets/v4" target="_blank" rel="noopener"
&gt;Google&amp;rsquo;s Go client library&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For instructions on getting a Google Sheets API key, sharing the spreadsheet with a service account, and editing the
spreadsheet using the API, see our previous article:
&lt;a class="link" href="../google-sheets-api/" &gt;How to quickly edit Google Sheets spreadsheet using the API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See our integrated
&lt;a class="link" href="https://github.com/getvictor/github-metrics/blob/34abb1071a300659ab1ae534759bc4d47728e343/main.go#L55" target="_blank" rel="noopener"
&gt;function to update the Google Sheets spreadsheet with the number of open bugs&lt;/a&gt;
on GitHub.&lt;/p&gt;
&lt;p&gt;In our example, we get the spreadsheet ID and the service account key from environment variables. When running locally,
you must set the &lt;code&gt;SPREADSHEET_ID&lt;/code&gt; and &lt;code&gt;GOOGLE_SERVICE_ACCOUNT_KEY&lt;/code&gt; environment variables.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;spreadsheetId := os.Getenv(&amp;#34;SPREADSHEET_ID&amp;#34;)
serviceAccountKey = []byte(os.Getenv(&amp;#34;GOOGLE_SERVICE_ACCOUNT_KEY&amp;#34;))
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The glue code combining the above two functions is straightforward.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;context&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Background&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;allIssues&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getGitHubIssues&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Unable to get GitHub issues: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Total issues: %d\n&amp;#34;&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;allIssues&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;updateSpreadsheet&lt;/span&gt;(len(&lt;span style="color:#a6e22e"&gt;allIssues&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Unable to update spreadsheet: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can manually run our script to gather the metrics and update the Google Sheets spreadsheet. However, we want to
automate this process so that the metrics are always up to date and we have a consistent historical record.&lt;/p&gt;
&lt;h2 id="automating-the-metric-gathering-process-with-github-actions"&gt;&lt;a href="#automating-the-metric-gathering-process-with-github-actions" class="header-anchor"&gt;&lt;/a&gt;Automating the metric-gathering process with GitHub Actions
&lt;/h2&gt;&lt;p&gt;GitHub Actions allows you to automate, customize, and execute your software development workflows in your GitHub
repository. We will use GitHub Actions to run our script on a schedule and update the Google Sheets spreadsheet with the
latest metrics.&lt;/p&gt;
&lt;p&gt;Create a &lt;code&gt;.github/workflows/update-spreadsheet.yml&lt;/code&gt; file in your repository with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Update spreadsheet with latest metrics&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;workflow_dispatch&lt;/span&gt;: &lt;span style="color:#75715e"&gt;# Manual&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;schedule&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;cron&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;0 */12 * * *&amp;#39;&lt;/span&gt; &lt;span style="color:#75715e"&gt;# At 00:00 and 12:00 UTC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;GITHUB_TOKEN&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt; &lt;span style="color:#75715e"&gt;# automatically generated&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;GOOGLE_SERVICE_ACCOUNT_KEY&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;SPREADSHEET_ID&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ secrets.SPREADSHEET_ID }}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;update-spreadsheet&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runs-on&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;ubuntu-latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Checkout code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683&lt;/span&gt; &lt;span style="color:#75715e"&gt;# v4.2.2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;fetch-depth&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Setup Go&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a&lt;/span&gt; &lt;span style="color:#75715e"&gt;# v5.2.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;with&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;go-version-file&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#39;go.mod&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Run&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;go run main.go&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above GitHub Actions workflow runs the &lt;code&gt;main.go&lt;/code&gt; script every 12 hours. GitHub automatically generates the
&lt;code&gt;GITHUB_TOKEN&lt;/code&gt; secret. The &lt;code&gt;GOOGLE_SERVICE_ACCOUNT_KEY&lt;/code&gt; and &lt;code&gt;SPREADSHEET_ID&lt;/code&gt; secrets must be set up manually in the
repository settings.&lt;/p&gt;
&lt;p&gt;The workflow checks out the code, sets up Go, and runs the script. After pushing the workflow file to GitHub, you can
manually run the workflow to test it.&lt;/p&gt;
&lt;h2 id="display-the-metrics-in-google-docs"&gt;&lt;a href="#display-the-metrics-in-google-docs" class="header-anchor"&gt;&lt;/a&gt;Display the metrics in Google Docs
&lt;/h2&gt;&lt;p&gt;To see the metrics in Google Docs or Google Slides, you can
&lt;a class="link" href="https://support.google.com/docs/answer/7009814" target="_blank" rel="noopener"
&gt;copy and paste the relevant cells&lt;/a&gt; from the Google Sheets spreadsheet.
This operation will create a one-way link from Google Sheets to the document. You can refresh the data by clicking
&lt;strong&gt;Tools &amp;gt; Linked objects &amp;gt; Update All&lt;/strong&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/track-engineering-metrics/google-sheets-linked-to-google-docs.png"
alt="Google Docs showing an embedded 4x4 table from Google Sheets. The title is: Our open bugs"&gt;
&lt;/figure&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class="link" href="../engineering-metrics-no-cost/" &gt;Free, flexible, and insightful: engineering metrics done right&lt;/a&gt;&lt;br&gt;
Discover how to monitor and visualize your dev team&amp;rsquo;s performance with Grafana and an analytical database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recently, we explained &lt;a class="link" href="../readable-code/" &gt;how to measure unreadable code and turn it into clean code&lt;/a&gt;, as well as
&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" &gt;how to make incremental improvements to your codebase with evolutionary architecture&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Previously, we showed &lt;a class="link" href="../github-reusable-workflows-and-steps/" &gt;how to reuse workflows and steps in GitHub Actions&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We also covered &lt;a class="link" href="../go-test-execution-time/" &gt;measuring the execution time of Go tests&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We also described &lt;a class="link" href="../github-code-review-issues/" &gt;inefficiencies in the GitHub code review process&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code-on-github"&gt;&lt;a href="#code-on-github" class="header-anchor"&gt;&lt;/a&gt;Code on GitHub
&lt;/h2&gt;&lt;p&gt;For the complete code, see the GitHub repository: &lt;a class="link" href="https://github.com/getvictor/github-metrics" target="_blank" rel="noopener"
&gt;github-metrics&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="watch"&gt;&lt;a href="#watch" class="header-anchor"&gt;&lt;/a&gt;Watch
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/yzT-1nuKvNI"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to quickly edit Google Sheets spreadsheet using the API</title><link>https://victoronsoftware.com/posts/google-sheets-api/</link><pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/google-sheets-api/</guid><description>&lt;img src="https://victoronsoftware.com/posts/google-sheets-api/google-sheets-headline.png" alt="Featured image of post How to quickly edit Google Sheets spreadsheet using the API" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#get-a-google-sheets-api-key" &gt;Get a Google Sheets API key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#share-a-google-sheets-spreadsheet-with-the-service-account" &gt;Share a Google Sheets spreadsheet with the service account&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#edit-a-google-sheets-spreadsheet-using-the-api" &gt;Edit a Google Sheets spreadsheet using the API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you need to edit a Google Sheets spreadsheet quickly, you can use the Google Sheets API. The API allows you to
programmatically read, write, and update data in a Google Sheets spreadsheet. However, following the
&lt;a class="link" href="https://developers.google.com/sheets/api/guides/concepts" target="_blank" rel="noopener"
&gt;Google Sheets API documentation&lt;/a&gt; can be overwhelming. In this
article, we will show you how to get a Google Sheets API key and edit a Google Sheets spreadsheet using the API.&lt;/p&gt;
&lt;h2 id="user-authentication-oauth-vs-api-key-jwt"&gt;&lt;a href="#user-authentication-oauth-vs-api-key-jwt" class="header-anchor"&gt;&lt;/a&gt;User authentication (OAuth) vs. API key (JWT)
&lt;/h2&gt;&lt;p&gt;The problem is that the Google API documentation focuses on the &lt;a class="link" href="https://oauth.net/2/" target="_blank" rel="noopener"
&gt;OAuth 2.0&lt;/a&gt; user authentication
flow. This flow is useful when you need to access Google Sheets on behalf of a user. For example, you&amp;rsquo;re creating your
web app, and you need to read or write data in a Google Sheets spreadsheet owned by your web app user. The OAuth
standard allows Google to authenticate the user and authorize your app to access the user&amp;rsquo;s data without exposing the
user&amp;rsquo;s credentials to your web app. The OAuth flow interacts with three parties &amp;ndash; the user, your web app, and Google.&lt;/p&gt;
&lt;p&gt;In our case, we want to access a specific Google Sheets spreadsheet programmatically without user interaction. We can
use the API key (JWT) authentication method. JWT stands for JSON Web Token, a standard for securely transmitting
information between two parties. This method allows us to access Google Sheets programmatically without user
interaction. The API key (JWT) method interacts with two parties: your app and Google.&lt;/p&gt;
&lt;h2 id="get-a-google-sheets-api-key"&gt;&lt;a href="#get-a-google-sheets-api-key" class="header-anchor"&gt;&lt;/a&gt;Get a Google Sheets API key
&lt;/h2&gt;&lt;p&gt;To get a Google Sheets API key, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go to the &lt;a class="link" href="https://console.cloud.google.com/" target="_blank" rel="noopener"
&gt;Google Cloud Console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create a new project or select an existing project.
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/google-sheets-api/google-cloud-new-project.png"
alt="Welcome to Google Cloud screen, with a modal to select a project. The NEW PROJECT text in the top right of the modal is highlighted."&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;In the new project, go to &lt;strong&gt;APIs &amp;amp; Services&lt;/strong&gt; and enable the &lt;strong&gt;Google Sheets API&lt;/strong&gt;. After enabling it, you should see
it in the &lt;strong&gt;Enabled APIs &amp;amp; services&lt;/strong&gt; list.
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/google-sheets-api/google-cloud-enabled-sheets-api.png"
alt="Google Cloud APIs &amp;amp; Services console with the Google Sheets API enabled."&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Go to &lt;strong&gt;APIs &amp;amp; Services&lt;/strong&gt; &amp;gt; &lt;strong&gt;Credentials&lt;/strong&gt; and create a new Service Account. This account does not need any optional
permissions.
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/google-sheets-api/google-cloud-service-account.png"
alt="Google Cloud IAM &amp;amp; Admin screen with a service account."&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;Create a new JSON key for the service account.
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/google-sheets-api/google-cloud-service-account-create-new-key.png"
alt="Google Cloud service account detailed view. The KEYS tab is selected. ADD KEY button is pressed, showing the option to Create new key."&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;After creating the key, the JSON file will be automatically downloaded to your computer. This file contains the
credentials for your service account. Keep it secure. For example, we received
&lt;code&gt;axial-paratext-444915-f9-8ef1de636587.json&lt;/code&gt; with the following content:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;service_account&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;project_id&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;axial-paratext-444915-f9&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;private_key_id&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;8ef1de636587238a028addaa8be9dbdf1d406420&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;private_key&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDGFXmEc6VK0TO9\n2E/LDel4gTYl1u8uZGtX16B7Lo4ufM7ics3h9Gyi1lJMcGrHruGEzatDeTRclILd\nLhLwrckfl3IF9MIsqwaEkHk7YnUXj9zGl+v8LTGJL0ycQ9hVdoD6cCOOAmghLj8F\n9Sl6KQ5PHGbBUUL4qi8uExKY4tQOrqol1Pi3RPpAOCR6BLC/ZFPp+4e4HRhF+DMD\nI1QX8QwPit9XdIomnZPUL5sGD+q4cp1gHLBuBp2ehyiFI5MGhgzvCIQzaTExw7GK\nqrjYMjBKXaFRqGpZJWJMdVmGGHpmZLCL/wQmhujlThrF0FO8BHAGriAvUgDbH7m/\nMzGRk/KzAgMBAAECggEAE7LwBkWP8xxR9nfMG6fzB3pmHaY93BG9gRtfCNEM77+W\nvXtoUSfDJACHZ7WoUNpp8BCaDxg/JlPYndFmrcvCnCMuAjygkNujRsytWcQFXAYB\nETjrjYUbD4cGKeYvXfRuiDldt9Iyc9ZLCzch3FW36BMtft0reVpHXeAksdKg/yKf\nhM4jw3tQMu5JR3trLHtqwaA8VUav7I2Qn8nxEbB/0+AUatqpDOp/hQNTN7MGZ/i7\n4V0538U7C9RYDzk9hBBT2/IegGixlL0lX2V6LjYlRcEgC0PLuKF7gM/RRnorNPnv\nHfHxyZt6/MyI8RLRwwv05ZSITaOj66lXxReVsMXxhQKBgQD+vJPrvKD7mGiXRQto\nh1LJqPcyknzLzxf2OX5vZyF8asdroU0sRy8pYYHy8JCPlkOJ0fj9kq6R79W+rmn3\npFkvwRY9dUcJLpoMAMEfO4wQp3QKpxdkjMS8xGcEVOIZacAHCof7uUwrHUUcqRIq\nwrgZcj5P8ZjwsLmuqLNeXqFYNwKBgQDHEPf4PCyjieF+aGvaOPLfn/lRBbEQGlrg\n9Z09UXpxcW39RMq7MkS+U9m88Kn9MsEK3umJdP+s5m8ddVdIVgZLj96Ufn52RzRT\ne8crSjCVC3oQaloScvOBSQA1Z3Bn+QstIko042i2qTNJWMArdCJe9uRbwL1hqEvx\n+LtNPniDZQKBgQDX4g9maFzx/G8fS+doNc8mkmi01kqnGyJOjNknJnrNi1zoTTIv\nBUDly/oqXk/VMF6ajXV7yPTjPyOhTwUFV6Yx/2yOtzZ1hKYO6BDDHF8Ouitw37zG\nfTo6VCSOGjXnnaSdEwK9hYMUwuCQcoSv8oe9IQHIFJMt4EfsypIAtyf7rwKBgFtC\ntzvRcnGC+6K1AoTnyMimkWkIn/UO8Azj7TM4UFcDtnX+/KY3VHahAFhzSKswgnmW\nWiBPSAufFN+/dMVP0tD/Yv5Ww2k8GYwQWe3JtF4QBeTSrPp6QpJJwlO5WToBXZNS\nfgyjGNVs2ntMucTyF/PLYkOCKBBGVJLZAh1Wf29VAoGADf7a1l8kDKgokm6pc4qG\nzb97GMk1CpE0dGl31dvx2ilckDVP354yfWEwVXWWVfVSq/LQdJVgkdArYbAPdsPb\nYuUfNwXMSp/OjmEL2QyC2zRm+2ZZZt5bcnPRbYETzb2An8kDYX49vwgBLJXpLOmt\nlCvxUDyoASHgAMu+OlqHIh4=\n-----END PRIVATE KEY-----\n&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;client_email&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;example@axial-paratext-444915-f9.iam.gserviceaccount.com&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;client_id&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;114906617333001451487&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;auth_uri&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://accounts.google.com/o/oauth2/auth&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;token_uri&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://oauth2.googleapis.com/token&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;auth_provider_x509_cert_url&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://www.googleapis.com/oauth2/v1/certs&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;client_x509_cert_url&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://www.googleapis.com/robot/v1/metadata/x509/example%40axial-paratext-444915-f9.iam.gserviceaccount.com&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;universe_domain&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;googleapis.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="share-a-google-sheets-spreadsheet-with-the-service-account"&gt;&lt;a href="#share-a-google-sheets-spreadsheet-with-the-service-account" class="header-anchor"&gt;&lt;/a&gt;Share a Google Sheets spreadsheet with the service account
&lt;/h2&gt;&lt;p&gt;Share the spreadsheet with the service account email address to allow the account to access a Google Sheets spreadsheet.
In our case, the service account email is &lt;code&gt;example@axial-paratext-444915-f9.iam.gserviceaccount.com&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/google-sheets-api/google-sheets-share-with-service-account.png"
alt="Google Sheets spreadsheet with the Share modal open. The spreadsheet is shared with the service account with editor permissions."&gt;
&lt;/figure&gt;
&lt;p&gt;Note the spreadsheet ID from the URL. For example, in the URL
&lt;code&gt;https://docs.google.com/spreadsheets/d/1QCtnB6MXfFJLZsBE1E2vq5FxKBgh1Q0s727wRxFkmX4/edit&lt;/code&gt;, the spreadsheet ID is
&lt;code&gt;1QCtnB6MXfFJLZsBE1E2vq5FxKBgh1Q0s727wRxFkmX4&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="edit-a-google-sheets-spreadsheet-using-the-api"&gt;&lt;a href="#edit-a-google-sheets-spreadsheet-using-the-api" class="header-anchor"&gt;&lt;/a&gt;Edit a Google Sheets spreadsheet using the API
&lt;/h2&gt;&lt;p&gt;Now that we have the Google Sheets API key and editor permissions for the target spreadsheet, we can edit it using the
API. For this example, we will use the Go programming language.&lt;/p&gt;
&lt;p&gt;In an empty directory, create a Go project and get the necessary dependencies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go mod init google-sheets-api
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go get golang.org/x/oauth2@v0.24.0
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go get google.golang.org/api@v0.211.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Copy the JSON key file to the project directory and rename it to &lt;code&gt;credentials.json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Create a new Go file, &lt;code&gt;main.go&lt;/code&gt;, with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;context&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;golang.org/x/oauth2/google&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;google.golang.org/api/option&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;google.golang.org/api/sheets/v4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;spreadsheetId&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;1QCtnB6MXfFJLZsBE1E2vq5FxKBgh1Q0s727wRxFkmX4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;context&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Background&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;serviceAccountKey&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;os&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadFile&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;credentials.json&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Unable to read client secret file: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cfg&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;google&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;JWTConfigFromJSON&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;serviceAccountKey&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sheets&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SpreadsheetsScope&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Unable to parse client secret file to config: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;cfg&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Client&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;srv&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sheets&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewService&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;option&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithHTTPClient&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Unable to retrieve Sheets client: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;readRange&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Sheet1!A2:B2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;resp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;srv&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Spreadsheets&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Values&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Get&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;spreadsheetId&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;readRange&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;Do&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Unable to retrieve data from sheet: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(&lt;span style="color:#a6e22e"&gt;resp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Values&lt;/span&gt;) &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;No data found.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Date, Value:&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;row&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;range&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;resp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Values&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%s, %s\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;row&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;], &lt;span style="color:#a6e22e"&gt;row&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Replace the &lt;code&gt;spreadsheetId&lt;/code&gt; constant with the ID of your target spreadsheet.&lt;/p&gt;
&lt;p&gt;This code authenticates with the Google Sheets API using the service account key and reads the data from cells A2 and B2
in the &lt;code&gt;Sheet1&lt;/code&gt; sheet of the target spreadsheet.&lt;/p&gt;
&lt;p&gt;Update the dependencies and run the program:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go mod tidy
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run main.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result should look like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Date, Value:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;2024-12-16 10:00:00, 10
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To write data to a Google Sheets spreadsheet, use the &lt;code&gt;spreadsheets.Values.Update&lt;/code&gt; and &lt;code&gt;Spreadsheets.BatchUpdate&lt;/code&gt;
methods. For example, the following modified code inserts a new row above other rows with the current date and an
incremented value:&lt;/p&gt;
&lt;script type="application/javascript" src="https://gist.github.com/getvictor/5c7fa2770089755066cde5ab2c772cca.js"&gt;&lt;/script&gt;
&lt;p&gt;We can review the spreadsheet to verify that our code added the new row.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/google-sheets-api/google-sheets-with-new-row.png"
alt="Google Sheets spreadsheet with two rows containing populated Date and Value columns."&gt;
&lt;/figure&gt;
&lt;h2 id="next-steps"&gt;&lt;a href="#next-steps" class="header-anchor"&gt;&lt;/a&gt;Next steps
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../track-engineering-metrics/" &gt;Automate tracking of engineering metrics&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we covered &lt;a class="link" href="../remote-development-environment/" &gt;how to set up a remote development environment&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Previously, we showed &lt;a class="link" href="../webhook-flow-with-tines/" &gt;how to build a webhook flow with Tines&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-edit-google-sheets-spreadsheet-using-the-api"&gt;&lt;a href="#watch-how-to-edit-google-sheets-spreadsheet-using-the-api" class="header-anchor"&gt;&lt;/a&gt;Watch how to edit Google Sheets spreadsheet using the API
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/J2UEYjQVhZ8"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Go modules and packages — which one to use and when</title><link>https://victoronsoftware.com/posts/go-modules-and-packages/</link><pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/go-modules-and-packages/</guid><description>&lt;img src="https://victoronsoftware.com/posts/go-modules-and-packages/go-modules-and-packages.png" alt="Featured image of post Go modules and packages — which one to use and when" /&gt;&lt;h2 id="what-is-a-go-package"&gt;&lt;a href="#what-is-a-go-package" class="header-anchor"&gt;&lt;/a&gt;What is a Go package?
&lt;/h2&gt;&lt;p&gt;A Go package is a collection of Go source files in the same directory that are compiled together. It can contain
functions, types, and variables. Go packages organize code and provide a way to share code between different program
parts.&lt;/p&gt;
&lt;p&gt;By convention, the package name is the same as the last element of the import path. For example, the package name for
the &lt;code&gt;fmt&lt;/code&gt; package in the &lt;code&gt;fmt&lt;/code&gt; directory is &lt;code&gt;fmt&lt;/code&gt;. You can name the package differently from the directory name, but it
is not recommended.&lt;/p&gt;
&lt;p&gt;When a Go application is compiled, the Go compiler compiles all the packages imported by the main package. The main
package contains the &lt;code&gt;main&lt;/code&gt; function and is the entry point of the program. However, all the imported packages can be
compiled separately as well, even if they do not contain the &lt;code&gt;main&lt;/code&gt; function. That&amp;rsquo;s what happens when we run unit tests
for all packages in a Go project — each package is compiled separately and can be tested independently.&lt;/p&gt;
&lt;p&gt;The directory structure does not have to match the package dependencies. For example, given the following directory
structure:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;service/
service.go
api/
api.go
db/
db.go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The packages &lt;code&gt;service&lt;/code&gt;, &lt;code&gt;api&lt;/code&gt;, and &lt;code&gt;db&lt;/code&gt; can be completely independent. The &lt;code&gt;service&lt;/code&gt; package does not include the
&lt;code&gt;api.go&lt;/code&gt; and &lt;code&gt;db.go&lt;/code&gt; files because they are in a different directory. Go&amp;rsquo;s package dependency graph has no relation to
the directory structure.&lt;/p&gt;
&lt;h2 id="what-is-a-go-module"&gt;&lt;a href="#what-is-a-go-module" class="header-anchor"&gt;&lt;/a&gt;What is a Go module?
&lt;/h2&gt;&lt;p&gt;A &lt;a class="link" href="https://go.dev/ref/mod" target="_blank" rel="noopener"
&gt;Go module&lt;/a&gt;, introduced in Go 1.11, is a collection of Go packages that are versioned
together. A Go module is defined by a &lt;code&gt;go.mod&lt;/code&gt; file located at the module&amp;rsquo;s root. The &lt;code&gt;go.mod&lt;/code&gt; file contains the module
name and the versions of the dependencies the module uses.&lt;/p&gt;
&lt;p&gt;A Go module can contain multiple packages, and the packages do not need to be related to each other.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/go-modules-and-packages/go-modules-and-packages.svg"
alt="Go project directory structure, containing one module at the top level with two packages in a subdirectory. Another module exists in a third subdirectory."&gt;&lt;figcaption&gt;
&lt;h4&gt;Sample project with two modules&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A Go module can exist at any level of the directory structure, even nested within another module. The Go toolchain
treats all Go modules as independent entities, regardless of their location in the directory structure.&lt;/p&gt;
&lt;h2 id="how-to-use-multiple-modules-in-one-go-workarea"&gt;&lt;a href="#how-to-use-multiple-modules-in-one-go-workarea" class="header-anchor"&gt;&lt;/a&gt;How to use multiple modules in one Go workarea
&lt;/h2&gt;&lt;h3 id="1-create-a-new-go-workarea"&gt;&lt;a href="#1-create-a-new-go-workarea" class="header-anchor"&gt;&lt;/a&gt;1. Create a new Go workarea:
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p go-modules
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cd go-modules
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go mod init example.com/go-modules
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="2-create-a-simple-go-file-in-the-root-of-the-workarea"&gt;&lt;a href="#2-create-a-simple-go-file-in-the-root-of-the-workarea" class="header-anchor"&gt;&lt;/a&gt;2. Create a simple Go file in the root of the workarea:
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello, world.\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="3-create-a-new-go-module-in-a-subdirectory"&gt;&lt;a href="#3-create-a-new-go-module-in-a-subdirectory" class="header-anchor"&gt;&lt;/a&gt;3. Create a new Go module in a subdirectory:
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p adder
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cd adder
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go mod init example.com/go-modules/adder
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the following Go file in the &lt;code&gt;adder&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;adder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Add&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="4-use-the-adder-package-in-the-main-package"&gt;&lt;a href="#4-use-the-adder-package-in-the-main-package" class="header-anchor"&gt;&lt;/a&gt;4. Use the &lt;code&gt;adder&lt;/code&gt; package in the &lt;code&gt;main&lt;/code&gt; package:
&lt;/h3&gt;&lt;p&gt;You cannot simply import the &lt;code&gt;adder&lt;/code&gt; package in the &lt;code&gt;main&lt;/code&gt; package because they are in different modules.&lt;/p&gt;
&lt;p&gt;One way to use the &lt;code&gt;adder&lt;/code&gt; package is to publish it and use &lt;code&gt;go get&lt;/code&gt; to download it as the &lt;code&gt;main&lt;/code&gt; dependency. However,
this is impractical for local development and doesn&amp;rsquo;t make sense when we explicitly want to use multiple modules in one
repository.&lt;/p&gt;
&lt;p&gt;The proper way is to use a &lt;a class="link" href="https://go.dev/ref/mod#workspaces" target="_blank" rel="noopener"
&gt;workspace, declared in the go.work file&lt;/a&gt;, introduced in
Go 1.18.&lt;/p&gt;
&lt;p&gt;In the top level of the workarea, create a &lt;code&gt;go.work&lt;/code&gt; file with all the modules in the subdirectories:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go work use -r .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The resulting &lt;code&gt;go.work&lt;/code&gt; file will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go 1.23.2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;use (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ./adder
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, you can import the &lt;code&gt;adder&lt;/code&gt; package in the &lt;code&gt;main&lt;/code&gt; package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;example.com/go-modules/adder&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello, world.\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Print&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;myadder&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Add&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="should-i-use-multiple-go-modules-in-one-repository"&gt;&lt;a href="#should-i-use-multiple-go-modules-in-one-repository" class="header-anchor"&gt;&lt;/a&gt;Should I use multiple Go modules in one repository?
&lt;/h2&gt;&lt;p&gt;Generally, it is not recommended to use multiple Go modules in one repository. However, there are some cases where it
makes sense, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Temporarily pull in a third-party module to add a feature before this feature is merged upstream.&lt;/li&gt;
&lt;li&gt;Work on multiple interdependent modules that can be versioned and released independently.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usually, it is better to use packages within a single module to organize and decouple code.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Read the follow-up article on &lt;a class="link" href="../go-package-dependencies/" &gt;how to find package dependencies of a Go package&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also &lt;a class="link" href="../software-modularity/" &gt;explained why modularity is important in software&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Recently, we covered &lt;a class="link" href="../method-overriding-in-go/" &gt;method overriding in Go&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also wrote about &lt;a class="link" href="../staticcheck-go-linter/" &gt;using the staticcheck linter on a large Go project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Previously, we described &lt;a class="link" href="../go-json-unmarshal/" &gt;how to use Go to unmarshal JSON null, set, and missing fields&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also published an article on &lt;a class="link" href="../go-test-execution-time/" &gt;accurately measuring the execution time of Go tests&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="multiple-modules-in-one-go-project-on-github"&gt;&lt;a href="#multiple-modules-in-one-go-project-on-github" class="header-anchor"&gt;&lt;/a&gt;Multiple modules in one Go project on GitHub
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/getvictor/go-modules" target="_blank" rel="noopener"
&gt;Example Go project with multiple modules&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="watch-an-explanation-of-go-modules-and-packages-along-with-an-example-of-using-multiple-modules-in-one-repository"&gt;&lt;a href="#watch-an-explanation-of-go-modules-and-packages-along-with-an-example-of-using-multiple-modules-in-one-repository" class="header-anchor"&gt;&lt;/a&gt;Watch an explanation of Go modules and packages, along with an example of using multiple modules in one repository
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/EdV1rx5613g"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Is staticcheck linter useful for my Go project?</title><link>https://victoronsoftware.com/posts/staticcheck-go-linter/</link><pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/staticcheck-go-linter/</guid><description>&lt;img src="https://victoronsoftware.com/posts/staticcheck-go-linter/staticcheck-go-linter-headline.png" alt="Featured image of post Is staticcheck linter useful for my Go project?" /&gt;&lt;h2 id="what-is-staticcheck"&gt;&lt;a href="#what-is-staticcheck" class="header-anchor"&gt;&lt;/a&gt;What is staticcheck?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://staticcheck.dev/" target="_blank" rel="noopener"
&gt;Staticcheck&lt;/a&gt; is a Go linter that checks your Go code for bugs and performance issues. It is a
powerful tool that can help you find issues in your code before they become problematic. Staticcheck is one of the
default linters in the &lt;a class="link" href="https://golangci-lint.run/" target="_blank" rel="noopener"
&gt;golangci-lint&lt;/a&gt; tool.&lt;/p&gt;
&lt;h2 id="run-staticcheck-on-your-go-project"&gt;&lt;a href="#run-staticcheck-on-your-go-project" class="header-anchor"&gt;&lt;/a&gt;Run staticcheck on your Go project
&lt;/h2&gt;&lt;p&gt;In this example, we will enable staticcheck via the &lt;code&gt;golangci-lint&lt;/code&gt; tool in a large Go project. The &lt;code&gt;golangci-lint&lt;/code&gt; tool
is a lint runner that runs many linters in parallel. It is a great tool to use in your CI/CD pipeline to catch issues
early.&lt;/p&gt;
&lt;h3 id="install-golangci-lint"&gt;&lt;a href="#install-golangci-lint" class="header-anchor"&gt;&lt;/a&gt;Install golangci-lint
&lt;/h3&gt;&lt;p&gt;To install the &lt;code&gt;golangci-lint&lt;/code&gt; tool, you can use one of the options in
&lt;a class="link" href="https://golangci-lint.run/welcome/install/" target="_blank" rel="noopener"
&gt;golangci-lint install documentation&lt;/a&gt;. We install it using the following
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.61.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Although the documentation does not recommend this way of installing from source, we use it to ensure that our version
of &lt;code&gt;golangci-lint&lt;/code&gt; is compiled using the same Go version as our project. We previously encountered issues with
&lt;code&gt;golangci-lint&lt;/code&gt; compiled with a different Go version.&lt;/p&gt;
&lt;p&gt;Check the version of &lt;code&gt;golangci-lint&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;golangci-lint --version
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Sample output:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;golangci-lint has version v1.61.0 built with go1.23.1 from (unknown, modified: ?, mod sum: &amp;#34;h1:VvbOLaRVWmyxCnUIMTbf1kDsaJbTzH20FAMXTAlQGu8=&amp;#34;) on (unknown)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="run-golangci-lint-with-staticcheck"&gt;&lt;a href="#run-golangci-lint-with-staticcheck" class="header-anchor"&gt;&lt;/a&gt;Run golangci-lint with staticcheck
&lt;/h3&gt;&lt;p&gt;You can run &lt;code&gt;staticcheck&lt;/code&gt; using the &lt;code&gt;golangci-lint&lt;/code&gt; tool. In the root of your Go project, run the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;golangci-lint run --disable-all --enable staticcheck
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command turns off all default linters and enables only the &lt;code&gt;staticcheck&lt;/code&gt; linter. You can view the complete list of
run options with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;golangci-lint run --help
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For our project, we add a few more flags to the &lt;code&gt;golangci-lint run&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;golangci-lint run --disable-all --enable staticcheck --timeout 10m --max-same-issues &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; --max-issues-per-linter &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; --exclude-dirs ./node_modules
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="analyze-and-fix-staticcheck-issues"&gt;&lt;a href="#analyze-and-fix-staticcheck-issues" class="header-anchor"&gt;&lt;/a&gt;Analyze and fix staticcheck issues
&lt;/h2&gt;&lt;h3 id="sa1019---using-a-deprecated-function-variable-constant-or-field"&gt;&lt;a href="#sa1019---using-a-deprecated-function-variable-constant-or-field" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="https://staticcheck.dev/docs/checks#SA1019" target="_blank" rel="noopener"
&gt;SA1019 - Using a deprecated function, variable, constant or field&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;After running the linter, the first thing we notice is a considerable number of
&lt;a class="link" href="https://staticcheck.dev/docs/checks#SA1019" target="_blank" rel="noopener"
&gt;SA1019&lt;/a&gt; fails flagging deprecations, such as:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;cmd/osquery-perf/agent.go:2574:2: SA1019: rand.Seed has been deprecated since Go 1.20 and an alternative has been available since Go 1.0: As of Go 1.20 there is no reason to call Seed with a random value. Programs that call Seed with a known value to get a specific sequence of results should use New(NewSource(seed)) to obtain a local random generator. (staticcheck)
rand.Seed(*randSeed)
^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;or&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;server/service/appconfig.go:970:5: SA1019: customSettings[i].Labels is deprecated: the Labels field is now deprecated, it is superseded by LabelsIncludeAll, so any value set via this field will be transferred to LabelsIncludeAll. (staticcheck)
customSettings[i].Labels = nil
^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first fail flags a Go library depreciation issue. Although we could fix it, we are not worried because of Go&amp;rsquo;s
commitment to backward compatibility.&lt;/p&gt;
&lt;p&gt;The second &lt;code&gt;SA1019&lt;/code&gt; deprecation fail flags an internal depreciation within our app. However, we must maintain many
deprecated functions within our app for backward compatibility until they can be removed with the next major release.
So, many of these failures cannot be fixed. We could waive each one, but that would be a lot of busy work.&lt;/p&gt;
&lt;p&gt;Enabling &lt;code&gt;SA1019&lt;/code&gt; as a default &lt;code&gt;staticcheck&lt;/code&gt; rule is a mistake. We suspect many potential users of &lt;code&gt;staticcheck&lt;/code&gt; will be
turned off by the sheer number of these fails and will simply turn off &lt;code&gt;staticcheck&lt;/code&gt; in their projects.&lt;/p&gt;
&lt;p&gt;We decide to suppress them for now by creating a custom configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;linters-settings&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;staticcheck&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;checks&lt;/span&gt;: [&lt;span style="color:#e6db74"&gt;&amp;#34;all&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;-ST1000&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;-ST1003&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;-ST1016&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;-ST1020&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;-ST1021&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;-ST1022&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;-SA1019&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We use the &lt;a class="link" href="https://staticcheck.dev/docs/configuration/#example-configuration" target="_blank" rel="noopener"
&gt;default staticcheck checks&lt;/a&gt; and turn off
the &lt;code&gt;SA1019&lt;/code&gt; check.&lt;/p&gt;
&lt;p&gt;We then run &lt;code&gt;golangci-lint&lt;/code&gt; with the custom configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;golangci-lint run --disable-all --enable staticcheck --config staticcheck.yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="sa1032---wrong-order-of-arguments-to-errorsis"&gt;&lt;a href="#sa1032---wrong-order-of-arguments-to-errorsis" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="https://staticcheck.dev/docs/checks/#SA1032" target="_blank" rel="noopener"
&gt;SA1032 - Wrong order of arguments to errors.Is&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;After rerunning the linter, we saw a &lt;code&gt;SA1032&lt;/code&gt; fail:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;server/datastore/mysql/vpp.go:1090:6: SA1032: arguments have the wrong order (staticcheck)
if errors.Is(sql.ErrNoRows, err) {
^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This failure is a good catch and a potential bug. We fix it by swapping the arguments:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;errors&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Is&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ErrNoRows&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="sa4005---field-assignment-that-will-never-be-observed-did-you-mean-to-use-a-pointer-receiver"&gt;&lt;a href="#sa4005---field-assignment-that-will-never-be-observed-did-you-mean-to-use-a-pointer-receiver" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="https://staticcheck.dev/docs/checks/#SA4005" target="_blank" rel="noopener"
&gt;SA4005 - Field assignment that will never be observed. Did you mean to use a pointer receiver?&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Another fail we saw was &lt;code&gt;SA4005&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;server/mail/users.go:44:2: SA4005: ineffective assignment to field PasswordResetMailer.CurrentYear (staticcheck)
r.CurrentYear = time.Now().Year()
^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The relevant Go code is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CurrentYear&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;time&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Now&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;Year&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;server&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;GetTemplate&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;server/mail/templates/password_reset.html&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;email_template&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;msg&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Buffer&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;msg&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;); &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, the &lt;code&gt;CurrentYear&lt;/code&gt; field was used in our template, but the linter could not detect it. We spent a few
minutes testing the template to ensure that the &lt;code&gt;CurrentYear&lt;/code&gt; field was being populated correctly. To waive this
failure, we add a comment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CurrentYear&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;time&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Now&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;Year&lt;/span&gt;() &lt;span style="color:#75715e"&gt;// nolint:staticcheck // SA4005 false positive for Go templates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="sa4006---a-value-assigned-to-a-variable-is-never-read-before-being-overwritten-forgotten-error-check-or-dead-code"&gt;&lt;a href="#sa4006---a-value-assigned-to-a-variable-is-never-read-before-being-overwritten-forgotten-error-check-or-dead-code" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="https://staticcheck.dev/docs/checks/#SA4006" target="_blank" rel="noopener"
&gt;SA4006 - A value assigned to a variable is never read before being overwritten. Forgotten error check or dead code?&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;We saw a lot of &lt;code&gt;SA4006&lt;/code&gt; fails in our codebase. It was the most common &lt;code&gt;staticcheck&lt;/code&gt; fail we encountered. Here is an
example:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;ee/fleetctl/updates_test.go:455:2: SA4006: this value of `repo` is never used (staticcheck)
repo, err = openRepo(tmpDir)
^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is a bug or a potential bug. The developer assigned a value to &lt;code&gt;repo&lt;/code&gt; but never used it. We fix it by removing the
assignment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;openRepo&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tmpDir&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="sa4009---a-function-argument-is-overwritten-before-its-first-use"&gt;&lt;a href="#sa4009---a-function-argument-is-overwritten-before-its-first-use" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="https://staticcheck.dev/docs/checks/#SA4009" target="_blank" rel="noopener"
&gt;SA4009 - A function argument is overwritten before its first use&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Another fail we saw was &lt;code&gt;SA4009&lt;/code&gt;. Here is an example:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;orbit/pkg/installer/installer.go:288:37: SA4009: argument ctx is overwritten before first use (staticcheck)
func (r *Runner) runInstallerScript(ctx context.Context, scriptContents string, installerPath string, fileName string) (string, int, error) {
^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is another bug or potential bug. A function argument is passed in but then immediately overwritten and never used.
This issue could be challenging to fix because it requires specific code knowledge.&lt;/p&gt;
&lt;h3 id="other-fails"&gt;&lt;a href="#other-fails" class="header-anchor"&gt;&lt;/a&gt;Other fails
&lt;/h3&gt;&lt;p&gt;We found a few other fails that were not as critical as the ones mentioned above. We fixed them as we went along. See
the video below for more details.&lt;/p&gt;
&lt;h2 id="overall-impressions"&gt;&lt;a href="#overall-impressions" class="header-anchor"&gt;&lt;/a&gt;Overall impressions
&lt;/h2&gt;&lt;p&gt;Overall, we like the &lt;code&gt;staticcheck&lt;/code&gt; linter. It found many bugs or potential bugs and provided a lot of value.&lt;/p&gt;
&lt;p&gt;We did have to ignore the &lt;code&gt;SA1019&lt;/code&gt; check and encountered an &lt;code&gt;SA4005&lt;/code&gt; false positive.&lt;/p&gt;
&lt;p&gt;We will enable it in our CI/CD pipeline and continue to use it in our project.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;See &lt;a class="link" href="../code-complexity-metrics/" &gt;how to use linting to improve Go code complexity&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Recently, we wrote about
&lt;a class="link" href="../opentelemetry-with-jaeger/" &gt;finding performance issues with OpenTelemetry and Jaeger in your Go project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also wrote about &lt;a class="link" href="../optimizing-performance-of-go-app/" &gt;optimizing the performance of your Go code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also published an article on &lt;a class="link" href="../go-modules-and-packages/" &gt;Go modules and packages&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/fleetdm/fleet/tree/b4a5a1fb49666dd3b10cfd11ccf26190ad9d2902" target="_blank" rel="noopener"
&gt;Fleet repo we used when enabling staticcheck (as of this writing)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="watch-us-enable-staticcheck-in-our-go-project"&gt;&lt;a href="#watch-us-enable-staticcheck-in-our-go-project" class="header-anchor"&gt;&lt;/a&gt;Watch us enable staticcheck in our Go project
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/oqmVtN-Soig"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Is OpenTelemetry useful for the average software developer?</title><link>https://victoronsoftware.com/posts/opentelemetry-with-jaeger/</link><pubDate>Wed, 30 Oct 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/opentelemetry-with-jaeger/</guid><description>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-with-jaeger/opentelemetry-with-jaeger-headline.png" alt="Featured image of post Is OpenTelemetry useful for the average software developer?" /&gt;&lt;p&gt;This article discusses our first impressions of using OpenTelemetry with Jaeger.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#use-cases-for-opentelemetry-and-jaeger" &gt;Use cases for OpenTelemetry and Jaeger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#problems-with-opentelemetry-and-jaeger" &gt;Problems with OpenTelemetry and Jaeger&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-opentelemetry"&gt;&lt;a href="#what-is-opentelemetry" class="header-anchor"&gt;&lt;/a&gt;What is OpenTelemetry?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://opentelemetry.io/" target="_blank" rel="noopener"
&gt;OpenTelemetry&lt;/a&gt; is a set of APIs, libraries, agents, and instrumentation for collecting
distributed traces and metrics from your applications. It provides a standardized way to instrument your code and
collect telemetry data. OpenTelemetry supports programming languages like Java, Python, Go, JavaScript, etc.&lt;/p&gt;
&lt;p&gt;Tracing is a method of monitoring and profiling your application to understand how requests flow through your system.
For example, you can view the associated database calls and requests to other services for a single API request. Tracing
allows you to identify bottlenecks, latency issues, and other performance problems.&lt;/p&gt;
&lt;h2 id="what-is-jaeger"&gt;&lt;a href="#what-is-jaeger" class="header-anchor"&gt;&lt;/a&gt;What is Jaeger?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://www.jaegertracing.io/" target="_blank" rel="noopener"
&gt;Jaeger&lt;/a&gt; is an open-source, end-to-end distributed tracing system. Jaeger is popular for
tracing applications because of its scalability, ease of use, and integration with other tools. Jaeger provides a
web-based UI for viewing traces and analyzing performance data.&lt;/p&gt;
&lt;h2 id="add-opentelemetry-instrumentation-to-your-application"&gt;&lt;a href="#add-opentelemetry-instrumentation-to-your-application" class="header-anchor"&gt;&lt;/a&gt;Add OpenTelemetry instrumentation to your application
&lt;/h2&gt;&lt;p&gt;To start with OpenTelemetry and Jaeger, you must instrument your application with OpenTelemetry libraries.&lt;/p&gt;
&lt;p&gt;In our case, we used the OpenTelemetry Go SDK to instrument our Go application. We added the necessary dependencies to
our project.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;go get go.opentelemetry.io/otel@v1.31.0
go get go.opentelemetry.io/otel/exporters/otlp/otlptrace@v1.31.0
go get go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc@v1.31.0
go get go.opentelemetry.io/otel/sdk@v1.31.0
go get go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux@v0.56.0
go get github.com/XSAM/otelsql@v0.35.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux&lt;/code&gt; package is needed to instrument our
&lt;code&gt;gorilla/mux&lt;/code&gt; HTTP router.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;mux&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewRouter&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Use&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;otelmux&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Middleware&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;fleet&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;github.com/XSAM/otelsql&lt;/code&gt; package is needed to instrument our SQL database queries.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/XSAM/otelsql&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;semconv&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;go.opentelemetry.io/otel/semconv/v1.26.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;otelTracedDriverName&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;init&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;otelTracedDriverName&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;otelsql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Register&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;mysql&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;otelsql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithAttributes&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;semconv&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;DBSystemMySQL&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;otelsql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithSpanOptions&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;otelsql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SpanOptions&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// DisableErrSkip ignores driver.ErrSkip errors, which are frequently returned by the MySQL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// driver when certain optional methods or paths are not implemented/taken.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// For example, interpolateParams=false (the secure default) will not do a parametrized&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// sql.conn.query directly without preparing it first, causing driver.ErrSkip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;DisableErrSkip&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Omitting span for sql.conn.reset_session since it takes ~1us and doesn&amp;#39;t provide useful&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// information&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;OmitConnResetSession&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Omitting span for sql.rows since it is very quick and typically doesn&amp;#39;t provide useful&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// information beyond what&amp;#39;s already reported by prepare/exec/query&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;OmitRows&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// WithSpanNameFormatter allows us to customize the span name, which is especially useful for SQL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// queries run outside an HTTPS transaction, which do not belong to a parent span, show up as their&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// own trace, and would otherwise be named &amp;#34;sql.conn.query&amp;#34; or &amp;#34;sql.conn.exec&amp;#34;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;otelsql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithSpanNameFormatter&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;context&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Context&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;method&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;otelsql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Method&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; string(&lt;span style="color:#a6e22e"&gt;method&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Append query with extra whitespaces removed&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Join&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fields&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;), &lt;span style="color:#e6db74"&gt;&amp;#34; &amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;) &amp;gt; &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;[:&lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;] &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; string(&lt;span style="color:#a6e22e"&gt;method&lt;/span&gt;) &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;: &amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; panic(&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, use &lt;code&gt;otelTracedDriverName&lt;/code&gt; to open a connection to your database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;db&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sql&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Open&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;otelTracedDriverName&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;user:password@tcp(localhost:3306)/database&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When starting your application, you must create an OpenTelemetry exporter and a trace provider.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;context&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Background&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;otlptracegrpc&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewClient&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;otlpTraceExporter&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;otlptrace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;ctx&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; panic(&lt;span style="color:#e6db74"&gt;&amp;#34;Failed to initialize tracing&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;batchSpanProcessor&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewBatchSpanProcessor&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;otlpTraceExporter&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tracerProvider&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTracerProvider&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;trace&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;WithSpanProcessor&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;batchSpanProcessor&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;otel&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SetTracerProvider&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tracerProvider&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="launch-jaeger"&gt;&lt;a href="#launch-jaeger" class="header-anchor"&gt;&lt;/a&gt;Launch Jaeger
&lt;/h2&gt;&lt;p&gt;To view traces, you need to launch Jaeger. You can run Jaeger locally using Docker. Based on the
&lt;a class="link" href="https://www.jaegertracing.io/docs/1.62/getting-started/" target="_blank" rel="noopener"
&gt;Jaeger 1.62 Getting Started guide&lt;/a&gt;, you can run the following
command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run --rm --name jaeger &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -p 16686:16686 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -p 4317:4317 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt;jaegertracing/all-in-one:1.62.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our example, we are only exposing two ports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;4317&lt;/code&gt; for the Jaeger collector, which receives trace data using OpenTelemetry Protocol (OTLP) over gRPC&lt;/li&gt;
&lt;li&gt;&lt;code&gt;16686&lt;/code&gt; for the Jaeger UI&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="launch-your-application"&gt;&lt;a href="#launch-your-application" class="header-anchor"&gt;&lt;/a&gt;Launch your application
&lt;/h2&gt;&lt;p&gt;Before starting your application, you must set the OpenTelemetry endpoint to send traces to Jaeger. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;export OTEL_SERVICE_NAME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;fleet
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;export OTEL_EXPORTER_OTLP_ENDPOINT&lt;span style="color:#f92672"&gt;=&lt;/span&gt;http://localhost:4317
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, you can start your application.&lt;/p&gt;
&lt;h2 id="view-traces-in-jaeger"&gt;&lt;a href="#view-traces-in-jaeger" class="header-anchor"&gt;&lt;/a&gt;View traces in Jaeger
&lt;/h2&gt;&lt;p&gt;Open your browser and navigate to &lt;a class="link" href="http://localhost:16686" target="_blank" rel="noopener"
&gt;http://localhost:16686&lt;/a&gt; to view traces in the Jaeger UI.
Select your &lt;strong&gt;Service&lt;/strong&gt; name and click &lt;strong&gt;Find Traces&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can click into a trace to view the details of each span. You can see the duration, logs, and tags for each span. The
example below shows the HTTP request details and multiple SQL queries.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/opentelemetry-with-jaeger/example-jaeger-trace.png"
alt="Fleet hosts request with SQL queries to sessions, users, user_teams, and host tables."&gt;
&lt;/figure&gt;
&lt;h2 id="use-cases-for-opentelemetry-and-jaeger"&gt;&lt;a href="#use-cases-for-opentelemetry-and-jaeger" class="header-anchor"&gt;&lt;/a&gt;Use cases for OpenTelemetry and Jaeger
&lt;/h2&gt;&lt;p&gt;In a local software development environment, OpenTelemetry and Jaeger can be used to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fix bottlenecks and latency issues&lt;/li&gt;
&lt;li&gt;Understand how requests flow through your system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If a bottleneck is known or suspected, Jaeger can help you identify the root cause. For example, you can see which
database queries are taking the most time and optimize them.&lt;/p&gt;
&lt;p&gt;When developing new features, Jaeger can help you understand how requests flow through your system. This telemetry data
provides a quick check to ensure your new feature works as expected.&lt;/p&gt;
&lt;p&gt;In a production environment, OpenTelemetry and Jaeger can be used to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monitor and profile your applications&lt;/li&gt;
&lt;li&gt;Troubleshoot performance issues&lt;/li&gt;
&lt;li&gt;Optimize your applications and improve user experience&lt;/li&gt;
&lt;li&gt;Ensure your applications meet service level objectives (SLOs)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="problems-with-opentelemetry-and-jaeger"&gt;&lt;a href="#problems-with-opentelemetry-and-jaeger" class="header-anchor"&gt;&lt;/a&gt;Problems with OpenTelemetry and Jaeger
&lt;/h2&gt;&lt;p&gt;OpenTelemetry and Jaeger are powerful tools, yet their development use seems limited to fixing performance bottlenecks.
They cannot be used for general debugging out of the box since they don&amp;rsquo;t provide enough detail for each specific
request, such as the request body.&lt;/p&gt;
&lt;p&gt;In addition, missing spans can be a problem. If your application is not instrumented correctly, you may not see all the
spans you expect or know about in Jaeger. Our application lacks spans for some API endpoints, Redis transactions,
outbound HTTP requests, and asynchronous processes. Adding all of these spans requires additional development and QA
efforts.&lt;/p&gt;
&lt;p&gt;The Jaeger UI itself is basic and lacks some features. For example, regex search is missing out of the box, unless
Elasticsearch/OpenSearch storage is added.&lt;/p&gt;
&lt;p&gt;Our chosen SQL instrumentation library, &lt;a class="link" href="https://github.com/XSAM/otelsql" target="_blank" rel="noopener"
&gt;github.com/XSAM/otelsql&lt;/a&gt;, could be better. It
does not provide a way to trace the transaction lifecycle, and it creates many spans at the root level, clogging the
Jaeger UI.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../opentelemetry-for-devs/" &gt;OpenTelemetry: A developer&amp;rsquo;s best friend for production-ready code&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
How we changed our minds about OpenTelemetry and now advocate for developers to use it during development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../software-load-testing/" &gt;Top 5 metrics for software load testing performance&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Essential metrics to track when evaluating your application&amp;rsquo;s performance under load.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../optimizing-performance-of-go-app/" &gt;How to benchmark performance of Go serializers&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Learn effective techniques for measuring and optimizing Go code performance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/fleetdm/fleet/tree/6bc0b5dcd9214c6e3ff94fe657947aeccbdad352" target="_blank" rel="noopener"
&gt;Fleet Device Management repo with OpenTelemetry instrumentation (as of this writing)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="watch-opentelemetry-with-jaeger-video"&gt;&lt;a href="#watch-opentelemetry-with-jaeger-video" class="header-anchor"&gt;&lt;/a&gt;Watch OpenTelemetry with Jaeger video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/eQhdvU2gsmQ"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Use Go to unmarshal JSON null, set, and missing fields</title><link>https://victoronsoftware.com/posts/go-json-unmarshal/</link><pubDate>Wed, 09 Oct 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/go-json-unmarshal/</guid><description>&lt;img src="https://victoronsoftware.com/posts/go-json-unmarshal/go-json-unmarshal-headline.png" alt="Featured image of post Use Go to unmarshal JSON null, set, and missing fields" /&gt;&lt;h2 id="json-unmarshalling-use-cases"&gt;&lt;a href="#json-unmarshalling-use-cases" class="header-anchor"&gt;&lt;/a&gt;JSON unmarshalling use cases
&lt;/h2&gt;&lt;p&gt;When passing a JSON payload to a Go application, you may encounter situations where you must tell the difference between
set, missing, or null fields.&lt;/p&gt;
&lt;p&gt;For example, consider the following JSON payload:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;age&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;address&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;street&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;123 Main St&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;city&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Springfield&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can unmarshal this JSON payload using JSON tags and the following Go structs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Person&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Name&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;`json:&amp;#34;name&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Age&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#e6db74"&gt;`json:&amp;#34;age&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Address&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Address&lt;/span&gt; &lt;span style="color:#e6db74"&gt;`json:&amp;#34;address&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Address&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Street&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;`json:&amp;#34;street&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;City&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;`json:&amp;#34;city&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, we will not be able to tell the difference between these two JSON payloads:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{ &amp;quot;name&amp;quot;: null }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ &amp;quot;name&amp;quot;: &amp;quot;&amp;quot; }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go&amp;rsquo;s zero values are not distinguishable from missing fields when unmarshalling JSON.&lt;/p&gt;
&lt;p&gt;We can change the above struct to use pointers to identify null fields:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Person&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Name&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;`json:&amp;#34;name&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Age&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#e6db74"&gt;`json:&amp;#34;age&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Address&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;Address&lt;/span&gt; &lt;span style="color:#e6db74"&gt;`json:&amp;#34;address&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, we will still not be able to tell the difference between these two JSON payloads:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{ &amp;quot;name&amp;quot;: null }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{ }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these payloads will unmarshal into a &lt;code&gt;Person&lt;/code&gt; struct with all fields set to &lt;code&gt;nil&lt;/code&gt;, and we cannot distinguish
between a missing field and a field set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One reason to distinguish between missing and null fields is to avoid overwriting existing values with &lt;code&gt;null&lt;/code&gt; values.
For example, when &lt;code&gt;name&lt;/code&gt; is not specified in the JSON payload, we may want to keep the existing name value in the
&lt;code&gt;Person&lt;/code&gt; struct. But we may want to clear the name when &lt;code&gt;name&lt;/code&gt; is defined as &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="detecting-null-set-and-missing-json-fields-with-go"&gt;&lt;a href="#detecting-null-set-and-missing-json-fields-with-go" class="header-anchor"&gt;&lt;/a&gt;Detecting null, set, and missing JSON fields with Go
&lt;/h2&gt;&lt;p&gt;We can use custom unmarshalling logic by implementing the &lt;a class="link" href="https://pkg.go.dev/encoding/json#Unmarshaler" target="_blank" rel="noopener"
&gt;Unmarshaler&lt;/a&gt;
interface to detect the difference between null and missing fields. The &lt;code&gt;UnmarshalJSON&lt;/code&gt; method allows us to inspect the
JSON token stream and decide how to unmarshal the JSON payload. The critical insight is that &lt;code&gt;UnmarshalJSON&lt;/code&gt; is only
called when the field is present in the JSON payload. So, we can mark a &lt;code&gt;Set&lt;/code&gt; flag as &lt;code&gt;true&lt;/code&gt; when the field is present
and &lt;code&gt;false&lt;/code&gt; when it is not.&lt;/p&gt;
&lt;p&gt;Here is an example implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Any&lt;/span&gt;[&lt;span style="color:#a6e22e"&gt;T&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;any&lt;/span&gt;] &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Set&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Valid&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Value&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// MarshalJSON implements the json.Marshaler interface.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Only Value is marshaled, and only if Valid is true.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Any&lt;/span&gt;[&lt;span style="color:#a6e22e"&gt;T&lt;/span&gt;]) &lt;span style="color:#a6e22e"&gt;MarshalJSON&lt;/span&gt;() ([]&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Valid&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; []byte(&lt;span style="color:#e6db74"&gt;&amp;#34;null&amp;#34;&lt;/span&gt;), &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;json&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Marshal&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Value&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// UnmarshalJSON implements the json.Unmarshaler interface.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Set is always set to true, even if the JSON data was set to null.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Valid is set if the JSON data is not set to null.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;Any&lt;/span&gt;[&lt;span style="color:#a6e22e"&gt;T&lt;/span&gt;]) &lt;span style="color:#a6e22e"&gt;UnmarshalJSON&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Set&lt;/span&gt; = &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Valid&lt;/span&gt; = &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Equal&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;, []byte(&lt;span style="color:#e6db74"&gt;&amp;#34;null&amp;#34;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// The key was set to null, set value to zero/default value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;zero&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Value&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;zero&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// The key isn&amp;#39;t set to null&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;v&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;T&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;json&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Unmarshal&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;v&lt;/span&gt;); &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Value&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;v&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Valid&lt;/span&gt; = &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We used a generic type &lt;code&gt;T&lt;/code&gt; to allow &lt;code&gt;Any&lt;/code&gt; to work with any type. The &lt;code&gt;Valid&lt;/code&gt; flag distinguishes between &lt;code&gt;nil&lt;/code&gt; and
&lt;code&gt;non-nil&lt;/code&gt; values. The &lt;code&gt;Set&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt; only when the field is present in the JSON payload.&lt;/p&gt;
&lt;p&gt;Here is how we can use the &lt;code&gt;Any&lt;/code&gt; type in a &lt;code&gt;Person&lt;/code&gt; struct:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Person&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Name&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Any&lt;/span&gt;[&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;] &lt;span style="color:#e6db74"&gt;`json:&amp;#34;name&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Age&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Any&lt;/span&gt;[&lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;] &lt;span style="color:#e6db74"&gt;`json:&amp;#34;age&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Address&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Any&lt;/span&gt;[&lt;span style="color:#a6e22e"&gt;Address&lt;/span&gt;] &lt;span style="color:#e6db74"&gt;`json:&amp;#34;address&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="testing-the-custom-unmarshalling-logic"&gt;&lt;a href="#testing-the-custom-unmarshalling-logic" class="header-anchor"&gt;&lt;/a&gt;Testing the custom unmarshalling logic
&lt;/h2&gt;&lt;p&gt;The following example demonstrates how the &lt;code&gt;Any&lt;/code&gt; type works:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Form&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Name&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; &lt;span style="color:#e6db74"&gt;`json:&amp;#34;name&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Age&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; &lt;span style="color:#e6db74"&gt;`json:&amp;#34;age&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Config&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Form&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Any&lt;/span&gt;[&lt;span style="color:#a6e22e"&gt;Form&lt;/span&gt;] &lt;span style="color:#e6db74"&gt;`json:&amp;#34;form&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Member&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Any&lt;/span&gt;[&lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt;] &lt;span style="color:#e6db74"&gt;`json:&amp;#34;member&amp;#34;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tests&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;description&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;JSON&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Nothing set&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;`{}`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Set all fields&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;`{&amp;#34;form&amp;#34;: {&amp;#34;name&amp;#34;: &amp;#34;John&amp;#34;, &amp;#34;age&amp;#34;: 30}, &amp;#34;member&amp;#34;: false}`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Set only member field, and leave form fields unchanged&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;`{&amp;#34;member&amp;#34;: true}`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Set only the form field, and leave the member field unchanged&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;`{&amp;#34;form&amp;#34;: {&amp;#34;name&amp;#34;: &amp;#34;Jane&amp;#34;, &amp;#34;age&amp;#34;: 25}}`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Leave all fields unchanged&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;`{}`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Clear all fields&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;`{&amp;#34;form&amp;#34;: null, &amp;#34;member&amp;#34;: null}`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Set only form field&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;`{&amp;#34;form&amp;#34;: {&amp;#34;name&amp;#34;: &amp;#34;Chris&amp;#34;, &amp;#34;age&amp;#34;: 35}}`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;c&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Config&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;test&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;range&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tests&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;\nTest: %s\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;test&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;description&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;json&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Unmarshal&lt;/span&gt;([]byte(&lt;span style="color:#a6e22e"&gt;test&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;JSON&lt;/span&gt;), &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;c&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Input: %s\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;test&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;JSON&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%+v\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;c&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;json&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Marshal&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;c&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Output: %s\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The test output will show how the &lt;code&gt;Any&lt;/code&gt; type behaves when unmarshalling JSON payloads with different fields set,
missing, or set to &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Test: Nothing set
Input: {}
{Form:{Set:false Valid:false Value:{Name: Age:0}} Member:{Set:false Valid:false Value:false}}
Output: {&amp;#34;form&amp;#34;:null,&amp;#34;member&amp;#34;:null}
Test: Set all fields
Input: {&amp;#34;form&amp;#34;: {&amp;#34;name&amp;#34;: &amp;#34;John&amp;#34;, &amp;#34;age&amp;#34;: 30}, &amp;#34;member&amp;#34;: false}
{Form:{Set:true Valid:true Value:{Name:John Age:30}} Member:{Set:true Valid:true Value:false}}
Output: {&amp;#34;form&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;John&amp;#34;,&amp;#34;age&amp;#34;:30},&amp;#34;member&amp;#34;:false}
Test: Set only member field, and leave form fields unchanged
Input: {&amp;#34;member&amp;#34;: true}
{Form:{Set:true Valid:true Value:{Name:John Age:30}} Member:{Set:true Valid:true Value:true}}
Output: {&amp;#34;form&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;John&amp;#34;,&amp;#34;age&amp;#34;:30},&amp;#34;member&amp;#34;:true}
Test: Set only the form field, and leave the member field unchanged
Input: {&amp;#34;form&amp;#34;: {&amp;#34;name&amp;#34;: &amp;#34;Jane&amp;#34;, &amp;#34;age&amp;#34;: 25}}
{Form:{Set:true Valid:true Value:{Name:Jane Age:25}} Member:{Set:true Valid:true Value:true}}
Output: {&amp;#34;form&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;Jane&amp;#34;,&amp;#34;age&amp;#34;:25},&amp;#34;member&amp;#34;:true}
Test: Leave all fields unchanged
Input: {}
{Form:{Set:true Valid:true Value:{Name:Jane Age:25}} Member:{Set:true Valid:true Value:true}}
Output: {&amp;#34;form&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;Jane&amp;#34;,&amp;#34;age&amp;#34;:25},&amp;#34;member&amp;#34;:true}
Test: Clear all fields
Input: {&amp;#34;form&amp;#34;: null, &amp;#34;member&amp;#34;: null}
{Form:{Set:true Valid:false Value:{Name: Age:0}} Member:{Set:true Valid:false Value:false}}
Output: {&amp;#34;form&amp;#34;:null,&amp;#34;member&amp;#34;:null}
Test: Set only form field
Input: {&amp;#34;form&amp;#34;: {&amp;#34;name&amp;#34;: &amp;#34;Chris&amp;#34;, &amp;#34;age&amp;#34;: 35}}
{Form:{Set:true Valid:true Value:{Name:Chris Age:35}} Member:{Set:true Valid:false Value:false}}
Output: {&amp;#34;form&amp;#34;:{&amp;#34;name&amp;#34;:&amp;#34;Chris&amp;#34;,&amp;#34;age&amp;#34;:35},&amp;#34;member&amp;#34;:null}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="complete-code-on-go-playground"&gt;&lt;a href="#complete-code-on-go-playground" class="header-anchor"&gt;&lt;/a&gt;Complete code on Go Playground
&lt;/h2&gt;&lt;p&gt;The complete &lt;a class="link" href="https://go.dev/play/p/AXxgO20M0kI" target="_blank" rel="noopener"
&gt;Go code for unmarshalling JSON null, set, and missing fields&lt;/a&gt; is
available on the Go Playground.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we published an article on
&lt;a class="link" href="../optimizing-performance-of-go-app/" &gt;how to optimize the performance of a Go application&lt;/a&gt;. We benchmarked JSON
decoding vs &lt;a class="link" href="https://pkg.go.dev/encoding/gob" target="_blank" rel="noopener"
&gt;gob&lt;/a&gt; decoding in that article.&lt;/li&gt;
&lt;li&gt;In addition, we wrote about &lt;a class="link" href="..//get-args-from-stdin/" &gt;how to read program arguments from STDIN with Go&lt;/a&gt;, which is
more secure than using environment variables or command-line arguments.&lt;/li&gt;
&lt;li&gt;Also, we explained &lt;a class="link" href="../go-modules-and-packages/" &gt;the difference between Go modules and packages&lt;/a&gt;, which is essential
for organizing and managing Go code.&lt;/li&gt;
&lt;li&gt;In addition, we &lt;a class="link" href="../method-overriding-in-go/" &gt;explained method overriding in Go&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-use-go-to-unmarshal-json-null-set-and-missing-fields-accurately"&gt;&lt;a href="#watch-how-to-use-go-to-unmarshal-json-null-set-and-missing-fields-accurately" class="header-anchor"&gt;&lt;/a&gt;Watch how to use Go to unmarshal JSON null, set, and missing fields accurately
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/yHhk5wGNxk4"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to set up a remote development environment</title><link>https://victoronsoftware.com/posts/remote-development-environment/</link><pubDate>Sun, 22 Sep 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/remote-development-environment/</guid><description>&lt;img src="https://victoronsoftware.com/posts/remote-development-environment/remote-dev-environment-headline.png" alt="Featured image of post How to set up a remote development environment" /&gt;&lt;h1 id="why-set-up-a-remote-development-environment"&gt;&lt;a href="#why-set-up-a-remote-development-environment" class="header-anchor"&gt;&lt;/a&gt;Why set up a remote development environment?
&lt;/h1&gt;&lt;p&gt;A remote development environment can be beneficial for several reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Offload processing power&lt;/strong&gt;: Your local machine may not have enough processing power to run resource-intensive tasks.
By using a remote development environment, you can use more powerful hardware.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Consistent environment&lt;/strong&gt;: A remote development environment ensures all team members can work in the same
environment, reducing configuration issues and ensuring consistent behavior across different machines. For example,
developers may be using a mix of macOS, Windows, and Linux machines, which can lead to differences in behavior due to
operating system-specific issues.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multiple environments&lt;/strong&gt;: You can set up multiple environments for different projects or tasks without cluttering
your local machine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Access from anywhere&lt;/strong&gt;: A remote development environment allows you to access your work from any device with an
internet connection.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Collaboration&lt;/strong&gt;: You can easily collaborate with team members by sharing the same development environment. For
example, after coding a feature, the developer can hand off the environment to another engineer for review or QA.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: Keeping your code and development environment on a remote server reduces the risk of data loss in case
of local hardware failure or theft.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt;: You can quickly scale your development environment up or down based on your needs without affecting
your local machine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cost-effective&lt;/strong&gt;: A remote development environment can be more cost-effective than purchasing and maintaining
high-end hardware for your local machine.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="setting-up-a-remote-development-environment"&gt;&lt;a href="#setting-up-a-remote-development-environment" class="header-anchor"&gt;&lt;/a&gt;Setting up a remote development environment
&lt;/h1&gt;&lt;p&gt;For our development example, we will use a standalone server application connected to a database and a Redis cache. The
application uses a monolith repo with a frontend and a backend codebase.&lt;/p&gt;
&lt;h2 id="choose-a-cloud-provider"&gt;&lt;a href="#choose-a-cloud-provider" class="header-anchor"&gt;&lt;/a&gt;Choose a cloud provider
&lt;/h2&gt;&lt;p&gt;We used a &lt;a class="link" href="https://www.digitalocean.com/" target="_blank" rel="noopener"
&gt;Digital Ocean&lt;/a&gt; VM with 8GB of RAM, 4 CPUs, and a 160 GB disk, running Ubuntu
24.04 LTS for our remote development environment. We found that Digital Ocean provides VMs that are generally cheaper
than other cloud providers.&lt;/p&gt;
&lt;p&gt;Any other cloud provider, such as AWS, Google Cloud, or Azure, can also be used. Your choice of provider depends on your
specific requirements, budget, and familiarity with the platform.&lt;/p&gt;
&lt;p&gt;After spinning up the VM, we SSH&amp;rsquo;ed into the server, installed the necessary software for our application, and launched
the server.&lt;/p&gt;
&lt;p&gt;Since our server required multiple running processes, we used &lt;a class="link" href="https://github.com/tmux/tmux" target="_blank" rel="noopener"
&gt;tmux&lt;/a&gt; to manage multiple
terminal sessions. Tmux allowed us to create numerous panes and windows within a single terminal session, making it
easier to manage the server processes. We could disconnect from the server, and the tmux processes ran in the
background. When reconnected to the server, we could easily reattach to the tmux session and resume work. Additionally,
we used &lt;a class="link" href="https://iterm2.com/documentation-tmux-integration.html" target="_blank" rel="noopener"
&gt;iTerm2 tmux integration&lt;/a&gt; to enhance our terminal
experience.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/remote-development-environment/tmux-on-remote-server.png"
alt="4 open windows with running processes"&gt;&lt;figcaption&gt;
&lt;h4&gt;tmux running on remote dev server&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="connect-your-ide-to-the-remote-development-environment"&gt;&lt;a href="#connect-your-ide-to-the-remote-development-environment" class="header-anchor"&gt;&lt;/a&gt;Connect your IDE to the remote development environment
&lt;/h2&gt;&lt;p&gt;We used &lt;a class="link" href="https://www.jetbrains.com/" target="_blank" rel="noopener"
&gt;JetBrains IDE&lt;/a&gt; for development work and
&lt;a class="link" href="https://www.jetbrains.com/remote-development/gateway/" target="_blank" rel="noopener"
&gt;JetBrains Gateway&lt;/a&gt; to connect to our remote development server
using SSH. JetBrains Gateway automatically installed the IDE backend on the remote server and brought up a local client
of the IDE.&lt;/p&gt;
&lt;p&gt;In our case, we wanted to use one IDE for backend development (GoLand) and another IDE for frontend development
(WebStorm).&lt;/p&gt;
&lt;p&gt;We had trouble starting them up and could not run both IDEs simultaneously. Either one or both of them would disconnect
from the remote development server without an obvious way to fix the issue. We suspect the issue was due to insufficient
memory on the machine &amp;ndash; try to plan for around 4 GB of memory per IDE.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/remote-development-environment/jetbrains-disconnect.png"
alt="No Connection message in GoLand IDE"&gt;
&lt;/figure&gt;
&lt;p&gt;However, we could use one of the IDEs at a time, which was sufficient for most of our needs.&lt;/p&gt;
&lt;h1 id="using-a-remote-development-environment"&gt;&lt;a href="#using-a-remote-development-environment" class="header-anchor"&gt;&lt;/a&gt;Using a remote development environment
&lt;/h1&gt;&lt;p&gt;After setting up the remote development environment, we reviewed common development use cases to ensure that everything
was working as expected.&lt;/p&gt;
&lt;h2 id="make-a-code-change-and-restart-the-application-server"&gt;&lt;a href="#make-a-code-change-and-restart-the-application-server" class="header-anchor"&gt;&lt;/a&gt;Make a code change and restart the application server
&lt;/h2&gt;&lt;p&gt;We made a simple code change in the backend service, saved the file, and restarted the application server. We verified
that the change was reflected in the application.&lt;/p&gt;
&lt;p&gt;The compile time was slower than on our local machine, likely due to the remote server&amp;rsquo;s lower CPU count and total RAM
compared to our local machine.&lt;/p&gt;
&lt;h2 id="run-unit-tests"&gt;&lt;a href="#run-unit-tests" class="header-anchor"&gt;&lt;/a&gt;Run unit tests
&lt;/h2&gt;&lt;p&gt;We ran the unit tests for the backend service. The tests passed successfully.&lt;/p&gt;
&lt;h2 id="connect-to-the-database-and-redis-cache"&gt;&lt;a href="#connect-to-the-database-and-redis-cache" class="header-anchor"&gt;&lt;/a&gt;Connect to the database and Redis cache
&lt;/h2&gt;&lt;p&gt;From our local development machine, we connected to the development server&amp;rsquo;s database and Redis cache to verify that the
services were running correctly.&lt;/p&gt;
&lt;h2 id="reconnecting-to-remote-development-environment"&gt;&lt;a href="#reconnecting-to-remote-development-environment" class="header-anchor"&gt;&lt;/a&gt;Reconnecting to remote development environment
&lt;/h2&gt;&lt;p&gt;After opening up our local computer the next day, we found that the JetBrains Gateway and the IDE has disconnected from
the remote server. Refreshing the Gateway re-established the connection, and the IDE also showed as connected within 60
seconds or so.&lt;/p&gt;
&lt;h1 id="security-considerations"&gt;&lt;a href="#security-considerations" class="header-anchor"&gt;&lt;/a&gt;Security considerations
&lt;/h1&gt;&lt;p&gt;When setting up a remote development environment, consider the following security best practices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SSH key authentication&lt;/strong&gt;: For secure access to the remote server, use SSH key authentication instead of passwords.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Firewall rules&lt;/strong&gt;: Configure firewall rules to restrict access to the server to only necessary IP addresses.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Secure connections&lt;/strong&gt;: Use HTTPS for web applications and encrypted connections for database access.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data encryption&lt;/strong&gt;: Encrypt sensitive data at rest and in transit. Always encrypt sensitive data in the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="docker-firewall-rules"&gt;&lt;a href="#docker-firewall-rules" class="header-anchor"&gt;&lt;/a&gt;Docker firewall rules
&lt;/h2&gt;&lt;p&gt;Docker containers use &lt;code&gt;iptables&lt;/code&gt; rules to open ports for incoming traffic. We can
&lt;a class="link" href="https://docs.docker.com/engine/network/packet-filtering-firewalls/#restrict-external-connections-to-containers" target="_blank" rel="noopener"
&gt;restrict external connections to containers&lt;/a&gt;
by adding rules to the &lt;code&gt;DOCKER-USER&lt;/code&gt; chain, such as:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;iptables -I DOCKER-USER -i eth0 ! -s &amp;lt;your local IP&amp;gt; -j DROP
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Where &lt;code&gt;eth0&lt;/code&gt; is the network interface connected to the internet and &lt;code&gt;&amp;lt;your local IP&amp;gt;&lt;/code&gt; is the IP address of your local
machine. This rule blocks all incoming traffic to Docker from the internet except for your local IP.&lt;/p&gt;
&lt;p&gt;After setting up and testing your rules, you can persist them across restarts with the &lt;code&gt;iptables-persistent&lt;/code&gt; package or
other methods.&lt;/p&gt;
&lt;h1 id="overall-impressions"&gt;&lt;a href="#overall-impressions" class="header-anchor"&gt;&lt;/a&gt;Overall impressions
&lt;/h1&gt;&lt;p&gt;After using the remote development environment for a few days, we found it usable but not as smooth as working on a
local machine. For our use case, it is an excellent option for a secondary development environment or for working on a
resource-intensive feature.&lt;/p&gt;
&lt;p&gt;Some issues we encountered included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Latency&lt;/strong&gt;: Occasionally, clicking on an element or using a keyboard shortcut had a noticeable delay.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Missing features&lt;/strong&gt;: Some features, such as only searching inside text strings, were not available in the remote
development environment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Issues with plugins&lt;/strong&gt;: GitHub Copilot did not work out of the box; it did not provide suggestions in the editor. We
did not drill down to the issue, but a potential workaround is to use JetBrains&amp;rsquo;s code assistant plugin.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;We recently explained &lt;a class="link" href="../secure-mysql-docker" &gt;how to secure a MySQL Docker container for Zero Trust&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also discussed &lt;a class="link" href="../github-code-review-issues" &gt;the issues with GitHub&amp;rsquo;s code review process&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We wrote about &lt;a class="link" href="../google-sheets-api/" &gt;quickly editing a Google Sheets spreadsheet via the API&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also covered &lt;a class="link" href="../cloudfront-signed-urls/" &gt;creating secure signed URLs with AWS CloudFront&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="watch-how-to-set-up-a-remote-development-environment"&gt;&lt;a href="#watch-how-to-set-up-a-remote-development-environment" class="header-anchor"&gt;&lt;/a&gt;Watch how to set up a remote development environment
&lt;/h1&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/_VDtA9Tq-1E"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Top 3 issues with GitHub code review process</title><link>https://victoronsoftware.com/posts/github-code-review-issues/</link><pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/github-code-review-issues/</guid><description>&lt;img src="https://victoronsoftware.com/posts/github-code-review-issues/developer-on-tightrope-headline.png" alt="Featured image of post Top 3 issues with GitHub code review process" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#issue-1-codeowners-is-not-scalable" &gt;CODEOWNERS is not scalable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#issue-2-re-approvals-for-every-push" &gt;Re-approvals for every push&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#issue-3-impractical-to-maintain-a-protected-feature-branch" &gt;Impractical for protected feature branches&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Our team has been using GitHub to review the code for our open-source product. We have encountered several issues with
GitHub code reviews. The default GitHub code review process is not scalable and provides a poor developer experience.&lt;/p&gt;
&lt;h2 id="how-to-set-up-a-github-code-review-process"&gt;&lt;a href="#how-to-set-up-a-github-code-review-process" class="header-anchor"&gt;&lt;/a&gt;How to set up a GitHub code review process
&lt;/h2&gt;&lt;p&gt;GitHub admins can create a
&lt;a class="link" href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/managing-a-branch-protection-rule" target="_blank" rel="noopener"
&gt;branch protection rule&lt;/a&gt;
that requires a code review before merging the code to the main branch.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a representative branch protection rule:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/github-code-review-issues/pr-branch-protection-rule.png"
alt="Branch protection rule requiring code review before merging"&gt;&lt;figcaption&gt;
&lt;h4&gt;PR branch protection rule&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;When a developer creates a pull request, GitHub requires code reviews from all relevant owners specified by the
&lt;code&gt;CODEOWNERS&lt;/code&gt; file in the repository. If someone makes a new push to the PR, all the owners need to re-approve the PR.&lt;/p&gt;
&lt;p&gt;In a previous article, we covered &lt;a class="link" href="../find-code-owners-for-pull-request" &gt;how to find the required code owners for a PR&lt;/a&gt;.
This is another issue, but we will not discuss it in this article.&lt;/p&gt;
&lt;h2 id="issue-1-codeowners-is-not-scalable"&gt;&lt;a href="#issue-1-codeowners-is-not-scalable" class="header-anchor"&gt;&lt;/a&gt;Issue 1: CODEOWNERS is not scalable
&lt;/h2&gt;&lt;p&gt;GitHub uses a
&lt;a class="link" href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners" target="_blank" rel="noopener"
&gt;&lt;code&gt;CODEOWNERS&lt;/code&gt; file to define individuals or teams responsible for each file in the repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;CODEOWNERS&lt;/code&gt; file format favors fine-grained code ownership, where the last matching pattern takes precedence over
previous patterns. Here is an example from the GitHub documentation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;# In this example, @octocat owns any file in the `/apps`
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;# directory in the root of your repository except for the `/apps/github`
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;# subdirectory, as this subdirectory has its own owner @doctocat
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/apps/ @octocat
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/apps/github @doctocat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;CODEOWNERS&lt;/code&gt; file is not scalable for medium-to-large and even small organizations. As the number of code owners
grows, each pull request is likely to require approval from more code owners. Each code owner may request changes,
potentially leading to cycles and cycles of re-approvals.&lt;/p&gt;
&lt;p&gt;Tracking down multiple people to approve and re-approve a PR can be time-consuming and frustrating for developers. This
results in longer PR turnaround times, slower development velocity, and missed commitments.&lt;/p&gt;
&lt;p&gt;From a developer experience perspective, we want to make the code review process as smooth and efficient as possible,
which means one reviewer for one PR. This approach is feasible by manually inverting the
&lt;code&gt;last matching pattern takes precedence&lt;/code&gt; rule in the &lt;code&gt;CODEOWNERS&lt;/code&gt; file by always including the owner(s) from the
previous pattern. For example, we would rewrite the above owners as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/apps/ @octocat
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/apps/github @octocat @doctocat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Keeping the &lt;code&gt;CODEOWNERS&lt;/code&gt; file in this format may be cumbersome to do manually, but it can be done with a script.&lt;/p&gt;
&lt;h2 id="issue-2-re-approvals-for-every-push"&gt;&lt;a href="#issue-2-re-approvals-for-every-push" class="header-anchor"&gt;&lt;/a&gt;Issue 2: Re-approvals for every push
&lt;/h2&gt;&lt;p&gt;When a developer makes a new push to a PR, all the code owners need to re-approve it. This is a poor developer
experience, as it requires the code owners to review potentially the same code changes multiple times.&lt;/p&gt;
&lt;p&gt;The issue stems from the lack of fine-grained control over the following option:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/github-code-review-issues/dismiss-stale-pr-approvals.png"
alt="Dismiss stale pull request approvals when new commits are pushed"&gt;
&lt;/figure&gt;
&lt;p&gt;With multiple code owners, every code owner must re-approve every change.&lt;/p&gt;
&lt;p&gt;A code owner should not need to re-review code that didn&amp;rsquo;t change &amp;ndash; this is a waste of time and effort.&lt;/p&gt;
&lt;p&gt;With a single code owner, the reviewer must re-approve trivial or irrelevant changes, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fixing a typo in a comment&lt;/li&gt;
&lt;li&gt;fully accepting a suggestion from the reviewer&lt;/li&gt;
&lt;li&gt;re-generating an auto-generated file, such as documentation&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The required re-approvals can be frustrating and time-consuming for developers and code owners. They make developers
feel untrusted and inefficient.&lt;/p&gt;
&lt;p&gt;The main argument for requiring re-approvals is security—we don&amp;rsquo;t want to merge potentially malicious code. If that&amp;rsquo;s
the case, we should have a security review process in place, not a code review process. A security review can be done by
a separate individual and improved by automated tools.&lt;/p&gt;
&lt;p&gt;In addition, we should be able to completely exclude some files/directories from the code review process. For example,
generated files, such as documentation based on code changes, should not require code review. Other generated files,
such as testing mocks, may have CI/CD checks that ensure they are generated correctly, and they should not require code
review either.&lt;/p&gt;
&lt;h2 id="issue-3-impractical-to-maintain-a-protected-feature-branch"&gt;&lt;a href="#issue-3-impractical-to-maintain-a-protected-feature-branch" class="header-anchor"&gt;&lt;/a&gt;Issue 3: Impractical to maintain a protected feature branch
&lt;/h2&gt;&lt;p&gt;A protected feature branch requires code reviews before merging. Since all the commits on the feature branch have
already been reviewed and approved, it is considered safe to merge into the main branch.&lt;/p&gt;
&lt;p&gt;The main issue is that the developer cannot simply update this feature branch with the latest changes on the main
branch. They need PR approval from all the code owners who have already approved the same changes on the main branch.
This busy work is another example of a waste of time and effort.&lt;/p&gt;
&lt;p&gt;In addition, a feature branch may be long-lived and introduce changes across multiple areas of the code base. This means
that it may require approval from many code owners, which can be time-consuming and frustrating.&lt;/p&gt;
&lt;h2 id="solution-custom-github-action-to-manage-code-reviews"&gt;&lt;a href="#solution-custom-github-action-to-manage-code-reviews" class="header-anchor"&gt;&lt;/a&gt;Solution: Custom GitHub Action to manage code reviews
&lt;/h2&gt;&lt;p&gt;Instead of relying on the default GitHub code review process, we can create a custom GitHub Action to manage code
reviews. The custom GitHub Action can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;automatically identify a single reviewer for a PR (or identify a small group of reviewers, each of whom can approve
the PR)&lt;/li&gt;
&lt;li&gt;automatically exclude specific files/directories from the code review process&lt;/li&gt;
&lt;li&gt;automatically maintain the approval state of the PR when new commits meeting explicit criteria are pushed&lt;/li&gt;
&lt;li&gt;enable a usable and practical protected feature branch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an example &lt;a class="link" href="../typescript-github-action/" &gt;GitHub Action to replace GitHub&amp;rsquo;s pull request review process&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../engineering-transparency/" &gt;Why transparency beats everything else in engineering&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
How making work visible transforms teams from frustrated to high-performing through organizational transparency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../track-engineering-metrics/" &gt;How to track engineering metrics with GitHub Actions&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Implement automated tracking of engineering performance metrics using GitHub&amp;rsquo;s built-in tools and APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../git-merges-and-pull-requests" &gt;How git merge works with PRs&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Understand the mechanics behind pull request merges and how to optimize your git workflow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../github-reusable-workflows-and-steps" &gt;How to reuse GitHub workflows and steps&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Build maintainable CI/CD pipelines by creating reusable components for your GitHub Actions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../readable-code/" &gt;What is clean, readable code and why it matters?&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Discover why code readability directly impacts team productivity and how to measure it effectively.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" &gt;How to scale your codebase with evolutionary architecture&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Learn architectural patterns that help teams maintain velocity as codebases and organizations grow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../remote-development-environment" &gt;Set up a remote dev environment&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Configure development environments that enhance team collaboration and reduce onboarding friction.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-the-top-3-issues-with-github-code-reviews"&gt;&lt;a href="#watch-the-top-3-issues-with-github-code-reviews" class="header-anchor"&gt;&lt;/a&gt;Watch the top 3 issues with GitHub code reviews
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/RWnJ84vTK48"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to create an EXE installer for your program</title><link>https://victoronsoftware.com/posts/exe-installer/</link><pubDate>Wed, 11 Sep 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/exe-installer/</guid><description>&lt;img src="https://victoronsoftware.com/posts/exe-installer/exe-installer-headline.png" alt="Featured image of post How to create an EXE installer for your program" /&gt;&lt;h2 id="msi-versus-exe-installers"&gt;&lt;a href="#msi-versus-exe-installers" class="header-anchor"&gt;&lt;/a&gt;MSI versus EXE installers
&lt;/h2&gt;&lt;p&gt;When distributing software for Windows, you have two main options for installers: MSI and EXE. An MSI installer is a
Windows Installer package that contains installation information and files. It uses the Windows Installer service. On
the other hand, an EXE installer is a self-extracting executable file containing the installation files and an
installation program. EXE installers are more customizable and do not depend on the built-in Windows Installer
technology.&lt;/p&gt;
&lt;p&gt;This article will show how to create an EXE installer for a program using the Inno Setup tool.&lt;/p&gt;
&lt;h2 id="build-your-program"&gt;&lt;a href="#build-your-program" class="header-anchor"&gt;&lt;/a&gt;Build your program
&lt;/h2&gt;&lt;p&gt;We will create a simple Hello World program using the Go programming language for this example.&lt;/p&gt;
&lt;p&gt;With Go installed, we can build our program using the &lt;code&gt;go build&lt;/code&gt; command. For example, given the source code in
&lt;code&gt;main.go&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can build the program for Windows using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;GOOS&lt;span style="color:#f92672"&gt;=&lt;/span&gt;windows GOARCH&lt;span style="color:#f92672"&gt;=&lt;/span&gt;amd64 go build -o hello-world.exe main.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="download-and-install-inno-setup"&gt;&lt;a href="#download-and-install-inno-setup" class="header-anchor"&gt;&lt;/a&gt;Download and install Inno Setup
&lt;/h2&gt;&lt;p&gt;We will need to use a Windows machine to create an EXE installer.&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://www.jrsoftware.org/isinfo.php" target="_blank" rel="noopener"
&gt;Inno Setup&lt;/a&gt; is a free installer for Windows programs. You can download it from
the &lt;a class="link" href="https://www.jrsoftware.org/isdl.php" target="_blank" rel="noopener"
&gt;official website&lt;/a&gt;. Once you have downloaded the installer, run it and follow
the installation instructions.&lt;/p&gt;
&lt;h2 id="create-an-exe-installer"&gt;&lt;a href="#create-an-exe-installer" class="header-anchor"&gt;&lt;/a&gt;Create an EXE installer
&lt;/h2&gt;&lt;p&gt;Launch the &lt;code&gt;Inno Setup Compiler&lt;/code&gt; application. The main window will appear, with a toolbar and a script editor.&lt;/p&gt;
&lt;p&gt;On the Welcome modal, choose &lt;code&gt;Create a new script file using the Script Wizard&lt;/code&gt; and click &lt;code&gt;OK&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/exe-installer/inno-setup-welcome.png"
alt="Untitled Inno Setup Compile with Welcome modal open."&gt;
&lt;/figure&gt;
&lt;p&gt;Follow the instructions on several subsequent screens.&lt;/p&gt;
&lt;p&gt;On the &lt;code&gt;Application Files&lt;/code&gt; screen, add your program executable file and any other files, such as a README.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/exe-installer/inno-setup-application-files.png"
alt="Application Files window of Inno Setup Script Wizard. hello-world.exe and hello-world.txt are specified."&gt;
&lt;/figure&gt;
&lt;p&gt;Continue following the instructions.&lt;/p&gt;
&lt;p&gt;On the &lt;code&gt;Compiler Settings&lt;/code&gt; screen, select the file name for your installer.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/exe-installer/inno-setup-compiler-settings.png"
alt="Compiler Settings window of Inno Setup Script Wizard. hello-world-installer is specified as the compiler output base file name."&gt;
&lt;/figure&gt;
&lt;p&gt;Finally, click&amp;rsquo; Finish&amp;rsquo; after a couple more screens to generate the script.&lt;/p&gt;
&lt;p&gt;Click &lt;code&gt;Yes&lt;/code&gt; to compile the script.&lt;/p&gt;
&lt;p&gt;Click &lt;code&gt;No&lt;/code&gt; to save the script before compiling. If needed, it can be saved later.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/exe-installer/inno-setup-save-script.png"
alt="Inno Setup modal asking: Would you like to save the script before compiling?"&gt;
&lt;/figure&gt;
&lt;p&gt;The Inno Setup Compiler will create an EXE installer for your program and put it in the &lt;code&gt;Documents/Output&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;You can try running the installer to make sure it works as expected.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;In the past, we demonstrated &lt;a class="link" href="../code-signing-windows/" &gt;how to code sign a Windows application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Recently, we explained &lt;a class="link" href="../script-only-macos-install-package/" &gt;how to create a script-only macOS install package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="related-go-articles"&gt;&lt;a href="#related-go-articles" class="header-anchor"&gt;&lt;/a&gt;Related Go articles
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../go-test-execution-time/" &gt;How to measure Go test execution time and derive actionable insights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../optimizing-performance-of-go-app/" &gt;Go benchmarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-create-an-exe-installer"&gt;&lt;a href="#watch-how-to-create-an-exe-installer" class="header-anchor"&gt;&lt;/a&gt;Watch how to create an EXE installer
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/1YeRYIhWqtA"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to measure the execution time of Go tests accurately</title><link>https://victoronsoftware.com/posts/go-test-execution-time/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/go-test-execution-time/</guid><description>&lt;img src="https://victoronsoftware.com/posts/go-test-execution-time/crash-test-dummy-headline.png" alt="Featured image of post How to measure the execution time of Go tests accurately" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#accurately-measuring-test-execution-time" &gt;Accurately measuring test execution time&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-measure-test-execution-time"&gt;&lt;a href="#why-measure-test-execution-time" class="header-anchor"&gt;&lt;/a&gt;Why measure test execution time?
&lt;/h2&gt;&lt;p&gt;By speeding up your test suite, you&amp;rsquo;re improving developer experience and productivity. Faster tests mean faster feedback, which leads to quicker iterations and better code quality.&lt;/p&gt;
&lt;p&gt;When you run tests, you want to know how long they take to execute. This information can help you optimize your test suite and make it run faster. By measuring the execution time of your tests, you can identify slow tests and improve their performance.&lt;/p&gt;
&lt;h2 id="problems-with-current-measurement-tools"&gt;&lt;a href="#problems-with-current-measurement-tools" class="header-anchor"&gt;&lt;/a&gt;Problems with current measurement tools
&lt;/h2&gt;&lt;p&gt;We have yet to find a tool that provides detailed, actionable insights into the performance of Go tests.&lt;/p&gt;
&lt;p&gt;For example, running the &lt;code&gt;gotestsum tool slowest&lt;/code&gt; command from the &lt;a class="link" href="https://github.com/gotestyourself/gotestsum" target="_blank" rel="noopener"
&gt;gotestsum&lt;/a&gt; tool gave us the following output for our test suite:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;github.com/fleetdm/fleet/v4/server/datastore/mysql TestMDMApple 6m9.65s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestSoftware 4m8.9s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestPolicies 3m31s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestActivity 2m16.67s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestMDMWindows 2m14.85s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestMDMShared 2m10.27s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestVulnerabilities 2m7.98s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestPacks 1m59.2s
github.com/fleetdm/fleet/v4/server/worker TestAppleMDM 1m55.11s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestTeams 1m47.82s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestAppConfig 1m42.81s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestHosts 1m41.79s
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709183940 1m36.43s
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709132642 1m36.34s
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240725182118 1m35.95s
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240730171504 1m35.73s
github.com/fleetdm/fleet/v4/server/vulnerabilities/nvd TestTranslateCPEToCVE/recent_vulns 1m34.87s
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first thing to notice is that the numbers don&amp;rsquo;t add up. Our test suite takes around 14 minutes to run, but the times in the report add up to more than 14 minutes. This discrepancy makes it hard to identify the slowest tests.&lt;/p&gt;
&lt;p&gt;The second thing to notice is that our tests contain many subtests. The &lt;code&gt;TestMDMApple&lt;/code&gt; test contains over 40 subtests. We want to know the execution time of each subtest, not just the total time for the test.&lt;/p&gt;
&lt;p&gt;The third thing to notice is that the output does not provide any information regarding parallelism. We want to know if our tests run in parallel and how many run concurrently. We want to run tests in parallel when possible to speed up the test suite.&lt;/p&gt;
&lt;h2 id="understanding-parallelism-in-go-tests"&gt;&lt;a href="#understanding-parallelism-in-go-tests" class="header-anchor"&gt;&lt;/a&gt;Understanding parallelism in Go tests
&lt;/h2&gt;&lt;p&gt;Before measuring the execution time of our tests, we need to understand how Go tests run in parallel.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/go-test-execution-time/go-test-parallelism.svg"
alt="Sequence diagram of a go test run with two packages, two tests, and two subtests."&gt;
&lt;/figure&gt;
&lt;p&gt;When you run &lt;code&gt;go test&lt;/code&gt;, Go compiles each package in your test suite in a separate binary. It then runs each binary in parallel. The tests in different packages run concurrently. This behavior is controlled by the &lt;code&gt;-p&lt;/code&gt; flag, which defaults to &lt;code&gt;GOMAXPROCS&lt;/code&gt;, the number of CPUs on your machine.&lt;/p&gt;
&lt;p&gt;Within a package, tests run sequentially by default &amp;ndash; the tests in the same package run one after the other. However, you can run tests in parallel within a package by calling &lt;code&gt;t.Parallel()&lt;/code&gt; in your test functions. This behavior is controlled by the &lt;code&gt;-parallel&lt;/code&gt; flag, which also defaults to &lt;code&gt;GOMAXPROCS&lt;/code&gt;. So, in a system with 8 CPUs, running a test suite with many packages and parallel tests will run 8 packages concurrently and 8 tests within each package concurrently, for a total of 64 tests running concurrently.&lt;/p&gt;
&lt;p&gt;Each test function may have multiple subtests, which may have their own subtests, and so on. Subtests run sequentially by default. However, you can also run subtests in parallel by calling &lt;code&gt;t.Parallel()&lt;/code&gt; in your subtest functions.&lt;/p&gt;
&lt;h2 id="accurately-measuring-test-execution-time"&gt;&lt;a href="#accurately-measuring-test-execution-time" class="header-anchor"&gt;&lt;/a&gt;Accurately measuring test execution time
&lt;/h2&gt;&lt;p&gt;To measure the execution time of your tests, we must use the &lt;code&gt;-json&lt;/code&gt; flag with the &lt;code&gt;go test&lt;/code&gt; command. This flag outputs test results in JSON format, which we can parse and analyze.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Action&lt;/code&gt; field in the JSON output shows the start and end times of each test and subtest.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-08-26T19:22:51.969606869Z&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;run&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;TestCPEDB&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-08-26T19:22:51.96984165Z&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;run&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;TestCPEDB/test1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-08-26T19:22:51.969928132Z&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;TestCPEDB/test1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-08-26T19:22:51.969983777Z&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;run&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;TestCPEDB/test2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-08-26T19:22:51.970052987Z&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;pause&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;TestCPEDB/test2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-08-26T19:22:51.970090377Z&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;cont&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;TestCPEDB/test1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-08-26T19:22:51.973464469Z&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;cont&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;TestCPEDB/test2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-08-26T19:22:52.015505184Z&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;TestCPEDB/test1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Elapsed&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0.04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-08-26T19:22:52.015523238Z&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;TestCPEDB/test2&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Elapsed&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0.04&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-08-26T19:22:52.015527907Z&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;TestCPEDB&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Elapsed&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While parsing the JSON output, we can track how many tests are running in parallel. We can then adjust the execution time of each test by dividing the total time by the number of tests running concurrently. Since we don&amp;rsquo;t have access to the actual CPU time each test used, this is the best approximation we can get.&lt;/p&gt;
&lt;p&gt;When tests run in parallel, we typically see the &lt;code&gt;pause&lt;/code&gt; and &lt;code&gt;cont&lt;/code&gt; actions. If we see these actions, we know that the test or subtest is running in parallel.&lt;/p&gt;
&lt;p&gt;We created a parser called &lt;a class="link" href="https://github.com/getvictor/goteststats" target="_blank" rel="noopener"
&gt;goteststats&lt;/a&gt; that does these calculations.&lt;/p&gt;
&lt;h2 id="accurate-test-execution-time-measurement-in-practice"&gt;&lt;a href="#accurate-test-execution-time-measurement-in-practice" class="header-anchor"&gt;&lt;/a&gt;Accurate test execution time measurement in practice
&lt;/h2&gt;&lt;p&gt;By running our &lt;a class="link" href="https://github.com/getvictor/goteststats" target="_blank" rel="noopener"
&gt;goteststats&lt;/a&gt; parser on the JSON output of our test suite, we gained actionable insights into our tests&amp;rsquo; performance.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;WARNING: Stopped test not found in running tests: TestGenerateMDMApple/successful_run
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709132642: 8.142s (total: 2m12.806s parallel: 16)
github.com/fleetdm/fleet/v4/server/cron TestCalendarEvents1KHosts: 7.853s (total: 36.158s parallel: 4)
github.com/fleetdm/fleet/v4/server/cron TestEventForDifferentHost: 7.853s (total: 36.158s parallel: 4)
github.com/fleetdm/fleet/v4/cmd/fleet TestCronVulnerabilitiesCreatesDatabasesPath: 6.878s (total: 30.232s parallel: 4)
github.com/fleetdm/fleet/v4/server/vulnerabilities/nvd TestTranslateCPEToCVE/find_vulns_on_cpes: 6.849s (total: 1m34.89s parallel: 13)
github.com/fleetdm/fleet/v4/server/vulnerabilities/nvd TestTranslateCPEToCVE/recent_vulns: 6.849s (total: 1m34.89s parallel: 13)
github.com/fleetdm/fleet/v4/server/vulnerabilities/oval TestOvalAnalyzer/#load/invalid_vuln_path: 5.844s (total: 1m25.152s parallel: 14)
github.com/fleetdm/fleet/v4/server/vulnerabilities/oval TestOvalAnalyzer/analyzing_RHEL_software: 5.844s (total: 1m25.152s parallel: 14)
github.com/fleetdm/fleet/v4/server/vulnerabilities/oval TestOvalAnalyzer/analyzing_Ubuntu_software: 5.844s (total: 1m25.151s parallel: 14)
github.com/fleetdm/fleet/v4/cmd/fleet TestAutomationsSchedule: 5.699s (total: 14.213s parallel: 2)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240725182118: 5.623s (total: 1m37.577s parallel: 17)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709183940: 5.588s (total: 1m36.771s parallel: 17)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709124958: 5.52s (total: 1m35.622s parallel: 17)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240730171504: 5.517s (total: 1m35.74s parallel: 17)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240726100517: 5.418s (total: 1m33.987s parallel: 17)
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For a given test, we provide the adjusted time, the total time, and the average number of tests running concurrently with this test. The adjusted time is the time the test took to execute, which is also the time saved if we removed this test from the suite.&lt;/p&gt;
&lt;p&gt;The first thing to notice is that the numbers add up. The total time for the test suite is around 14 minutes, and the times in the report add up to around 14 minutes.&lt;/p&gt;
&lt;p&gt;The second thing to notice is that we now have the execution time of each subtest. This information is crucial for identifying slow tests and improving their performance.&lt;/p&gt;
&lt;p&gt;The third thing to notice is that we now have information about parallelism. We can see how many tests are running concurrently and how many tests are running in parallel. If we see a test with a low parallelism number, we know that this test is a bottleneck and should parallelized.&lt;/p&gt;
&lt;p&gt;The WARNING message indicates that the JSON output did not contain the start time of the test. This issue can happen if the console output of the code under test does not include a new line and gets mixed with the output of Go&amp;rsquo;s testing package. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Time&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-08-26T19:23:17.8084601Z&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Action&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;output&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Package&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/fleetdm/fleet/v4/cmd/fleetctl&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;TestGenerateMDMApple/CSR_API_call_fails&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;Output&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;requesting APNs CSR: GET /api/latest/fleet/mdm/apple/request_csr received status 502 Bad Gateway: FleetDM CSR request failed: bad request=== RUN TestGenerateMDMApple/successful_run\n&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="goteststats-on-github"&gt;&lt;a href="#goteststats-on-github" class="header-anchor"&gt;&lt;/a&gt;&lt;code&gt;goteststats&lt;/code&gt; on GitHub
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/getvictor/goteststats" target="_blank" rel="noopener"
&gt;goteststats&lt;/a&gt; is available on GitHub. You can use it to get detailed performance data for your Go test suite.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we wrote about &lt;a class="link" href="../optimizing-performance-of-go-app" &gt;optimizing the performance of Go applications&lt;/a&gt; and &lt;a class="link" href="../analyze-go-build/" &gt;analyzing Go build times&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;And &lt;a class="link" href="../readable-code/" &gt;how to measure and fix unreadable code&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also explored &lt;a class="link" href="../fuzz-testing-with-go" &gt;fuzz testing with Go&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In addition, we showed &lt;a class="link" href="../exe-installer" &gt;how to create an EXE installer for a Go program&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also published an article on &lt;a class="link" href="../go-modules-and-packages" &gt;using Go modules and packages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;And we wrote about &lt;a class="link" href="../track-engineering-metrics/" &gt;automatically tracking engineering metrics with Go&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-measure-the-execution-time-of-go-tests-accurately"&gt;&lt;a href="#watch-how-to-measure-the-execution-time-of-go-tests-accurately" class="header-anchor"&gt;&lt;/a&gt;Watch how to measure the execution time of Go tests accurately
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/caTDvS5vCjA"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to benchmark performance of Go serializers</title><link>https://victoronsoftware.com/posts/optimizing-performance-of-go-app/</link><pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/optimizing-performance-of-go-app/</guid><description>&lt;img src="https://victoronsoftware.com/posts/optimizing-performance-of-go-app/race-cars-headline.png" alt="Featured image of post How to benchmark performance of Go serializers" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#creating-go-benchmark" &gt;Creating a Go benchmark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#running-go-benchmarks" &gt;Running Go benchmarks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-benchmarking"&gt;&lt;a href="#what-is-benchmarking" class="header-anchor"&gt;&lt;/a&gt;What is benchmarking?
&lt;/h2&gt;&lt;p&gt;Performance optimization is a critical part of software development. Once your application has been released and is
being used by real users, you may need to optimize its performance. One way to do this is to benchmark your code to
identify bottlenecks and improve its performance. Benchmarking provides you with data to make informed decisions about
what parts of your code can be sped up and by how much.&lt;/p&gt;
&lt;p&gt;Benchmarking is the process of measuring your code&amp;rsquo;s performance. It involves running your code multiple times and
measuring how long it takes to execute. By running your code multiple times, you can get an average execution time,
which is more reliable than a one-off report.&lt;/p&gt;
&lt;h2 id="identifying-the-bottlenecks"&gt;&lt;a href="#identifying-the-bottlenecks" class="header-anchor"&gt;&lt;/a&gt;Identifying the bottlenecks
&lt;/h2&gt;&lt;p&gt;In our application, we deserialize and process large amounts of JSON data once every hour. We noticed that this process
was taking a long time for some of our users. First, we used
&lt;a class="link" href="https://github.com/google/pprof/blob/main/doc/README.md" target="_blank" rel="noopener"
&gt;Go pprof&lt;/a&gt; to enable profiling and generated a flame graph to
identify the bottlenecks in our code.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/optimizing-performance-of-go-app/go-pprof-flame-graph.png"
alt="Flame graph showing the execution time of different parts of the Go app"&gt;&lt;figcaption&gt;
&lt;h4&gt;Go pprof flame graph&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The flame graph showed us that the JSON decoding process took the most time. We benchmarked different serialization
libraries to find the fastest one for our use case.&lt;/p&gt;
&lt;h2 id="creating-go-benchmark"&gt;&lt;a href="#creating-go-benchmark" class="header-anchor"&gt;&lt;/a&gt;Creating a Go benchmark
&lt;/h2&gt;&lt;p&gt;In Go, you can write benchmarks using the built-in testing package. Benchmarks are written similarly to unit tests but
with the &lt;strong&gt;Benchmark&lt;/strong&gt; prefix instead of the &lt;strong&gt;Test&lt;/strong&gt; prefix.&lt;/p&gt;
&lt;p&gt;Before creating and running the benchmark, we generated 1000 test JSON files in the &lt;code&gt;testdata&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;To benchmark JSON decoding, we created the following benchmark.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;encoding/json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;testing&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;files&lt;/span&gt; = &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;itemsPerFile&lt;/span&gt; = &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;BenchmarkJSONImport&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;b&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;testing&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;B&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &amp;lt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;N&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;&lt;span style="color:#f92672"&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Read in the file (do not time)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;StopTimer&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fileNumber&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;os&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadFile&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Sprintf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;testdata/sample_%d.json&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fileNumber&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatal&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;StartTimer&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;samples&lt;/span&gt; []&lt;span style="color:#a6e22e"&gt;Sample&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;dec&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;json&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewDecoder&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;dec&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Decode&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;samples&lt;/span&gt;); &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatal&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(&lt;span style="color:#a6e22e"&gt;samples&lt;/span&gt;) &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;itemsPerFile&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;expected %d samples, got %d&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;itemsPerFile&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;samples&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Starting the function name with &lt;code&gt;Benchmark&lt;/code&gt; indicates to &lt;code&gt;go test&lt;/code&gt; that this is a benchmark.&lt;/p&gt;
&lt;p&gt;The testing package adjusts the number of iterations through the &lt;code&gt;for i := 0; i &amp;lt; b.N; i++&lt;/code&gt; loop until the function
lasts long enough to be timed reliably.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;b.StopTimer()&lt;/code&gt; and &lt;code&gt;b.StartTimer()&lt;/code&gt; calls exclude part of the code from the benchmark.&lt;/p&gt;
&lt;h2 id="running-go-benchmarks"&gt;&lt;a href="#running-go-benchmarks" class="header-anchor"&gt;&lt;/a&gt;Running Go benchmarks
&lt;/h2&gt;&lt;p&gt;To run all benchmarks, add &lt;code&gt;-bench=.&lt;/code&gt; flag to &lt;code&gt;go test&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go test -bench&lt;span style="color:#f92672"&gt;=&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result will look like this:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;goos: darwin
goarch: arm64
pkg: serializer
cpu: Apple M2 Pro
BenchmarkJSONImport-12 357 3324997 ns/op
PASS
ok serializer 1.868s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It tells us that unmarshalling a single file with &lt;code&gt;json.Decode&lt;/code&gt; takes an average of 3.3 milliseconds. The benchmark ran
the loop 357 times.&lt;/p&gt;
&lt;h2 id="benchmarking-encodinggob"&gt;&lt;a href="#benchmarking-encodinggob" class="header-anchor"&gt;&lt;/a&gt;Benchmarking encoding/gob
&lt;/h2&gt;&lt;p&gt;Next, we will benchmark the built-in &lt;a class="link" href="https://pkg.go.dev/encoding/gob" target="_blank" rel="noopener"
&gt;encoding/gob&lt;/a&gt; library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;BenchmarkGobImport&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;b&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;testing&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;B&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &amp;lt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;N&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;&lt;span style="color:#f92672"&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Read in the file (do not time)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;StopTimer&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fileNumber&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#f92672"&gt;%&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;os&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadFile&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Sprintf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;testdata/sample_%d.bin&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fileNumber&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatal&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;StartTimer&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// decode gob&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;samples&lt;/span&gt; []&lt;span style="color:#a6e22e"&gt;Sample&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;dec&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;gob&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewDecoder&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewReader&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;dec&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Decode&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;samples&lt;/span&gt;); &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatal&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; len(&lt;span style="color:#a6e22e"&gt;samples&lt;/span&gt;) &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;itemsPerFile&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;expected %d samples, got %d&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;itemsPerFile&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;samples&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running the two benchmarks gives us:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;BenchmarkJSONImport-12 360 3279579 ns/op
BenchmarkGobImport-12 2262 475469 ns/op
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The benchmark data shows that decoding with &lt;code&gt;encoding/gob&lt;/code&gt; takes almost 7 times faster than using &lt;code&gt;encoding/json&lt;/code&gt;. This
gives sufficient data to present to our management and argue for switching from JSON. In addition, we can benchmark
other serialization libraries to see if any of them are even faster.&lt;/p&gt;
&lt;p&gt;For additional data, we included reading the file in our benchmark numbers for a complete picture of the expected
speedup:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;BenchmarkJSONImport-12 360 3374064 ns/op
BenchmarkGobImport-12 2710 481935 ns/op
BenchmarkJSONImportFile-12 306 3746758 ns/op
BenchmarkGobImportFile-12 2176 554254 ns/op
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="go-benchmark-code-on-github"&gt;&lt;a href="#go-benchmark-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Go benchmark code on GitHub
&lt;/h2&gt;&lt;p&gt;The complete code is available on GitHub at: &lt;a class="link" href="https://github.com/getvictor/go-benchmark-serializers" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/go-benchmark-serializers&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../opentelemetry-for-devs/" &gt;OpenTelemetry for developers: From skeptic to advocate&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Learn how using OpenTelemetry during development leads to better production instrumentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../opentelemetry-with-jaeger/" &gt;Is OpenTelemetry useful for the average software developer?&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Explore the practical benefits and limitations of OpenTelemetry with Jaeger for development.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../software-load-testing/" &gt;Top 5 metrics for software load testing performance&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Discover the critical metrics to monitor when load testing your applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../go-test-execution-time/" &gt;Accurately measuring Go test execution time&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Master techniques for precise test timing measurements in Go projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../go-json-unmarshal/" &gt;Go JSON unmarshaling with null, set, and missing fields&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Handle complex JSON payloads effectively in your Go applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../fuzz-testing-with-go/" &gt;Creating fuzz tests in Go&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Strengthen your code with automated fuzz testing techniques.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-benchmark-go-serializers"&gt;&lt;a href="#watch-how-to-benchmark-go-serializers" class="header-anchor"&gt;&lt;/a&gt;Watch how to benchmark Go serializers
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/c0drQ2JUYmo"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Why you should use STDIN to read your program arguments</title><link>https://victoronsoftware.com/posts/get-args-from-stdin/</link><pubDate>Mon, 12 Aug 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/get-args-from-stdin/</guid><description>&lt;img src="https://victoronsoftware.com/posts/get-args-from-stdin/stdin-headline.png" alt="Featured image of post Why you should use STDIN to read your program arguments" /&gt;&lt;h2 id="stdin-is-more-secure-than-environment-variables-or-command-line-arguments"&gt;&lt;a href="#stdin-is-more-secure-than-environment-variables-or-command-line-arguments" class="header-anchor"&gt;&lt;/a&gt;STDIN is more secure than environment variables or command-line arguments
&lt;/h2&gt;&lt;p&gt;When you pass command-line arguments to a program, they are visible to anyone who can run the &lt;code&gt;ps&lt;/code&gt; command. Allowing others to read arguments is a security risk if the arguments contain sensitive information like passwords or API keys.&lt;/p&gt;
&lt;p&gt;Environment variables are also visible to anyone who can run the &lt;code&gt;ps&lt;/code&gt; command. They are also globally visible to the program, so any arbitrary code in your application can extract the environment variables.&lt;/p&gt;
&lt;p&gt;To get the environment variables of a process, run &lt;code&gt;ps eww &amp;lt;PID&amp;gt;&lt;/code&gt;. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ ps eww &lt;span style="color:#ae81ff"&gt;1710&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PID TTY STAT TIME COMMAND
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;1710&lt;/span&gt; pts/0 Ss+ 0:00 bash SYSTEMD_EXEC_PID&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1209&lt;/span&gt; SSH_AUTH_SOCK&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/run/user/1000/keyring/ssh SESSION_MANAGER&lt;span style="color:#f92672"&gt;=&lt;/span&gt;local/victor-ubuntu:@/tmp/.ICE-unix/1176,unix/victor-ubuntu:/tmp/.ICE-unix/1176 GNOME_TERMINAL_SCREEN&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/org/gnome/Terminal/screen/ab0b9d6a_a699_4bc5_bb53_628be016afa5 LANG&lt;span style="color:#f92672"&gt;=&lt;/span&gt;en_US.UTF-8 XDG_CURRENT_DESKTOP&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ubuntu:GNOME PWD&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/home/victor WAYLAND_DISPLAY&lt;span style="color:#f92672"&gt;=&lt;/span&gt;wayland-0 DISPLAY&lt;span style="color:#f92672"&gt;=&lt;/span&gt;:0 QT_IM_MODULE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ibus USER&lt;span style="color:#f92672"&gt;=&lt;/span&gt;victor DESKTOP_SESSION&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ubuntu XDG_MENU_PREFIX&lt;span style="color:#f92672"&gt;=&lt;/span&gt;gnome- HOME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/home/victor DBUS_SESSION_BUS_ADDRESS&lt;span style="color:#f92672"&gt;=&lt;/span&gt;unix:path&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/run/user/1000/bus SSH_AGENT_LAUNCHER&lt;span style="color:#f92672"&gt;=&lt;/span&gt;gnome-keyring _&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr/bin/gnome-session XDG_CONFIG_DIRS&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/etc/xdg/xdg-ubuntu:/etc/xdg VTE_VERSION&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;6800&lt;/span&gt; XDG_SESSION_DESKTOP&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ubuntu QT_ACCESSIBILITY&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; GNOME_DESKTOP_SESSION_ID&lt;span style="color:#f92672"&gt;=&lt;/span&gt;this-is-deprecated GNOME_SETUP_DISPLAY&lt;span style="color:#f92672"&gt;=&lt;/span&gt;:1 GTK_MODULES&lt;span style="color:#f92672"&gt;=&lt;/span&gt;gail:atk-bridge LOGNAME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;victor GNOME_TERMINAL_SERVICE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;:1.83 GNOME_SHELL_SESSION_MODE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ubuntu XDG_RUNTIME_DIR&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/run/user/1000 XMODIFIERS&lt;span style="color:#f92672"&gt;=&lt;/span&gt;@im&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ibus SHELL&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/bin/bash XDG_SESSION_TYPE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;wayland PATH&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/snap/bin USERNAME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;victor COLORTERM&lt;span style="color:#f92672"&gt;=&lt;/span&gt;truecolor XAUTHORITY&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/run/user/1000/.mutter-Xwaylandauth.R816R2 XDG_DATA_DIRS&lt;span style="color:#f92672"&gt;=&lt;/span&gt;/usr/share/ubuntu:/usr/local/share/:/usr/share/:/var/lib/snapd/desktop IM_CONFIG_PHASE&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt; TERM&lt;span style="color:#f92672"&gt;=&lt;/span&gt;xterm-256color GDMSESSION&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ubuntu XDG_SESSION_CLASS&lt;span style="color:#f92672"&gt;=&lt;/span&gt;user
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;STDIN is more secure because it is not visible to the &lt;code&gt;ps&lt;/code&gt; command and is not globally visible to the program. Thus, only the parts of the program that explicitly read from STDIN can access this data.&lt;/p&gt;
&lt;h2 id="how-to-read-program-arguments-from-stdin-with-go"&gt;&lt;a href="#how-to-read-program-arguments-from-stdin-with-go" class="header-anchor"&gt;&lt;/a&gt;How to read program arguments from STDIN with Go
&lt;/h2&gt;&lt;p&gt;In the code example below, we check if any data is being piped in from STDIN with &lt;code&gt;os.ModeNamedPipe&lt;/code&gt;. Then, we wait to read all the data from STDIN with &lt;code&gt;ioutil.ReadAll&lt;/code&gt;. Finally, we parse the STDIN data just like a shell would using the &lt;a class="link" href="https://github.com/kballard/go-shellquote" target="_blank" rel="noopener"
&gt;github.com/kballard/go-shellquote&lt;/a&gt; library and append it to any existing command-line arguments.&lt;/p&gt;
&lt;script type="application/javascript" src="https://gist.github.com/getvictor/c345f324ebf6dfa64df9a8c0919d6672.js"&gt;&lt;/script&gt;
&lt;h2 id="how-to-integrate-with-a-secret-manager"&gt;&lt;a href="#how-to-integrate-with-a-secret-manager" class="header-anchor"&gt;&lt;/a&gt;How to integrate with a secret manager
&lt;/h2&gt;&lt;p&gt;One way to securely pass sensitive information to a program is to store it in a secret manager like &lt;a class="link" href="https://developer.1password.com/docs/cli/secret-references" target="_blank" rel="noopener"
&gt;1Password&lt;/a&gt;. Then, you can read the secret from the secret manager and pass it to the program via STDIN. For example:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;echo --secret $(op read op://employee/example_server/secret) | go run read-args-from-stdin.go
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we discussed how to &lt;a class="link" href="../go-json-unmarshal/" &gt;unmarshal JSON payloads with null, set, and missing keys using Go&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previously, we wrote &lt;a class="link" href="../catch-missed-authorization-checks-during-software-development" &gt;how we catch missed authorization checks in our Go application&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="watch-how-to-read-program-arguments-from-stdin"&gt;&lt;a href="#watch-how-to-read-program-arguments-from-stdin" class="header-anchor"&gt;&lt;/a&gt;Watch how to read program arguments from STDIN
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Jg7xItfa6t8"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Find required code owner approvers for a PR in 3 steps</title><link>https://victoronsoftware.com/posts/find-code-owners-for-pull-request/</link><pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/find-code-owners-for-pull-request/</guid><description>&lt;img src="https://victoronsoftware.com/posts/find-code-owners-for-pull-request/codeowners-headline.png" alt="Featured image of post Find required code owner approvers for a PR in 3 steps" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#find-code-owners-from-command-line" &gt;Find code owners from the command line&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-are-github-code-owners"&gt;&lt;a href="#what-are-github-code-owners" class="header-anchor"&gt;&lt;/a&gt;What are GitHub code owners?
&lt;/h2&gt;&lt;p&gt;GitHub
&lt;a class="link" href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners" target="_blank" rel="noopener"
&gt;CODEOWNERS&lt;/a&gt;
is a file that defines the individuals or teams responsible for code in a repository. When a user creates a pull
request, GitHub uses the &lt;code&gt;CODEOWNERS&lt;/code&gt; file to suggest the appropriate reviewers for the pull request. This process helps
ensure that the right people review the code changes.&lt;/p&gt;
&lt;p&gt;Repository owners can enable branch protection rules that require the code owner of each changed file to approve the
pull request.&lt;/p&gt;
&lt;h2 id="the-problem-too-many-files-and-too-many-code-owners"&gt;&lt;a href="#the-problem-too-many-files-and-too-many-code-owners" class="header-anchor"&gt;&lt;/a&gt;The problem: too many files and too many code owners
&lt;/h2&gt;&lt;p&gt;It can be challenging to determine who needs to review a pull request in a large repository with many files and many
code owners. This challenge is especially true when the pull request touches many files.&lt;/p&gt;
&lt;p&gt;Many times, I&amp;rsquo;ve asked another engineer to approve my PR, and they approved it, but GitHub said that the PR still needed
approval from another code owner. I needed another approval because my PR changed another file with another code owner,
and I didn&amp;rsquo;t know about it.&lt;/p&gt;
&lt;h2 id="steps-to-find-the-minimum-required-code-owners"&gt;&lt;a href="#steps-to-find-the-minimum-required-code-owners" class="header-anchor"&gt;&lt;/a&gt;Steps to find the minimum required code owners
&lt;/h2&gt;&lt;p&gt;To find the minimum required code owners for a pull request, we can use these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get the list of changed files in the pull request.&lt;/li&gt;
&lt;li&gt;For each changed file, get the list of code owners.&lt;/li&gt;
&lt;li&gt;Find the minimum set of code owners that covers all the above lists.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="finding-the-code-owners-manually"&gt;&lt;a href="#finding-the-code-owners-manually" class="header-anchor"&gt;&lt;/a&gt;Finding the code owners manually
&lt;/h2&gt;&lt;p&gt;The above steps can be done manually by opening the pull request in GitHub and hovering over the blue CODEOWNERS icon
for each changed file to see the code owners. However, this can be time-consuming and error-prone.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/find-code-owners-for-pull-request/codeowners-hover.png"
alt="List of files, with code owners showing when hovering over the blue icon next to the file"&gt;&lt;figcaption&gt;
&lt;h4&gt;See the code owners on hover&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="find-code-owners-from-command-line"&gt;&lt;a href="#find-code-owners-from-command-line" class="header-anchor"&gt;&lt;/a&gt;Finding the code owners from the command line
&lt;/h2&gt;&lt;p&gt;To automate the above steps, we will need the following prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://cli.github.com/" target="_blank" rel="noopener"
&gt;GitHub CLI&lt;/a&gt; installed and logged in&lt;/li&gt;
&lt;li&gt;Command-line JSON processor &lt;a class="link" href="https://jqlang.github.io/jq/download/" target="_blank" rel="noopener"
&gt;jq&lt;/a&gt; installed&lt;/li&gt;
&lt;li&gt;A CODEOWNERS parser installed, such as &lt;a class="link" href="https://github.com/hmarr/codeowners" target="_blank" rel="noopener"
&gt;https://github.com/hmarr/codeowners&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the top directory containing your git repository, run the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gh pr view $MY_PR_NUMBER --json files | jq -r &lt;span style="color:#e6db74"&gt;&amp;#39;.files[] .path&amp;#39;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt;| xargs codeowners | tr -s &lt;span style="color:#e6db74"&gt;&amp;#39; &amp;#39;&lt;/span&gt; | cut -f2- -d &lt;span style="color:#e6db74"&gt;&amp;#39; &amp;#39;&lt;/span&gt; | sort -u
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;$MY_PR_NUMBER&lt;/code&gt; is the number of your pull request.&lt;/p&gt;
&lt;p&gt;The first part of the command, &lt;code&gt;gh pr view $MY_PR_NUMBER --json files&lt;/code&gt;, gets the list of changed files in the pull
request in JSON format. The second part, &lt;code&gt;jq -r '.files[] .path'&lt;/code&gt;, extracts the file paths from the JSON. The third
part, &lt;code&gt;xargs codeowners&lt;/code&gt;, runs the &lt;code&gt;codeowners&lt;/code&gt; command for each file. The fourth optional part, &lt;code&gt;tr -s ' '&lt;/code&gt;, removes
extra spaces. The fifth part, &lt;code&gt;cut -f2- -d ' '&lt;/code&gt;, removes the first column. The last part, &lt;code&gt;sort -u&lt;/code&gt;, sorts and removes
duplicates.&lt;/p&gt;
&lt;p&gt;The output will be the list of code owners for the changed files in the pull request. For example:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;(unowned)
@fleetdm/go
@getvictor @lucasmrod @roperzh @mostlikelee
@lucasmrod @getvictor @jacobshandling
@roperzh @gillespi314 @lucasmrod @getvictor
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, we can do additional processing, such as excluding some code owners.&lt;/p&gt;
&lt;p&gt;By visually inspecting the output, we can determine the minimum set of code owners that need to review the pull request.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we covered &lt;a class="link" href="../github-code-review-issues" &gt;top 3 issues with GitHub code review process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also wrote about &lt;a class="link" href="../git-merges-and-pull-requests" &gt;how merges work with GitHub pull requests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previously, we explained
&lt;a class="link" href="../github-reusable-workflows-and-steps" &gt;how to create reusable workflows and steps in GitHub Actions&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="watch-how-to-find-the-minimum-required-code-owners-for-a-pull-request"&gt;&lt;a href="#watch-how-to-find-the-minimum-required-code-owners-for-a-pull-request" class="header-anchor"&gt;&lt;/a&gt;Watch how to find the minimum required code owners for a pull request
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/RHW-ZELnuSg"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Add unit tests to Chrome extension (2024)</title><link>https://victoronsoftware.com/posts/add-unit-tests-to-chrome-extension/</link><pubDate>Fri, 26 Jul 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/add-unit-tests-to-chrome-extension/</guid><description>&lt;img src="https://victoronsoftware.com/posts/add-unit-tests-to-chrome-extension/chrome-jest-headline.png" alt="Featured image of post Add unit tests to Chrome extension (2024)" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#add-jest-to-the-project" &gt;Add Jest testing framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#write-a-unit-test" &gt;Write a unit test&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#review-unit-test-coverage" &gt;Review unit test coverage&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article is part of our &lt;a class="link" href="../chrome-extension" &gt;series on building a Chrome extension&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-add-unit-tests"&gt;&lt;a href="#why-add-unit-tests" class="header-anchor"&gt;&lt;/a&gt;Why add unit tests?
&lt;/h2&gt;&lt;p&gt;Unit tests help us catch bugs early, ensure our extension continues to work as expected in different scenarios, and make
it easier to refactor our code. In this article, we will add unit tests to our Chrome extension.&lt;/p&gt;
&lt;h2 id="add-jest-to-the-project"&gt;&lt;a href="#add-jest-to-the-project" class="header-anchor"&gt;&lt;/a&gt;Add Jest to the project
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://jestjs.io/" target="_blank" rel="noopener"
&gt;Jest&lt;/a&gt; is a popular JavaScript testing framework. We will use Jest to write and run unit tests for
our Chrome extension.&lt;/p&gt;
&lt;p&gt;To install Jest, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev jest jest-environment-jsdom ts-jest @types/jest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://www.npmjs.com/package/jest" target="_blank" rel="noopener"
&gt;jest&lt;/a&gt; is the testing framework&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jest-environment-jsdom&lt;/code&gt; simulates a browser environment for Jest tests&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.npmjs.com/package/ts-jest" target="_blank" rel="noopener"
&gt;ts-jest&lt;/a&gt; allows Jest to work with TypeScript&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@types/jest&lt;/code&gt; provides TypeScript definitions for Jest&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="configure-jest"&gt;&lt;a href="#configure-jest" class="header-anchor"&gt;&lt;/a&gt;Configure Jest
&lt;/h2&gt;&lt;p&gt;Create a &lt;code&gt;jest.config.ts&lt;/code&gt; file in the root of the project with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;JestConfigWithTsJest&lt;/span&gt; } &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ts-jest&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;JestConfigWithTsJest&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;setupFiles&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#34;./__mocks__/chrome.ts&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;testEnvironment&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;jsdom&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;transform&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;^.+.ts$&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#34;ts-jest&amp;#34;&lt;/span&gt;, {}],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;setupFiles&lt;/code&gt; option loads a mock for the Chrome API. In the next step, we will create this mock.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;testEnvironment&lt;/code&gt; option sets a browser testing environment by default. We can override the environment at the top
of each test file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; * @jest-environment jsdom
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;transform&lt;/code&gt; option specifies to process TypeScript test files with &lt;code&gt;ts-jest&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="create-a-mock-for-the-chrome-api"&gt;&lt;a href="#create-a-mock-for-the-chrome-api" class="header-anchor"&gt;&lt;/a&gt;Create a mock for the Chrome API
&lt;/h2&gt;&lt;p&gt;Our extension code relies on the Chrome API, which is unavailable in our unit test environment. We will create a mock
for the Chrome API to simulate its behavior in our tests.&lt;/p&gt;
&lt;p&gt;A mock is a fake implementation of a function or object that allows us to test our code in isolation. Mocks are helpful
for testing code that depends on external services or APIs.&lt;/p&gt;
&lt;p&gt;Create a &lt;code&gt;__mocks__&lt;/code&gt; folder in the root of the project. The &lt;code&gt;__mocks__&lt;/code&gt; name is a Jest convention for mock files. In
that folder, add a &lt;code&gt;chrome.ts&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// eslint-disable-next-line @typescript-eslint/ban-ts-comment -- disable ESLint check for the next line
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// @ts-nocheck -- this TS comment turns off TypeScript type checking for this file because we do not
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// mock the entire Chrome API, but only the parts we need
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;global&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;onInstalled&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;addListener&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;jest.fn&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;onMessage&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;addListener&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;jest.fn&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;onStartup&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;addListener&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;jest.fn&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sendMessage&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;jest.fn&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;jest&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;fn&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;jest&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;fn&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The empty &lt;code&gt;jest.fn()&lt;/code&gt; implementations can be replaced during testing with custom behavior using Jest&amp;rsquo;s mocking functions
using &lt;a class="link" href="https://jestjs.io/docs/jest-object#jestspyonobject-methodname" target="_blank" rel="noopener"
&gt;jest.spyOn&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="write-a-unit-test"&gt;&lt;a href="#write-a-unit-test" class="header-anchor"&gt;&lt;/a&gt;Write a unit test
&lt;/h2&gt;&lt;p&gt;We will test the &lt;code&gt;content.ts&lt;/code&gt; file in our first unit test. This file contains the logic for the content script that runs
on web pages when the extension is active. The content script blurs a page element that contains a user-defined keyword.&lt;/p&gt;
&lt;p&gt;Create a &lt;code&gt;content.test.ts&lt;/code&gt; file in the &lt;code&gt;src&lt;/code&gt; folder with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;blurFilter&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;observe&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt; } &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./content&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;describe&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;blur&amp;#34;&lt;/span&gt;, () &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;test&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;blur a secret&amp;#34;&lt;/span&gt;, () &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Define the document (web page) that we will test against
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;innerHTML&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;lt;div id=&amp;#34;testDiv&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;My secret&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;lt;/div&amp;gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Set value to blur
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;secret&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Start observing the document.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;observe&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Make sure the element is blurred as expected
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;testDiv&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;testDiv&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HTMLInputElement&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;expect&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;testDiv&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;toBeDefined&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;expect&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;testDiv&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;filter&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;toBe&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;blurFilter&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the above test, the Jest functions &lt;code&gt;describe&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; define a test suite and a test case, respectively. The
&lt;code&gt;expect&lt;/code&gt; function checks whether the test results match the expected values.&lt;/p&gt;
&lt;h2 id="run-the-unit-tests"&gt;&lt;a href="#run-the-unit-tests" class="header-anchor"&gt;&lt;/a&gt;Run the unit tests
&lt;/h2&gt;&lt;p&gt;The Jest unit test can be run using the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npx jest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result of the test should look like:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt; console.debug
blurred id:testDiv class: tag:DIV text:
&amp;#34;My secret&amp;#34;
at blurElement (src/content.ts:36:11)
at Array.forEach (&amp;lt;anonymous&amp;gt;)
at Array.forEach (&amp;lt;anonymous&amp;gt;)
at Array.forEach (&amp;lt;anonymous&amp;gt;)
at Array.forEach (&amp;lt;anonymous&amp;gt;)
PASS src/content.test.ts
blur
✓ blur a secret (15 ms)
Test Suites: 1 passed, 1 total
Tests: 1 passed, 1 total
Snapshots: 0 total
Time: 1.149 s
Ran all test suites.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Add the following script to the &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;test&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;jest&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now you can run the tests using the &lt;code&gt;npm test&lt;/code&gt; or &lt;code&gt;npm run test&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="review-unit-test-coverage"&gt;&lt;a href="#review-unit-test-coverage" class="header-anchor"&gt;&lt;/a&gt;Review unit test coverage
&lt;/h2&gt;&lt;p&gt;Code coverage measures how much of the code is tested by the unit tests. A high percentage indicates that most of the
code is tested and less likely to contain bugs. Code coverage is an important metric for assessing the quality of the
code. A common target for code coverage is 80% or higher.&lt;/p&gt;
&lt;p&gt;Jest can generate a code coverage report to show which parts of the code are covered by the unit tests. To create a
coverage report, add the &lt;code&gt;--coverage&lt;/code&gt; flag to the Jest command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npx jest --coverage
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The terminal output will include the code coverage summary:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;------------|---------|----------|---------|---------|--------------------------
File | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s
------------|---------|----------|---------|---------|--------------------------
All files | 45.23 | 48.57 | 42.85 | 45.23 |
content.ts | 45.23 | 48.57 | 42.85 | 45.23 | 22,26,50-54,62-69,88-117
------------|---------|----------|---------|---------|--------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The full report is available in the &lt;code&gt;coverage&lt;/code&gt; folder. Open the &lt;code&gt;coverage/lcov-report/index.html&lt;/code&gt; file in a browser to
view the detailed coverage report.&lt;/p&gt;
&lt;p&gt;Note that the code coverage report only includes the files in the test run. If you want to include all files in the
coverage report, we can add the &lt;code&gt;collectCoverageFrom&lt;/code&gt; option to the &lt;code&gt;jest.config.ts&lt;/code&gt; Jest configuration file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;collectCoverageFrom&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#34;src/**/*.ts&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, the report shows a complete picture:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;---------------|---------|----------|---------|---------|--------------------------
File | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s
---------------|---------|----------|---------|---------|--------------------------
All files | 16.96 | 30.9 | 10.71 | 16.96 |
background.ts | 0 | 0 | 0 | 0 | 1-21
common.ts | 0 | 0 | 0 | 0 | 17-19
content.ts | 45.23 | 48.57 | 42.85 | 45.23 | 22,26,50-54,62-69,88-117
options.ts | 0 | 0 | 0 | 0 | 2-31
popup.ts | 0 | 0 | 0 | 0 | 1-86
---------------|---------|----------|---------|---------|--------------------------
&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/add-unit-tests-to-chrome-extension/coverage-report.png"
alt="Coverage report web page showing some coverage for content.ts file and no coverage on other files"&gt;&lt;figcaption&gt;
&lt;h4&gt;HTML coverage report&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="adding-unit-tests-to-github-actions"&gt;&lt;a href="#adding-unit-tests-to-github-actions" class="header-anchor"&gt;&lt;/a&gt;Adding unit tests to GitHub Actions
&lt;/h2&gt;&lt;p&gt;To make sure that our unit tests are run automatically on every push to the repository, we can add them to a GitHub
Actions workflow. In the &lt;a class="link" href="../linting-and-formatting-typescript" &gt;Linting and formatting TypeScript&lt;/a&gt; article, we added
ESLint to GitHub Actions. We can add a step to run the Jest tests in the same workflow.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: |&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; npm run test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="unit-test-code-on-github"&gt;&lt;a href="#unit-test-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Unit test code on GitHub
&lt;/h2&gt;&lt;p&gt;The complete code is available on GitHub at: &lt;a class="link" href="https://github.com/getvictor/create-chrome-extension/tree/main/7-unit-tests" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/create-chrome-extension/tree/main/7-unit-tests&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="other-articles-on-unit-testing"&gt;&lt;a href="#other-articles-on-unit-testing" class="header-anchor"&gt;&lt;/a&gt;Other articles on Unit Testing
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../fuzz-testing-with-go" &gt;Explore fuzz testing with Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-we-set-up-unit-testing-for-our-chrome-extension"&gt;&lt;a href="#watch-how-we-set-up-unit-testing-for-our-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;Watch how we set up unit testing for our Chrome extension
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/EA11fnr8x8g"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Using a distributed lock in production distributed systems</title><link>https://victoronsoftware.com/posts/distributed-lock/</link><pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/distributed-lock/</guid><description>&lt;img src="https://victoronsoftware.com/posts/distributed-lock/distributed-lock-headline.png" alt="Featured image of post Using a distributed lock in production distributed systems" /&gt;&lt;p&gt;This article will present a problem we encountered in our production distributed system and how we solved it using a
distributed lock.&lt;/p&gt;
&lt;h2 id="the-problem--data-inconsistency"&gt;&lt;a href="#the-problem--data-inconsistency" class="header-anchor"&gt;&lt;/a&gt;The problem &amp;ndash; data inconsistency
&lt;/h2&gt;&lt;p&gt;Recently, we started using the Google Calendar API to monitor calendar changes. However, we noticed that it is possible
to receive a second callback while processing the first one. This second callback can lead to data inconsistency, race
conditions, and deadlocks.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/distributed-lock/data-consistency-problem.svg"
alt="Sequence diagram demonstrating data inconsistency issue without a distributed lock"&gt;&lt;figcaption&gt;
&lt;h4&gt;Data inconsistency&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In the above diagram, two servers, A and B, are processing calendar events. Server B receives a callback from Google
Calendar API stating that something has changed in the calendar. Google does not provide information about what event
changed, so server B must fetch the event of interest from the calendar. While server B is fetching the event, server A
also receives a callback. Server A also fetches the event from the calendar. Both servers now have the same event but
are unaware of each other&amp;rsquo;s actions. Server B updates the event with new information. Server A also updates the event
with different details, potentially overwriting or duplicating Server B&amp;rsquo;s changes. The calendar event is now in an
inconsistent state, as is the data in our database.&lt;/p&gt;
&lt;h2 id="what-is-a-distributed-lock"&gt;&lt;a href="#what-is-a-distributed-lock" class="header-anchor"&gt;&lt;/a&gt;What is a distributed lock?
&lt;/h2&gt;&lt;p&gt;A distributed lock is a mechanism that allows multiple servers to coordinate access to a shared resource. This mechanism
is widely used across the software industry to ensure data consistency in distributed systems.&lt;/p&gt;
&lt;p&gt;In our case, we need to make sure that only one server is processing a calendar event at a time. The distributed lock
will prevent the second server from processing the event until the first server completes.&lt;/p&gt;
&lt;h2 id="implementation-of-distributed-lock"&gt;&lt;a href="#implementation-of-distributed-lock" class="header-anchor"&gt;&lt;/a&gt;Implementation of distributed lock
&lt;/h2&gt;&lt;p&gt;We implemented a distributed lock using Redis. Redis is an in-memory data structure store that can be used as a
database, cache, and message broker. To acquire the lock, our server sets a key in Redis with a unique value using the
&lt;a class="link" href="https://redis.io/docs/latest/commands/set/" target="_blank" rel="noopener"
&gt;Redis SET command&lt;/a&gt;.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;SET mykey &amp;#34;myvalue&amp;#34; NX PX 60000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;NX&lt;/code&gt; option only sets the key if it does not exist. The &lt;code&gt;PX 60000&lt;/code&gt; option sets the key&amp;rsquo;s expiration time to 60
seconds. This ensures that the lock is released if the server crashes or does not release it in a timely manner.&lt;/p&gt;
&lt;p&gt;To release the lock, we &lt;code&gt;EVAL&lt;/code&gt; a Lua script that checks if the key&amp;rsquo;s value matches the unique value set by the server.
If the values match, the script deletes the key using the
&lt;a class="link" href="https://redis.io/docs/latest/commands/del/" target="_blank" rel="noopener"
&gt;Redis DEL command&lt;/a&gt;.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;if redis.call(&amp;#34;get&amp;#34;, KEYS[1]) == ARGV[1] then
return redis.call(&amp;#34;del&amp;#34;, KEYS[1])
else
return 0
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We only release the lock if the value matches, ensuring that the server that acquired the lock releases it.&lt;/p&gt;
&lt;h2 id="distributed-lock-solution"&gt;&lt;a href="#distributed-lock-solution" class="header-anchor"&gt;&lt;/a&gt;Distributed lock solution
&lt;/h2&gt;&lt;p&gt;With the distributed lock in place, we can make sure that only one server is processing a calendar event at a time.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/distributed-lock/distributed-lock-solution.svg"
alt="Sequence diagram demonstrating using distributed lock and a processing queue to solve data consistency issue"&gt;&lt;figcaption&gt;
&lt;h4&gt;Using distributed lock with a processing queue&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In the above diagram, server B receives a calendar callback and acquires a lock from Redis. Server A also gets a
callback but cannot acquire the lock since it has already been taken by Server B. Instead of waiting, Server A puts the
event in a processing queue. Once Server B finishes processing the event, it releases the lock. Server B then checks the
queue. Finding an event in the queue, the server starts a new worker process to process the events. The worker processes
all outstanding events in the queue and exits on completion.&lt;/p&gt;
&lt;h2 id="waiting-to-acquire-the-lock"&gt;&lt;a href="#waiting-to-acquire-the-lock" class="header-anchor"&gt;&lt;/a&gt;Waiting to acquire the lock
&lt;/h2&gt;&lt;p&gt;One issue we encountered was that another system process needed to acquire the lock. The process could keep trying to
obtain the lock, but there was no guarantee that it would be successful in a reasonable amount of time because it could
compete with other servers.&lt;/p&gt;
&lt;h2 id="fairness-in-acquiring-the-lock"&gt;&lt;a href="#fairness-in-acquiring-the-lock" class="header-anchor"&gt;&lt;/a&gt;Fairness in acquiring the lock
&lt;/h2&gt;&lt;p&gt;We implemented a fairness mechanism to ensure a priority process could acquire the lock.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/distributed-lock/distributed-fair-lock.svg"
alt="Sequence diagram demonstrating using a fairness mechanism to acquire a distributed lock"&gt;&lt;figcaption&gt;
&lt;h4&gt;Cron job is guaranteed to acquire the lock&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In the above diagram, the worker process has acquired the lock. Another process, a cron job, also needs to acquire the
lock. The cron job is a priority process that needs to run at a specific time. The cron job tries to acquire the lock
but fails because the worker process has it. The cron job sets a key in Redis that indicates that it wants to acquire
the lock next. This action tells the other servers not to acquire the lock. The cron job then retries acquiring the lock
until it is successful.&lt;/p&gt;
&lt;h2 id="distributed-lock-code-on-github"&gt;&lt;a href="#distributed-lock-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Distributed lock code on GitHub
&lt;/h2&gt;&lt;p&gt;We implemented the distributed lock logic in Go. The crucial part of the code is in the
&lt;a class="link" href="https://github.com/fleetdm/fleet/blob/7ae1fe95272fbbda7efe1e320552539768498839/server/service/redis_lock/redis_lock.go" target="_blank" rel="noopener"
&gt;redis_lock.go&lt;/a&gt;
file.&lt;/p&gt;
&lt;h2 id="distributed-lock-video"&gt;&lt;a href="#distributed-lock-video" class="header-anchor"&gt;&lt;/a&gt;Distributed lock video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/833TqEPfF18"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Add CSS framework to Chrome extension (2024)</title><link>https://victoronsoftware.com/posts/add-css-framework-to-chrome-extension/</link><pubDate>Wed, 10 Jul 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/add-css-framework-to-chrome-extension/</guid><description>&lt;img src="https://victoronsoftware.com/posts/add-css-framework-to-chrome-extension/chrome-tailwind-headline.png" alt="Featured image of post Add CSS framework to Chrome extension (2024)" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#add-css-to-webpack-bundle" &gt;Add CSS to the webpack bundle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#add-tailwind-css" &gt;Add Tailwind CSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#use-tailwind-css" &gt;Use Tailwind CSS utility classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article is part of our &lt;a class="link" href="../chrome-extension" &gt;complete guide to building a Chrome extension&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the previous articles on &lt;a class="link" href="../create-chrome-extension" &gt;creating a Chrome extension&lt;/a&gt; and
&lt;a class="link" href="../add-options-to-chrome-extension" &gt;adding an options page to a Chrome extension&lt;/a&gt;, we built two user interface pages &amp;ndash;
the popup and the options page. In this article, we will improve the look and maintainability of our extension by adding
a CSS framework.&lt;/p&gt;
&lt;h2 id="why-add-a-css-framework"&gt;&lt;a href="#why-add-a-css-framework" class="header-anchor"&gt;&lt;/a&gt;Why add a CSS framework?
&lt;/h2&gt;&lt;p&gt;Using a CSS framework like Tailwind CSS or Bootstrap can help you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Quickly style your extension&lt;/li&gt;
&lt;li&gt;Make your extension look professional&lt;/li&gt;
&lt;li&gt;Save time on writing custom CSS&lt;/li&gt;
&lt;li&gt;Improve the maintainability of your code&lt;/li&gt;
&lt;li&gt;Use pre-built and optimized components&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="add-css-to-webpack-bundle"&gt;&lt;a href="#add-css-to-webpack-bundle" class="header-anchor"&gt;&lt;/a&gt;Add CSS to the webpack bundle
&lt;/h2&gt;&lt;p&gt;Before we can use a CSS framework, we need to add CSS integration to our webpack bundle. In
&lt;a class="link" href="../add-webpack-and-typescript-to-chrome-extension" &gt;adding webpack to a Chrome extension&lt;/a&gt;, we set up webpack with a
static CSS file. We will include the CSS file as part of our JavaScript bundle. Although the CSS files can be kept
separate, we will include them in the JavaScript bundle since this is currently the best practice in web development.&lt;/p&gt;
&lt;p&gt;We will use &lt;a class="link" href="https://www.npmjs.com/package/style-loader" target="_blank" rel="noopener"
&gt;&lt;code&gt;style-loader&lt;/code&gt;&lt;/a&gt; to inject CSS into our JavaScript and
&lt;a class="link" href="https://www.npmjs.com/package/css-loader" target="_blank" rel="noopener"
&gt;&lt;code&gt;css-loader&lt;/code&gt;&lt;/a&gt; to convert our CSS file to a string. First, install the
packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev style-loader css-loader
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, update the &lt;code&gt;webpack.common.ts&lt;/code&gt; to include the rule for CSS files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;test&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/\.css$/&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;use&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;style-loader&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;css-loader&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Move the CSS files from the &lt;code&gt;static&lt;/code&gt; folder to the &lt;code&gt;src&lt;/code&gt; folder, and update the &lt;code&gt;popup.ts&lt;/code&gt; and &lt;code&gt;options.ts&lt;/code&gt; to import
the CSS files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./popup.css&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./options.css&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And remove the &lt;code&gt;link&lt;/code&gt; CSS references from the &lt;code&gt;static/popup.html&lt;/code&gt; and &lt;code&gt;static/options.html&lt;/code&gt; HTML files.&lt;/p&gt;
&lt;p&gt;When you run &lt;code&gt;npm run build&lt;/code&gt;, the CSS file content will be included in the JavaScript bundle. You can verify this by
inspecting the &lt;code&gt;dist&lt;/code&gt; folder and looking at the &lt;code&gt;popup.js&lt;/code&gt; and &lt;code&gt;options.js&lt;/code&gt; files.&lt;/p&gt;
&lt;h2 id="add-tailwind-css"&gt;&lt;a href="#add-tailwind-css" class="header-anchor"&gt;&lt;/a&gt;Add Tailwind CSS
&lt;/h2&gt;&lt;p&gt;We will use Tailwind CSS for our extension. It is a popular CSS framework focused on providing CSS utility classes.
First, install these packages and generate the TypeScript config file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev tailwindcss postcss-loader
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npx tailwindcss init --ts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a class="link" href="https://www.npmjs.com/package/postcss-loader" target="_blank" rel="noopener"
&gt;&lt;code&gt;postcss-loader&lt;/code&gt;&lt;/a&gt; is a webpack loader that processes CSS with PostCSS.
PostCSS is a plugin-based CSS transformer recommended for integrating Tailwind CSS with the webpack build flow.&lt;/p&gt;
&lt;p&gt;Update the &lt;code&gt;webpack.common.ts&lt;/code&gt; CSS rule to include the loader for PostCSS with the &lt;code&gt;tailwindcss&lt;/code&gt; plugin:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;test&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/\.css$/&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;use&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;style-loader&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;css-loader&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;loader&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;postcss-loader&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;options&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;postcssOptions&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;plugins&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#34;postcss-import&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;tailwindcss&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a class="link" href="https://www.npmjs.com/package/postcss-import" target="_blank" rel="noopener"
&gt;&lt;code&gt;postcss-import&lt;/code&gt;&lt;/a&gt; plugin processes &lt;code&gt;@import&lt;/code&gt; statements in CSS files,
which we will use in the next step.&lt;/p&gt;
&lt;p&gt;Update the generated &lt;code&gt;tailwind.config.ts&lt;/code&gt; file to point to our HTML files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;Config&lt;/span&gt; } &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;tailwindcss&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;content&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#34;./static/*.html&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;theme&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;extend&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;plugins&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;} &lt;span style="color:#a6e22e"&gt;satisfies&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="use-tailwind-css"&gt;&lt;a href="#use-tailwind-css" class="header-anchor"&gt;&lt;/a&gt;Use Tailwind CSS utility classes in the HTML and CSS files
&lt;/h2&gt;&lt;p&gt;This section will update our CSS to use Tailwind CSS utility classes. Using Tailwind CSS utility classes is a slightly
different approach to writing CSS. Instead of writing custom CSS classes, we use pre-built utility classes to style our
elements. It is a small step above writing raw CSS, but it is more maintainable and easier to read. Utility classes are
documented in the &lt;a class="link" href="https://tailwindcss.com/docs/width" target="_blank" rel="noopener"
&gt;Tailwind CSS documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;First, we create a new CSS file, &lt;code&gt;src/common.css&lt;/code&gt; to contain styles shared by both pages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;@&lt;span style="color:#66d9ef"&gt;tailwind&lt;/span&gt; &lt;span style="color:#f92672"&gt;base&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;@&lt;span style="color:#66d9ef"&gt;tailwind&lt;/span&gt; &lt;span style="color:#f92672"&gt;components&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;@&lt;span style="color:#66d9ef"&gt;tailwind&lt;/span&gt; &lt;span style="color:#f92672"&gt;utilities&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;my-input&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;@apply&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;block&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;m-1.5&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;p-2&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;bg-gray-50&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;border&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;border-gray-300&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;text-gray-900&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;text-sm&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;rounded-lg&lt;/span&gt; focus:ring-blue-500 focus&lt;span style="color:#f92672"&gt;:&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;border&lt;/span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;blue&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;-500&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;@apply&lt;/code&gt; directive is a Tailwind CSS feature that allows us to create a custom CSS class using Tailwind CSS utility
classes.&lt;/p&gt;
&lt;p&gt;Then, update the &lt;code&gt;popup.css&lt;/code&gt; and &lt;code&gt;options.css&lt;/code&gt; files to use the Tailwind CSS classes. &lt;code&gt;popup.css&lt;/code&gt; will use Tailwind CSS
utility classes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;@&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./common.css&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;my-center&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;@apply&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;w-full&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;inline-flex&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;items-center&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;justify-center&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;my-button-link&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;@apply&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;text-indigo-400&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;m-1.5&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;px-3&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;py-1&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;text-xs&lt;/span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;outline-none&lt;/span&gt; focus:&lt;span style="color:#66d9ef"&gt;outline&lt;/span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;none&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;ease&lt;/span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;linear&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;transition&lt;/span&gt;&lt;span style="color:#f92672"&gt;-&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;all&lt;/span&gt; duration-150;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;options.css&lt;/code&gt; will only use our common CSS file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;@&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./common.css&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we update &lt;code&gt;static/popup.html&lt;/code&gt; to use our new CSS classes as well as other Tailwind CSS classes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;html&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;lang&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;My popup&amp;lt;/&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;label&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;my-center cursor-pointer&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;checkbox&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;sr-only peer&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;span&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;m-1.5 relative w-16 h-8 bg-gray-200 rounded-full after:content-[&amp;#39;&amp;#39;] after:absolute after:top-0.5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; after:start-[4px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-7 after:w-7
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; after:transition-all peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; peer-checked:bg-blue-600&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;label&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;for&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;invisible&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;my-input w-52&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;text&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;div&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;my-center&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;button&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;go-to-options&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;my-button-link&amp;#34;&lt;/span&gt;&amp;gt;Advanced options&amp;lt;/&lt;span style="color:#f92672"&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;popup.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We built a custom checkbox using Tailwind CSS utility classes. The &lt;code&gt;peer&lt;/code&gt; class styles the checkbox and the label
together.&lt;/p&gt;
&lt;p&gt;And &lt;code&gt;static/options.html&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;html&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;lang&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;Advanced options&amp;lt;/&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;/&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;body&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;m-1.5&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;h2&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;text-3xl m-1.5 font-extrabold&amp;#34;&lt;/span&gt;&amp;gt;Advanced options&amp;lt;/&lt;span style="color:#f92672"&gt;h2&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;br&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;h3&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;text-xl m-1.5 font-bold&amp;#34;&lt;/span&gt;&amp;gt;Web host to exclude&amp;lt;/&lt;span style="color:#f92672"&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;label&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;for&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;exclude_host&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;invisible&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;exclude_host&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;my-input w-96&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;placeholder&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;example.com&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;options.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;/&lt;span style="color:#f92672"&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Testing the extension, we should see a nicer-looking popup page:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/add-css-framework-to-chrome-extension/popup.png"
alt="Popup with Tailwind CSS classes"&gt;&lt;figcaption&gt;
&lt;h4&gt;Popup with Tailwind CSS classes&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;And a nicer-looking options page:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/add-css-framework-to-chrome-extension/advanced-options.png"
alt="Options with Tailwind CSS classes"&gt;&lt;figcaption&gt;
&lt;h4&gt;Options with Tailwind CSS classes&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="next-steps"&gt;&lt;a href="#next-steps" class="header-anchor"&gt;&lt;/a&gt;Next steps
&lt;/h2&gt;&lt;p&gt;In the next part of this series, we will
&lt;a class="link" href="../add-unit-tests-to-chrome-extension" &gt;add unit tests to our Chrome extension&lt;/a&gt;. Unit tests help us catch bugs early,
ensure our extension continues to work as expected in different scenarios and make it easier to refactor our code.&lt;/p&gt;
&lt;h2 id="css-framework-code-on-github"&gt;&lt;a href="#css-framework-code-on-github" class="header-anchor"&gt;&lt;/a&gt;CSS framework code on GitHub
&lt;/h2&gt;&lt;p&gt;The complete code is available on GitHub at:
&lt;a class="link" href="https://github.com/getvictor/create-chrome-extension/tree/main/6-css-framework" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/create-chrome-extension/tree/main/6-css-framework&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="css-framework-video"&gt;&lt;a href="#css-framework-video" class="header-anchor"&gt;&lt;/a&gt;CSS framework video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/V4MolRPhmqY"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Adding options page to Chrome extension (2024)</title><link>https://victoronsoftware.com/posts/add-options-to-chrome-extension/</link><pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/add-options-to-chrome-extension/</guid><description>&lt;img src="https://victoronsoftware.com/posts/add-options-to-chrome-extension/chrome-extension-options-headline.png" alt="Featured image of post Adding options page to Chrome extension (2024)" /&gt;&lt;p&gt;This article is part of a series on &lt;a class="link" href="../chrome-extension" &gt;building a complete production-ready Chrome extension&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the first article of the series, we introduced &lt;a class="link" href="../create-chrome-extension/#parts-of-a-chrome-extension" &gt;the main parts of a Chrome extension&lt;/a&gt; &amp;ndash; the service worker (background script), content script, and popup. This article will add a fourth part to our Chrome extension &amp;ndash; an options page. This page will allow users to configure the extension&amp;rsquo;s behavior and settings.&lt;/p&gt;
&lt;h2 id="why-add-an-options-page"&gt;&lt;a href="#why-add-an-options-page" class="header-anchor"&gt;&lt;/a&gt;Why add an options page?
&lt;/h2&gt;&lt;p&gt;An options page is a user-friendly way for users to customize the extension to their needs. It can be as simple as a few checkboxes or as complex as a full settings page with multiple tabs. Users can access the options page from the Chrome extension&amp;rsquo;s popup or the Chrome extension&amp;rsquo;s context menu.&lt;/p&gt;
&lt;h2 id="adding-an-options-page"&gt;&lt;a href="#adding-an-options-page" class="header-anchor"&gt;&lt;/a&gt;Adding an options page
&lt;/h2&gt;&lt;p&gt;To add an options page to our Chrome extension, we need to create a new HTML file and add it to the extension&amp;rsquo;s manifest. Our options page will be a simple HTML file with some JavaScript to handle user interactions.&lt;/p&gt;
&lt;p&gt;Our example options page will allow a user to exclude a web host, like victoronsoftware.com, from the extension&amp;rsquo;s functionality. The extension will store the excluded host in the extension&amp;rsquo;s local storage.&lt;/p&gt;
&lt;p&gt;We will add several new files, update the extension&amp;rsquo;s configuration, and update the existing files.&lt;/p&gt;
&lt;p&gt;Add a new file &lt;code&gt;options.html&lt;/code&gt; to the &lt;code&gt;static&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;html&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;lang&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;Advanced options&amp;lt;/&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;link&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;rel&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;href&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;options.css&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;h2&lt;/span&gt;&amp;gt;Advanced options&amp;lt;/&lt;span style="color:#f92672"&gt;h2&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;h3&lt;/span&gt;&amp;gt;Web host to exclude&amp;lt;/&lt;span style="color:#f92672"&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;exclude_host&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;text&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;options.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add a new file &lt;code&gt;options.css&lt;/code&gt; to the &lt;code&gt;static&lt;/code&gt; folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;#exclude_host {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;margin&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;width&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;500&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add a new file &lt;code&gt;options.ts&lt;/code&gt; to the &lt;code&gt;src&lt;/code&gt; folder, which will watch for changes on the options page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; {&lt;span style="color:#a6e22e"&gt;Message&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;StoredConfig&lt;/span&gt;} &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./common&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;StoredConfig&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;excludeHost&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;excludeHost&lt;/span&gt; &lt;span style="color:#f92672"&gt;??&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;input&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;`exclude_host`&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HTMLInputElement&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;input&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;excludeHost&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;input&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addEventListener&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;change&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;instanceof&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HTMLInputElement&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;updatedExcludeWebsite&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;updatedConfig&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;StoredConfig&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#a6e22e"&gt;excludeHost&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;updatedExcludeWebsite&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;updatedConfig&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Send message to content script in all tabs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;tabs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;({})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;tabs&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;message&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;Message&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {&lt;span style="color:#a6e22e"&gt;excludeHost&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;updatedExcludeWebsite&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tab&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;of&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tabs&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;tab&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt; &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;undefined&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;tabs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;sendMessage&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tab&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;message&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt;(() &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// We ignore tabs without a proper URL, like chrome://extensions/
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// Do nothing
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;unknown&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Could not query tabs&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The types in &lt;code&gt;src/common.ts&lt;/code&gt; need to be updated to include the new &lt;code&gt;excludeHost&lt;/code&gt; field:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Message&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;enabled?&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;boolean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;excludeHost?&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;StoredConfig&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;enabled?&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;boolean&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;item?&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;excludeHost?&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The content script &lt;code&gt;src/content.ts&lt;/code&gt; needs to be updated to handle the new &lt;code&gt;excludeHost&lt;/code&gt; setting. See the updated file &lt;a class="link" href="https://github.com/getvictor/create-chrome-extension/blob/main/5-options-page/src/content.ts" target="_blank" rel="noopener"
&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We need to update the extension&amp;rsquo;s manifest to include the new options page. Add the following to the &lt;code&gt;manifest.json&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;options_page&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;static/options.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In addition, we need to tell webpack to compile the new &lt;code&gt;options.ts&lt;/code&gt; file. Update the &lt;code&gt;webpack.common.ts&lt;/code&gt; file to include the new entry point:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;background&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./src/background.ts&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;content&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./src/content.ts&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;popup&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./src/popup.ts&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;options&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./src/options.ts&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="testing-the-options-page"&gt;&lt;a href="#testing-the-options-page" class="header-anchor"&gt;&lt;/a&gt;Testing the options page
&lt;/h2&gt;&lt;p&gt;To test the options page, load the extension in Chrome and right-click on its icon. You should see a new &lt;code&gt;Options&lt;/code&gt; item. Clicking on this item will open the options page.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/add-options-to-chrome-extension/chrome-extension-dropdown.png"
alt="New Options selection"&gt;&lt;figcaption&gt;
&lt;h4&gt;New Options selection&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="adding-a-link-to-the-options-page"&gt;&lt;a href="#adding-a-link-to-the-options-page" class="header-anchor"&gt;&lt;/a&gt;Adding a link to the options page
&lt;/h2&gt;&lt;p&gt;We can add a link to the popup to make it easier for users to access the options page. Update the &lt;code&gt;popup.html&lt;/code&gt; file to include a link to the options page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;button&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;go-to-options&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;button-link&amp;#34;&lt;/span&gt;&amp;gt;Advanced options&amp;lt;/&lt;span style="color:#f92672"&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Add the CSS for the link:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;button-link&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;margin&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;10&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;background&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;none&lt;/span&gt; &lt;span style="color:#75715e"&gt;!important&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;border&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;none&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;padding&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; &lt;span style="color:#75715e"&gt;!important&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;font-family&lt;/span&gt;: arial, &lt;span style="color:#66d9ef"&gt;sans-serif&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;color&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;#069&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;text-decoration&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;underline&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;cursor&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;pointer&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And add the TypeScript in &lt;code&gt;popup.ts&lt;/code&gt; to handle the link click:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Options page
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;optionsElement&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;querySelector&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;#go-to-options&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;optionsElement&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Could not find options element&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;} &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;optionsElement&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addEventListener&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// This code is based on Chrome for Developers documentation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;openOptionsPage&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;openOptionsPage&lt;/span&gt;().&lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;unknown&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Could not open options page&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; window.&lt;span style="color:#a6e22e"&gt;open&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;getURL&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;options.html&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will now see the &lt;code&gt;Advanced options&lt;/code&gt; link in the popup. Clicking on the link will take the user to the options page.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/add-options-to-chrome-extension/chrome-extension-options-link.png"
alt="Popup with Advanced options link"&gt;&lt;figcaption&gt;
&lt;h4&gt;Popup with Advanced options link&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="embedded-options-page"&gt;&lt;a href="#embedded-options-page" class="header-anchor"&gt;&lt;/a&gt;Embedded options page
&lt;/h2&gt;&lt;p&gt;Instead of a full options page, Chrome extensions can use an embedded options page. However, this approach was confusing and not user-friendly because Chrome takes the user to the extension details page. We recommend using a dedicated options page. To try an embedded options page, add the following to the &lt;code&gt;manifest.json&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;options_ui&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;page&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;options.html&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;open_in_tab&amp;#34;&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="next-steps"&gt;&lt;a href="#next-steps" class="header-anchor"&gt;&lt;/a&gt;Next steps
&lt;/h2&gt;&lt;p&gt;In the next part of this series, we will focus on the look of our popup and options page. We will &lt;a class="link" href="../add-css-framework-to-chrome-extension" &gt;add CSS to make Chrome extension pages visually appealing and user-friendly&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="options-page-code-on-github"&gt;&lt;a href="#options-page-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Options page code on GitHub
&lt;/h2&gt;&lt;p&gt;The complete code is available on GitHub at: &lt;a class="link" href="https://github.com/getvictor/create-chrome-extension/tree/main/5-options-page" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/create-chrome-extension/tree/main/5-options-page&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="options-page-video"&gt;&lt;a href="#options-page-video" class="header-anchor"&gt;&lt;/a&gt;Options page video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/PdfUQirKlJA"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How git merge works with GitHub pull requests</title><link>https://victoronsoftware.com/posts/git-merges-and-pull-requests/</link><pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/git-merges-and-pull-requests/</guid><description>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/git-merges-and-pull-requests-feature.png" alt="Featured image of post How git merge works with GitHub pull requests" /&gt;&lt;p&gt;This article covers how &lt;code&gt;git merge&lt;/code&gt; works with GitHub pull requests. We will focus on the use case where developers want
to keep their feature branches updated with the main branch. After completing the feature work, developers create a pull
request to merge their feature branch into the main branch.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#git-merge" &gt;git merge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#pull-request-after-merge" &gt;Pull request after a merge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#update-protected-branch" &gt;Updating a protected feature branch with a pull request&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-a-merge-in-version-control"&gt;&lt;a href="#what-is-a-merge-in-version-control" class="header-anchor"&gt;&lt;/a&gt;What is a merge in version control?
&lt;/h2&gt;&lt;p&gt;Git is a distributed version control system that allows multiple developers to work on the same codebase. When
developers work on different branches, they must merge their changes into the main branch. A merge is the process of
combining changes from one branch into another branch, resulting in a single branch that contains the changes from both
branches.&lt;/p&gt;
&lt;h2 id="git-merge"&gt;&lt;a href="#git-merge" class="header-anchor"&gt;&lt;/a&gt;git merge
&lt;/h2&gt;&lt;p&gt;The standard &lt;code&gt;git merge&lt;/code&gt; command takes each commit from one branch and applies it to another. The final commit has two
parent commits: one from the current branch and one from the merged branch.&lt;/p&gt;
&lt;p&gt;In the following example, we have a &lt;code&gt;branch&lt;/code&gt; that we want to merge into the &lt;code&gt;main&lt;/code&gt; branch:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/git-merge-two-branches-1.svg"
alt="git merge of two branches before merge"&gt;&lt;figcaption&gt;
&lt;h4&gt;git merge of two branches before merge&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;git log&lt;/code&gt; of the &lt;code&gt;main&lt;/code&gt; branch shows the commit history:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;commit e493ac8fea4e0efe125a561b9014313bec41a489 (HEAD -&amp;gt; main, origin/main)
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:31:12 2024 -0500
m3
commit b79e810cb86405061dc979ce4fc05fe36a724256
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:29:41 2024 -0500
m2
commit eaccad9476b472dbfb3cdfbd17088425be75b7b1
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:26:55 2024 -0500
m1
commit 4265c0a30b7b6f03d93331bc112261393c97ee1d
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:25:40 2024 -0500
first commit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And the &lt;code&gt;git log&lt;/code&gt; of the &lt;code&gt;branch&lt;/code&gt; shows the commit history:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;commit 2afb078875a84095327ab2ef7c83711534c5eef8 (HEAD -&amp;gt; branch, origin/branch)
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:30:20 2024 -0500
b2
commit 9fc53c2ca9a58637a5d433de4c6150b832d4d275
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:28:25 2024 -0500
b1
commit eaccad9476b472dbfb3cdfbd17088425be75b7b1
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:26:55 2024 -0500
m1
commit 4265c0a30b7b6f03d93331bc112261393c97ee1d
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:25:40 2024 -0500
first commit
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We merge the &lt;code&gt;branch&lt;/code&gt; into the &lt;code&gt;main&lt;/code&gt; branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git checkout main
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git merge branch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The resulting commit history shows all the commits from both branched as well as the final empty merge commit pointing
to the two parent commits: &lt;code&gt;e493ac8 2afb078&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;commit 09d569bd079162643462dde112246f4167f14889 (HEAD -&amp;gt; main)
Merge: e493ac8 2afb078
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 21:03:01 2024 -0500
Merge branch &amp;#39;branch&amp;#39;
commit e493ac8fea4e0efe125a561b9014313bec41a489 (origin/main)
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:31:12 2024 -0500
m3
commit 2afb078875a84095327ab2ef7c83711534c5eef8 (origin/branch, branch)
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:30:20 2024 -0500
b2
commit b79e810cb86405061dc979ce4fc05fe36a724256
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:29:41 2024 -0500
m2
commit 9fc53c2ca9a58637a5d433de4c6150b832d4d275
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:28:25 2024 -0500
b1
commit eaccad9476b472dbfb3cdfbd17088425be75b7b1
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:26:55 2024 -0500
m1
commit 4265c0a30b7b6f03d93331bc112261393c97ee1d
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:25:40 2024 -0500
first commit
&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/git-merge-two-branches-2.svg"
alt="git merge of two branches after merge"&gt;&lt;figcaption&gt;
&lt;h4&gt;git merge of two branches after merge&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The result would be the same if &lt;strong&gt;instead&lt;/strong&gt; we merged the &lt;code&gt;main&lt;/code&gt; branch into the &lt;code&gt;branch&lt;/code&gt; branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git checkout branch
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git merge main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;except the final merge commit would be slightly different:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;commit 06713a38ed38c12f599c6e810ee50d4cacfe2de7 (HEAD -&amp;gt; branch)
Merge: 2afb078 e493ac8
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:32:01 2024 -0500
Merge branch &amp;#39;main&amp;#39; into branch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The merged changes on &lt;code&gt;branch&lt;/code&gt; can be pushed to the remote repository without issues because the remote branch can be
fast-forwarded to the new commit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git push origin branch
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="what-is-a-fast-forward-merge"&gt;&lt;a href="#what-is-a-fast-forward-merge" class="header-anchor"&gt;&lt;/a&gt;What is a fast-forward merge?
&lt;/h2&gt;&lt;p&gt;A fast-forward merge is a merge where the base branch (target branch) has no new commits. In this case, git moves the
target branch to the commit of the source branch. It is a fast-forward merge because the target branch is moved forward
to the new commit.&lt;/p&gt;
&lt;p&gt;A fast-forward merge does not lose any history &amp;ndash; it is always possible to undo a fast-forward merge.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git push&lt;/code&gt; does not, by default, allow a merge that is not a fast-forward. Use the&amp;rsquo;- force&amp;rsquo; option to enable a merge
that is not a fast-forward.&lt;/p&gt;
&lt;h2 id="undo-a-git-merge"&gt;&lt;a href="#undo-a-git-merge" class="header-anchor"&gt;&lt;/a&gt;Undo a git merge
&lt;/h2&gt;&lt;p&gt;The above merge can be undone by resetting the branch to the commit before the merge, which is one of the parent commits
of the merge commit.&lt;/p&gt;
&lt;p&gt;This command resets the &lt;code&gt;branch&lt;/code&gt; to the commit before the merge:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git reset --hard 2afb078875a84095327ab2ef7c83711534c5eef8
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="git-rebase"&gt;&lt;a href="#git-rebase" class="header-anchor"&gt;&lt;/a&gt;git rebase
&lt;/h2&gt;&lt;p&gt;Another way to combine changes from one branch into another is to use &lt;code&gt;git rebase&lt;/code&gt;. This command applies the changes
from the source branch to the target branch by reapplying the commits from the source branch to the target branch.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;git rebase&lt;/code&gt; command will modify the commit history of the source branch. In our pull request examples, we will use
&lt;code&gt;git merge&lt;/code&gt; instead of &lt;code&gt;git rebase&lt;/code&gt; to preserve all the commit histories.&lt;/p&gt;
&lt;h2 id="pull-request-after-merge"&gt;&lt;a href="#pull-request-after-merge" class="header-anchor"&gt;&lt;/a&gt;Pull request after a merge
&lt;/h2&gt;&lt;p&gt;When working on a feature branch, developers often want to update their branch with the latest changes from the main to
make sure their feature works with the newest code. We start this process with the above-described &lt;code&gt;git merge&lt;/code&gt; command,
where we merge the &lt;code&gt;main&lt;/code&gt; branch into the &lt;code&gt;branch&lt;/code&gt; branch.&lt;/p&gt;
&lt;p&gt;After the merge, the developer can create a GitHub pull request to merge the &lt;code&gt;branch&lt;/code&gt; into the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/github-pull-request.png"
alt="GitHub pull request after merge"&gt;&lt;figcaption&gt;
&lt;h4&gt;GitHub pull request after merge&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Note that the commit history only shows the commits from the &lt;code&gt;branch&lt;/code&gt; and the merge commit. The &lt;code&gt;main&lt;/code&gt; commits are not
shown in the pull request.&lt;/p&gt;
&lt;p&gt;GitHub shows a few options for merging the pull request:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/merge-pull-request-options.png"
alt="Merge pull request"&gt;&lt;figcaption&gt;
&lt;h4&gt;Merge pull request&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Create a merge commit&lt;/strong&gt;: This option creates a new merge commit combining the changes from the &lt;code&gt;branch&lt;/code&gt; and the
&lt;code&gt;main&lt;/code&gt; branches. This is the default option.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Squash and merge&lt;/strong&gt;: This option combines all the commits from the &lt;code&gt;branch&lt;/code&gt; into a single commit and merges that
commit into the &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rebase and merge&lt;/strong&gt;: This option applies the changes from the &lt;code&gt;branch&lt;/code&gt; onto the &lt;code&gt;main&lt;/code&gt; branch by rebasing the commits
from the &lt;code&gt;branch&lt;/code&gt; onto the &lt;code&gt;main&lt;/code&gt; branch.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Selecting &lt;strong&gt;Create a merge commit&lt;/strong&gt; results in the following commit history:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/commit-history-after-pull-request.png"
alt="Commit history after pull request"&gt;&lt;figcaption&gt;
&lt;h4&gt;Commit history after pull request&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The last two commits are both merge commits.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;commit 1eb0af8c0e9ad16a0267d8abd1ce667f125ab7e8 (HEAD -&amp;gt; main, origin/main)
Merge: e493ac8 22d2107
Author: Victor Lyuboslavsky &amp;lt;******&amp;gt;
Date: Sun Jun 23 07:35:57 2024 -0500
Merge pull request #1 from getvictor/branch
My pull request
commit 22d2107b49bca56e67b7d4e800d93f93378a0956 (origin/branch, branch)
Merge: 2afb078 e493ac8
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 21:25:39 2024 -0500
Merge branch &amp;#39;main&amp;#39; into branch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The PR merge commit points to the previous merge commit and the last commit on &lt;code&gt;main&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/pull-request-commit-history.svg"
alt="Diagram of commit history after pull request"&gt;&lt;figcaption&gt;
&lt;h4&gt;Diagram of commit history after pull request&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="update-protected-branch"&gt;&lt;a href="#update-protected-branch" class="header-anchor"&gt;&lt;/a&gt;Updating a protected feature branch
&lt;/h2&gt;&lt;p&gt;We have two branches in this example: &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;feature&lt;/code&gt;. Both branches are protected, meaning that changes to them
must be made through a pull request. We want to update the &lt;code&gt;feature&lt;/code&gt; branch with the latest changes from the &lt;code&gt;main&lt;/code&gt;
branch.&lt;/p&gt;
&lt;p&gt;We can do this by merging the &lt;code&gt;main&lt;/code&gt; branch into the &lt;code&gt;feature&lt;/code&gt; branch, creating a new branch, and creating a pull
request.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git checkout feature
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git merge main
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git checkout -b feature-update
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git push origin feature-update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And create a pull request to merge &lt;code&gt;feature-update&lt;/code&gt; into &lt;code&gt;feature&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/github-pull-request-branches.png"
alt="Create a PR to merge into feature branch"&gt;&lt;figcaption&gt;
&lt;h4&gt;Create a PR to merge into feature branch&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This pull request shows all the commits from the &lt;code&gt;main&lt;/code&gt; branch and the merge commit. This commit history is problematic
because the PR may trigger a code review from the
&lt;a class="link" href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners" target="_blank" rel="noopener"
&gt;code owners&lt;/a&gt;
of the files that were already reviewed in previous pull requests to the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/github-pull-request-commits.png"
alt="Commits from feature-update branch"&gt;&lt;figcaption&gt;
&lt;h4&gt;Commits from feature-update branch&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;After the merge, the &lt;code&gt;feature&lt;/code&gt; branch commit history looks like:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/commit-history-of-feature-after-pr.png"
alt="Commit history of feature branch after PR"&gt;&lt;figcaption&gt;
&lt;h4&gt;Commit history of feature branch after PR&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Now, we create a pull request to merge the update &lt;code&gt;feature&lt;/code&gt; branch into the &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/github-pull-request-feature.png"
alt="PR to merge feature branch into main"&gt;&lt;figcaption&gt;
&lt;h4&gt;PR to merge feature branch into main&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;After the merge, the &lt;code&gt;main&lt;/code&gt; branch commit history looks like:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/commit-history-of-main-after-feature-pr.png"
alt="Commit history of main after PR from feature branch"&gt;&lt;figcaption&gt;
&lt;h4&gt;Commit history of main after PR from feature branch&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The last three commits are merge commits.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;commit 59caaf1cc5103099f850c32f1729c5ffe3525404 (HEAD -&amp;gt; main, origin/main)
Merge: e493ac8 dcbc117
Author: Victor Lyuboslavsky &amp;lt;******&amp;gt;
Date: Sun Jun 23 08:56:53 2024 -0500
Merge pull request #3 from getvictor/feature
Feature
commit dcbc117e5811e683f1074d947bc25da21b5fa5f6 (origin/feature)
Merge: 2afb078 373dd82
Author: Victor Lyuboslavsky &amp;lt;******&amp;gt;
Date: Sun Jun 23 08:45:44 2024 -0500
Merge pull request #2 from getvictor/feature-update
Feature update
commit 373dd82672a4879bfcf3b29c4feb97004359adfe (origin/feature-update, feature-update, feature)
Merge: 2afb078 e493ac8
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sun Jun 23 08:03:22 2024 -0500
Merge branch &amp;#39;main&amp;#39; into feature
&lt;/code&gt;&lt;/pre&gt;&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/pull-request-commit-history-2.svg"
alt="Diagram of commit history after two pull requests"&gt;&lt;figcaption&gt;
&lt;h4&gt;Diagram of commit history after two pull requests&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="merging-a-pull-request-with-squash-and-merge"&gt;&lt;a href="#merging-a-pull-request-with-squash-and-merge" class="header-anchor"&gt;&lt;/a&gt;Merging a pull request with &lt;strong&gt;Squash and merge&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;If the final pull request is merged with &lt;strong&gt;Squash and merge&lt;/strong&gt;, the commit history will look like:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/commit-history-after-squash-and-merge.png"
alt="Commit history of main after squash and merge"&gt;&lt;figcaption&gt;
&lt;h4&gt;Commit history of main after squash and merge&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The last commit is a single commit that combines all the changes from the &lt;code&gt;feature&lt;/code&gt; branch. The merge commits and all
other commits are eliminated.&lt;/p&gt;
&lt;p&gt;The downside of &lt;strong&gt;Squash and merge&lt;/strong&gt; is that the commit history is lost. The commit history is useful for debugging,
understanding the changes made, and keeping ownership of the changes when multiple developers work on the same feature
branch.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we covered &lt;a class="link" href="../github-code-review-issues" &gt;why GitHub code review process is broken for our organization&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previously, we explained
&lt;a class="link" href="../find-code-owners-for-pull-request" &gt;how to find the minimum required code owner approvers for a pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="watch-how-git-merge-works-with-github-pull-requests"&gt;&lt;a href="#watch-how-git-merge-works-with-github-pull-requests" class="header-anchor"&gt;&lt;/a&gt;Watch how git merge works with GitHub pull requests
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Djpc7ymvuzU"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Linting and formatting TypeScript in Chrome extension (2024)</title><link>https://victoronsoftware.com/posts/linting-and-formatting-typescript/</link><pubDate>Wed, 19 Jun 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/linting-and-formatting-typescript/</guid><description>&lt;img src="https://victoronsoftware.com/posts/linting-and-formatting-typescript/linting-and-formatting-headline.png" alt="Featured image of post Linting and formatting TypeScript in Chrome extension (2024)" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#setting-up-linting" &gt;Setting up linting with ESLint and typescript-eslint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#setting-up-formatting" &gt;Setting up formatting with Prettier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#adding-linting-and-formatting-to-ci" &gt;Adding linting and formatting to CI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This article is part of a series on &lt;a class="link" href="../chrome-extension" &gt;building a maintainable Chrome extension&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the previous article, we
&lt;a class="link" href="../message-passing-in-chrome-extension" &gt;added TypeScript code for communicating between parts of a Chrome extension&lt;/a&gt;.
This check-in will be our starting point for this article. This article will add linting and formatting to our
TypeScript code, which will help us catch errors and enforce a consistent code style for larger teams.&lt;/p&gt;
&lt;h2 id="what-is-linting"&gt;&lt;a href="#what-is-linting" class="header-anchor"&gt;&lt;/a&gt;What is linting?
&lt;/h2&gt;&lt;p&gt;Linting is the process of running a static code analysis program to analyze code for potential errors. Linters can catch
syntax errors, typos, and other common mistakes that can lead to bugs. They can also enforce coding standards, such as
indentation, variable naming, and other style rules.&lt;/p&gt;
&lt;h2 id="what-is-formatting"&gt;&lt;a href="#what-is-formatting" class="header-anchor"&gt;&lt;/a&gt;What is formatting?
&lt;/h2&gt;&lt;p&gt;Formatting automatically changes the code&amp;rsquo;s appearance to match a specific style guide. Formatting tools can
automatically add or remove whitespace, change indentation, and reformat code to make it more readable. Formatting tools
can enforce a consistent code style across a project.&lt;/p&gt;
&lt;h2 id="why-use-linting-and-formatting-tools"&gt;&lt;a href="#why-use-linting-and-formatting-tools" class="header-anchor"&gt;&lt;/a&gt;Why use linting and formatting tools?
&lt;/h2&gt;&lt;p&gt;Linters and formatters work together to help developers write better code and accelerate the development process &amp;ndash;
linters flag errors, while formatters automatically enforce a consistent code style.&lt;/p&gt;
&lt;p&gt;Together, they can help prevent bugs, improve code quality, and make it easier for developers to read and understand the
code. The result is cleaner, more maintainable code that uses many coding best practices and is easier to work with.&lt;/p&gt;
&lt;p&gt;Linting can also teach developers about best practices and help them avoid common pitfalls. For example, a linter can
flag misused promises, such as missing &lt;code&gt;await&lt;/code&gt; or uncaught errors.&lt;/p&gt;
&lt;h2 id="setting-up-linting"&gt;&lt;a href="#setting-up-linting" class="header-anchor"&gt;&lt;/a&gt;Setting up linting with ESLint and typescript-eslint
&lt;/h2&gt;&lt;p&gt;To set up linting for TypeScript code, we will use &lt;a class="link" href="https://eslint.org/" target="_blank" rel="noopener"
&gt;ESLint&lt;/a&gt; with the
&lt;a class="link" href="https://typescript-eslint.io/" target="_blank" rel="noopener"
&gt;typescript-eslint&lt;/a&gt; plugin. ESLint is a popular linter that can analyze JavaScript and
TypeScript code. The typescript-eslint plugin adds TypeScript-specific rules to ESLint.&lt;/p&gt;
&lt;p&gt;To set up ESLint with typescript-eslint, we need to install the following packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev eslint @eslint/js @types/eslint__js typescript-eslint
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we need to create an ESLint configuration file. We will create an &lt;code&gt;eslint.config.mjs&lt;/code&gt; file at the root of our
project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// @ts-check
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;eslint&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;@eslint/js&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tseslint&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;typescript-eslint&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tseslint&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;config&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;eslint&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;configs&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;recommended&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ...&lt;span style="color:#a6e22e"&gt;tseslint&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;configs&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;recommendedTypeChecked&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ...&lt;span style="color:#a6e22e"&gt;tseslint&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;configs&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;stylisticTypeChecked&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ignores&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#34;dist/**/*&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;eslint.config.mjs&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;languageOptions&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;parserOptions&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;project&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tsconfigRootDir&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;import&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;meta&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;dirname&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This configuration file sets up ESLint with the recommended TypeScript type-checked rules and ignores our &lt;code&gt;dist&lt;/code&gt;
directory containing the webpack-generated bundles. We also ignore the config file because we do not want to apply
TypeScript linting to it.&lt;/p&gt;
&lt;h3 id="why-use-the-mjs-instead-of-js"&gt;&lt;a href="#why-use-the-mjs-instead-of-js" class="header-anchor"&gt;&lt;/a&gt;Why use the &lt;code&gt;.mjs&lt;/code&gt; extension instead of &lt;code&gt;.js&lt;/code&gt; for the configuration file?
&lt;/h3&gt;&lt;p&gt;We are using &lt;code&gt;.mjs&lt;/code&gt; extension for the configuration file to take advantage of ECMAScript modules. Using ES modules
allows us to import and export modules using the &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; keywords. There are other ways to enable
ECMAScript modules in JavaScript for our project, but this is the simplest way for just one JavaScript file. Our
TypeScript files already use ECMAScript modules via these included recommended &lt;code&gt;tsconfig.json&lt;/code&gt; settings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;compilerOptions&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;module&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;commonjs&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;esModuleInterop&amp;#34;&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we used &lt;code&gt;.js&lt;/code&gt; extension for the configuration file, we would need to use &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;module.exports&lt;/code&gt; syntax.
Otherwise, we would get an error like this:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/Users/victor/work/create-chrome-extension/4-linting-and-formatting/eslint.config.js:3
import eslint from &amp;#39;@eslint/js&amp;#39;
^^^^^^
SyntaxError: Cannot use import statement outside a module
at internalCompileFunction (node:internal/vm:77:18)
at wrapSafe (node:internal/modules/cjs/loader:1288:20)
at Module._compile (node:internal/modules/cjs/loader:1340:27)
at Module._extensions..js (node:internal/modules/cjs/loader:1435:10)
at Module.load (node:internal/modules/cjs/loader:1207:32)
at Module._load (node:internal/modules/cjs/loader:1023:12)
at cjsLoader (node:internal/modules/esm/translators:356:17)
at ModuleWrap.&amp;lt;anonymous&amp;gt; (node:internal/modules/esm/translators:305:7)
at ModuleJob.run (node:internal/modules/esm/module_job:218:25)
at async ModuleLoader.import (node:internal/modules/esm/loader:329:24)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="running-eslint"&gt;&lt;a href="#running-eslint" class="header-anchor"&gt;&lt;/a&gt;Running ESLint
&lt;/h2&gt;&lt;p&gt;We can run ESLint from the command line using the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;./node_modules/.bin/eslint .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternatively, we can use &lt;code&gt;npx&lt;/code&gt;, which is a package runner tool that comes with npm:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npx eslint .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will run ESLint on all TypeScript files in the current directory and subdirectories. ESLint will output any
errors or warnings it finds in the code, such as:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/Users/victor/work/create-chrome-extension/4-linting-and-formatting/src/background.ts
14:17 error Unsafe member access .enabled on an `any` value @typescript-eslint/no-unsafe-member-access
/Users/victor/work/create-chrome-extension/4-linting-and-formatting/src/content.ts
51:9 error Unsafe assignment of an `any` value @typescript-eslint/no-unsafe-assignment
74:17 error Unsafe member access .enabled on an `any` value @typescript-eslint/no-unsafe-member-access
76:9 error Unsafe assignment of an `any` value @typescript-eslint/no-unsafe-assignment
76:27 error Unsafe member access .enabled on an `any` value @typescript-eslint/no-unsafe-member-access
/Users/victor/work/create-chrome-extension/4-linting-and-formatting/src/popup.ts
9:23 error Unsafe argument of type `any` assigned to a parameter of type `boolean` @typescript-eslint/no-unsafe-argument
11:37 error Promise returned in function argument where a void return was expected @typescript-eslint/no-misused-promises
23:34 error Unsafe member access .title on an `any` value @typescript-eslint/no-unsafe-member-access
23:50 error Unsafe member access .url on an `any` value @typescript-eslint/no-unsafe-member-access
43:5 error Unsafe assignment of an `any` value @typescript-eslint/no-unsafe-assignment
✖ 10 problems (10 errors, 0 warnings)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At this point, we should fix the errors and warnings that ESLint has found in our code.&lt;/p&gt;
&lt;p&gt;We can also update the &lt;code&gt;scripts&lt;/code&gt; section of our &lt;code&gt;package.json&lt;/code&gt; file to run ESLint with &lt;code&gt;npm run&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;lint&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;eslint .&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can run ESLint with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm run lint
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="setting-up-formatting"&gt;&lt;a href="#setting-up-formatting" class="header-anchor"&gt;&lt;/a&gt;Setting up formatting with Prettier
&lt;/h2&gt;&lt;p&gt;To format TypeScript code, we will use &lt;a class="link" href="https://prettier.io/" target="_blank" rel="noopener"
&gt;Prettier&lt;/a&gt;. Prettier is a popular code formatter that
automatically formats code to match a specific style guide.&lt;/p&gt;
&lt;p&gt;To set up Prettier, we need to install the following package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev --save-exact prettier
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, create a &lt;code&gt;.prettierignore&lt;/code&gt; file in the root of our project to ignore the &lt;code&gt;dist&lt;/code&gt; directory:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/dist
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;By default, Prettier ignores the &lt;code&gt;node_modules&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;Next, create a &lt;code&gt;.prettierrc&lt;/code&gt; file in the root of our project to configure Prettier:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;semi&amp;#34;&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We will use the default Prettier settings but turn off the &lt;code&gt;semi&lt;/code&gt; rule to remove semicolons from the end of TypeScript
lines. Removing semicolons is a common style choice in modern JavaScript and TypeScript code.&lt;/p&gt;
&lt;h2 id="running-prettier"&gt;&lt;a href="#running-prettier" class="header-anchor"&gt;&lt;/a&gt;Running Prettier
&lt;/h2&gt;&lt;p&gt;We can run Prettier from the command line using the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npx prettier --write .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will format all eligible files in the current directory and subdirectories.&lt;/p&gt;
&lt;p&gt;We can also update the &lt;code&gt;scripts&lt;/code&gt; section of our &lt;code&gt;package.json&lt;/code&gt; file to run Prettier with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;format&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;prettier --write .&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;format-check&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;prettier --check .&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;npm run format&lt;/code&gt; will format all eligible files, while &lt;code&gt;npm run format-check&lt;/code&gt; will check if the files are formatted.&lt;/p&gt;
&lt;h2 id="adding-linting-and-formatting-to-ci"&gt;&lt;a href="#adding-linting-and-formatting-to-ci" class="header-anchor"&gt;&lt;/a&gt;Adding linting and formatting to continuous integration (CI)
&lt;/h2&gt;&lt;p&gt;We will use GitHub Actions to automate linting and formatting checks on every pull request and commit to our main
branch. This will make sure all code changes are linted and formatted correctly on the main branch.&lt;/p&gt;
&lt;p&gt;This automatic check means that all contributors can expect that the code they are working on uses a consistent style
and meets a quality standard. Consistency is beneficial for open-source projects where contributors may not be familiar
with the codebase.&lt;/p&gt;
&lt;p&gt;To set up GitHub Actions, create a &lt;code&gt;.github/workflows/lint-and-format.yml&lt;/code&gt; file in the root of our git repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Lint check, format check, and build&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;on&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;push&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;branches&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;paths&lt;/span&gt;: &lt;span style="color:#75715e"&gt;# We only run the workflow if the code in these files/directories changes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#39;.github/workflows/lint-and-format.yml&amp;#39;&lt;/span&gt; &lt;span style="color:#75715e"&gt;# This file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#39;4-linting-and-formatting/**&amp;#39;&lt;/span&gt; &lt;span style="color:#75715e"&gt;# The working directory for this article&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;pull_request&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;paths&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#39;.github/workflows/lint-and-format.yml&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#39;4-linting-and-formatting/**&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# This allows a subsequently queued workflow run to interrupt previous runs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;concurrency&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;group&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;${{ github.workflow }}-${{ github.head_ref || github.run_id}}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;cancel-in-progress&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;defaults&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;shell&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;bash&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;working-directory&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;./4-linting-and-formatting&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;permissions&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;contents&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;read&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;jobs&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;lint-format-build&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;runs-on&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;ubuntu-latest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;steps&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Checkout&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;uses&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;actions/checkout@v4&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Install dependencies&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: |&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; npm install --no-save&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Format check and lint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: |&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; npm run format-check
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; npm run lint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;Build&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;run&lt;/span&gt;: |&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; npm run build&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since our git repository is shared by multiple projects (from various articles), we use the &lt;code&gt;paths&lt;/code&gt; key to only run the
workflow when the code in the &lt;code&gt;4-linting-and-formatting&lt;/code&gt; directory changes.&lt;/p&gt;
&lt;p&gt;After pushing our code to GitHub and waiting for the GitHub Actions workflow to run, we can see the results in the
Actions tab of our repository. We can see the linting and formatting checks, as well as the build step:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/linting-and-formatting-typescript/github-lint-format-build-workflow-result.png"
alt="GitHub Actions workflow results"&gt;&lt;figcaption&gt;
&lt;h4&gt;GitHub Actions workflow results&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;For more details on GitHub Actions workflows, see our article on
&lt;a class="link" href="../github-reusable-workflows-and-steps/" &gt;reusing GitHub Actions workflows and steps&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="adding-stricter-linting-rules-to-typescript-eslint"&gt;&lt;a href="#adding-stricter-linting-rules-to-typescript-eslint" class="header-anchor"&gt;&lt;/a&gt;Adding stricter linting rules to typescript-eslint
&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;recommended&lt;/code&gt; ruleset is a good starting point for linting TypeScript code. However, we can add stricter rules to
catch even more potential issues in our code. It is easiest to start with strict rules early in the project when fixing
issues is relatively painless. Otherwise, it is a good idea to gradually add stricter rules to avoid overwhelming
developers with too many errors and warnings.&lt;/p&gt;
&lt;p&gt;To switch to a stricter, more opinionated ruleset, replace &lt;code&gt;tseslint.configs.recommendedTypeChecked&lt;/code&gt; with
&lt;code&gt;tseslint.configs.strictTypeChecked&lt;/code&gt; in the &lt;code&gt;eslint.config.mjs&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;ESLint rules can be configured or disabled using configuration comments in the code or the ESLint configuration file.
For more details, see the &lt;a class="link" href="https://eslint.org/docs/latest/use/configure/rules" target="_blank" rel="noopener"
&gt;ESLint configure rules&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;&lt;a href="#next-steps" class="header-anchor"&gt;&lt;/a&gt;Next steps
&lt;/h2&gt;&lt;p&gt;In the next part of this series, we will
&lt;a class="link" href="../add-options-to-chrome-extension" &gt;add an options page to our Chrome extension&lt;/a&gt;. This page will allow users to
configure the extension&amp;rsquo;s behavior and settings.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;We recently wrote about &lt;a class="link" href="../staticcheck-go-linter/" &gt;enabling staticcheck linter in a large Go project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="linting-and-formatting-typescript-code-on-github"&gt;&lt;a href="#linting-and-formatting-typescript-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Linting and formatting TypeScript code on GitHub
&lt;/h2&gt;&lt;p&gt;The complete code is available on GitHub at:
&lt;a class="link" href="https://github.com/getvictor/create-chrome-extension/tree/main/4-linting-and-formatting" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/create-chrome-extension/tree/main/4-linting-and-formatting&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="linting-and-formatting-typescript-video"&gt;&lt;a href="#linting-and-formatting-typescript-video" class="header-anchor"&gt;&lt;/a&gt;Linting and formatting TypeScript video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/DHtwTkF0DOE"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Message passing in Chrome extension (2024)</title><link>https://victoronsoftware.com/posts/message-passing-in-chrome-extension/</link><pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/message-passing-in-chrome-extension/</guid><description>&lt;img src="https://victoronsoftware.com/posts/message-passing-in-chrome-extension/message-passing-headline.png" alt="Featured image of post Message passing in Chrome extension (2024)" /&gt;&lt;p&gt;This article is part of a series on &lt;a class="link" href="../chrome-extension" &gt;building a production-ready Chrome extension&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the previous article, we
&lt;a class="link" href="../add-webpack-and-typescript-to-chrome-extension" &gt;set up our Chrome extension with TypeScript support and the webpack bundler&lt;/a&gt;.
This article will build on that code, dive into the new APIs, and cover message-passing communication between different
parts of our Chrome extension.&lt;/p&gt;
&lt;h2 id="communication-between-parts-of-a-chrome-extension"&gt;&lt;a href="#communication-between-parts-of-a-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;Communication between parts of a Chrome extension
&lt;/h2&gt;&lt;p&gt;As we covered in &lt;a class="link" href="../create-chrome-extension" &gt;the first article&lt;/a&gt;, a Chrome extension consists of three main parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;service worker (background script)&lt;/li&gt;
&lt;li&gt;content script&lt;/li&gt;
&lt;li&gt;popup&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These parts need to communicate with each other. For example, a popup needs to send a message to a content script to
change the appearance of a webpage. Or a background script needs to send a message to a popup to update the user
interface based on the page that&amp;rsquo;s being visited.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/message-passing-in-chrome-extension/message-passing.svg"
alt="Communication in a Chrome extension"&gt;&lt;figcaption&gt;
&lt;h4&gt;Communication in a Chrome extension&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;One way to communicate between these parts is to use the local storage via the &lt;code&gt;chrome.storage&lt;/code&gt; APIs. We do not
recommend this method because it is slow and can cause performance issues. This method is slow because it is not
synchronous &amp;ndash; the scripts need to check the storage for changes periodically. A better way to communicate between
extension parts is to use message passing.&lt;/p&gt;
&lt;h2 id="what-is-message-passing"&gt;&lt;a href="#what-is-message-passing" class="header-anchor"&gt;&lt;/a&gt;What is message passing?
&lt;/h2&gt;&lt;p&gt;In computer science, message passing is a method for communicating between different processes or threads. A process or
thread sends a message to another process or thread, which receives the message and acts on it. This method is often
used in distributed systems, where processes run on different machines and need to communicate with each other. The
sender sends a message, and the receiver decodes it and executes the appropriate code.&lt;/p&gt;
&lt;h2 id="message-passing-in-a-chrome-extension"&gt;&lt;a href="#message-passing-in-a-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;Message passing in a Chrome extension
&lt;/h2&gt;&lt;p&gt;Message passing is a way to communicate between different parts of a Chrome extension. Its main advantage is that it&amp;rsquo;s
fast and efficient. When a message is sent, the receiver gets it immediately and can respond to it right away.&lt;/p&gt;
&lt;p&gt;Message passing is done in Chrome extensions using the &lt;code&gt;chrome.runtime.sendMessage&lt;/code&gt;, &lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt; and
&lt;code&gt;chrome.runtime.onMessage&lt;/code&gt; functions. Here&amp;rsquo;s how it works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The sender calls &lt;code&gt;chrome.runtime.sendMessage&lt;/code&gt; or &lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt; with the message to send.&lt;/li&gt;
&lt;li&gt;The receiver listens for messages using &lt;code&gt;chrome.runtime.onMessage.addListener&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The receiver processes the incoming message and, optionally, responds to the message.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="message-passing-from-a-popup-to-a-content-script"&gt;&lt;a href="#message-passing-from-a-popup-to-a-content-script" class="header-anchor"&gt;&lt;/a&gt;Message passing from a popup to a content script
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s see how we can use message passing to communicate between a popup and a content script. We will send a message
when the user toggles the enable slider in the popup, which will enable or disable the content script&amp;rsquo;s processing. We
will use the &lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt; function to send a message to a specific tab ID.&lt;/p&gt;
&lt;p&gt;In the popup script (&lt;code&gt;popup.ts&lt;/code&gt;), we send a message to all the tabs when we detect a change in the top slider:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Send message to content script in all tabs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tabs&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;tabs&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;({})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tab&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;of&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tabs&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Note: sensitive tab properties such as tab.title or tab.url can only be accessed for
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// URLs in the host_permissions section of manifest.json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;tabs&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sendMessage&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tab&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;!&lt;/span&gt;, {&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;event.target.checked&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;response&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;info&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Popup received response from tab with title &amp;#39;%s&amp;#39; and url %s&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;response&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;title&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;response&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;url&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;warn&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Popup could not send message to tab %d&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;tab&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the content script (&lt;code&gt;content.ts&lt;/code&gt;), we listen for the message and process it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Listen for messages from popup.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;onMessage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addListener&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sender&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sendResponse&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;undefined&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Received message from sender %s&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sender&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;observe&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;observer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;disconnect&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sendResponse&lt;/span&gt;({&lt;span style="color:#a6e22e"&gt;title&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;document.title&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;url&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;window.location.href&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the user toggles the slider in the popup, the popup sends a message to all tabs. The receiving tab will print this
message to the Chrome Developer Tools console.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/message-passing-in-chrome-extension/content-script-received.png"
alt="Content script received message"&gt;&lt;figcaption&gt;
&lt;h4&gt;Content script received message&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Then, the popup will receive a response from the content script with the tab&amp;rsquo;s title and URL. This response prints to
the &lt;code&gt;Inspect Popup&lt;/code&gt; console. System tabs like &lt;code&gt;chrome://extensions/&lt;/code&gt; will not respond to messages.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/message-passing-in-chrome-extension/popup-response.png"
alt="Popup received response"&gt;&lt;figcaption&gt;
&lt;h4&gt;Popup received response&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="message-passing-from-a-popup-to-the-service-worker-background-script"&gt;&lt;a href="#message-passing-from-a-popup-to-the-service-worker-background-script" class="header-anchor"&gt;&lt;/a&gt;Message passing from a popup to the service worker (background script)
&lt;/h2&gt;&lt;p&gt;To send a message to the service worker, we must use the &lt;code&gt;chrome.runtime.sendMessage&lt;/code&gt; function instead of
&lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt;. The service worker does not have a tab ID, so we cannot use &lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sendMessage&lt;/span&gt;({&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;event.target.checked&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;response&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;info&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Popup received response&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;response&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;warn&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Popup could not send message&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the service worker script (&lt;code&gt;background.ts&lt;/code&gt;), we listen for the message and process it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;onMessage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addListener&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sender&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sendResponse&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;undefined&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Service worker received message from sender %s&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sender&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sendResponse&lt;/span&gt;({&lt;span style="color:#a6e22e"&gt;message&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Service worker processed the message&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="message-passing-from-a-content-script-to-the-popup-and-service-worker"&gt;&lt;a href="#message-passing-from-a-content-script-to-the-popup-and-service-worker" class="header-anchor"&gt;&lt;/a&gt;Message passing from a content script to the popup and service worker
&lt;/h2&gt;&lt;p&gt;To send a message from the content script, use the &lt;code&gt;chrome.runtime.sendMessage&lt;/code&gt; function. The popup and service worker
can listen and receive this message.&lt;/p&gt;
&lt;h2 id="message-passing-from-the-service-worker-background-script-to-a-content-script-and-the-popup"&gt;&lt;a href="#message-passing-from-the-service-worker-background-script-to-a-content-script-and-the-popup" class="header-anchor"&gt;&lt;/a&gt;Message passing from the service worker (background script) to a content script and the popup
&lt;/h2&gt;&lt;p&gt;Use the &lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt; function to send a message to the content script. Use the &lt;code&gt;chrome.runtime.sendMessage&lt;/code&gt;
function to send a message to the popup.&lt;/p&gt;
&lt;p&gt;The code for sending a message from the service worker is the same as the code for sending a message from the popup. The
receiving code in the content and popup scripts is also the same.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;&lt;a href="#next-steps" class="header-anchor"&gt;&lt;/a&gt;Next steps
&lt;/h2&gt;&lt;p&gt;In the next part of this series, we will
&lt;a class="link" href="../linting-and-formatting-typescript/" &gt;add linting and formatting tools to our Chrome extension&lt;/a&gt;. These tools increase
the quality of our code and increase engineering velocity for projects with multiple developers.&lt;/p&gt;
&lt;h2 id="chrome-extension-with-webpack-and-typescript-code-on-github"&gt;&lt;a href="#chrome-extension-with-webpack-and-typescript-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Chrome extension with webpack and TypeScript code on GitHub
&lt;/h2&gt;&lt;p&gt;The complete code is available on GitHub at:
&lt;a class="link" href="https://github.com/getvictor/create-chrome-extension/tree/main/3-message-passing" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/create-chrome-extension/tree/main/3-message-passing&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="message-passing-in-a-chrome-extension-video"&gt;&lt;a href="#message-passing-in-a-chrome-extension-video" class="header-anchor"&gt;&lt;/a&gt;Message passing in a Chrome extension video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/qANlZ5kzxcg"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Build a production-ready Chrome extension in 7 steps</title><link>https://victoronsoftware.com/posts/chrome-extension/</link><pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/chrome-extension/</guid><description>&lt;img src="https://victoronsoftware.com/posts/chrome-extension/chrome-extension-headline.png" alt="Featured image of post Build a production-ready Chrome extension in 7 steps" /&gt;&lt;p&gt;We are creating a series of articles on building a production-ready Chrome extension. In this series, we cover the
basics of building a Chrome extension, how to set up industry leading development tooling, and how to test and deploy
your extension. Our goal is to show you how to build a Chrome extension that is easy to maintain, test, and deploy for a
software development team.&lt;/p&gt;
&lt;h3 id="1-create-a-chrome-extension-from-scratch"&gt;&lt;a href="#1-create-a-chrome-extension-from-scratch" class="header-anchor"&gt;&lt;/a&gt;1. &lt;a class="link" href="../create-chrome-extension" &gt;Create a Chrome extension from scratch&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Create a basic Chrome extension without any development tools. We cover the basics such as the major parts of the
extension, &lt;code&gt;manifest.json&lt;/code&gt;, and manually testing the extension in the Chrome browser.&lt;/p&gt;
&lt;h3 id="2-add-webpack-and-typescript-to-a-chrome-extension"&gt;&lt;a href="#2-add-webpack-and-typescript-to-a-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;2. &lt;a class="link" href="../add-webpack-and-typescript-to-chrome-extension" &gt;Add webpack and TypeScript to a Chrome extension&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;We add support for TypeScript (which replaces JavaScript) and webpack (which bundles the extension) to our Chrome
extension.&lt;/p&gt;
&lt;h3 id="3-message-passing-in-a-chrome-extension"&gt;&lt;a href="#3-message-passing-in-a-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;3. &lt;a class="link" href="../message-passing-in-chrome-extension" &gt;Message passing in a Chrome extension&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;We cover message passing communication between different parts of a Chrome extension. We dive into the code and show how
to communicate between the service worker (background script), content scripts, and the popup.&lt;/p&gt;
&lt;h3 id="4-linting-and-formatting-typescript-in-a-chrome-extension"&gt;&lt;a href="#4-linting-and-formatting-typescript-in-a-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;4. &lt;a class="link" href="../linting-and-formatting-typescript" &gt;Linting and formatting TypeScript in a Chrome extension&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;We set up ESLint and Prettier to lint and format our TypeScript code. This ensures our code is consistent and follows
best practices.&lt;/p&gt;
&lt;h3 id="5-add-options-page-to-chrome-extension"&gt;&lt;a href="#5-add-options-page-to-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;5. &lt;a class="link" href="../add-options-to-chrome-extension" &gt;Add options page to Chrome extension&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;We add an advanced options page to our Chrome extension. This page allows users to configure the extension&amp;rsquo;s behavior
and settings.&lt;/p&gt;
&lt;h3 id="6-add-css-framework-to-chrome-extension"&gt;&lt;a href="#6-add-css-framework-to-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;6. &lt;a class="link" href="../add-css-framework-to-chrome-extension" &gt;Add CSS framework to Chrome extension&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;We improve the look and maintainability of our extension by adding a CSS framework. We use Tailwind CSS to quickly style
our extension and make it look professional.&lt;/p&gt;
&lt;h3 id="7-add-unit-tests-to-chrome-extension"&gt;&lt;a href="#7-add-unit-tests-to-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;7. &lt;a class="link" href="../add-unit-tests-to-chrome-extension" &gt;Add unit tests to Chrome extension&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;We write and run unit tests for our Chrome extension using the Jest testing framework. Unit tests help us catch bugs
early, ensure our extension continues to work as expected, and make improve our code quality.&lt;/p&gt;
&lt;h3 id="build-a-production-ready-chrome-extension-video-playlist"&gt;&lt;a href="#build-a-production-ready-chrome-extension-video-playlist" class="header-anchor"&gt;&lt;/a&gt;Build a production-ready Chrome extension video playlist
&lt;/h3&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
&lt;iframe src="https://www.youtube.com/embed/videoseries?list=PLr-TrdMhEklS2CS7jEA_W6U5e96dN2kWa" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"&gt;&lt;/iframe&gt;
&lt;/div&gt;</description></item><item><title>Add webpack and TypeScript to a Chrome extension (2024)</title><link>https://victoronsoftware.com/posts/add-webpack-and-typescript-to-chrome-extension/</link><pubDate>Thu, 23 May 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/add-webpack-and-typescript-to-chrome-extension/</guid><description>&lt;img src="https://victoronsoftware.com/posts/add-webpack-and-typescript-to-chrome-extension/chrome-typescript-webpack.png" alt="Featured image of post Add webpack and TypeScript to a Chrome extension (2024)" /&gt;&lt;p&gt;This article is part of a series on creating a production-ready Chrome extension. The previous article covered &lt;a class="link" href="../create-chrome-extension" &gt;creating a basic Chrome extension without any tooling&lt;/a&gt;. For a list of all articles in the series, see the &lt;a class="link" href="../chrome-extension" &gt;Chrome extension series overview&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#what-is-webpack" &gt;Add webpack bundler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#what-is-typescript" &gt;Add TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#convert-webpack-configuration-from-javascript-to-typescript" &gt;Convert webpack configuration from JavaScript to TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="introduction"&gt;&lt;a href="#introduction" class="header-anchor"&gt;&lt;/a&gt;Introduction
&lt;/h1&gt;&lt;p&gt;This article will add the webpack module bundler and TypeScript support to the Chrome extension we created in the previous article. This software tooling will allow us to use modern JavaScript features and development tools.&lt;/p&gt;
&lt;p&gt;A module bundler and TypeScript are essential tools for modern web development. They improve the development experience for large or long-running projects.&lt;/p&gt;
&lt;h1 id="prerequisites---nodejs-and-npm"&gt;&lt;a href="#prerequisites---nodejs-and-npm" class="header-anchor"&gt;&lt;/a&gt;Prerequisites - Node.js and npm
&lt;/h1&gt;&lt;p&gt;Before we start, make sure you have &lt;a class="link" href="https://nodejs.org/" target="_blank" rel="noopener"
&gt;Node.js&lt;/a&gt; and &lt;a class="link" href="https://www.npmjs.com/" target="_blank" rel="noopener"
&gt;npm&lt;/a&gt; installed. Node.js is a JavaScript runtime. We will use it to run webpack and future development tools. npm is a JavaScript package manager.&lt;/p&gt;
&lt;p&gt;You can check if you have them installed by running the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;node -v
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm -v
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="packagejson"&gt;&lt;a href="#packagejson" class="header-anchor"&gt;&lt;/a&gt;package.json
&lt;/h1&gt;&lt;p&gt;First, we will create a &lt;code&gt;package.json&lt;/code&gt; file containing project and dependency info. We can use the &lt;code&gt;npm init&lt;/code&gt; command to create the file. Or manually create one containing something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;my-chrome-extension&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;repository&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://github.com/getvictor/create-chrome-extension&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;author&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;getvictor&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;license&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;MIT&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="what-is-webpack"&gt;&lt;a href="#what-is-webpack" class="header-anchor"&gt;&lt;/a&gt;What is webpack?
&lt;/h1&gt;&lt;p&gt;&lt;a class="link" href="https://webpack.js.org/" target="_blank" rel="noopener"
&gt;Webpack&lt;/a&gt; is a module bundler for JavaScript applications. It takes modules with dependencies and generates static assets representing those modules. We will use webpack to bundle multiple JavaScript files into a single file.&lt;/p&gt;
&lt;p&gt;A module bundler allows you to write modular code and bundle it into a single file. TypeScript is a superset of JavaScript that adds static typing and other features to the language.&lt;/p&gt;
&lt;p&gt;We will install webpack with &lt;code&gt;npm&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;npm install --save-dev webpack webpack-cli webpack-merge copy-webpack-plugin
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://www.npmjs.com/package/webpack" target="_blank" rel="noopener"
&gt;webpack&lt;/a&gt; is the core module bundler&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.npmjs.com/package/webpack-cli" target="_blank" rel="noopener"
&gt;webpack-cli&lt;/a&gt; is the command-line interface for webpack&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.npmjs.com/package/webpack-merge" target="_blank" rel="noopener"
&gt;webpack-merge&lt;/a&gt; is a utility to merge multiple webpack configurations, which we will use to differentiate development and production configs&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.npmjs.com/package/copy-webpack-plugin" target="_blank" rel="noopener"
&gt;copy-webpack-plugin&lt;/a&gt; is a plugin to copy files and directories in webpack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above &lt;code&gt;npm&lt;/code&gt; command will install the packages, create a &lt;code&gt;package-lock.json&lt;/code&gt; file, and add them to the &lt;code&gt;devDependencies&lt;/code&gt; section of the &lt;code&gt;package.json&lt;/code&gt; file. The updated &lt;code&gt;package.json&lt;/code&gt; should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;my-chrome-extension&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;repository&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://github.com/getvictor/create-chrome-extension&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;author&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;getvictor&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;license&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;MIT&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;devDependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;copy-webpack-plugin&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^12.0.2&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;webpack&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.91.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;webpack-cli&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.1.4&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;webpack-merge&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.10.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id="webpack-configuration"&gt;&lt;a href="#webpack-configuration" class="header-anchor"&gt;&lt;/a&gt;webpack configuration
&lt;/h1&gt;&lt;p&gt;Next, we will create webpack configuration files. Webpack uses a configuration file to define how to bundle the project. We will create two configurations: one for development and one for production. Initially, we will use JavaScript for the configuration files, but we will convert them to TypeScript later.&lt;/p&gt;
&lt;p&gt;Create a &lt;code&gt;webpack.common.js&lt;/code&gt; file with the shared configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;path&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;require&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CopyWebpackPlugin&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;require&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;copy-webpack-plugin&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;module&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;exports&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;background&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;./src/background.js&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;content&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;./src/content.js&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;popup&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;./src/popup.js&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;output&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;filename&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;[name].js&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;path&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;path&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;resolve&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;__dirname&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clean&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Clean the output directory before emit.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;plugins&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CopyWebpackPlugin&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;patterns&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [{ &lt;span style="color:#a6e22e"&gt;from&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;static&amp;#39;&lt;/span&gt; }],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a &lt;code&gt;webpack.dev.js&lt;/code&gt; file with the development configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;merge&lt;/span&gt; } &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;require&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;webpack-merge&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;common&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;require&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;./webpack.common.js&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;module&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;exports&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;merge&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;common&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mode&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;development&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;devtool&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;inline-source-map&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a &lt;code&gt;webpack.prod.js&lt;/code&gt; file with the production configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; { &lt;span style="color:#a6e22e"&gt;merge&lt;/span&gt; } &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;require&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;webpack-merge&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;common&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;require&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#39;./webpack.common.js&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;module&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;exports&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;merge&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;common&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mode&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;production&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;devtool&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;source-map&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="refactoring-directory-structure"&gt;&lt;a href="#refactoring-directory-structure" class="header-anchor"&gt;&lt;/a&gt;Refactoring directory structure
&lt;/h2&gt;&lt;p&gt;We will refactor the directory structure to separate the source code from the static files. Create a &lt;code&gt;src&lt;/code&gt; directory and move the JavaScript files (&lt;code&gt;background.js&lt;/code&gt;, &lt;code&gt;content.js&lt;/code&gt;, &lt;code&gt;popup.js&lt;/code&gt;) into it. Create a &lt;code&gt;static&lt;/code&gt; directory and move the &lt;code&gt;manifest.json&lt;/code&gt;, &lt;code&gt;popup.html&lt;/code&gt;, and &lt;code&gt;popup.css&lt;/code&gt; file into it.&lt;/p&gt;
&lt;p&gt;The directory structure should look like this (running &lt;a class="link" href="https://en.wikipedia.org/wiki/Tree_%28command%29" target="_blank" rel="noopener"
&gt;tree&lt;/a&gt;&lt;code&gt; . -I node_modules&lt;/code&gt;):&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;.
├── package-lock.json
├── package.json
├── src
│   ├── background.js
│   ├── content.js
│   └── popup.js
├── static
│   ├── manifest.json
│   ├── popup.css
│   └── popup.html
├── webpack.common.js
├── webpack.dev.js
└── webpack.prod.js
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="running-webpack"&gt;&lt;a href="#running-webpack" class="header-anchor"&gt;&lt;/a&gt;Running webpack
&lt;/h2&gt;&lt;p&gt;Now, we can run the webpack bundler using the following command:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;./node_modules/.bin/webpack --watch --config webpack.dev.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This command creates a &lt;code&gt;dist&lt;/code&gt; directory with the bundled files. The &lt;code&gt;--watch&lt;/code&gt; flag tells webpack to continue running, watch for changes, and recompile the files when changes occur. This recompilation is crucial for development, as it allows us to see our code changes in real time.&lt;/p&gt;
&lt;p&gt;We can run the production build with:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;./node_modules/.bin/webpack --config webpack.prod.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, we can add scripts to the &lt;code&gt;package.json&lt;/code&gt; file to simplify how we run webpack:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt; ...
&amp;#34;scripts&amp;#34;: {
&amp;#34;build&amp;#34;: &amp;#34;webpack --config webpack.prod.js&amp;#34;,
&amp;#34;start&amp;#34;: &amp;#34;webpack --watch --config webpack.dev.js&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These scripts allow us to run &lt;code&gt;npm run build&lt;/code&gt; to build the production version and &lt;code&gt;npm start&lt;/code&gt; (or &lt;code&gt;npm run start&lt;/code&gt;) to start the development version.&lt;/p&gt;
&lt;p&gt;At this point, we can test the browser extension to ensure it is still working as before. Open the Chrome browser, go to &lt;code&gt;chrome://extensions&lt;/code&gt;, enable &lt;code&gt;Developer mode&lt;/code&gt;, click on &lt;code&gt;Load unpacked&lt;/code&gt;, and select the &lt;code&gt;dist&lt;/code&gt; directory.&lt;/p&gt;
&lt;h1 id="what-is-typescript"&gt;&lt;a href="#what-is-typescript" class="header-anchor"&gt;&lt;/a&gt;What is TypeScript?
&lt;/h1&gt;&lt;p&gt;&lt;a class="link" href="https://www.typescriptlang.org/" target="_blank" rel="noopener"
&gt;TypeScript&lt;/a&gt; is a superset of JavaScript that adds static typing and other features to the language. It compiles to plain JavaScript and can be used in any browser or JavaScript engine. Although TypeScript is not required for writing Chrome extensions, it
is highly recommended as it can help catch errors early and improve code quality.&lt;/p&gt;
&lt;p&gt;We install TypeScript with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev typescript @tsconfig/recommended ts-node ts-loader @types/chrome
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://www.npmjs.com/package/typescript" target="_blank" rel="noopener"
&gt;typescript&lt;/a&gt; is the core TypeScript compiler&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.npmjs.com/package/@tsconfig/recommended" target="_blank" rel="noopener"
&gt;@tsconfig/recommended&lt;/a&gt; is a recommended TypeScript configuration, which we will use&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.npmjs.com/package/ts-node" target="_blank" rel="noopener"
&gt;ts-node&lt;/a&gt; is a TypeScript execution environment for Node.js, which is needed for converting the webpack configuration to TypeScript&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.npmjs.com/package/ts-loader" target="_blank" rel="noopener"
&gt;ts-loader&lt;/a&gt; is a TypeScript loader for webpack, which is needed for webpack to understand TypeScript source files&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://www.npmjs.com/package/@types/chrome" target="_blank" rel="noopener"
&gt;@types/chrome&lt;/a&gt; is the TypeScript type definitions for the Chrome extension API&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-are-typescript-type-definitions"&gt;&lt;a href="#what-are-typescript-type-definitions" class="header-anchor"&gt;&lt;/a&gt;What are TypeScript type definitions?
&lt;/h2&gt;&lt;p&gt;We loaded the &lt;code&gt;@types/chrome&lt;/code&gt; packages to provide TypeScript type definitions for the Chrome extension API.&lt;/p&gt;
&lt;p&gt;TypeScript type definitions are files that describe the shape of a JavaScript library. They provide type information for JavaScript libraries that were not written in TypeScript. This information allows TypeScript to understand the library&amp;rsquo;s API and provide type checking. With this information, TypeScript can check our code.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@types/chrome&lt;/code&gt; provides a global &lt;code&gt;chrome&lt;/code&gt; object representing the Chrome extension API. No additional code is needed to use it from the command line, as TypeScript automatically loads it. However, IDEs may need to be configured to recognize this global type definition.&lt;/p&gt;
&lt;h3 id="tsconfigjson"&gt;&lt;a href="#tsconfigjson" class="header-anchor"&gt;&lt;/a&gt;&lt;code&gt;tsconfig.json&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;Next, we will create a &lt;code&gt;tsconfig.json&lt;/code&gt; file to configure TypeScript. This file tells the TypeScript compiler how to compile the project. Create a &lt;code&gt;tsconfig.json&lt;/code&gt; file with the recommended config:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;extends&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;@tsconfig/recommended/tsconfig.json&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;compilerOptions&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;sourceMap&amp;#34;&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We added the &lt;code&gt;sourceMap&lt;/code&gt; option to generate source maps, which help debug TypeScript code in the browser.&lt;/p&gt;
&lt;h2 id="convert-webpack-configuration-from-javascript-to-typescript"&gt;&lt;a href="#convert-webpack-configuration-from-javascript-to-typescript" class="header-anchor"&gt;&lt;/a&gt;Convert webpack configuration from JavaScript to TypeScript
&lt;/h2&gt;&lt;p&gt;First, rename the webpack configuration files to TypeScript files by changing the extension from &lt;code&gt;.js&lt;/code&gt; to &lt;code&gt;.ts&lt;/code&gt;. For example, &lt;code&gt;webpack.common.js&lt;/code&gt; becomes &lt;code&gt;webpack.common.ts&lt;/code&gt;. Then, update the contents of the files to TypeScript syntax.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;webpack.common.ts&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;path&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;webpack&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;webpack&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CopyWebpackPlugin&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;copy-webpack-plugin&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;webpack.Configuration&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;background&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;./src/background.ts&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;content&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;./src/content.ts&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;popup&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;./src/popup.ts&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;output&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;filename&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;[name].js&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;path&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;path.resolve&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;__dirname&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clean&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Clean the output directory before emit.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;plugins&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CopyWebpackPlugin&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;patterns&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [{&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;}],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We made the following changes to the shared config:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We changed the &lt;code&gt;require&lt;/code&gt; statements to &lt;code&gt;import&lt;/code&gt; statements&lt;/li&gt;
&lt;li&gt;We changed the &lt;code&gt;module.exports&lt;/code&gt; to &lt;code&gt;export default&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We added the &lt;code&gt;webpack.Configuration&lt;/code&gt; type from the &lt;code&gt;webpack&lt;/code&gt; package&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;webpack.dev.ts&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; {&lt;span style="color:#a6e22e"&gt;Configuration&lt;/span&gt;} &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;webpack&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; {&lt;span style="color:#a6e22e"&gt;merge&lt;/span&gt;} &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;webpack-merge&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;./webpack.common&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;merged&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;merge&lt;/span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;Configuration&lt;/span&gt;&amp;gt;(&lt;span style="color:#a6e22e"&gt;config&lt;/span&gt;,{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mode&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;development&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;devtool&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;inline-source-map&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;merged&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;webpack.prod.ts&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; {&lt;span style="color:#a6e22e"&gt;Configuration&lt;/span&gt;} &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;webpack&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; {&lt;span style="color:#a6e22e"&gt;merge&lt;/span&gt;} &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;webpack-merge&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;./webpack.common&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;merged&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;merge&lt;/span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;Configuration&lt;/span&gt;&amp;gt;(&lt;span style="color:#a6e22e"&gt;config&lt;/span&gt;,{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mode&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;production&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;devtool&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;source-map&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;merged&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And update the &lt;code&gt;package.json&lt;/code&gt; scripts to use the TypeScript configuration files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#960050;background-color:#1e0010"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;build&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;webpack --config webpack.prod.ts&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;start&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;webpack --watch --config webpack.dev.ts&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can test &lt;code&gt;npm run start&lt;/code&gt; and &lt;code&gt;npm run build&lt;/code&gt; to ensure the new webpack Typescript configurations are working correctly.&lt;/p&gt;
&lt;h2 id="convert-javascript-source-files-to-typescript"&gt;&lt;a href="#convert-javascript-source-files-to-typescript" class="header-anchor"&gt;&lt;/a&gt;Convert JavaScript source files to TypeScript
&lt;/h2&gt;&lt;p&gt;Finally, we will convert the JavaScript source files to TypeScript. Rename the &lt;code&gt;.js&lt;/code&gt; files to &lt;code&gt;.ts&lt;/code&gt; files. For example, &lt;code&gt;background.js&lt;/code&gt; becomes &lt;code&gt;background.ts&lt;/code&gt;. Update the contents of the files to TypeScript syntax.&lt;/p&gt;
&lt;p&gt;Also, we will refactor the common &lt;code&gt;setBadgeText&lt;/code&gt; function to a shared &lt;code&gt;common.ts&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;boolean&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;text&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ON&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;OFF&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;action&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;({&lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;text&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Updated &lt;code&gt;background.ts&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; {&lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;} &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./common&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;startUp() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Ensure the background script always runs.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;onStartup&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addListener&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;startUp&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;onInstalled&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addListener&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;startUp&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Updated &lt;code&gt;content.ts&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;blurFilter&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;blur(6px)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;textToBlur&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Search this DOM node for text to blur and blur the parent element if found.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;Node&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;childNodes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;length&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Array.&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;childNodes&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;forEach&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;nodeType&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TEXT_NODE&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;textContent&lt;/span&gt; &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;textContent&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;trim&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;length&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;parentElement&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;tagName&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;SCRIPT&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;filter&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;blurFilter&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Already blurred
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;textContent&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;includes&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;textToBlur&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;blurElement&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;blurElement&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;HTMLElement&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;filter&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;blurFilter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;debug&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;blurred id:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34; class:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;className&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34; tag:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;tagName&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34; text:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;textContent&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create a MutationObserver to watch for changes to the DOM.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;observer&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MutationObserver&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;mutations&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mutations&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;forEach&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;mutation&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;mutation&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addedNodes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;length&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mutation&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addedNodes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;forEach&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;mutation&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Enable the content script by default.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;keys&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;keys&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;textToBlur&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Only start observing the DOM if the extension is enabled and there is text to blur.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;textToBlur&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;trim&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;length&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;observer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;observe&lt;/span&gt;(document, {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attributes&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;characterData&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;childList&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;subtree&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Loop through all elements on the page for initial processing.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;(document)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Updated &lt;code&gt;popup.ts&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; {&lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;} &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;./common&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello, world from popup!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Handle the ON/OFF switch
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;checkbox&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HTMLInputElement&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;checkbox&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;checked&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;!!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;checkbox&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addEventListener&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;change&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;instanceof&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HTMLInputElement&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;({&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;checked&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;checked&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Handle the input field
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;input&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;as&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HTMLInputElement&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;input&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;input&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addEventListener&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;change&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;instanceof&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HTMLInputElement&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;set&lt;/span&gt;({&lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="update-webpack-configuration-to-handle-typescript-source-files"&gt;&lt;a href="#update-webpack-configuration-to-handle-typescript-source-files" class="header-anchor"&gt;&lt;/a&gt;Update webpack configuration to handle TypeScript source files
&lt;/h2&gt;&lt;p&gt;Update &lt;code&gt;webpack.common.ts&lt;/code&gt; to use the new TypeScript source files and add the &lt;code&gt;ts-loader&lt;/code&gt; to the webpack configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;path&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;webpack&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;webpack&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CopyWebpackPlugin&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;copy-webpack-plugin&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;webpack.Configuration&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;background&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;./src/background.ts&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;content&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;./src/content.ts&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;popup&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;./src/popup.ts&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;resolve&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;extensions&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#34;.ts&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;module&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rules&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;test&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/\.ts$/&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;loader&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ts-loader&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;exclude&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/node_modules/&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;output&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;filename&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;[name].js&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;path&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;path.resolve&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;__dirname&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clean&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Clean the output directory before emit.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;plugins&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CopyWebpackPlugin&lt;/span&gt;({
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;patterns&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [{&lt;span style="color:#66d9ef"&gt;from&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;}],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;export&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;default&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;config&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="debug-our-typescript-extension-in-chrome"&gt;&lt;a href="#debug-our-typescript-extension-in-chrome" class="header-anchor"&gt;&lt;/a&gt;Debug our TypeScript extension in Chrome
&lt;/h2&gt;&lt;p&gt;Build the extension with &lt;code&gt;npm run start&lt;/code&gt; and load it in Chrome.&lt;/p&gt;
&lt;p&gt;Right-click the extension icon (&lt;code&gt;M&lt;/code&gt;) and select &lt;code&gt;Inspect popup&lt;/code&gt; to open the Chrome Developer Tools. By default, you can see the console logs from the &lt;code&gt;popup.ts&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Go to the &lt;code&gt;Sources&lt;/code&gt; tab in the Chrome Developer Tools and open the &lt;code&gt;top/my-chrome-extension/src/popup.ts&lt;/code&gt; file. You can set breakpoints and debug the popup script.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/add-webpack-and-typescript-to-chrome-extension/chrome-extension-debug.png"
alt="Debugging Chrome extension popup"&gt;&lt;figcaption&gt;
&lt;h4&gt;Debugging Chrome extension popup&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;popup.ts&lt;/code&gt; file should exactly match the TypeScript code we wrote. You can set breakpoints, inspect variables, and step through the code.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;&lt;a href="#next-steps" class="header-anchor"&gt;&lt;/a&gt;Next steps
&lt;/h2&gt;&lt;p&gt;In the next part of this series, we will add &lt;a class="link" href="../message-passing-in-chrome-extension" &gt;message passing between the content script, the background script, and the popup script&lt;/a&gt;. This communication will allow us to make real-time changes across all parts of our Chrome extension.&lt;/p&gt;
&lt;h2 id="chrome-extension-with-webpack-and-typescript-code-on-github"&gt;&lt;a href="#chrome-extension-with-webpack-and-typescript-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Chrome extension with webpack and TypeScript code on GitHub
&lt;/h2&gt;&lt;p&gt;The complete code is available on GitHub at: &lt;a class="link" href="https://github.com/getvictor/create-chrome-extension/tree/main/2-webpack-typescript" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/create-chrome-extension/tree/main/2-webpack-typescript&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="add-webpack-and-typescript-to-a-chrome-extension-video"&gt;&lt;a href="#add-webpack-and-typescript-to-a-chrome-extension-video" class="header-anchor"&gt;&lt;/a&gt;Add webpack and TypeScript to a Chrome extension video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/a3n-C-7u3VE"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Create a Chrome extension from scratch step-by-step (2024)</title><link>https://victoronsoftware.com/posts/create-chrome-extension/</link><pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/create-chrome-extension/</guid><description>&lt;img src="https://victoronsoftware.com/posts/create-chrome-extension/chrome-extension-headline.png" alt="Featured image of post Create a Chrome extension from scratch step-by-step (2024)" /&gt;&lt;p&gt;In this series, we will be building a production-ready Chrome extension. We will start with a basic extension and then
add more features.&lt;/p&gt;
&lt;h2 id="what-is-a-chrome-extension"&gt;&lt;a href="#what-is-a-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;What is a Chrome extension?
&lt;/h2&gt;&lt;p&gt;A Chrome extension is a small software program that customizes the browsing experience. It can modify and enhance the
functionality of the Chrome browser. Extensions are written using web technologies such as HTML, CSS, and JavaScript.&lt;/p&gt;
&lt;h2 id="why-build-a-chrome-extension"&gt;&lt;a href="#why-build-a-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;Why build a Chrome extension?
&lt;/h2&gt;&lt;p&gt;Users can utilize Chrome extensions to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modify web pages&lt;/li&gt;
&lt;li&gt;Automate tasks&lt;/li&gt;
&lt;li&gt;Integrate with third-party services&lt;/li&gt;
&lt;li&gt;Add new features to the browser&lt;/li&gt;
&lt;li&gt;And much more&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="prerequisites"&gt;&lt;a href="#prerequisites" class="header-anchor"&gt;&lt;/a&gt;Prerequisites
&lt;/h2&gt;&lt;p&gt;For this tutorial, no additional tools are required. We will create the extension using a text editor and the Chrome
browser.&lt;/p&gt;
&lt;h2 id="parts-of-chrome-extension"&gt;&lt;a href="#parts-of-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;Three parts of a Chrome extension
&lt;/h2&gt;&lt;p&gt;The three main parts of a Chrome extension are the background script, content script(s), and popup. All these parts are
optional.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/create-chrome-extension/chrome-extension-parts.svg"
alt="Parts of a Chrome extension"&gt;&lt;figcaption&gt;
&lt;h4&gt;Parts of a Chrome extension&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class="link" href="#create-background-script" &gt;background script&lt;/a&gt;: Also known as a &lt;strong&gt;service worker&lt;/strong&gt;, this is a long-running script
that runs in the background. It can listen for events and perform tasks.&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#create-content-script" &gt;content script(s)&lt;/a&gt;: This script runs in the context of a web page. It can interact with the
DOM and modify the page, including adding UI elements. The extension can statically inject this script or dynamically
inject it by the background script or the popup.&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#create-popup" &gt;popup&lt;/a&gt;: This small HTML page appears when a user clicks the extension icon. It can contain buttons,
forms, and other UI elements. This is the extension&amp;rsquo;s user interface.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These three parts of the extension run independently but can communicate with each other using message passing, events,
and storage.&lt;/p&gt;
&lt;p&gt;Our first extension will have a popup with a turn-on/off switch and an input field. The extension will blur the page
elements containing the text in the input field.&lt;/p&gt;
&lt;h2 id="manifestjson-configuration-file"&gt;&lt;a href="#manifestjson-configuration-file" class="header-anchor"&gt;&lt;/a&gt;&lt;code&gt;manifest.json&lt;/code&gt; configuration file
&lt;/h2&gt;&lt;p&gt;Create a &lt;code&gt;src&lt;/code&gt; directory for the extension. This directory will contain all the extension files.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;manifest.json&lt;/code&gt; file is the configuration file of a Chrome extension. It contains metadata about the extension, such
as its name, version, permissions, and scripts.&lt;/p&gt;
&lt;h2 id="create-popup"&gt;&lt;a href="#create-popup" class="header-anchor"&gt;&lt;/a&gt;Creating the popup
&lt;/h2&gt;&lt;p&gt;Add a &lt;code&gt;manifest.json&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;manifest_version&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;My Chrome Extension&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;My first Chrome extension.&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;default_popup&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;popup.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;permissions&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;storage&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;permissions&lt;/code&gt; specify the permissions required by the extension. In this case, we need the &lt;code&gt;storage&lt;/code&gt; permission to
store data in the Chrome storage so that the extension can remember the state of its configuration.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;popup.html&lt;/code&gt; with the content below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;html&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;lang&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;My popup&amp;lt;/&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;link&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;rel&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;href&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;popup.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;label&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;switch&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;checkbox&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;span&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;slider round&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;secret&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;popup.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our &lt;code&gt;popup.html&lt;/code&gt; includes a CSS file and a script. Create &lt;code&gt;popup.js&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;use strict&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello, world from popup!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;text&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ON&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;OFF&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;action&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;({&lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Handle the ON/OFF switch
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;checkbox&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;checkbox&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;checked&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;!!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;checkbox&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addEventListener&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;change&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;instanceof&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HTMLInputElement&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;set&lt;/span&gt;({&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;checked&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;checked&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Handle the input field
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;input&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;input&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;input&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addEventListener&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;change&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;instanceof&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HTMLInputElement&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;set&lt;/span&gt;({&lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script listens for changes in the switch and the input field. It saves the switch&amp;rsquo;s state and the input field&amp;rsquo;s
value in Chrome storage.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;popup.css&lt;/code&gt; with the following content to style the switch and the input field:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/* The switch - the box around the slider */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;switch&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;margin-left&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;%&lt;/span&gt;; &lt;span style="color:#75715e"&gt;/* Center the switch */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;position&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;relative&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;display&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;inline-block&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;width&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;60&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;height&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;34&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/* Hide default HTML checkbox */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;switch&lt;/span&gt; &lt;span style="color:#f92672"&gt;input&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;opacity&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;width&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;height&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/* The slider */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;slider&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;position&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;absolute&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;cursor&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;pointer&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;top&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;left&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;right&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bottom&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;background-color&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;#ccc&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;slider&lt;/span&gt;::&lt;span style="color:#a6e22e"&gt;before&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;position&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;absolute&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;content&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;height&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;26&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;width&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;26&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;left&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bottom&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;background-color&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;white&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt;:&lt;span style="color:#a6e22e"&gt;checked&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;slider&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;background-color&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;#2196F3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt;:&lt;span style="color:#a6e22e"&gt;checked&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;slider&lt;/span&gt;:&lt;span style="color:#a6e22e"&gt;before&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;transform&lt;/span&gt;: translateX(&lt;span style="color:#ae81ff"&gt;26&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;); &lt;span style="color:#75715e"&gt;/* Move the slider to the right when checked */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/* Rounded sliders */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;slider&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;round&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;border-radius&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;34&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;slider&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;round&lt;/span&gt;::&lt;span style="color:#a6e22e"&gt;before&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;border-radius&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;50&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;secret&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;margin&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="loading-and-testing-the-extension-in-chrome"&gt;&lt;a href="#loading-and-testing-the-extension-in-chrome" class="header-anchor"&gt;&lt;/a&gt;Loading and testing the extension in Chrome
&lt;/h2&gt;&lt;p&gt;Even though we have not added the background script and content script, we can load the extension in Chrome.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the Chrome browser.&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;chrome://extensions/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Enable the &lt;strong&gt;Developer mode&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Load unpacked&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;src&lt;/code&gt; directory containing the extension files.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Select Folder&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The extension will be loaded.&lt;/li&gt;
&lt;li&gt;Pin the extension to the toolbar by clicking the pin button in the extension dropdown. This pin will make it easier
to test the extension.&lt;/li&gt;
&lt;li&gt;The popup page will appear when you click the &lt;code&gt;M&lt;/code&gt; extension icon.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/create-chrome-extension/chrome-extension-popup.png"
alt="Chrome extension popup"&gt;&lt;figcaption&gt;
&lt;h4&gt;Chrome extension popup&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We can now do some basic testing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Test the switch and the input field. The state of the switch and the value of the input field should be saved in the
Chrome storage. The values should persist even after restarting the browser.&lt;/li&gt;
&lt;li&gt;The badge text of the extension icon should change to &amp;ldquo;ON&amp;rdquo; or &amp;ldquo;OFF&amp;rdquo; based on the state of the switch.&lt;/li&gt;
&lt;li&gt;To inspect the extension, right-click the extension icon and select &lt;strong&gt;Inspect popup&lt;/strong&gt;. You should see a &amp;ldquo;Hello,
world&amp;rdquo; message in the &lt;strong&gt;Console&lt;/strong&gt; tab.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="create-content-script"&gt;&lt;a href="#create-content-script" class="header-anchor"&gt;&lt;/a&gt;Creating the content script
&lt;/h2&gt;&lt;p&gt;Update the &lt;code&gt;manifest.json&lt;/code&gt; file to include the &lt;code&gt;content_scripts&lt;/code&gt; section. The entire file should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;manifest_version&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;My Chrome Extension&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;My first Chrome extension.&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;default_popup&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;popup.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;permissions&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;storage&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;content_scripts&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;matches&amp;#34;&lt;/span&gt;: [&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;lt;all_urls&amp;gt;&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;js&amp;#34;&lt;/span&gt;: [&lt;span style="color:#e6db74"&gt;&amp;#34;content.js&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create the new file &lt;code&gt;content.js&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;use strict&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;blurFilter&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;blur(6px)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;textToBlur&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Search this DOM node for text to blur and blur the parent element if found.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;childNodes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;length&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Array.&lt;span style="color:#a6e22e"&gt;from&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;childNodes&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;forEach&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;nodeType&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TEXT_NODE&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;textContent&lt;/span&gt; &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;textContent&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;trim&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;length&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;parentElement&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt; &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;tagName&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;SCRIPT&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;filter&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;blurFilter&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Already blurred
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;textContent&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;includes&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;textToBlur&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;blurElement&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;blurElement&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;filter&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;blurFilter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;debug&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;blurred id:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34; class:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;className&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34; tag:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;tagName&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34; text:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;textContent&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create a MutationObserver to watch for changes to the DOM.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;observer&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MutationObserver&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;mutations&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mutations&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;forEach&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;mutation&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;mutation&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addedNodes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;length&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mutation&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addedNodes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;forEach&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;mutation&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Enable the content script by default.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;keys&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;keys&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;textToBlur&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Only start observing the DOM if the extension is enabled and there is text to blur.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;textToBlur&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;trim&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;length&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;observer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;observe&lt;/span&gt;(document, {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attributes&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;characterData&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;childList&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;subtree&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Loop through all elements on the page for initial processing.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;(document)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script listens for changes in the DOM and blurs elements that contain the text specified in the input field of the
popup.&lt;/p&gt;
&lt;p&gt;At this point, we can test the extension by entering text in the input field and enabling it. After reloading the page,
the extension should blur elements that contain the text.&lt;/p&gt;
&lt;h2 id="create-background-script"&gt;&lt;a href="#create-background-script" class="header-anchor"&gt;&lt;/a&gt;Creating the background script
&lt;/h2&gt;&lt;p&gt;Our background script will update the badge text of the extension icon on startup.&lt;/p&gt;
&lt;p&gt;Update the &lt;code&gt;manifest.json&lt;/code&gt; file to include the &lt;code&gt;background&lt;/code&gt; section. The complete file should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;manifest_version&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;My Chrome Extension&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;My first Chrome extension.&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;default_popup&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;popup.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;permissions&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;storage&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;content_scripts&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;matches&amp;#34;&lt;/span&gt;: [&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;lt;all_urls&amp;gt;&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;js&amp;#34;&lt;/span&gt;: [&lt;span style="color:#e6db74"&gt;&amp;#34;content.js&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;background&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;service_worker&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;background.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a new file &lt;code&gt;background.js&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;use strict&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;text&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ON&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;OFF&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;action&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;({&lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;startUp&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Ensure the background script always runs.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;onStartup&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addListener&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;startUp&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;onInstalled&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addListener&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;startUp&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script listens for the startup and installation events and sets the badge text based on the extension&amp;rsquo;s saved state.&lt;/p&gt;
&lt;p&gt;At this point, our basic extension is complete. We can test the extension.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;&lt;a href="#next-steps" class="header-anchor"&gt;&lt;/a&gt;Next steps
&lt;/h2&gt;&lt;p&gt;In the next part of this series, we will
&lt;a class="link" href="../add-webpack-and-typescript-to-chrome-extension" &gt;add development tooling to the Chrome extension, such as TypeScript support, a bundling tool called webpack, and a development mode that will reload the extension automatically when changes are made&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a list of all articles in the series, see the
&lt;a class="link" href="../chrome-extension" &gt;production-ready Chrome extension series overview&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="other-getting-started-guides"&gt;&lt;a href="#other-getting-started-guides" class="header-anchor"&gt;&lt;/a&gt;Other getting started guides
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we wrote about
&lt;a class="link" href="../react-hello-world" &gt;creating a React application from scratch while minimizing the amount of tools used&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also have a guide on &lt;a class="link" href="../using-c-and-go-with-cgo-is-tricky" &gt;getting started with CGO in Go&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="basic-extension-code-on-github"&gt;&lt;a href="#basic-extension-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Basic extension code on GitHub
&lt;/h2&gt;&lt;p&gt;The complete code is available on GitHub at:
&lt;a class="link" href="https://github.com/getvictor/create-chrome-extension/tree/main/1-basic-extension" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/create-chrome-extension/tree/main/1-basic-extension&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="create-a-chrome-extension-from-scratch-step-by-step-video"&gt;&lt;a href="#create-a-chrome-extension-from-scratch-step-by-step-video" class="header-anchor"&gt;&lt;/a&gt;Create a Chrome extension from scratch step-by-step video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/2dQJYDAAU4I"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Build a React app from scratch: getting started (2024)</title><link>https://victoronsoftware.com/posts/react-hello-world/</link><pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/react-hello-world/</guid><description>&lt;img src="https://victoronsoftware.com/posts/react-hello-world/react-hello-world.png" alt="Featured image of post Build a React app from scratch: getting started (2024)" /&gt;&lt;h2 id="introduction"&gt;&lt;a href="#introduction" class="header-anchor"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;&lt;p&gt;In this article, we will create a simple React app from scratch. We will not use any templates or helper scripts. We aim
to reduce tool usage and fully understand each step of the process.&lt;/p&gt;
&lt;h2 id="what-is-react"&gt;&lt;a href="#what-is-react" class="header-anchor"&gt;&lt;/a&gt;What is React?
&lt;/h2&gt;&lt;p&gt;React is a popular JavaScript library for building user interfaces. It was created by Meta (Facebook) and is maintained
by Meta and a community of developers. React is used to build single-page applications (SPAs) and dynamic web
applications.&lt;/p&gt;
&lt;h2 id="prerequisites--nodejs-and-npm"&gt;&lt;a href="#prerequisites--nodejs-and-npm" class="header-anchor"&gt;&lt;/a&gt;Prerequisites &amp;ndash; Node.js and npm
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm" target="_blank" rel="noopener"
&gt;Node.js and npm&lt;/a&gt; are the most popular tools for
working with React. Node.js is a JavaScript runtime. npm is a package manager for Node.js. These two tools are essential
for modern web development.&lt;/p&gt;
&lt;h2 id="packagejson"&gt;&lt;a href="#packagejson" class="header-anchor"&gt;&lt;/a&gt;package.json
&lt;/h2&gt;&lt;p&gt;We will start by creating a &lt;code&gt;package.json&lt;/code&gt; file. This file contains metadata about the project and its dependencies. You
can use the &lt;code&gt;npm init&lt;/code&gt; command to create the &lt;code&gt;package.json&lt;/code&gt; file. Or create one yourself containing something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;react-hello-world&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Hello world app using React&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;repository&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://github.com/getvictor/react&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;author&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;getvictor&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;license&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;MIT&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="typescript"&gt;&lt;a href="#typescript" class="header-anchor"&gt;&lt;/a&gt;TypeScript
&lt;/h2&gt;&lt;p&gt;Next, we will add &lt;a class="link" href="https://www.typescriptlang.org/" target="_blank" rel="noopener"
&gt;TypeScript&lt;/a&gt; to our project. TypeScript is a superset of JavaScript
that adds static types to the language. It helps catch errors early in the development process and improves code
quality.&lt;/p&gt;
&lt;p&gt;Although TypeScript is not required to build a React app, it is strongly recommended. TypeScript is widely used in the
React community and provides many benefits. Modern IDEs, such as Visual Studio Code and WebStorm, support TypeScript,
making development and learning easier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev typescript
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command updates the &lt;code&gt;package.json&lt;/code&gt; file with the TypeScript dependency.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;react-hello-world&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Hello world app using React&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;repository&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://github.com/getvictor/react&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;author&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;getvictor&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;license&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;MIT&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;devDependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;typescript&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.4.5&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It also creates a &lt;code&gt;node_modules&lt;/code&gt; directory. This directory contains the packages installed by npm.&lt;/p&gt;
&lt;p&gt;Finally, the command creates a &lt;code&gt;package-lock.json&lt;/code&gt; file. This file locks the dependencies to specific versions, ensuring
that the project is built with the same versions of the dependencies across different machines.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;--save-dev&lt;/code&gt; flag tells npm to save the package as a development dependency. Development dependencies are not
required for the production build of the app.&lt;/p&gt;
&lt;h3 id="tsconfigjson"&gt;&lt;a href="#tsconfigjson" class="header-anchor"&gt;&lt;/a&gt;tsconfig.json
&lt;/h3&gt;&lt;p&gt;We need to create a &lt;code&gt;tsconfig.json&lt;/code&gt; file to
&lt;a class="link" href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html" target="_blank" rel="noopener"
&gt;configure TypeScript&lt;/a&gt;. This file specifies the root
files and compiler options for the TypeScript compiler. We will extend the recommended base configuration.&lt;/p&gt;
&lt;p&gt;Install the recommended configuration with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev @tsconfig/recommended
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, create a &lt;code&gt;tsconfig.json&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;extends&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;@tsconfig/recommended/tsconfig.json&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;compilerOptions&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;jsx&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;react-jsx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="what-is-jsx"&gt;&lt;a href="#what-is-jsx" class="header-anchor"&gt;&lt;/a&gt;What is JSX?
&lt;/h2&gt;&lt;p&gt;In our &lt;code&gt;tsconfig.json&lt;/code&gt; file, we set the &lt;code&gt;jsx&lt;/code&gt; option to &lt;code&gt;react-jsx&lt;/code&gt;. This option tells TypeScript to treat JSX as React
JSX.&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://en.wikipedia.org/wiki/JSX_%28JavaScript%29" target="_blank" rel="noopener"
&gt;JSX&lt;/a&gt; is a syntax extension for JavaScript. It allows you to write
HTML-like code in JavaScript. JSX is used in React. It is syntactic sugar that is generally transpiled into JavaScript
by the build tool.&lt;/p&gt;
&lt;h2 id="react-and-reactdom"&gt;&lt;a href="#react-and-reactdom" class="header-anchor"&gt;&lt;/a&gt;React and ReactDOM
&lt;/h2&gt;&lt;p&gt;Next, we will add &lt;a class="link" href="https://react.dev/" target="_blank" rel="noopener"
&gt;React&lt;/a&gt; and &lt;a class="link" href="https://react.dev/reference/react-dom" target="_blank" rel="noopener"
&gt;ReactDOM&lt;/a&gt; to our project.
React is the base library. ReactDOM is the package that provides DOM-specific methods for React.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install react react-dom
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since we are using TypeScript, we must also install
&lt;a class="link" href="https://www.typescriptlang.org/docs/handbook/2/type-declarations.html" target="_blank" rel="noopener"
&gt;type definitions&lt;/a&gt; for React and ReactDOM. The
TypeScript compiler uses these definitions for type checking.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev @types/react @types/react-dom
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="what-is-webpack"&gt;&lt;a href="#what-is-webpack" class="header-anchor"&gt;&lt;/a&gt;What is Webpack?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://webpack.js.org/" target="_blank" rel="noopener"
&gt;Webpack&lt;/a&gt; is a module bundler for JavaScript. It takes modules with dependencies and generates
static assets representing those modules. We will use Webpack as the build tool for our React app.&lt;/p&gt;
&lt;p&gt;We will install the Webpack packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev webpack webpack-cli webpack-dev-server html-webpack-plugin ts-loader
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;webpack&lt;/code&gt; is the core package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack-cli&lt;/code&gt; provides the command-line interface, which we will use to run Webpack commands&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack-dev-server&lt;/code&gt; is a development server that serves the app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html-webpack-plugin&lt;/code&gt; will generate the index.html file to serve our app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ts-loader&lt;/code&gt; is a TypeScript loader for Webpack. It allows Webpack to compile TypeScript files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="webpackconfigts"&gt;&lt;a href="#webpackconfigts" class="header-anchor"&gt;&lt;/a&gt;webpack.config.ts
&lt;/h3&gt;&lt;p&gt;By default, Webpack does not need a configuration file. However, since we use TypeScript, we must create a
&lt;code&gt;webpack.config.ts&lt;/code&gt; file to configure Webpack.&lt;/p&gt;
&lt;p&gt;Note that we use the &lt;code&gt;.ts&lt;/code&gt; extension for the configuration file. The TypeScript compiler will compile this file. Using a
&lt;code&gt;.js&lt;/code&gt; file is also possible, but we prefer TypeScript for type safety.&lt;/p&gt;
&lt;p&gt;No additional type definitions are required for our Webpack configuration at this time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HtmlWebpackPlugin&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;html-webpack-plugin&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;module&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;exports&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;./src/index.tsx&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;module&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rules&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;test&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/\.(ts|tsx)$/&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;loader&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ts-loader&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;exclude&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/node_modules/&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;plugins&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HtmlWebpackPlugin&lt;/span&gt;()],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We specify &lt;code&gt;src/index.tsx&lt;/code&gt; as our app&amp;rsquo;s top-level file. By default, the build&amp;rsquo;s output will go to the &lt;code&gt;dist&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;We configure the TypeScript loader to compile &lt;code&gt;.ts&lt;/code&gt; and &lt;code&gt;.tsx&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;We also use the &lt;code&gt;html-webpack-plugin&lt;/code&gt; to generate an &lt;code&gt;index.html&lt;/code&gt; file. This file will load the Webpack bundle.&lt;/p&gt;
&lt;p&gt;We need to add a TypeScript execution engine to the Node.js runtime so that it can understand the above TypeScript
configuration file. We will use &lt;code&gt;ts-node&lt;/code&gt; for this purpose.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev ts-node
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="final-packagejson"&gt;&lt;a href="#final-packagejson" class="header-anchor"&gt;&lt;/a&gt;Final package.json
&lt;/h2&gt;&lt;p&gt;After all the installations, our &lt;code&gt;package.json&lt;/code&gt; file should look similar to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;react-hello-world&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Hello world app using React&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;repository&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://github.com/getvictor/react&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;author&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;getvictor&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;license&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;MIT&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;devDependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;@tsconfig/recommended&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^1.0.6&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;@types/react&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^18.2.79&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;@types/react-dom&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^18.2.25&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;html-webpack-plugin&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.6.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;ts-loader&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^9.5.1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;ts-node&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^10.9.2&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;typescript&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.4.5&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;webpack&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.91.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;webpack-cli&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.1.4&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;webpack-dev-server&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.0.4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;react&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^18.2.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;react-dom&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^18.2.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="srcindextsx"&gt;&lt;a href="#srcindextsx" class="header-anchor"&gt;&lt;/a&gt;src/index.tsx
&lt;/h2&gt;&lt;p&gt;We are finally ready to write some React code. TSX files are TypeScript files that contain JSX.&lt;/p&gt;
&lt;p&gt;We will create the &lt;code&gt;src/index.tsx&lt;/code&gt; file. It will render a simple React component. React components are the reusable
building blocks of React apps.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-tsx" data-lang="tsx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;React&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;react&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; {&lt;span style="color:#a6e22e"&gt;createRoot&lt;/span&gt;} &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;react-dom/client&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// A simple Class component
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HelloWorld&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;extends&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;React&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Component&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;render() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;h1&lt;/span&gt;&amp;gt;&lt;span style="color:#a6e22e"&gt;Hello&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;world&lt;/span&gt;&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Use traditional DOM manipulation to create a root element for React
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;document.&lt;span style="color:#a6e22e"&gt;body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;innerHTML&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create a root element for React
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;app&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;createRoot&lt;/span&gt;(document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;app&amp;#34;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;!&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Render our HelloWorld component
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;app&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;render&lt;/span&gt;(&amp;lt;&lt;span style="color:#f92672"&gt;HelloWorld&lt;/span&gt;/&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="running-the-app-on-the-webpack-development-server"&gt;&lt;a href="#running-the-app-on-the-webpack-development-server" class="header-anchor"&gt;&lt;/a&gt;Running the app on the Webpack development server
&lt;/h2&gt;&lt;p&gt;Now, we can run the app on the Webpack development server. This server will serve the app and automatically reload the
page when the code changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;node_modules/.bin/webpack serve --mode development --open
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;--mode development&lt;/code&gt; flag tells Webpack to build the app in development mode. The &lt;code&gt;--open&lt;/code&gt; flag tells Webpack to
open the app in the default browser.&lt;/p&gt;
&lt;p&gt;The browser should show the following:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/react-hello-world/hello-world.png"
alt="React app served by Webpack dev server"&gt;&lt;figcaption&gt;
&lt;h4&gt;React app served by Webpack dev server&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="packagejson-scripts"&gt;&lt;a href="#packagejson-scripts" class="header-anchor"&gt;&lt;/a&gt;package.json scripts
&lt;/h3&gt;&lt;p&gt;Instead of remembering the above &lt;code&gt;webpack&lt;/code&gt; command, we can add a script to the &lt;code&gt;package.json&lt;/code&gt; file to run the Webpack
development server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;start&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;webpack serve --mode development --open&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;start&lt;/code&gt; is a special script name that maps to the &lt;code&gt;npm start&lt;/code&gt; command. Now, we can run the development server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm run start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="building-the-app-for-production"&gt;&lt;a href="#building-the-app-for-production" class="header-anchor"&gt;&lt;/a&gt;Building the app for production
&lt;/h2&gt;&lt;p&gt;To build the app for production, we can run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;node_modules/.bin/webpack --mode production
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will create a &lt;code&gt;dist&lt;/code&gt; directory with the app&amp;rsquo;s production build. The directory will contain the &lt;code&gt;index.html&lt;/code&gt;
file and the &lt;code&gt;main.js&lt;/code&gt; JavaScript bundle. The production files are optimized for performance, and they are minified and
compressed to reduce their size.&lt;/p&gt;
&lt;p&gt;It is possible to host these production files on a local HTTP server like Apache or Nginx, or deploy the app to cloud
providers such as AWS, Cloudflare Pages, Netlify, Render, or Vercel.&lt;/p&gt;
&lt;h2 id="other-getting-started-guides"&gt;&lt;a href="#other-getting-started-guides" class="header-anchor"&gt;&lt;/a&gt;Other getting started guides
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we wrote about
&lt;a class="link" href="../create-chrome-extension" &gt;creating a Chrome extension from scratch &lt;strong&gt;without&lt;/strong&gt; any additional tooling&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;As part of that series, we covered
&lt;a class="link" href="../linting-and-formatting-typescript" &gt;adding linting and formatting tooling for TypeScript&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We also have a guide on &lt;a class="link" href="../using-c-and-go-with-cgo-is-tricky" &gt;using CGO in Go programming language&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/react/tree/main/1-hello-world" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/react/tree/main/1-hello-world&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="react-hello-world-video"&gt;&lt;a href="#react-hello-world-video" class="header-anchor"&gt;&lt;/a&gt;React Hello World video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/BSjmsUpdSYE"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS (mTLS): building a client using the system keystore</title><link>https://victoronsoftware.com/posts/mtls/</link><pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls/mtls-handshake.png" alt="Featured image of post Mutual TLS (mTLS): building a client using the system keystore" /&gt;&lt;p&gt;We recently completed a series of articles on mutual TLS (mTLS). In this series, we covered the basics of mTLS, how to
use macOS keychain and Windows certificate store, and how to build an mTLS Go client. Our goal was to show you how to
use mTLS in your applications and securely store your mTLS certificates and keys without exposing them to the
filesystem.&lt;/p&gt;
&lt;p&gt;Here is a summary of the articles in the series:&lt;/p&gt;
&lt;h3 id="mutual-tls-intro-and-hands-on-example"&gt;&lt;a href="#mutual-tls-intro-and-hands-on-example" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-hello-world" &gt;Mutual TLS intro and hands-on example&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;An introduction to mTLS and a hands-on example of using an mTLS client to connect to an mTLS server.&lt;/p&gt;
&lt;h3 id="using-mtls-with-the-macos-keychain"&gt;&lt;a href="#using-mtls-with-the-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-with-apple-keychain" &gt;Using mTLS with the macOS keychain&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;A guide on how to use the macOS system keystore to store your mTLS certificates and keys. We connect to an mTLS server
with applications that use the macOS system keychain to find the mTLS certificates.&lt;/p&gt;
&lt;h3 id="create-an-mtls-go-client"&gt;&lt;a href="#create-an-mtls-go-client" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-go-client" &gt;Create an mTLS Go client&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;We create a standard mTLS client in Go using the &lt;code&gt;crypto/tls&lt;/code&gt; library. This client loads the client certificate and
private key from the filesystem.&lt;/p&gt;
&lt;h3 id="add-a-custom-certificate-signer-to-the-mtls-go-client"&gt;&lt;a href="#add-a-custom-certificate-signer-to-the-mtls-go-client" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-go-custom-signer" &gt;Add a custom certificate signer to the mTLS Go client&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;We implement a custom &lt;code&gt;crypto.Signer&lt;/code&gt; to sign a client certificate during the mTLS handshake. Thus, we are a step closer
to removing our client certificate and private key from the filesystem.&lt;/p&gt;
&lt;h3 id="a-complete-mtls-go-client-using-the-macos-keychain"&gt;&lt;a href="#a-complete-mtls-go-client-using-the-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;A complete mTLS Go client using the macOS keychain&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;In this article, we continue the previous article by connecting our custom signer to the macOS keychain using CGO and
Apple APIs.&lt;/p&gt;
&lt;h3 id="using-mtls-with-the-windows-certificate-store"&gt;&lt;a href="#using-mtls-with-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-with-windows" &gt;Using mTLS with the Windows certificate store&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Switching to Windows, we learn how to use the Windows system keystore to store your mTLS certificates and keys. We
connect to an mTLS server with applications that use the Windows certificate store to find the mTLS certificates.&lt;/p&gt;
&lt;h3 id="create-an-mtls-go-client-using-the-windows-certificate-store"&gt;&lt;a href="#create-an-mtls-go-client-using-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-go-client-windows-certificate-store" &gt;Create an mTLS Go client using the Windows certificate store&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Using the software pattern from the previous articles on the macOS keychain, we build an mTLS client in Go integrated
with the Windows certificate store to store the mTLS certificates and keys.&lt;/p&gt;
&lt;h3 id="mtls-vs-http-signature-faceoff-securing-your-apis"&gt;&lt;a href="#mtls-vs-http-signature-faceoff-securing-your-apis" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-vs-http-signature/" &gt;mTLS vs HTTP signature faceoff: securing your APIs&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Where do mTLS and HTTP message signatures fit, and how to choose the right one for your architecture.&lt;/p&gt;
&lt;h3 id="mutual-tls-mtls-building-a-client-using-the-system-keystore-video-playlist"&gt;&lt;a href="#mutual-tls-mtls-building-a-client-using-the-system-keystore-video-playlist" class="header-anchor"&gt;&lt;/a&gt;Mutual TLS (mTLS): building a client using the system keystore video playlist
&lt;/h3&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
&lt;iframe src="https://www.youtube.com/embed/videoseries?list=PLr-TrdMhEklRF4lQ_bIH0WJTUiY8ldc0W" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"&gt;&lt;/iframe&gt;
&lt;/div&gt;</description></item><item><title>Mutual TLS (mTLS) Go client using Windows certificate store</title><link>https://victoronsoftware.com/posts/mtls-go-client-windows-certificate-store/</link><pubDate>Wed, 20 Mar 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-go-client-windows-certificate-store/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-go-client-windows-certificate-store/mtls-go-windows.png" alt="Featured image of post Mutual TLS (mTLS) Go client using Windows certificate store" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-client" &gt;mTLS Go client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;mTLS Go client using macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-with-windows" &gt;mTLS with Windows certificate store&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-use-the-windows-certificate-store"&gt;&lt;a href="#why-use-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Why use the Windows certificate store?
&lt;/h2&gt;&lt;p&gt;Keeping the mTLS client private key on the filesystem is insecure and not recommended. In the &lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;mTLS Go client using macOS keychain&lt;/a&gt;, we demonstrated achieving greater mTLS security with macOS keychain. In this article, we reach a similar level of protection with the Windows certificate store.&lt;/p&gt;
&lt;p&gt;The Windows certificate store is a secure location where certificates and keys can be stored. Many applications, such as Edge and Powershell, use it. The Windows certificate store is an excellent place to store mTLS client certificates and keys.&lt;/p&gt;
&lt;h2 id="building-a-custom-tlscertificate-for-the-windows-certificate-store"&gt;&lt;a href="#building-a-custom-tlscertificate-for-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Building a custom tls.Certificate for the Windows certificate store
&lt;/h2&gt;&lt;p&gt;This work builds on the &lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt; article. We will use the &lt;code&gt;CustomSigner&lt;/code&gt; from that article to build a custom &lt;code&gt;tls.Certificate&lt;/code&gt; that uses the Windows certificate store.&lt;/p&gt;
&lt;p&gt;However, before the application uses the &lt;code&gt;Public&lt;/code&gt; and &lt;code&gt;Sign&lt;/code&gt; methods of the &lt;code&gt;CustomSigner,&lt;/code&gt; we must retrieve the client certificate using Windows APIs.&lt;/p&gt;
&lt;h3 id="retrieving-mtls-client-certificate-from-windows-certificate-store-using-go"&gt;&lt;a href="#retrieving-mtls-client-certificate-from-windows-certificate-store-using-go" class="header-anchor"&gt;&lt;/a&gt;Retrieving mTLS client certificate from Windows certificate store using Go
&lt;/h3&gt;&lt;p&gt;We will use the &lt;a class="link" href="https://pkg.go.dev/golang.org/x/sys/windows" target="_blank" rel="noopener"
&gt;golang.org/x/sys/windows&lt;/a&gt; package to access the Windows APIs. We use the &lt;code&gt;windows&lt;/code&gt; package to call the &lt;a class="link" href="https://learn.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-certopenstore" target="_blank" rel="noopener"
&gt;CertOpenStore&lt;/a&gt;, &lt;a class="link" href="https://learn.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-certfindcertificateinstore" target="_blank" rel="noopener"
&gt;CertFindCertificateInStore&lt;/a&gt;, and &lt;a class="link" href="https://learn.microsoft.com/en-us/windows/win32/api/wincrypt/nf-wincrypt-cryptacquirecertificateprivatekey" target="_blank" rel="noopener"
&gt;CryptAcquireCertificatePrivateKey&lt;/a&gt; functions from the &lt;code&gt;crypt32&lt;/code&gt; DLL (dynamic link library).&lt;/p&gt;
&lt;p&gt;First, we open the &lt;code&gt;MY&lt;/code&gt; store, which is the personal store for the current user. This store contains our client mTLS certificate.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Open the certificate store&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;storePtr&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UTF16PtrFromString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;windowsStoreName&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;store&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CertOpenStore&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CERT_STORE_PROV_SYSTEM&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CERT_SYSTEM_STORE_CURRENT_USER&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;storePtr&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Next, we find the certificate by the common name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Find the certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pPrevCertContext&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CertContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;certContext&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CertContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;commonNamePtr&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UTF16PtrFromString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;commonName&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;certContext&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CertFindCertificateInStore&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;store&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;X509_ASN_ENCODING&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CERT_FIND_SUBJECT_STR&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;commonNamePtr&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pPrevCertContext&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// We can extract the certificate chain and further filter the certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// we want here.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="converting-the-windows-certificate-to-a-go-x509certificate"&gt;&lt;a href="#converting-the-windows-certificate-to-a-go-x509certificate" class="header-anchor"&gt;&lt;/a&gt;Converting the Windows certificate to a Go &lt;code&gt;x509.Certificate&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;After retrieving the certificate from the Windows certificate store, we convert it to a Go &lt;code&gt;x509.Certificate&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Copy the certificate data so that we have our own copy outside the windows context&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;encodedCert&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Slice&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;certContext&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;EncodedCert&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;certContext&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Length&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;buf&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Clone&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;encodedCert&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ParseCertificate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;buf&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="building-the-custom-tlscertificate"&gt;&lt;a href="#building-the-custom-tlscertificate" class="header-anchor"&gt;&lt;/a&gt;Building the custom &lt;code&gt;tls.Certificate&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;Finally, we put together the custom &lt;code&gt;tls.Certificate&lt;/code&gt; using the &lt;code&gt;x509.Certificate&lt;/code&gt;. We hold on to the &lt;code&gt;certContext&lt;/code&gt; pointer to get the private key later.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;customSigner&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;store&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;store&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windowsCertContext&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;certContext&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;customSigner&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;: [][]&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Raw&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;PrivateKey&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;customSigner&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SupportedSignatureAlgorithms&lt;/span&gt;: []&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SignatureScheme&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;supportedAlgorithm&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our example only supports the &lt;code&gt;tls.PSSWithSHA256&lt;/code&gt; signature algorithm to keep the code simple.&lt;/p&gt;
&lt;h2 id="signing-the-mtls-digest-with-the-windows-certificate-store"&gt;&lt;a href="#signing-the-mtls-digest-with-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Signing the mTLS digest with the Windows certificate store
&lt;/h2&gt;&lt;p&gt;As discussed in the previous &lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt; article, we must sign the &lt;code&gt;CertificateVerify&lt;/code&gt; message during the TLS handshake. We will use the &lt;code&gt;CustomSigner&lt;/code&gt; to sign the digest, which implements the &lt;code&gt;crypto.Signer&lt;/code&gt; interface as defined in the Go standard library&amp;rsquo;s &lt;code&gt;crypto&lt;/code&gt; package.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// CustomSigner is a crypto.Signer that uses the client certificate and key to sign&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;store&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Handle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windowsCertContext&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CertContext&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Public&lt;/span&gt;() &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;crypto.Signer.Public\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Sign&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Reader&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SignerOpts&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ) (&lt;span style="color:#a6e22e"&gt;signature&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="retrieve-the-private-key-reference-from-the-windows-certificate-store"&gt;&lt;a href="#retrieve-the-private-key-reference-from-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Retrieve the private key reference from the Windows certificate store
&lt;/h4&gt;&lt;p&gt;We retrieve the private key reference from the Windows certificate store using the &lt;code&gt;CryptAcquireCertificatePrivateKey&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Get private key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Handle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pdwKeySpec&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;uint32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pfCallerFreeProvOrNCryptKey&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CryptAcquireCertificatePrivateKey&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;windowsCertContext&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CRYPT_ACQUIRE_CACHE_FLAG&lt;/span&gt;|&lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CRYPT_ACQUIRE_SILENT_FLAG&lt;/span&gt;|
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CRYPT_ACQUIRE_ONLY_NCRYPT_KEY_FLAG&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;pdwKeySpec&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;pfCallerFreeProvOrNCryptKey&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="signing-the-mtls-digest"&gt;&lt;a href="#signing-the-mtls-digest" class="header-anchor"&gt;&lt;/a&gt;Signing the mTLS digest
&lt;/h4&gt;&lt;p&gt;We will use the &lt;a class="link" href="https://learn.microsoft.com/en-us/windows/win32/api/ncrypt/nf-ncrypt-ncryptsignhash" target="_blank" rel="noopener"
&gt;NCryptSignHash&lt;/a&gt; function from &lt;code&gt;ncrypt.dll&lt;/code&gt; to sign the digest.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;nCrypt&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;MustLoadDLL&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;ncrypt.dll&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;nCryptSignHash&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;nCrypt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;MustFindProc&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;NCryptSignHash&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But before we do that, we must create a &lt;code&gt;BCRYPT_PSS_PADDING_INFO&lt;/code&gt; structure for our supported RSA-PSS algorithm.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;flags&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;nCryptSilentFlag&lt;/span&gt; | &lt;span style="color:#a6e22e"&gt;bCryptPadPss&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;pPaddingInfo&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getRsaPssPadding&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;getRsaPssPadding&lt;/code&gt; is a helper function:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;getRsaPssPadding&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SignerOpts&lt;/span&gt;) (&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pssOpts&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;ok&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;.(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;rsa&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PSSOptions&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;ok&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pssOpts&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Hash&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SHA256&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;unsupported hash function %s&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;HashFunc&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pssOpts&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SaltLength&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;rsa&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PSSSaltLengthEqualsHash&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;unsupported salt length %d&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;pssOpts&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SaltLength&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sha256&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;windows&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UTF16PtrFromString&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;SHA256&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Create BCRYPT_PSS_PADDING_INFO structure:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// typedef struct _BCRYPT_PSS_PADDING_INFO {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// LPCWSTR pszAlgId;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ULONG cbSalt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// } BCRYPT_PSS_PADDING_INFO;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pszAlgId&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;uint16&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cbSalt&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;uint32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;pszAlgId&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;sha256&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cbSalt&lt;/span&gt;: uint32(&lt;span style="color:#a6e22e"&gt;pssOpts&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;HashFunc&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;Size&lt;/span&gt;()),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ), &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, we sign the digest using the &lt;code&gt;NCryptSignHash&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Sign the digest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// The first call to NCryptSignHash retrieves the size of the signature&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;size&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;uint32&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;success&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;nCryptSignHash&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Call&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;pPaddingInfo&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(len(&lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;flags&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;success&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;NCryptSignHash: failed to get signature length: %#x&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;success&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// The second call to NCryptSignHash retrieves the signature&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;signature&lt;/span&gt; = make([]&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;success&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;nCryptSignHash&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Call&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;pPaddingInfo&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(len(&lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;signature&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;size&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; uintptr(&lt;span style="color:#a6e22e"&gt;flags&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;success&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;NCryptSignHash: failed to generate signature: %#x&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;success&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;signature&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="putting-it-all-together"&gt;&lt;a href="#putting-it-all-together" class="header-anchor"&gt;&lt;/a&gt;Putting it all together
&lt;/h2&gt;&lt;p&gt;With the above code, we can create our new Go mTLS client that uses the Windows certificate store.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;url&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Parse&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to is required&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Client&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;TLSClientConfig&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Config&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;signer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;MinVersion&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;VersionTLS13&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;MaxVersion&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;VersionTLS13&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Make a GET request to the URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Get&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error making get request: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;() { &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Close&lt;/span&gt;() }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Read the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadAll&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error reading response: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Print the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt;, string(&lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We limit the scope of this example to TLS 1.3&lt;/p&gt;
&lt;h2 id="setting-up-the-environment"&gt;&lt;a href="#setting-up-the-environment" class="header-anchor"&gt;&lt;/a&gt;Setting up the environment
&lt;/h2&gt;&lt;p&gt;The next step is to use the Windows certificate store to store the client certificate and private key. We will use the certificates and keys scripts from the previous &lt;a class="link" href="../mtls-with-windows" &gt;mTLS with Windows certificate store&lt;/a&gt; article. If you still need to generate the certificates and keys, please follow the instructions in that article.&lt;/p&gt;
&lt;p&gt;Finally, as in the &lt;a class="link" href="../mtls-with-windows" &gt;mTLS with Windows certificate store&lt;/a&gt; article, we start two nginx servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://&amp;lt;your_host&amp;gt;:8888 for TLS&lt;/li&gt;
&lt;li&gt;https://&amp;lt;your_host&amp;gt;:8889 for mTLS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="running-the-go-mtls-client-using-the-windows-certificate-store"&gt;&lt;a href="#running-the-go-mtls-client-using-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Running the Go mTLS client using the Windows certificate store
&lt;/h2&gt;&lt;p&gt;We can run our mTLS client without pointing to certificate/key files and retrieving everything from the Windows certificate store. Hitting the ordinary TLS server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run .\client-signer.go --url https&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;//myhost&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8888&lt;/span&gt;/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Returns the expected:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;TLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While hitting the mTLS server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run .\client-signer.go --url https&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;//myhost&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8889&lt;/span&gt;/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Returns a more detailed message, including the print statements in our custom code:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Server requested certificate
Found certificate with common name testClientTLS
crypto.Signer.Public
crypto.Signer.Public
crypto.Signer.Sign with key type *rsa.PublicKey, opts type *rsa.PSSOptions, hash SHA-256
mTLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/mtls-go-windows" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/mtls-go-windows&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mtls-go-client-using-windows-certificate-store-video"&gt;&lt;a href="#mtls-go-client-using-windows-certificate-store-video" class="header-anchor"&gt;&lt;/a&gt;mTLS Go client using Windows certificate store video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/L4uk43i3kyY"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Fully supporting Unicode and emojis in your app</title><link>https://victoronsoftware.com/posts/unicode-and-emoji-gotchas/</link><pubDate>Thu, 29 Feb 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/unicode-and-emoji-gotchas/</guid><description>&lt;img src="https://victoronsoftware.com/posts/unicode-and-emoji-gotchas/unicode-emoji.png" alt="Featured image of post Fully supporting Unicode and emojis in your app" /&gt;&lt;h2 id="introduction"&gt;&lt;a href="#introduction" class="header-anchor"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;&lt;p&gt;Any app aiming to reach an international audience must support Unicode. Emojis, which are based on Unicode, are everywhere. They are used in text messages, social media, and programming languages. Supporting Unicode and emojis in your app can be tricky. This article will cover common Unicode and emoji support issues and how to fix them.&lt;/p&gt;
&lt;h2 id="what-is-unicode"&gt;&lt;a href="#what-is-unicode" class="header-anchor"&gt;&lt;/a&gt;What is Unicode?
&lt;/h2&gt;&lt;p&gt;Unicode is a standard for encoding, representing, and handling text. It is a character set that assigns a unique number to every character. The most common encoding for Unicode is UTF-8, which stands for Unicode Transformation Format 8-bit. UTF-8 is a variable-width encoding that can represent every character in the Unicode character set.&lt;/p&gt;
&lt;p&gt;UTF-8 format can take one to four bytes to represent a code point. Multiple code points can be combined to form a single character. For example, the emoji &amp;ldquo;👍&amp;rdquo; is represented by the code point &lt;code&gt;U+1F44D&lt;/code&gt;. In UTF-8, it is represented by the bytes &lt;code&gt;F0 9F 91 8D&lt;/code&gt;. The same emoji with skin tone &amp;ldquo;👍🏽&amp;rdquo; is represented by the code point &lt;code&gt;U+1F44D U+1F3FD&lt;/code&gt;. In UTF-8, that emoji is represented by the bytes &lt;code&gt;F0 9F 91 8D F0 9F 8F BD&lt;/code&gt;. Generally, emojis take up at least four bytes in UTF-8.&lt;/p&gt;
&lt;h2 id="unicode-equivalence"&gt;&lt;a href="#unicode-equivalence" class="header-anchor"&gt;&lt;/a&gt;Unicode equivalence
&lt;/h2&gt;&lt;p&gt;Our first gotcha is unicode equivalence.&lt;/p&gt;
&lt;p&gt;Unicode equivalence is the concept that two different sequences of code points can represent the same character. For example, the character &lt;code&gt;é&lt;/code&gt; can be represented by the code point &lt;code&gt;U+00E9&lt;/code&gt; or by the sequence of code points &lt;code&gt;U+0065 U+0301&lt;/code&gt;. The first representation is the composed form, and the second is the decomposed form. Unicode equivalence is essential when comparing strings or searching for a string character.&lt;/p&gt;
&lt;p&gt;Databases typically do not support Unicode equivalence out of the box. For example, given this table using MySQL 5.7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;CREATE&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;TABLE&lt;/span&gt; test (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; id INT UNSIGNED &lt;span style="color:#66d9ef"&gt;NOT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;NULL&lt;/span&gt; AUTO_INCREMENT,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; name VARCHAR(&lt;span style="color:#ae81ff"&gt;255&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;NOT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;PRIMARY&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;KEY&lt;/span&gt; (id))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CHARACTER &lt;span style="color:#66d9ef"&gt;SET&lt;/span&gt; utf8mb4 &lt;span style="color:#66d9ef"&gt;COLLATE&lt;/span&gt; utf8mb4_unicode_ci;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;INSERT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;INTO&lt;/span&gt; test (name) &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;가&amp;#39;&lt;/span&gt;), (CONCAT(&lt;span style="color:#e6db74"&gt;&amp;#39;ᄀ&amp;#39;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#39;ᅡ&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; test &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;가&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The query will return a single row, even though the Korean character &lt;code&gt;가&lt;/code&gt; and character sequence &lt;code&gt;ᄀ&lt;/code&gt; + &lt;code&gt;ᅡ&lt;/code&gt; are equivalent. The incorrect result is because the &lt;code&gt;utf8mb4_unicode_ci&lt;/code&gt; collation does not support Unicode equivalence. One way to fix this is to use the &lt;code&gt;utf8mb4_0900_ai_ci&lt;/code&gt; collation, which supports Unicode equivalence. However, this requires updating the database to MySQL 8.0 or later, which may not be possible in some cases.&lt;/p&gt;
&lt;h2 id="emoji-equivalence"&gt;&lt;a href="#emoji-equivalence" class="header-anchor"&gt;&lt;/a&gt;Emoji equivalence
&lt;/h2&gt;&lt;p&gt;Our second gotcha is emoji equivalence.&lt;/p&gt;
&lt;p&gt;Some databases may not support emoji equivalence out of the box. For example, given this table using MySQL 5.7:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;CREATE&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;TABLE&lt;/span&gt; test (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; id INT UNSIGNED &lt;span style="color:#66d9ef"&gt;NOT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;NULL&lt;/span&gt; AUTO_INCREMENT,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; name VARCHAR(&lt;span style="color:#ae81ff"&gt;255&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;NOT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;NULL&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;PRIMARY&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;KEY&lt;/span&gt; (id))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; CHARACTER &lt;span style="color:#66d9ef"&gt;SET&lt;/span&gt; utf8mb4 &lt;span style="color:#66d9ef"&gt;COLLATE&lt;/span&gt; utf8mb4_unicode_ci;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;INSERT&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;INTO&lt;/span&gt; test (name) &lt;span style="color:#66d9ef"&gt;VALUES&lt;/span&gt; (&lt;span style="color:#e6db74"&gt;&amp;#39;🔥&amp;#39;&lt;/span&gt;), (&lt;span style="color:#e6db74"&gt;&amp;#39;🔥🔥&amp;#39;&lt;/span&gt;), (&lt;span style="color:#e6db74"&gt;&amp;#39;👍&amp;#39;&lt;/span&gt;), (&lt;span style="color:#e6db74"&gt;&amp;#39;👍🏽&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; test &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; name &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;🔥&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The query will return:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1,🔥
3,👍
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And the following query:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; test &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; name &lt;span style="color:#66d9ef"&gt;LIKE&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;%🔥%&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Will return:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1,🔥
2,🔥🔥
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;utf8mb4_unicode_ci&lt;/code&gt; collation does not support emoji equivalence, and the behavior of &lt;code&gt;=&lt;/code&gt; differs from &lt;code&gt;LIKE.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;One way to fix the problem of emoji equivalence is to use a different collation during the &lt;code&gt;=&lt;/code&gt; comparison. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-sql" data-lang="sql"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;SELECT&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; test &lt;span style="color:#66d9ef"&gt;WHERE&lt;/span&gt; name &lt;span style="color:#66d9ef"&gt;COLLATE&lt;/span&gt; utf8mb4_bin &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;🔥&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Will return the single correct result:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;1,🔥
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, this solution is not ideal because it requires the developer to remember to use the &lt;code&gt;utf8mb4_bin&lt;/code&gt; collation for emoji equivalence. There is also a slight performance impact when using a different collation.&lt;/p&gt;
&lt;h2 id="case-insensitive-sorting"&gt;&lt;a href="#case-insensitive-sorting" class="header-anchor"&gt;&lt;/a&gt;Case-insensitive sorting
&lt;/h2&gt;&lt;p&gt;Our third gotcha is sorting.&lt;/p&gt;
&lt;p&gt;Typically, app users want to see case-insensitive sorting of strings. For example, the strings &amp;ldquo;apple&amp;rdquo;, &amp;ldquo;Banana&amp;rdquo;, and &amp;ldquo;cherry&amp;rdquo; should be sorted as &amp;ldquo;apple&amp;rdquo;, &amp;ldquo;Banana&amp;rdquo;, and &amp;ldquo;cherry&amp;rdquo;. The &lt;code&gt;utf8mb4_unicode_ci&lt;/code&gt; collation used above supports case-insensitive sorting. However, switching to another collation, such as &lt;code&gt;utf8mb4_bin&lt;/code&gt;, to support emoji equivalence will break case-insensitive sorting. Hence, whatever solution you develop for full Unicode support should also support case-insensitive sorting.&lt;/p&gt;
&lt;h2 id="solving-our-gotchas-with-normalization"&gt;&lt;a href="#solving-our-gotchas-with-normalization" class="header-anchor"&gt;&lt;/a&gt;Solving our gotchas with normalization
&lt;/h2&gt;&lt;p&gt;A partial solution to the above gotchas is to use normalization. Normalization is the process of transforming text into a standard form. Unicode defines four normalization forms: NFC, NFD, NFKC, and NFKD. The most common normalization form is NFC, which is the composed form. NFC is the standard form for most text processing.&lt;/p&gt;
&lt;p&gt;For example, in the following Go code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;golang.org/x/text/unicode/norm&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;strconv&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;str1&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strconv&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Unquote&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;`&amp;#34;\uAC00&amp;#34;`&lt;/span&gt;) &lt;span style="color:#75715e"&gt;// 가&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;str2&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strconv&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Unquote&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;`&amp;#34;\u1100\u1161&amp;#34;`&lt;/span&gt;) &lt;span style="color:#75715e"&gt;// ᄀ + ᅡ&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;str1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;str2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;str1&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;str2&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;raw equal&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;raw not equal&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;strNorm1&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;norm&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NFC&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;str1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;strNorm2&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;norm&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NFC&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;str2&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strNorm1&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strNorm2&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;normalized equal&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;normalized not equal&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The two strings are not equal in their raw form but equal after normalization. Normalizing before inserting, updating, and searching in the database can solve the Unicode equivalence issue while allowing the user to keep the case-insensitive sorting.&lt;/p&gt;
&lt;p&gt;To solve emoji equivalence, we can use the &lt;code&gt;utf8mb4_bin&lt;/code&gt; collation for the &lt;code&gt;=&lt;/code&gt; comparison. However, if our column is indexed, we may need to use the &lt;code&gt;utf8mb4_bin&lt;/code&gt; collation for the index. We cannot have a different collation for the column and the index, but we could use a second generated column with the &lt;code&gt;utf8mb4_bin&lt;/code&gt; collation and index that column.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;&lt;a href="#conclusion" class="header-anchor"&gt;&lt;/a&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;Unicode and emoji support is essential for any app aiming to reach an international audience. Unicode equivalence, emoji equivalence, and case-insensitive sorting are common issues with Unicode and emoji support. Normalization can solve the Unicode equivalence issue while allowing the user to keep the case-insensitive sorting. Using the &lt;code&gt;utf8mb4_bin&lt;/code&gt; collation for the &lt;code&gt;=&lt;/code&gt; comparison can solve the emoji equivalence issue.&lt;/p&gt;
&lt;h2 id="fully-supporting-unicode-and-emojis-in-your-app-video"&gt;&lt;a href="#fully-supporting-unicode-and-emojis-in-your-app-video" class="header-anchor"&gt;&lt;/a&gt;Fully supporting Unicode and emojis in your app video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/u9jFFHifa0Q"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;h2 id="other-articles-related-to-mysql"&gt;&lt;a href="#other-articles-related-to-mysql" class="header-anchor"&gt;&lt;/a&gt;Other articles related to MySQL
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mysql-query-performance-insert-subqueries/" &gt;Optimize MySQL query performance: INSERT with subqueries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mysql-upsert-deadlock/" &gt;MySQL deadlock on UPDATE/INSERT upsert pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../sql-prepared-statements-are-broken-when-scaling-applications/" &gt;SQL prepared statements are broken when scaling applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS (mTLS) Go client using macOS keychain</title><link>https://victoronsoftware.com/posts/mtls-go-client-using-apple-keychain/</link><pubDate>Thu, 22 Feb 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-go-client-using-apple-keychain/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-go-client-using-apple-keychain/mtls-go-apple-keychain.png" alt="Featured image of post Mutual TLS (mTLS) Go client using macOS keychain" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-client" &gt;mTLS Go client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-use-macos-keychain"&gt;&lt;a href="#why-use-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;Why use macOS keychain?
&lt;/h2&gt;&lt;p&gt;In the &lt;a class="link" href="../mtls-go-client" &gt;mTLS Go client&lt;/a&gt; article, we built a simple Go client that uses mTLS. Our client used Go standard library methods and loaded the client certificate and private key from the filesystem. However, keeping the private key on the filesystem is insecure and not recommended. We aim to build an mTLS client fully integrated with the operating system&amp;rsquo;s keystore.&lt;/p&gt;
&lt;p&gt;The macOS keychain is a secure storage system for passwords and other confidential information. It is used by many Apple applications, such as Safari, Mail, and iCloud, to store the user&amp;rsquo;s passwords and additional sensitive information.&lt;/p&gt;
&lt;h2 id="building-a-custom-tlscertificate-for-macos-keychain"&gt;&lt;a href="#building-a-custom-tlscertificate-for-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;Building a custom tls.Certificate for macOS keychain
&lt;/h2&gt;&lt;p&gt;This work builds on the &lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt; article. We will use the &lt;code&gt;CustomSigner&lt;/code&gt; from that article to build a custom &lt;code&gt;tls.Certificate&lt;/code&gt; that uses the macOS keychain.&lt;/p&gt;
&lt;p&gt;However, before the application uses the &lt;code&gt;Public&lt;/code&gt; and &lt;code&gt;Sign&lt;/code&gt; methods of the &lt;code&gt;CustomSigner,&lt;/code&gt; we need to retrieve the certificate from the keychain using Apple&amp;rsquo;s API.&lt;/p&gt;
&lt;h3 id="retrieving-certificate-from-macos-keychain-with-cgo"&gt;&lt;a href="#retrieving-certificate-from-macos-keychain-with-cgo" class="header-anchor"&gt;&lt;/a&gt;Retrieving certificate from macOS keychain with CGO
&lt;/h3&gt;&lt;p&gt;We will use CGO to call the macOS keychain API to retrieve the client certificate. To set up CGO, we include the following code above our imports:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #cgo LDFLAGS: -framework CoreFoundation -framework Security
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #include &amp;lt;CoreFoundation/CoreFoundation.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #include &amp;lt;Security/Security.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To find the identities from the keychain, we use &lt;a class="link" href="https://developer.apple.com/documentation/security/1398306-secitemcopymatching" target="_blank" rel="noopener"
&gt;SecItemCopyMatching&lt;/a&gt;. An identity is a certificate and its associated private key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryCreateMutable&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFAllocatorDefault&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;maxCertificatesNum&lt;/span&gt;, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFTypeDictionaryKeyCallBacks&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFTypeDictionaryValueCallBacks&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;commonName&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;testClientTLS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;commonNameCFString&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;stringToCFString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;commonName&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;commonNameCFString&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecClass&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecClassIdentity&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecAttrCanSign&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFBooleanTrue&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecMatchSubjectWholeString&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;commonNameCFString&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// To filter by issuers, we must provide a CFDataRef array of DER-encoded ASN.1 items.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// C.CFDictionaryAddValue(identitySearch, unsafe.Pointer(C.kSecMatchIssuers), unsafe.Pointer(issuerCFArray))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecReturnRef&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFBooleanTrue&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecMatchLimit&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecMatchLimitAll&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;identityMatches&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecItemCopyMatching&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identitySearch&lt;/span&gt;), &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;identityMatches&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;errSecSuccess&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;failed to find client certificate: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityMatches&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our example, we find the identities by a common name, which we hardcode for demonstration purposes. We can filter by the certificate issuer, as shown in the commented-out code. Filtering by issuer requires an array of DER-encoded ASN.1 items, which can be created from the &lt;code&gt;tls.CertificateRequestInfo&lt;/code&gt; object. Another approach to finding the proper certificate is to retrieve all the keychain certificates and filter them in Go code.&lt;/p&gt;
&lt;h3 id="converting-the-apple-identity-to-a-go-x509certificate"&gt;&lt;a href="#converting-the-apple-identity-to-a-go-x509certificate" class="header-anchor"&gt;&lt;/a&gt;Converting the Apple identity to a Go &lt;code&gt;x509.Certificate&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;After we retrieve the array of identities from the keychain, we convert them to Go &lt;code&gt;x509.Certificate&lt;/code&gt; objects and pick the first one that is not expired.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;foundIdentity&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;identityMatchesArrayRef&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFArrayRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityMatches&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;numIdentities&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; int(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFArrayGetCount&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityMatchesArrayRef&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Found %d identities\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;numIdentities&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &amp;lt; &lt;span style="color:#a6e22e"&gt;numIdentities&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;&lt;span style="color:#f92672"&gt;++&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;identityMatch&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFArrayGetValueAtIndex&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityMatchesArrayRef&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFIndex&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;identityRefToCert&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityMatch&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Make sure certificate is not expired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NotAfter&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;After&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;time&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Now&lt;/span&gt;()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;foundIdentity&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityMatch&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Found certificate from issuer %s with public key type %T\n&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Issuer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(), &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;break&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;identityRefToCert&lt;/code&gt; function converts the &lt;code&gt;SecIdentityRef&lt;/code&gt; to a Go &lt;code&gt;x509.Certificate&lt;/code&gt; object. It exports the certificate to PEM format using &lt;a class="link" href="https://developer.apple.com/documentation/security/1394828-secitemexport" target="_blank" rel="noopener"
&gt;SecItemExport&lt;/a&gt; and then parses the PEM to get the &lt;code&gt;x509.Certificate&lt;/code&gt; object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;identityRefToCert&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityRef&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityRef&lt;/span&gt;) (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Convert the identity to a certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;certificateRef&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecCertificateRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityCopyCertificate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;identityRef&lt;/span&gt;, &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;certificateRef&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;failed to get certificate from identity: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;certificateRef&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Export the certificate to PEM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// SecItemExport: https://developer.apple.com/documentation/security/1394828-secitemexport&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pemDataRef&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecItemExport&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;certificateRef&lt;/span&gt;), &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecFormatPEMSequence&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecItemPemArmour&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;pemDataRef&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ); &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;failed to export certificate to PEM: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pemDataRef&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;certPEM&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;GoBytes&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataGetBytePtr&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pemDataRef&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.int(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataGetLength&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pemDataRef&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;rest&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Decode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;certPEM&lt;/span&gt;); &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;rest&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;pem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Decode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rest&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Type&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;CERTIFICATE&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ParseCertificate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Bytes&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error parsing client certificate: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="retrieve-the-private-key-reference-from-the-keychain"&gt;&lt;a href="#retrieve-the-private-key-reference-from-the-keychain" class="header-anchor"&gt;&lt;/a&gt;Retrieve the private key reference from the keychain
&lt;/h3&gt;&lt;p&gt;At this point, we also retrieve the private key reference from the keychain. We will use the private key reference to sign the &lt;code&gt;CertificateVerify&lt;/code&gt; message during the TLS handshake. The reference does not contain the private key. When importing private keys to the keychain, they should be marked as non-exportable so that no one can retrieve the private key cleartext from the keychain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecKeyRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityCopyPrivateKey&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecIdentityRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;foundIdentity&lt;/span&gt;), &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;failed to copy private key ref from identity: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="building-the-custom-tlscertificate"&gt;&lt;a href="#building-the-custom-tlscertificate" class="header-anchor"&gt;&lt;/a&gt;Building the custom &lt;code&gt;tls.Certificate&lt;/code&gt;
&lt;/h3&gt;&lt;p&gt;Finally, we put together the custom &lt;code&gt;tls.Certificate&lt;/code&gt; using the &lt;code&gt;x509.Certificate&lt;/code&gt; and the private key reference.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;customSigner&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;: [][]&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;foundCert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Raw&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;PrivateKey&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;customSigner&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SupportedSignatureAlgorithms&lt;/span&gt;: []&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SignatureScheme&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;supportedAlgorithm&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our example only supports the &lt;code&gt;tls.PSSWithSHA256&lt;/code&gt; signature algorithm to keep the code simple. Adding additional algorithm support is easy since it only requires passing the right parameter to the &lt;code&gt;SecKeyCreateSignature&lt;/code&gt; function, which we will review next.&lt;/p&gt;
&lt;h2 id="signing-the-mtls-digest-with-apples-keychain"&gt;&lt;a href="#signing-the-mtls-digest-with-apples-keychain" class="header-anchor"&gt;&lt;/a&gt;Signing the mTLS digest with Apple&amp;rsquo;s keychain
&lt;/h2&gt;&lt;p&gt;As discussed in the previous &lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt; article, we need to sign the &lt;code&gt;CertificateVerify&lt;/code&gt; message during the TLS handshake. We will use the &lt;code&gt;CustomSigner&lt;/code&gt; to sign the digest, which implements the &lt;code&gt;crypto.Signer&lt;/code&gt; interface as defined in the Go standard library&amp;rsquo;s &lt;code&gt;crypto&lt;/code&gt; package.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecKeyRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Public&lt;/span&gt;() &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;crypto.Signer.Public\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Sign&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Reader&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SignerOpts&lt;/span&gt;) (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;signature&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;crypto.Signer.Sign with key type %T, opts type %T, hash %s\n&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Public&lt;/span&gt;(), &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;HashFunc&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;())
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Convert the digest to a CFDataRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;digestCFData&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataCreate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFAllocatorDefault&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UInt8&lt;/span&gt;)(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])), &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFIndex&lt;/span&gt;(len(&lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;digestCFData&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// SecKeyAlgorithm: https://developer.apple.com/documentation/security/seckeyalgorithm&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// SecKeyCreateSignature: https://developer.apple.com/documentation/security/1643916-seckeycreatesignature&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;cfErrorRef&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFErrorRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;signCFData&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecKeyCreateSignature&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;privateKey&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecKeyAlgorithmRSASignatureDigestPSSSHA256&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;digestCFData&lt;/span&gt;), &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;cfErrorRef&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;cfErrorRef&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;failed to sign data: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;cfErrorRef&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;signCFData&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Convert CFDataRef to Go byte slice&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;GoBytes&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataGetBytePtr&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;signCFData&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.int(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataGetLength&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;signCFData&lt;/span&gt;))), &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We use the &lt;a class="link" href="https://developer.apple.com/documentation/security/1643916-seckeycreatesignature" target="_blank" rel="noopener"
&gt;SecKeyCreateSignature&lt;/a&gt; function to sign the digest. The function takes the private key reference, the algorithm, the digest, and a pointer to a &lt;code&gt;CFErrorRef.&lt;/code&gt; The function returns a CFDataRef, which we convert to a Go byte slice. Additional algorithms can be supported by passing the proper parameter to the &lt;code&gt;SecKeyCreateSignature&lt;/code&gt; function.&lt;/p&gt;
&lt;h2 id="putting-it-all-together"&gt;&lt;a href="#putting-it-all-together" class="header-anchor"&gt;&lt;/a&gt;Putting it all together
&lt;/h2&gt;&lt;p&gt;With the above code, we can create our new Go mTLS client that uses the macOS keychain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;url&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Parse&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to is required&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Client&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;TLSClientConfig&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Config&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;signer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;MinVersion&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;VersionTLS13&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;MaxVersion&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;VersionTLS13&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Make a GET request to the URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Get&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error making get request: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;() { &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Close&lt;/span&gt;() }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Read the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadAll&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error reading response: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Print the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt;, string(&lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We limit the scope of this example to TLS 1.3&lt;/p&gt;
&lt;h2 id="build-the-mtls-client"&gt;&lt;a href="#build-the-mtls-client" class="header-anchor"&gt;&lt;/a&gt;Build the mTLS client
&lt;/h2&gt;&lt;p&gt;With &lt;code&gt;go build client-signer.go&lt;/code&gt;, we generate the &lt;code&gt;client-signer&lt;/code&gt; executable.&lt;/p&gt;
&lt;h2 id="setting-up-the-environment"&gt;&lt;a href="#setting-up-the-environment" class="header-anchor"&gt;&lt;/a&gt;Setting up the environment
&lt;/h2&gt;&lt;p&gt;The next step is to use the macOS keychain to store the client certificate and private key. We will use the same certificates and keys script from the &lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt; article. If you still need to generate the certificates and keys, please follow the instructions in that article.&lt;/p&gt;
&lt;p&gt;We must also import the generated certificates and keys into the macOS keychain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the server CA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain certs/server-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the client CA so that client TLS certificates can be verified&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain certs/client-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the client TLS certificate and key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security import certs/client.crt -k /Library/Keychains/System.keychain
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security import certs/client.key -k /Library/Keychains/System.keychain -x -T $PWD/client-signer -T /usr/bin/curl -T /Applications/Safari.app -T &lt;span style="color:#e6db74"&gt;&amp;#39;/Applications/Google Chrome.app&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We specify our application &lt;code&gt;$PWD/client-signer&lt;/code&gt; as one of the trusted applications that can access the private key. If we do not select the trusted application, we will get a security pop-up whenever our app tries to access the private key.&lt;/p&gt;
&lt;p&gt;Finally, as in the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article, we will use &lt;code&gt;docker compose up&lt;/code&gt; to start two nginx servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://localhost:8888 for TLS&lt;/li&gt;
&lt;li&gt;https://localhost:8889 for mTLS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="running-the-go-mtls-client-using-the-macos-keychain"&gt;&lt;a href="#running-the-go-mtls-client-using-the-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;Running the Go mTLS client using the macOS keychain
&lt;/h2&gt;&lt;p&gt;We can now run our mTLS client without pointing to certificate and key files. Hitting the ordinary TLS server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;./client-signer --url https://localhost:8888/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Returns the expected:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;TLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;While hitting the mTLS server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;./client-signer --url https://localhost:8889/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Returns a more detailed message, including the print statements in our custom code:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Server requested certificate
Found 1 identities
Found certificate from issuer CN=testClientCA,OU=Your Unit,O=Your Organization,L=Austin,ST=Texas,C=US with public key type *rsa.PublicKey
crypto.Signer.Public
crypto.Signer.Public
crypto.Signer.Sign with key type *rsa.PublicKey, opts type *rsa.PSSOptions, hash SHA-256
mTLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="using-certificate-and-key-from-the-windows-certificate-store"&gt;&lt;a href="#using-certificate-and-key-from-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Using certificate and key from the Windows certificate store
&lt;/h2&gt;&lt;p&gt;The following article will explore &lt;a class="link" href="../mtls-with-windows" &gt;using the Windows certificate store to hold the mTLS client certificate and private key&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/mtls-go-apple-keychain" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/mtls-go-apple-keychain&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mtls-go-client-using-macos-keychain-video"&gt;&lt;a href="#mtls-go-client-using-macos-keychain-video" class="header-anchor"&gt;&lt;/a&gt;mTLS Go client using macOS keychain video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/iYWPrL4sR5U"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS (mTLS) Go client with custom certificate signer</title><link>https://victoronsoftware.com/posts/mtls-go-custom-signer/</link><pubDate>Wed, 14 Feb 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-go-custom-signer/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-go-custom-signer/signer.png" alt="Featured image of post Mutual TLS (mTLS) Go client with custom certificate signer" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-client" &gt;mTLS Go client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-a-custom-certificate-signer"&gt;&lt;a href="#why-a-custom-certificate-signer" class="header-anchor"&gt;&lt;/a&gt;Why a custom certificate signer?
&lt;/h2&gt;&lt;p&gt;In the &lt;a class="link" href="../mtls-go-client" &gt;mTLS Go client&lt;/a&gt; article, we built a simple Go client that uses mTLS. Our client used Go standard library methods and loaded the client certificate and private key from the filesystem. However, keeping the private key on the filesystem is insecure and not recommended. We aim to build an mTLS client fully integrated with the operating system&amp;rsquo;s keystore.&lt;/p&gt;
&lt;p&gt;The first step toward that goal is to extract the functionality of the mTLS handshake that requires the private key. Luckily, the client&amp;rsquo;s private key is only needed to sign the &lt;code&gt;CertificateVerify&lt;/code&gt; message. The &lt;code&gt;CertificateVerify&lt;/code&gt; message is the last in the mTLS handshake. It proves to the server that the client has the private key associated with the client certificate.&lt;/p&gt;
&lt;figure&gt;&lt;img src="../mtls-hello-world/mtls-handshake.png"
alt="Mutual TLS (mTLS) handshake diagram"&gt;
&lt;/figure&gt;
&lt;p&gt;From &lt;a class="link" href="https://en.wikipedia.org/wiki/Transport_Layer_Security#Client-authenticated_TLS_handshake" target="_blank" rel="noopener"
&gt;Wikipedia entry on TLS&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The client sends a &lt;strong&gt;CertificateVerify&lt;/strong&gt; message, which is a signature over the previous handshake messages using the client&amp;rsquo;s certificate&amp;rsquo;s private key. This signature can be verified by using the client&amp;rsquo;s certificate&amp;rsquo;s public key. This lets the server know that the client has access to the private key of the certificate and thus owns the certificate.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id="setting-up-the-environment"&gt;&lt;a href="#setting-up-the-environment" class="header-anchor"&gt;&lt;/a&gt;Setting up the environment
&lt;/h2&gt;&lt;p&gt;We will use the same certificates and keys script from the &lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt; article. If you still need to generate the certificates and keys, please follow the instructions in that article.&lt;/p&gt;
&lt;p&gt;In addition, we will import the generated certificates and keys into the macOS keychain. (In a future article, we will use the Windows Certificate Store instead.)&lt;/p&gt;
&lt;p&gt;Finally, as in the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article, we will use &lt;code&gt;docker compose up&lt;/code&gt; to start two nginx servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://localhost:8888 for TLS&lt;/li&gt;
&lt;li&gt;https://localhost:8889 for mTLS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="building-our-cryptosigner"&gt;&lt;a href="#building-our-cryptosigner" class="header-anchor"&gt;&lt;/a&gt;Building our crypto.Signer
&lt;/h2&gt;&lt;p&gt;We will build a custom &lt;code&gt;crypto.Signer&lt;/code&gt; that signs the &lt;code&gt;CertificateVerify&lt;/code&gt; message. The &lt;code&gt;crypto.Signer&lt;/code&gt; interface is defined in the Go standard library&amp;rsquo;s &lt;code&gt;crypto&lt;/code&gt; package. It is used to sign messages with a private key.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// CustomSigner is a crypto.Signer that uses the client certificate and key to sign&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;type&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientKeyPath&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Public&lt;/span&gt;() &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;crypto.Signer.Public\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PublicKey&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;Sign&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rand&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Reader&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SignerOpts&lt;/span&gt;) (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;signature&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;crypto.Signer.Sign\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tlsCert&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;LoadX509KeyPair&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;k&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;clientKeyPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error loading client certificate: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Sign using %T\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;tlsCert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PrivateKey&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tlsCert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;PrivateKey&lt;/span&gt;.(&lt;span style="color:#a6e22e"&gt;crypto&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Signer&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;Sign&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rand&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Although we still use the filesystem to load the client certificate and private key, we now use the &lt;code&gt;crypto.Signer&lt;/code&gt; interface to sign the &lt;code&gt;CertificateVerify&lt;/code&gt; message. In the future, we will replace this code by calls to the operating system&amp;rsquo;s keystore. The vital thing to note is that we only load the private key when we need to sign the digest and do not load the key during the client configuration.&lt;/p&gt;
&lt;h2 id="getting-the-client-certificate"&gt;&lt;a href="#getting-the-client-certificate" class="header-anchor"&gt;&lt;/a&gt;Getting the client certificate
&lt;/h2&gt;&lt;p&gt;Besides building a custom &lt;code&gt;crypto.Signer&lt;/code&gt;, we will implement a custom &lt;code&gt;GetClientCertificate&lt;/code&gt; function. This function will be called during the TLS handshake when the server requests a certificate from the client. The function will load the client certificate and create a &lt;code&gt;CustomSigner&lt;/code&gt; instance. It will not load the private key at this time. Once again, the client certificate is only loaded when needed and not during the client&amp;rsquo;s configuration.&lt;/p&gt;
&lt;p&gt;We set &lt;code&gt;Certificate: [][]byte{cert.Raw},&lt;/code&gt; because the Go implementation of the TLS handshake requires the client certificate here to validate it against the server&amp;rsquo;s CA.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;clientKeyPath&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Server requested certificate\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;clientKeyPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;errors&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;client certificate and key are required&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientBytes&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;os&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadFile&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error reading client certificate: %w&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;cert&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;rest&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Decode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;clientBytes&lt;/span&gt;); &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;; &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;rest&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;pem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Decode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rest&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Type&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;CERTIFICATE&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;cert&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;x509&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ParseCertificate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;block&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Bytes&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error parsing client certificate: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;: [][]&lt;span style="color:#66d9ef"&gt;byte&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;cert&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Raw&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;PrivateKey&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;CustomSigner&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;x509Cert&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;cert&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;clientCertPath&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientKeyPath&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;clientKeyPath&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="putting-it-all-together"&gt;&lt;a href="#putting-it-all-together" class="header-anchor"&gt;&lt;/a&gt;Putting it all together
&lt;/h2&gt;&lt;p&gt;With the above customizations, we create our new Go mTLS client:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;crypto/tls&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;github.com/getvictor/mtls/signer&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;url&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientCert&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;cert&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Client certificate file&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientKey&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;key&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Client key file&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Parse&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to is required&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Client&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;TLSClientConfig&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Config&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;info&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CertificateRequestInfo&lt;/span&gt;) (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;signer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;GetClientCertificate&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;clientCert&lt;/span&gt;, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;clientKey&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Make a GET request to the URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Get&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error making get request: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;() { &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Close&lt;/span&gt;() }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Read the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadAll&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error reading response: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Print the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt;, string(&lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Trying to hit the mTLS server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run client-signer.go --url https://localhost:8889/hello-world.txt --cert certs/client.crt --key certs/client.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Returns the expected result:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;mTLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="using-certificate-and-key-from-the-macos-keychain"&gt;&lt;a href="#using-certificate-and-key-from-the-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;Using certificate and key from the macOS keychain
&lt;/h2&gt;&lt;p&gt;In the following article, we will &lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;use the macOS keychain to load the client certificate and generate the &lt;code&gt;CertificateVerify&lt;/code&gt; message without extracting the private key&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/mtls-go-custom-signer" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/mtls-go-custom-signer&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mtls-go-client-with-custom-certificate-signer-video"&gt;&lt;a href="#mtls-go-client-with-custom-certificate-signer-video" class="header-anchor"&gt;&lt;/a&gt;mTLS Go client with custom certificate signer video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/FsKMAEfn21w"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS (mTLS) Go client</title><link>https://victoronsoftware.com/posts/mtls-go-client/</link><pubDate>Wed, 07 Feb 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-go-client/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-go-client/go-client.png" alt="Featured image of post Mutual TLS (mTLS) Go client" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-go"&gt;&lt;a href="#what-is-go" class="header-anchor"&gt;&lt;/a&gt;What is Go?
&lt;/h2&gt;&lt;p&gt;Go is a statically typed, compiled programming language designed at Google. It is known for its simplicity, efficiency, and ease of use. Go is often used for building web servers, APIs, and command-line tools. We will use Go to make a client that uses mTLS.&lt;/p&gt;
&lt;h2 id="setting-up-the-environment"&gt;&lt;a href="#setting-up-the-environment" class="header-anchor"&gt;&lt;/a&gt;Setting up the environment
&lt;/h2&gt;&lt;p&gt;We will use the same certificates and keys script from the &lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt; article. If you still need to generate the certificates and keys, please follow the instructions in that article.&lt;/p&gt;
&lt;p&gt;In addition, we will import the generated certificates and keys into the macOS keychain. (In a future article, we will use the Windows Certificate Store instead.) Keeping private keys on the filesystem is insecure and not recommended. We aim to build an mTLS client fully integrated with the operating system&amp;rsquo;s keystore.&lt;/p&gt;
&lt;p&gt;Finally, as in the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article, we will use &lt;code&gt;docker compose up&lt;/code&gt; to start two nginx servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://localhost:8888 for TLS&lt;/li&gt;
&lt;li&gt;https://localhost:8889 for mTLS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="building-the-tls-go-client"&gt;&lt;a href="#building-the-tls-go-client" class="header-anchor"&gt;&lt;/a&gt;Building the TLS Go client
&lt;/h2&gt;&lt;p&gt;Below is a simple Go HTTP client.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;url&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Parse&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to is required&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Client&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Make a GET request to the URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Get&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error making get request: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;() { &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Close&lt;/span&gt;() }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Read the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadAll&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error reading response: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Print the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt;, string(&lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Trying the ordinary TLS server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run client.go --url https://localhost:8888/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Gives the expected result:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;TLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Go client is integrated with the system keystore out of the box.&lt;/p&gt;
&lt;p&gt;However, when trying the mTLS server with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run client.go --url https://localhost:8889/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We get the error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;400 No required SSL certificate was sent&amp;lt;/&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style="color:#f92672"&gt;h1&lt;/span&gt;&amp;gt;400 Bad Request&amp;lt;/&lt;span style="color:#f92672"&gt;h1&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;No required SSL certificate was sent&amp;lt;/&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;hr&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;nginx/1.25.3&amp;lt;/&lt;span style="color:#f92672"&gt;center&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Go libraries are not integrated with the system keystore for using the mTLS client certificate and key.&lt;/p&gt;
&lt;h2 id="modifying-the-go-client-for-mtls"&gt;&lt;a href="#modifying-the-go-client-for-mtls" class="header-anchor"&gt;&lt;/a&gt;Modifying the Go client for mTLS
&lt;/h2&gt;&lt;p&gt;We will use the &lt;a class="link" href="https://pkg.go.dev/crypto/tls" target="_blank" rel="noopener"
&gt;crypto/tls&lt;/a&gt; package to build the mTLS client.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;crypto/tls&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;flag&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;io&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;log&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;url&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientCert&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;cert&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Client certificate file&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;clientKey&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;String&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;key&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;Client key file&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;flag&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Parse&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;URL to make request to is required&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;clientCert&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;clientKey&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;LoadX509KeyPair&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;clientCert&lt;/span&gt;, &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;clientKey&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error loading client certificate: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Client&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;http&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Transport&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;TLSClientConfig&lt;/span&gt;: &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Config&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Certificates&lt;/span&gt;: []&lt;span style="color:#a6e22e"&gt;tls&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Certificate&lt;/span&gt;{&lt;span style="color:#a6e22e"&gt;certificate&lt;/span&gt;},
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Make a GET request to the URL&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;client&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Get&lt;/span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;urlPath&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error making get request: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;() { &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Close&lt;/span&gt;() }()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Read the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;io&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ReadAll&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Body&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fatalf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;error reading response: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Print the response body&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;%s\n&amp;#34;&lt;/span&gt;, string(&lt;span style="color:#a6e22e"&gt;rspBytes&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, trying the mTLS server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go run client-mtls.go --url https://localhost:8889/hello-world.txt --cert certs/client.crt --key certs/client.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Returns the expected result:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;mTLS Hello World!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;However, we pass the client certificate and key as command-line arguments. In a real-world scenario, we want to use the system keystore to manage the client certificate and key.&lt;/p&gt;
&lt;h2 id="using-a-custom-signer-for-the-mtls-client-certificate"&gt;&lt;a href="#using-a-custom-signer-for-the-mtls-client-certificate" class="header-anchor"&gt;&lt;/a&gt;Using a custom signer for the mTLS client certificate
&lt;/h2&gt;&lt;p&gt;The following article will cover &lt;a class="link" href="../mtls-go-custom-signer" &gt;creating a custom Go signer for the mTLS client certificate&lt;/a&gt;. This work will pave the way for us to use the system keystore to manage the client certificate and key.&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/mtls-with-go" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/mtls-with-go&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mtls-go-client-video"&gt;&lt;a href="#mtls-go-client-video" class="header-anchor"&gt;&lt;/a&gt;mTLS Go client video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/8lNZUTBkfsU"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Using C and Go with CGO is tricky</title><link>https://victoronsoftware.com/posts/using-c-and-go-with-cgo-is-tricky/</link><pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/using-c-and-go-with-cgo-is-tricky/</guid><description>&lt;img src="https://victoronsoftware.com/posts/using-c-and-go-with-cgo-is-tricky/cgo-hello-world-fail.png" alt="Featured image of post Using C and Go with CGO is tricky" /&gt;&lt;h2 id="simple-cgo-examples"&gt;&lt;a href="#simple-cgo-examples" class="header-anchor"&gt;&lt;/a&gt;Simple CGO examples
&lt;/h2&gt;&lt;p&gt;CGO is a way to call C code from Go. It helps call existing C libraries or for performance reasons. CGO is enabled by default but can be disabled with the &lt;code&gt;-cgo&lt;/code&gt; build flag.&lt;/p&gt;
&lt;p&gt;Below is a simple example of calling a C function from Go.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;double add(double a, double b) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; return a + b;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The C code is embedded in the Go code as a comment above &lt;code&gt;import &amp;quot;C&amp;quot;&lt;/code&gt;. The comment must start with &lt;code&gt;/*&lt;/code&gt; and end with &lt;code&gt;*/&lt;/code&gt;. The C code must be valid.
The Go compiler compiles the C code and links the resulting object file with the Go code.&lt;/p&gt;
&lt;p&gt;Here is an example of using an existing C library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include &amp;#34;math.h&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;double add(double a, double b) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; return a + b;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;floor&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2.1&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We call the &lt;code&gt;floor&lt;/code&gt; function from the &lt;code&gt;math.h&lt;/code&gt; library. The &lt;code&gt;math.h&lt;/code&gt; library is included with the C compiler, so we don&amp;rsquo;t need to do anything special to use it.&lt;/p&gt;
&lt;h2 id="cgo-hello-world-fail"&gt;&lt;a href="#cgo-hello-world-fail" class="header-anchor"&gt;&lt;/a&gt;CGO Hello World fail
&lt;/h2&gt;&lt;p&gt;Here is another example where we print &amp;ldquo;Hello World&amp;rdquo; from C.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include &amp;#34;stdio.h&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CString&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello World\n&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, the above seemingly straightforward example will fail to compile with the following enigmatic error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cgo: ./exmaple.go:9:2: unexpected type: ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is that &lt;code&gt;printf&lt;/code&gt; is a variadic function that can take a variable number of arguments. CGO does not support variadic functions. Even using Go variadic syntax will not work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;args&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt;{}{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CString&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello World\n&amp;#34;&lt;/span&gt;), &lt;span style="color:#a6e22e"&gt;args&lt;/span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The workaround for this is to use another non-variadic function, such as &lt;code&gt;vprintf&lt;/code&gt;, or to wrap the variadic C function in a non-variadic C function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #include &amp;#34;stdio.h&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; void wrapPrintf(const char *s) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; printf(&amp;#34;%s&amp;#34;, s);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;wrapPrintf&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CString&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello, World\n&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="c-hello-world-fail"&gt;&lt;a href="#c-hello-world-fail" class="header-anchor"&gt;&lt;/a&gt;C++ Hello World fail
&lt;/h2&gt;&lt;p&gt;Another issue with CGO is only C code can be called from Go. C++ code cannot be called from Go. The following code will fail to compile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; void helloWorld() {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; std::cout &amp;lt;&amp;lt; &amp;#34;Hello, World&amp;#34; &amp;lt;&amp;lt; std::endl;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;helloWorld&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, C++ code can be called from C, so we can write a C wrapper for the C++ code.&lt;/p&gt;
&lt;h2 id="cgo-real-world-example"&gt;&lt;a href="#cgo-real-world-example" class="header-anchor"&gt;&lt;/a&gt;CGO real-world example
&lt;/h2&gt;&lt;p&gt;The following is an example of real-world usage of CGO, which uses Apple&amp;rsquo;s APIs to add a secret to the keychain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;keystore&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #cgo LDFLAGS: -framework CoreFoundation -framework Security
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #include &amp;lt;CoreFoundation/CoreFoundation.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #include &amp;lt;Security/Security.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;unsafe&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;service&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;com.fleetdm.fleetd.enroll.secret&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;serviceStringRef&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;stringToCFString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;service&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// AddSecret will add a secret to the keychain. This application can retrieve this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// secret without any user authorization.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AddSecret&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;secret&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryCreateMutable&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFAllocatorDefault&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFTypeDictionaryKeyCallBacks&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFTypeDictionaryValueCallBacks&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataCreate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFAllocatorDefault&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UInt8&lt;/span&gt;)(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;secret&lt;/span&gt;))),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFIndex&lt;/span&gt;(len(&lt;span style="color:#a6e22e"&gt;secret&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecClass&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecClassGenericPassword&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecAttrService&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;serviceStringRef&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecValueData&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecItemAdd&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;), &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;errSecSuccess&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;failed to add %v to keychain: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;service&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// stringToCFString will return a CFStringRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;stringToCFString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFStringRef&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; []byte(&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ptr&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UInt8&lt;/span&gt;)(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFStringCreateWithBytes&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFAllocatorDefault&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;ptr&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFIndex&lt;/span&gt;(len(&lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFStringEncodingUTF8&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The C linker flags are specified with the &lt;code&gt;#cgo LDFLAGS&lt;/code&gt; directive.&lt;/p&gt;
&lt;p&gt;The CGO code uses a lot of casting and data conversion. Let&amp;rsquo;s break down the following segment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UInt8&lt;/span&gt;)(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;secret&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;C.CString&lt;/code&gt; converts a Go string to a C string. It is one of the CGO special functions to convert between Go and C types. See &lt;a class="link" href="https://pkg.go.dev/cmd/cgo" target="_blank" rel="noopener"
&gt;cgo documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unsafe.Pointer&lt;/code&gt; converts a C pointer to a generic Go pointer. And &lt;code&gt;(*C.UInt8)&lt;/code&gt; casts the Go pointer back to a C pointer.&lt;/p&gt;
&lt;p&gt;Unfortunately, CGO cannot cast a C string to a &lt;code&gt;(*C.UInt8)&lt;/code&gt; directly. The following will fail to compile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UInt8&lt;/span&gt;)(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;secret&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We must go through an intermediate cast to &lt;code&gt;unsafe.Pointer&lt;/code&gt;, representing a void C pointer.&lt;/p&gt;
&lt;h2 id="additional-topics"&gt;&lt;a href="#additional-topics" class="header-anchor"&gt;&lt;/a&gt;Additional topics
&lt;/h2&gt;&lt;p&gt;Our custom C and Go code was always in the same file in the above examples. However, the C code can be in a separate file and linked to our Go executable.&lt;/p&gt;
&lt;h2 id="other-getting-started-guides"&gt;&lt;a href="#other-getting-started-guides" class="header-anchor"&gt;&lt;/a&gt;Other getting started guides
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we explained &lt;a class="link" href="../create-chrome-extension" &gt;how to build a Chrome extension &lt;strong&gt;without&lt;/strong&gt; any additional tools&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Also, we wrote a &lt;a class="link" href="../react-hello-world" &gt;guide to creating a React Hello World app&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cgo-hello-world-fail-video"&gt;&lt;a href="#cgo-hello-world-fail-video" class="header-anchor"&gt;&lt;/a&gt;CGO Hello World fail video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/C9h8YO1NwPM"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;</description></item><item><title>Fuzz testing in Go</title><link>https://victoronsoftware.com/posts/fuzz-testing-with-go/</link><pubDate>Thu, 04 Jan 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/fuzz-testing-with-go/</guid><description>&lt;img src="https://victoronsoftware.com/posts/fuzz-testing-with-go/fuzz.png" alt="Featured image of post Fuzz testing in Go" /&gt;&lt;p&gt;Fuzz testing is a software automated testing technique where random inputs are provided to the software under test. My
background is in hardware verification, which uses sophisticated methodologies for pseudorandom testing, so I wanted to
see what the Go library had to offer out of the box.&lt;/p&gt;
&lt;p&gt;A &lt;a class="link" href="https://go.dev/doc/security/fuzz" target="_blank" rel="noopener"
&gt;Go fuzz test&lt;/a&gt; can run as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a normal unit test&lt;/li&gt;
&lt;li&gt;a test with fuzzing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A fuzz test is written similarly to a normal unit test in a &lt;strong&gt;*_test.go&lt;/strong&gt; file, with the following changes. It must
have a &lt;strong&gt;Fuzz&lt;/strong&gt; prefix and use the &lt;strong&gt;testing.F&lt;/strong&gt; struct instead of the usual &lt;strong&gt;testing.T&lt;/strong&gt; struct.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;FuzzSample&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;f&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;testing&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;F&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is a workflow for using fuzz testing. First, you create a fuzz test. Then, you run it with fuzzing to automatically
find failing corner cases and make any fixes. Thirdly, you include the test and the corner cases in your continuous
integration testing suite.&lt;/p&gt;
&lt;h2 id="create-a-fuzz-test"&gt;&lt;a href="#create-a-fuzz-test" class="header-anchor"&gt;&lt;/a&gt;Create a fuzz test
&lt;/h2&gt;&lt;p&gt;When creating a fuzz test, you should provide a corpus of initial seed inputs. These are the inputs the test will use
before applying randomization. Add the seed corpus with the &lt;strong&gt;Add&lt;/strong&gt; method. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;f&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Add&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tc&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Num&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;tc&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;f&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Add&lt;/span&gt;(uint8(&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;), &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The inputs to the &lt;strong&gt;Add&lt;/strong&gt; method indicate which types will be fuzzed, and these types must match the subsequent call to
the &lt;strong&gt;Fuzz&lt;/strong&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;f&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Fuzz&lt;/span&gt;(&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;testing&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;T&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;num&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;uint8&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The fuzz test can randomize any number of inputs, as long as they are one of the supported types.&lt;/p&gt;
&lt;h2 id="run-the-test-with-fuzzing"&gt;&lt;a href="#run-the-test-with-fuzzing" class="header-anchor"&gt;&lt;/a&gt;Run the test with fuzzing
&lt;/h2&gt;&lt;p&gt;To run the test with fuzzing, use the &lt;strong&gt;-fuzz&lt;/strong&gt; switch, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go test -fuzz FuzzSample
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The test will continuously run on all your CPUs until it fails, or you kill it:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;=== RUN FuzzSample
fuzz: elapsed: 0s, gathering baseline coverage: 0/11 completed
fuzz: elapsed: 0s, gathering baseline coverage: 11/11 completed, now fuzzing with 12 workers
fuzz: elapsed: 3s, execs: 432199 (144036/sec), new interesting: 0 (total: 11)
fuzz: elapsed: 6s, execs: 871147 (146328/sec), new interesting: 0 (total: 11)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A sample failure:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;failure while testing seed corpus entry: FuzzSample/49232526a5eabbdc
fuzz: elapsed: 1s, gathering baseline coverage: 10/11 completed
--- FAIL: FuzzSample (1.03s)
--- FAIL: FuzzSample (0.00s)
fuzz_test.go:21: Found 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The failures are automatically added to the seed corpus. The seed corpus includes the initial inputs that were added
with the &lt;strong&gt;Add&lt;/strong&gt; method as well as any new fails. These new seed corpus files are automatically created in the
&lt;strong&gt;testdata/fuzz/Fuzz*&lt;/strong&gt; directory. Sample contents of one such file:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;go test fuzz v1
byte(&amp;#39;\x01&amp;#39;)
string(&amp;#34;0a0000&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Adding the failure to the seed corpus means that the failing case will always run when this test is run again as a unit
test or with fuzzing.&lt;/p&gt;
&lt;p&gt;Now, you must fix the failing test and continue the loop of fuzzing and fixing.&lt;/p&gt;
&lt;h2 id="include-the-test-in-continuous-integration"&gt;&lt;a href="#include-the-test-in-continuous-integration" class="header-anchor"&gt;&lt;/a&gt;Include the test in continuous integration
&lt;/h2&gt;&lt;p&gt;When checking in the test to your repository, you must either include the &lt;strong&gt;testdata/fuzz/Fuzz*&lt;/strong&gt; files or convert
those files into individual &lt;strong&gt;Add&lt;/strong&gt; method calls in your test. Once the test is checked in, all the inputs in the seed
corpus will run as part of the standard Go unit test flow.&lt;/p&gt;
&lt;h2 id="initial-impressions"&gt;&lt;a href="#initial-impressions" class="header-anchor"&gt;&lt;/a&gt;Initial impressions
&lt;/h2&gt;&lt;p&gt;Fuzz testing appears to be a good approach to help the development of small functions with limited scope. The library
documentation mentions the following about the function under test:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This function should be fast and deterministic, and its behavior should not depend on shared state.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I plan to give fuzzing a try the next time I develop such a function. I will share the results on this blog.&lt;/p&gt;
&lt;h2 id="concerns-and-issues"&gt;&lt;a href="#concerns-and-issues" class="header-anchor"&gt;&lt;/a&gt;Concerns and Issues
&lt;/h2&gt;&lt;p&gt;Native fuzzing support was added to Go in 1.18 and seems like a good initial approach. However, it feels limited in
features and usability. The types of functions, fast and deterministic, that fuzzing is intended for are generally not
very interesting when testing real applications. They are good examples for students learning how to code. However, more
interesting testing scenarios include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functions accessing remote resources in parallel, such as APIs or databases&lt;/li&gt;
&lt;li&gt;Functions with asynchronous code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Secondly, the fuzzing library does not provide a good way to guide the randomization of inputs and does not give
feedback about the input state space already covered. It does provide line coverage information, but that doesn&amp;rsquo;t help
for unknown corner cases.&lt;/p&gt;
&lt;p&gt;If one of my inputs is intended to be a percentage, then I want most of the fuzzing to concentrate on the legal range of
0-100, as opposed to all numbers. This lack of constraints becomes a problem when adding additional inputs to the
fuzzing function, as the available state space of inputs expands exponentially. If the state space of inputs is huge,
there is no guarantee that fuzzing accomplished its goal of finding all corner cases, leaving the developer with a false
sense of confidence in their code.&lt;/p&gt;
&lt;p&gt;Lastly, the fuzz test is hard to maintain. The seed corpus is stored in files without any context regarding what corner
case each seed is hitting. Software engineers unfamiliar with fuzz testing will find this extremely confusing. If the
fuzz test needs to be extended in the future with additional inputs or different types, the old seed corpus will become
useless. It will be worse than useless &amp;ndash; the test will not run, and the developer unfamiliar with fuzz testing will not
have a clear idea why.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fuzz_test.go:16: wrong number of values in corpus entry: 2, want 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That said, understanding the fuzz testing limitation, I’m willing to try fuzz testing for more interesting test cases,
such as database accesses. I will report my findings in a future post.&lt;/p&gt;
&lt;p&gt;GitHub gist: &lt;script type="application/javascript" src="https://gist.github.com/getvictor/24baadcc9cf08e7d7a6028ad54ff2aba.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../optimizing-performance-of-go-app" &gt;Benchmarking performance with Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../go-test-execution-time" &gt;Measure Go test execution time&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../large-go-test-suite/" &gt;Speed up Go CI tests by breaking them apart&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../add-unit-tests-to-chrome-extension" &gt;Unit testing a Chrome Extension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="go-fuzz-testing-video"&gt;&lt;a href="#go-fuzz-testing-video" class="header-anchor"&gt;&lt;/a&gt;Go fuzz testing video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/4emTXow54F4"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Nil slice versus empty slice in Go</title><link>https://victoronsoftware.com/posts/nil-slice-versus-empty-slice-in-go/</link><pubDate>Thu, 28 Dec 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/nil-slice-versus-empty-slice-in-go/</guid><description>&lt;img src="https://victoronsoftware.com/posts/nil-slice-versus-empty-slice-in-go/cover.png" alt="Featured image of post Nil slice versus empty slice in Go" /&gt;&lt;p&gt;When starting to code in Go, we encountered the following situation. We needed to create an empty slice, so we did:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;{}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, my IDE flagged it as a warning, and pointed me to
&lt;a class="link" href="https://go.dev/wiki/CodeReviewComments#declaring-empty-slices" target="_blank" rel="noopener"
&gt;this Go style guide passage&lt;/a&gt;, which recommended using a
nil slice instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This recommendation didn&amp;rsquo;t seem right. How can a nil variable be better? Won’t we run into issues like null pointer
exceptions and other annoyances? Well, as it turns out, that’s not how slices work in Go. When declaring a nil slice, it
is not the dreaded null pointer. It is still a slice. This slice includes a slice header, but its value just happens to
be nil.&lt;/p&gt;
&lt;p&gt;The main difference between a nil slice and an empty slice is the following. A nil slice compared to nil will return
true. That’s pretty much it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Slice is nil.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;} &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Slice is NOT nil.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When printing a nil slice, it will print like an empty slice:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Slice is: %v\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;Slice is: []
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can append to a nil slice:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt; = append(&lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;bozo&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can loop over a nil slice, and the code will not enter the for loop:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;range&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;We are in a for loop.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The length of a nil slice is 0:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;len: %#v\n&amp;#34;&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;len: 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And, of course, you can pass a nil slice by pointer. That’s right &amp;ndash; pass a nil slice by pointer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;passByPointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;[]&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;passByPointer len: %#v\n&amp;#34;&lt;/span&gt;, len(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt; = append(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;bozo&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You will get the updated slice if the underlying slice is reassigned.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;passByPointer&lt;/span&gt;(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;len after passByPointer: %#v\n&amp;#34;&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;slice&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex="0"&gt;&lt;code&gt;len after passByPointer: 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The code above demonstrates that a nil slice is not a nil pointer. On the other hand, you cannot dereference a nil
pointer like you can a nil slice. This code causes a crash:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;nullSlice&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;[]&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Crash: %#v\n&amp;#34;&lt;/span&gt;, len(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;nullSlice&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s the full gist:&lt;/p&gt;
&lt;script type="application/javascript" src="https://gist.github.com/getvictor/bff0fa45185630e264a40476207d8e4d.js"&gt;&lt;/script&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we wrote about &lt;a class="link" href="../method-overriding-in-go/" &gt;overriding methods in Go&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-nil-slice-vs-empty-slice-video"&gt;&lt;a href="#watch-nil-slice-vs-empty-slice-video" class="header-anchor"&gt;&lt;/a&gt;Watch nil slice vs empty slice video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/q0B4q_0u4XI"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;</description></item><item><title>Catch missed authorization checks during software development</title><link>https://victoronsoftware.com/posts/catch-missed-authorization-checks-during-software-development/</link><pubDate>Fri, 10 Nov 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/catch-missed-authorization-checks-during-software-development/</guid><description>&lt;p&gt;Authorization is giving permission to a user to do an action on the server. As developers, we must ensure that users are
only allowed to do what they are authorized.&lt;/p&gt;
&lt;p&gt;One way to ensure that authorization has happened is to loudly flag when it hasn&amp;rsquo;t. This is how we do it at
&lt;a class="link" href="https://www.fleetdm.com" target="_blank" rel="noopener"
&gt;Fleet Device Management&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In our code base, we use the &lt;a class="link" href="https://github.com/go-kit/kit" target="_blank" rel="noopener"
&gt;go-kit library&lt;/a&gt;. Most of the general endpoints are created
in the
&lt;a class="link" href="https://github.com/fleetdm/fleet/blob/36421bd5055d37a4c39a04e0f9bd96ad47951131/server/service/handler.go#L729" target="_blank" rel="noopener"
&gt;handler.go&lt;/a&gt;
file. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// user-authenticated endpoints&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;ue&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;newUserAuthenticatedEndpointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;svc&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;r&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;apiVersions&lt;/span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;ue&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;POST&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;/api/_version_/fleet/trigger&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;triggerEndpoint&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;triggerRequest&lt;/span&gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every endpoint calls &lt;strong&gt;kithttp.NewServer&lt;/strong&gt; and wraps the endpoint with our &lt;strong&gt;AuthzCheck&lt;/strong&gt;. From
&lt;a class="link" href="https://github.com/fleetdm/fleet/blob/36421bd5055d37a4c39a04e0f9bd96ad47951131/server/service/handler.go#L729" target="_blank" rel="noopener"
&gt;handler.go&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;authzcheck&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewMiddleware&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;AuthzCheck&lt;/span&gt;()(&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;kithttp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewServer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;e&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;decodeFn&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;encodeResponse&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;opts&lt;/span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/catch-missed-authorization-checks-during-software-development/AuthzCheck.jpg"
alt="Catch missed authorization check block diagram"&gt;
&lt;/figure&gt;
&lt;p&gt;This means that after the business logic is processed, the AuthzCheck is called. This check ensures that authorization
was checked. Otherwise, an error is returned. From
&lt;a class="link" href="https://github.com/fleetdm/fleet/blob/36421bd5055d37a4c39a04e0f9bd96ad47951131/server/service/middleware/authzcheck/authzcheck.go#L51" target="_blank" rel="noopener"
&gt;authzcheck.go&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// If authorization was not checked, return a response that will&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// marshal to a generic error and log that the check was missed.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;authzctx&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Checked&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Getting to here means there is an authorization-related bug in our code.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;authz&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CheckMissingWithResponse&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;response&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This additional check is useful during our development and QA process, to ensure that authorization always happens in
our business logic.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we improved our app&amp;rsquo;s security by &lt;a class="link" href="../get-args-from-stdin" &gt;reading program arguments from STDIN&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="watch-how-we-catch-missed-authorization-checks"&gt;&lt;a href="#watch-how-we-catch-missed-authorization-checks" class="header-anchor"&gt;&lt;/a&gt;Watch how we catch missed authorization checks
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/jbkPLQpzPtc"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This article originally appeared in
&lt;a class="link" href="https://fleetdm.com/guides/catch-missed-authorization-checks-during-software-development" target="_blank" rel="noopener"
&gt;Fleet&amp;rsquo;s blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description></item></channel></rss>