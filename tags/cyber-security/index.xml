<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Cyber Security on Victor on Software</title><link>https://victoronsoftware.com/tags/cyber-security/</link><description>Recent content in Cyber Security on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 02 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/cyber-security/index.xml" rel="self" type="application/rss+xml"/><item><title>How to use TPM 2.0 to secure private keys</title><link>https://victoronsoftware.com/posts/how-to-use-tpm/</link><pubDate>Wed, 02 Jul 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/how-to-use-tpm/</guid><description>&lt;img src="https://victoronsoftware.com/posts/how-to-use-tpm/tpm-key-hierarchy-headline.png" alt="Featured image of post How to use TPM 2.0 to secure private keys" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#tpm-architecture" &gt;TPM architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#tpm-key-storage" &gt;TPM key storage&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#tpm-key-hierarchy-model" &gt;TPM key hierarchy model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#tpm-signing" &gt;TPM signing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Trusted Platform Module (TPM) is a secure cryptoprocessor for many security applications requiring strong device
identity, data protection, and platform integrity. Some uses include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device identity and attestation&lt;/li&gt;
&lt;li&gt;Secure boot&lt;/li&gt;
&lt;li&gt;Key storage&lt;/li&gt;
&lt;li&gt;Disk encryption&lt;/li&gt;
&lt;li&gt;Digital signatures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TPM 1.2 was standardized in 2009 as ISO/IEC 11889:2009. TPM 2.0, the most common today, came out in 2015 with the
&lt;a class="link" href="https://www.iso.org/standard/66510.html" target="_blank" rel="noopener"
&gt;ISO/IEC 11889:2015 standard&lt;/a&gt;. The link is for part 1 of the standard (out of
4).&lt;/p&gt;
&lt;p&gt;Although many people think of TPM as a hardware chip, it has many possible implementations. They are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A dedicated TPM chip&lt;/li&gt;
&lt;li&gt;Integrated TPM as part of another chip (e.g., an ARM-based SoC)&lt;/li&gt;
&lt;li&gt;Firmware TPMs (fTPMs) that run in the CPU&amp;rsquo;s trusted execution environment&lt;/li&gt;
&lt;li&gt;Virtual TPMs (vTPMs) are provided by hypervisors to provide security to virtual environments&lt;/li&gt;
&lt;li&gt;Software TPMs are emulators of TPMs. They are helpful for development purposes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article, we will focus on the use case of storing a private key in TPM 2.0.&lt;/p&gt;
&lt;h2 id="tpm-architecture"&gt;&lt;a href="#tpm-architecture" class="header-anchor"&gt;&lt;/a&gt;TPM architecture
&lt;/h2&gt;&lt;pre class="mermaid"&gt;
graph TD
subgraph TPM
subgraph Memory
VM[&amp;lt;b&amp;gt;Volatile Memory&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;Temporary keys, Sessions,&amp;lt;br/&amp;gt;Buffers]
NV[&amp;lt;b&amp;gt;Non-Volatile Memory&amp;lt;/b&amp;gt;&amp;lt;br/&amp;gt;EK, SRK, Policies,&amp;lt;br/&amp;gt;NV indexes]
end
subgraph Crypto engine
CC[Cryptographic Coprocessor]
RNG[Random Number Generator]
KGEN[Key Generation Logic]
CC --&amp;gt;|Uses| RNG
KGEN --&amp;gt;|Uses| RNG
CC --&amp;gt;|Performs| ENC[Encryption/Decryption]
CC --&amp;gt;|Performs| SIG[Digital Signature / Hashing]
end
subgraph Control logic
PCR[&amp;#34;Platform Configuration&amp;lt;br/&amp;gt;Registers&amp;lt;br/&amp;gt;(PCRs)&amp;#34;]
MM[Command Processing&amp;lt;br/&amp;gt;Engine /&amp;lt;br/&amp;gt;State Machine]
end
end
style TPM fill:#5c2d91,stroke:#fff,stroke-width:2px,color:#fff
style CC fill:#1f4e79,stroke:#fff,color:#fff
style KGEN fill:#1f4e79,stroke:#fff,color:#fff
style RNG fill:#2e7d32,stroke:#fff,color:#fff
style NV fill:#5d4037,stroke:#fff,color:#fff
style VM fill:#5d4037,stroke:#fff,color:#fff
style PCR fill:#7b1fa2,stroke:#fff,color:#fff
style MM fill:#37474f,stroke:#fff,color:#fff
style ENC fill:#455a64,stroke:#fff,stroke-dasharray: 5 5,color:#fff
style SIG fill:#455a64,stroke:#fff,stroke-dasharray: 5 5,color:#fff
&lt;/pre&gt;
&lt;p&gt;This TPM architecture diagram illustrates the internal components of a Trusted Platform Module, highlighting its secure
cryptographic engine, non-volatile and volatile memory, and control subsystems. Key elements include the cryptographic
coprocessor, random number generator, and key generation logic, all operating within a hardware-isolated boundary. The
platform configuration registers (PCRs) and command processing engine manage system state and policy enforcement, while
non-volatile memory stores persistent keys and metadata. Non-volatile storage includes the Endorsement Key (EK), a
unique, factory-installed identity key, and the Storage Root Key (SRK), which anchors the TPM&amp;rsquo;s key hierarchy.&lt;/p&gt;
&lt;h2 id="tpm-key-storage"&gt;&lt;a href="#tpm-key-storage" class="header-anchor"&gt;&lt;/a&gt;TPM key storage
&lt;/h2&gt;&lt;p&gt;TPM defines four main authorization hierarchies, each rooted in a different seed and intended for various use cases:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Hierarchy&lt;/th&gt;
&lt;th&gt;Seed Used&lt;/th&gt;
&lt;th&gt;Purpose&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Owner&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Storage Seed&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Storage keys, general-purpose keys&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Endorsement&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Endorsement Seed&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Identity, attestation (e.g. EK)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Platform&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Platform Seed&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Firmware-level trust &amp;amp; control&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;Null&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;(None)&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Ephemeral keys not tied to any seed&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Each hierarchy has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Its own &lt;strong&gt;seed&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Its own &lt;strong&gt;authorization policy&lt;/strong&gt; (e.g., owner password)&lt;/li&gt;
&lt;li&gt;Its own &lt;strong&gt;logical namespace&lt;/strong&gt; for creating keys&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will focus on the &lt;strong&gt;Owner&lt;/strong&gt; hierarchy.&lt;/p&gt;
&lt;p&gt;While TPMs are capable of securely storing cryptographic keys, most applications avoid storing keys directly in the TPM
in practice. This is because the amount of available non-volatile storage varies significantly between TPM models and is
often limited. Instead, keys are typically generated or loaded temporarily into the TPM or stored externally in
encrypted form and only used inside the TPM when needed.&lt;/p&gt;
&lt;h2 id="tpm-key-hierarchy-model"&gt;&lt;a href="#tpm-key-hierarchy-model" class="header-anchor"&gt;&lt;/a&gt;TPM key hierarchy model
&lt;/h2&gt;&lt;p&gt;In addition to the authorization hierarchies, the TPM organizes keys in a hierarchy. This model helps balance
performance, security, and the TPM&amp;rsquo;s limited storage.&lt;/p&gt;
&lt;p&gt;Storage Seed → Parent Key → Child Key&lt;/p&gt;
&lt;h3 id="storage-seed-owner"&gt;&lt;a href="#storage-seed-owner" class="header-anchor"&gt;&lt;/a&gt;Storage seed (Owner)
&lt;/h3&gt;&lt;p&gt;The seed is a non-exportable, hardware-internal value that acts as the TPM&amp;rsquo;s true root key. You can&amp;rsquo;t access it, but you
can use it indirectly. &lt;strong&gt;The storage seed cannot be modified.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="parent-key"&gt;&lt;a href="#parent-key" class="header-anchor"&gt;&lt;/a&gt;Parent key
&lt;/h3&gt;&lt;p&gt;Parent keys are stored persistently in TPM non-volatile memory or reloaded as needed. A parent key is any key used to
encrypt (wrap) one or more child keys. The parent key must be already loaded in the TPM to load/use any of its children.&lt;/p&gt;
&lt;p&gt;When creating a parent key, the TPM &lt;strong&gt;does not randomly generate&lt;/strong&gt; the key unless you explicitly ask it to. Instead, if
you provide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The same hierarchy (e.g., the Owner ties it to the storage seed)&lt;/li&gt;
&lt;li&gt;The same key template (same attributes, algorithms, policy)&lt;/li&gt;
&lt;li&gt;The same authorization (e.g., null password)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;hellip; then the TPM will derive &lt;strong&gt;the exact same key&lt;/strong&gt; every time.&lt;/p&gt;
&lt;p&gt;The TPM uses a deterministic KDF (key derivation function). This determinism means the application does not need to
store the parent key explicitly. It can be recreated when needed.&lt;/p&gt;
&lt;h4 id="create-a-parent-key-example"&gt;&lt;a href="#create-a-parent-key-example" class="header-anchor"&gt;&lt;/a&gt;Create a parent key example
&lt;/h4&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/tpm2-software/tpm2-tools" target="_blank" rel="noopener"
&gt;tpm2-tools&lt;/a&gt; is the official CLI toolset for interacting with TPM 2.0 via
the TPM2 Software Stack (tss). Install it on Ubuntu/Debian like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt update
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install tpm2-tools
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;tpm2-tss&lt;/code&gt; should already be installed or pulled in as part of &lt;code&gt;tpm2-tools&lt;/code&gt; installation. You can check for these
libraries with: &lt;code&gt;dpkg -l | grep libtss2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To interact with the TPM device using &lt;code&gt;tpm2-tools&lt;/code&gt;, the user must either be root or a member of the &lt;code&gt;tss&lt;/code&gt; group, which
has access to &lt;code&gt;/dev/tpmrm0&lt;/code&gt;. To add the user to the &lt;code&gt;tss&lt;/code&gt; group, you can:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo usermod -aG tss $USER
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then &lt;strong&gt;log out and log back in&lt;/strong&gt; for the group change to take effect.&lt;/p&gt;
&lt;p&gt;Our examples use &lt;code&gt;tpm2-tools&lt;/code&gt; version 5.6. See
&lt;a class="link" href="https://tpm2-tools.readthedocs.io/en/latest/" target="_blank" rel="noopener"
&gt;the tpm2-tools documentation&lt;/a&gt; for details. To create a transient parent
key in TPM 2.0 using TSS (tpm2-tools) CLI, use the &lt;code&gt;tpm2_createprimary&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_createprimary &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --hierarchy&lt;span style="color:#f92672"&gt;=&lt;/span&gt;owner &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;rsa &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --hash-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;sha256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --attributes&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;fixedtpm|fixedparent|sensitivedataorigin|userwithauth|decrypt|restricted&amp;#34;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;parent.ctx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command creates the &lt;code&gt;parent.ctx&lt;/code&gt; context file, which can be used in later commands.&lt;/p&gt;
&lt;p&gt;Below is an equivalent example of creating the parent key using the &lt;a class="link" href="https://github.com/google/go-tpm" target="_blank" rel="noopener"
&gt;go-tpm&lt;/a&gt; library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create a parent key template with the required attributes&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;parentTemplate&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New2B&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTPublic&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Type&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgRSA&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;NameAlg&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgSHA256&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ObjectAttributes&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAObject&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;FixedTPM&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// bound to TPM that created it&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;FixedParent&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Required&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SensitiveDataOrigin&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// key material generated internally&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;UserWithAuth&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Required, even if we use nil password&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Decrypt&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Allows key to be used for decryption/unwrapping&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Restricted&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Limits use to decryption of child keys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Parameters&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUPublicParms&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgRSA&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMSRSAParms&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;KeyBits&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Symmetric&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTSymDefObject&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Algorithm&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgAES&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;KeyBits&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUSymKeyBits&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgAES&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMKeyBits&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;128&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Mode&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUSymMode&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgAES&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgCFB&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;primaryKey&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CreatePrimary&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;PrimaryHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMRHOwner&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InPublic&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;parentTemplate&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;device&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="child-key"&gt;&lt;a href="#child-key" class="header-anchor"&gt;&lt;/a&gt;Child key
&lt;/h3&gt;&lt;p&gt;A &lt;strong&gt;child key&lt;/strong&gt; in TPM 2.0 is created &lt;strong&gt;under a parent key&lt;/strong&gt; (which must already exist or be loaded). The child key is
&lt;strong&gt;wrapped (encrypted)&lt;/strong&gt; by the parent key and is not usable on its own—it must be &lt;strong&gt;unwrapped (loaded)&lt;/strong&gt; by the TPM
using the correct parent key.&lt;/p&gt;
&lt;p&gt;To create a child ECC key using &lt;code&gt;tpm2-tools&lt;/code&gt;, use the &lt;code&gt;tpm2-create&lt;/code&gt; command, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_create &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --parent-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;parent.ctx &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;ecc_nist_p256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --hash-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;sha256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --attributes&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;fixedtpm|fixedparent|sensitivedataorigin|userwithauth|sign|decrypt&amp;#34;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --public&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.pub &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --private&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.priv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command creates the &lt;code&gt;child.pub&lt;/code&gt; and &lt;code&gt;child.priv&lt;/code&gt; files which can be used in later commands.&lt;/p&gt;
&lt;p&gt;To load the child key into the TPM using &lt;code&gt;tpm2-tools&lt;/code&gt;, use the &lt;code&gt;tpm2_load&lt;/code&gt; command, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_load &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --parent-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;parent.ctx &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --public&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.pub &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --private&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.priv &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.ctx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command creates the &lt;code&gt;child.ctx&lt;/code&gt; context file which can be used later.&lt;/p&gt;
&lt;p&gt;Below is an equivalent example of creating the child key using the &lt;a class="link" href="https://github.com/google/go-tpm" target="_blank" rel="noopener"
&gt;go-tpm&lt;/a&gt; library,
loading the key into the TPM, and saving the context for subsequent reuse:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create an ECC key template for the child key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;eccTemplate&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;New2B&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTPublic&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Type&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgECC&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;NameAlg&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgSHA256&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ObjectAttributes&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAObject&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;FixedTPM&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;FixedParent&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SensitiveDataOrigin&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;UserWithAuth&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;, &lt;span style="color:#75715e"&gt;// Required even if the password is nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SignEncrypt&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Decrypt&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Parameters&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUPublicParms&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgECC&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMSECCParms&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;CurveID&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;curveID&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create the key under the transient parent&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;createKey&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Create&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ParentHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;parentKeyHandle&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InPublic&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;eccTemplate&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;device&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Load the key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;loadedKey&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Load&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ParentHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;parentKeyHandle&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InPrivate&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;createKey&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;OutPrivate&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InPublic&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;createKey&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;OutPublic&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;device&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Save the key context&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;keyContext&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ContextSave&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;SaveHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;loadedKey&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ObjectHandle&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;t&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;device&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="-where-can-a-child-key-be-persisted"&gt;&lt;a href="#-where-can-a-child-key-be-persisted" class="header-anchor"&gt;&lt;/a&gt;📁 Where can a child key be persisted?
&lt;/h4&gt;&lt;p&gt;The most common approach is to persist the child keys outside the TPM.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You store the child&amp;rsquo;s public key and private key blob on a disk, in a secure database, or in a file system.&lt;/li&gt;
&lt;li&gt;When you need to use the key, you &lt;strong&gt;load it into the TPM&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This storage approach is safe because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The private key is always encrypted with the TPM&amp;rsquo;s parent key&lt;/li&gt;
&lt;li&gt;Only the correct TPM with the correct parent key can decrypt/use it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is also a de facto standard for
&lt;a class="link" href="https://www.hansenpartnership.com/draft-bottomley-tpm2-keys.html" target="_blank" rel="noopener"
&gt;storing TPM 2.0 key files using ASN.1 structure&lt;/a&gt;.
OpenConnect VPN and several other tools use this standard.&lt;/p&gt;
&lt;h2 id="tpm-signing"&gt;&lt;a href="#tpm-signing" class="header-anchor"&gt;&lt;/a&gt;TPM signing
&lt;/h2&gt;&lt;p&gt;TPM can sign data using the child key. The output signature is in raw binary.&lt;/p&gt;
&lt;p&gt;To sign using &lt;code&gt;tpm2-tools&lt;/code&gt;, use the &lt;code&gt;tpm2_sign&lt;/code&gt; command, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Create dummy data and a dummy digest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;echo &lt;span style="color:#e6db74"&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt; &amp;gt; data.in.raw
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat data.in.raw | openssl dgst -sha256 -binary &amp;gt; digest.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Sign the digest&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_sign &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --key-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.ctx &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --hash-algorithm&lt;span style="color:#f92672"&gt;=&lt;/span&gt;sha256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --digest &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --format&lt;span style="color:#f92672"&gt;=&lt;/span&gt;plain &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --signature&lt;span style="color:#f92672"&gt;=&lt;/span&gt;signature.plain digest.bin
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Now we will verify the signature using openssl.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# First, we need the child public key in PEM format.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;tpm2_readpublic &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --object-context&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.ctx &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --output&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.pem &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; --format&lt;span style="color:#f92672"&gt;=&lt;/span&gt;pem
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Now, we can verify the signature.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl dgst &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -sha256 &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -verify&lt;span style="color:#f92672"&gt;=&lt;/span&gt;child.pem &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -keyform&lt;span style="color:#f92672"&gt;=&lt;/span&gt;pem &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; -signature&lt;span style="color:#f92672"&gt;=&lt;/span&gt;signature.plain &lt;span style="color:#ae81ff"&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;&lt;/span&gt; data.in.raw
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Below is an example of signing using the &lt;a class="link" href="https://github.com/google/go-tpm" target="_blank" rel="noopener"
&gt;go-tpm&lt;/a&gt; library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;sign&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Sign&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;KeyHandle&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;childKeyHandle&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Digest&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPM2BDigest&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Buffer&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;digest&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;InScheme&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTSigScheme&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Scheme&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgECDSA&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Details&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;NewTPMUSigScheme&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMAlgECDSA&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMSSchemeHash&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;HashAlg&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;hashAlg&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Validation&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMTTKHashCheck&lt;/span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;Tag&lt;/span&gt;: &lt;span style="color:#a6e22e"&gt;tpm2&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TPMSTHashCheck&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;sign&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Execute&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tpm&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Get the ECDSA signature&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;ecdsaSig&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;rsp&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Signature&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Signature&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ECDSA&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../mtls-hello-world/" &gt;Mutual TLS intro and hands-on example: mTLS Hello World&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;A quick and practical
introduction to mutual TLS (mTLS), including how client certificate authentication works and how to try it with a
simple example.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../mtls-vs-http-signature/" &gt;Comparing mTLS and HTTP signatures&lt;/a&gt;&lt;/strong&gt; A practical guide to securing HTTP requests with
transport-layer or application-layer authentication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../why-you-need-vlan/" &gt;What is a VLAN and why you need it in your home network&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;Learn how VLANs isolate devices
to improve home network security and what you need to configure on your router, switch, and access points.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-the-explanation-of-securing-private-keys-with-tpm"&gt;&lt;a href="#watch-the-explanation-of-securing-private-keys-with-tpm" class="header-anchor"&gt;&lt;/a&gt;Watch the explanation of securing private keys with TPM
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/zwnznp5KeQs"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>What is a VLAN and why you need it in your home network</title><link>https://victoronsoftware.com/posts/why-you-need-vlan/</link><pubDate>Wed, 27 Nov 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/why-you-need-vlan/</guid><description>&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/vlan-house.png" alt="Featured image of post What is a VLAN and why you need it in your home network" /&gt;&lt;h2 id="what-is-a-vlan"&gt;&lt;a href="#what-is-a-vlan" class="header-anchor"&gt;&lt;/a&gt;What is a VLAN?
&lt;/h2&gt;&lt;p&gt;VLAN (Virtual Local Area Network) technology allows you to create multiple isolated networks on a single physical
network. For example, a single ethernet wire or a WLAN (wireless LAN) can support multiple VLANs. VLANs improve network
security, performance, and scalability.&lt;/p&gt;
&lt;h2 id="how-does-vlan-improve-network-security"&gt;&lt;a href="#how-does-vlan-improve-network-security" class="header-anchor"&gt;&lt;/a&gt;How does VLAN improve network security?
&lt;/h2&gt;&lt;p&gt;VLAN improves network security by isolating devices into separate networks. This isolation prevents devices in one VLAN
from communicating with devices in another VLAN. For example, you can create a separate VLAN for your IoT (Internet of
Things) devices, such as smart light bulbs and thermostats, to prevent them from accessing your primary network. You can
also create a separate VLAN for guest devices to prevent them from accessing your main network and other VLANs.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/VLAN-basic.png"
alt="Router with three VLANS -- office, IoT, and guest."&gt;
&lt;/figure&gt;
&lt;p&gt;For example, if a hacker gains access to a device in the IoT VLAN, they won&amp;rsquo;t be able to access devices in the office
VLAN or the guest VLAN. This isolation limits the damage that a hacker can do to your network.&lt;/p&gt;
&lt;h2 id="how-does-vlan-work"&gt;&lt;a href="#how-does-vlan-work" class="header-anchor"&gt;&lt;/a&gt;How does VLAN work?
&lt;/h2&gt;&lt;p&gt;VLAN works by adding a VLAN tag to each network packet. The VLAN tag contains the VLAN ID, which identifies the VLAN to
which the packet belongs. Network switches use the VLAN tag to forward packets only to devices in the same VLAN. Routers
can route packets between different VLANs based on their VLAN tags.&lt;/p&gt;
&lt;h2 id="how-to-set-up-vlans-in-your-home-network"&gt;&lt;a href="#how-to-set-up-vlans-in-your-home-network" class="header-anchor"&gt;&lt;/a&gt;How to set up VLANs in your home network
&lt;/h2&gt;&lt;p&gt;Unfortunately, setting up a VLAN in your home network is not as simple as flipping a switch. Multiple parts of your home
network need to be configured, and some older or cheaper hardware, such as no-configuration network switches, may not
support VLANs.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/VLAN-full.png"
alt="Detailed picture of router with three VLANS -- office, IoT, and guest. The picture includes firewall and switches."&gt;
&lt;/figure&gt;
&lt;h3 id="selecting-vlan-tags-and-ip-ranges"&gt;&lt;a href="#selecting-vlan-tags-and-ip-ranges" class="header-anchor"&gt;&lt;/a&gt;Selecting VLAN tags and IP ranges
&lt;/h3&gt;&lt;p&gt;Before configuring VLANs, decide how many VLAN tags you need and what each tag will represent. Also, determine what IP
ranges will map to each VLAN. Some people map the VLAN ID to the third octet of the IP address. For example, VLAN 333
may use the IP range 10.0.333.0/24.&lt;/p&gt;
&lt;p&gt;On the other hand, there is a security argument for using random VLAN IDs. If a hacker gets access to your network, they
won&amp;rsquo;t know what each VLAN ID represents and may even have difficulty figuring out which VLAN IDs are active. This
security approach is often referred to as security through obscurity.&lt;/p&gt;
&lt;p&gt;Some common VLANs are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Office&lt;/li&gt;
&lt;li&gt;IoT&lt;/li&gt;
&lt;li&gt;Guest&lt;/li&gt;
&lt;li&gt;Media&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="router-interfaces"&gt;&lt;a href="#router-interfaces" class="header-anchor"&gt;&lt;/a&gt;Router interfaces
&lt;/h3&gt;&lt;p&gt;The network router interface is the first place to configure VLANs. A router interface is a physical or virtual router
port connecting to a network. So, you must configure the router interface to support your VLAN-selected tags.&lt;/p&gt;
&lt;h3 id="dhcp"&gt;&lt;a href="#dhcp" class="header-anchor"&gt;&lt;/a&gt;DHCP
&lt;/h3&gt;&lt;p&gt;Dynamic Host Configuration Protocol (DHCP) is a network protocol that automatically assigns IP addresses to devices on a
network.&lt;/p&gt;
&lt;p&gt;You need to configure a DHCP server to assign IP addresses to devices in each VLAN. You can use the same DHCP server for
all VLANs but must configure it to assign IP addresses from different ranges for each VLAN.&lt;/p&gt;
&lt;h3 id="firewall"&gt;&lt;a href="#firewall" class="header-anchor"&gt;&lt;/a&gt;Firewall
&lt;/h3&gt;&lt;p&gt;You need to configure firewall rules for each VLAN to control what traffic is allowed in and out of the VLAN. For
example, you may not allow devices on the Guest VLAN to access devices on the other VLANs.&lt;/p&gt;
&lt;p&gt;Below is an example of our firewall rules for the GUEST VLAN.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/vlan-firewall.png"
alt="pfsense firewall rules for GUEST VLAN, which only allows access to GUEST VLAN."&gt;
&lt;/figure&gt;
&lt;p&gt;The rules allow access to our local DNS server to block inappropriate content. The rules block all private networking
IPs (as defined by RFC 1918) except the VLAN&amp;rsquo;s subnet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;10.0.0.0/8 (10.0.0.0 - 10.255.255.255)&lt;/li&gt;
&lt;li&gt;172.16.0.0/12 (172.16.0.0 - 172.31.255.255)&lt;/li&gt;
&lt;li&gt;192.168.0.0/16 (192.168.0.0 - 192.168.255.255)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="network-switch"&gt;&lt;a href="#network-switch" class="header-anchor"&gt;&lt;/a&gt;Network switch
&lt;/h3&gt;&lt;p&gt;You need to configure the VLAN tags for each port on the network switch. For example, you may configure port 1 to be
part of the Office VLAN and port 2 to be part of the IoT VLAN. A single port can be part of multiple VLANs, often
required for a wireless access point.&lt;/p&gt;
&lt;p&gt;Below is an example of the network switch configuration for our GUEST VLAN.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/vlan-network-switch.png"
alt="pfsense firewall rules for GUEST VLAN, which only allows access to GUEST VLAN."&gt;
&lt;/figure&gt;
&lt;p&gt;The tagged ports include three wireless access points and the router port.&lt;/p&gt;
&lt;h3 id="wireless-access-point-wap"&gt;&lt;a href="#wireless-access-point-wap" class="header-anchor"&gt;&lt;/a&gt;Wireless Access Point (WAP)
&lt;/h3&gt;&lt;p&gt;You need to configure the SSIDs (Service Set Identifiers) for each VLAN on your wireless access point. In our case, we
created a WLAN for each VLAN—Office, IoT, and Guest. Each WLAN is associated with a VLAN tag, which we set in the
advanced options of the WLAN configuration, as shown below.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/vlan-wlan-config.png"
alt="WLAN priority tab that specifies the VLAN tag of 4."&gt;
&lt;/figure&gt;
&lt;h2 id="guest-network"&gt;&lt;a href="#guest-network" class="header-anchor"&gt;&lt;/a&gt;Guest network
&lt;/h2&gt;&lt;p&gt;Before adding a VLAN for our guest network, we used the &amp;ldquo;Guest Mode&amp;rdquo; feature on our WAP (Wireless Access Point). This
feature was secure because it isolated guest devices from our primary network. However, the user experience for our
guests was terrible.&lt;/p&gt;
&lt;p&gt;The guest network directed users to a &lt;a class="link" href="https://en.wikipedia.org/wiki/Captive_portal" target="_blank" rel="noopener"
&gt;captive portal&lt;/a&gt; before granting
them Internet access. Some child guests could not access the captive portal due to parental device restrictions. Guests'
devices also had trouble reconnecting to the guest network on a subsequent visit &amp;ndash; they were not automatically
reconnected.&lt;/p&gt;
&lt;p&gt;Switching to a VLAN-based guest network significantly improved the user experience.&lt;/p&gt;
&lt;h2 id="how-to-specify-vlan-on-a-wired-connection"&gt;&lt;a href="#how-to-specify-vlan-on-a-wired-connection" class="header-anchor"&gt;&lt;/a&gt;How to specify VLAN on a wired connection
&lt;/h2&gt;&lt;p&gt;A single wired ethernet connection may be part of multiple VLANs. You can connect your computer to different VLANs for
testing or security reasons.&lt;/p&gt;
&lt;p&gt;On a wired connection, you can specify the VLAN ID in your device&amp;rsquo;s network settings. For example, you can add a virtual
interface with a specific VLAN tag on macOS.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/why-you-need-vlan/vlan-macos-config.png"
alt="macOS network settings with VLAN ID specified."&gt;
&lt;/figure&gt;
&lt;h2 id="debugging-notes"&gt;&lt;a href="#debugging-notes" class="header-anchor"&gt;&lt;/a&gt;Debugging notes
&lt;/h2&gt;&lt;p&gt;While setting up our VLANs, we encountered the issue of our computer not getting an IP address from the DHCP. After
reviewing the settings on our router and switch, we found that our settings did not save for some reason. Make sure to
reload your settings after making changes to ensure they stick.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the past, we discussed &lt;a class="link" href="../setting-up-a-virtual-router/" &gt;how to set up a virtual router&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We also covered &lt;a class="link" href="../create-ipv6-only-linux-server/" &gt;how to create an IPv6-only linux server&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../how-to-use-tpm/" &gt;Securing Private Keys with TPM 2.0: A Developer’s Guide&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;A hands-on walkthrough of using TPM
2.0 for hardware-backed key protection, featuring code examples and practical usage patterns.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-discuss-what-is-a-vlan-and-why-you-need-it-in-your-home-network"&gt;&lt;a href="#watch-us-discuss-what-is-a-vlan-and-why-you-need-it-in-your-home-network" class="header-anchor"&gt;&lt;/a&gt;Watch us discuss what is a VLAN and why you need it in your home network
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/R8vq50uRxik"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS (mTLS): building a client using the system keystore</title><link>https://victoronsoftware.com/posts/mtls/</link><pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls/mtls-handshake.png" alt="Featured image of post Mutual TLS (mTLS): building a client using the system keystore" /&gt;&lt;p&gt;We recently completed a series of articles on mutual TLS (mTLS). In this series, we covered the basics of mTLS, how to
use macOS keychain and Windows certificate store, and how to build an mTLS Go client. Our goal was to show you how to
use mTLS in your applications and securely store your mTLS certificates and keys without exposing them to the
filesystem.&lt;/p&gt;
&lt;p&gt;Here is a summary of the articles in the series:&lt;/p&gt;
&lt;h3 id="mutual-tls-intro-and-hands-on-example"&gt;&lt;a href="#mutual-tls-intro-and-hands-on-example" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-hello-world" &gt;Mutual TLS intro and hands-on example&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;An introduction to mTLS and a hands-on example of using an mTLS client to connect to an mTLS server.&lt;/p&gt;
&lt;h3 id="using-mtls-with-the-macos-keychain"&gt;&lt;a href="#using-mtls-with-the-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-with-apple-keychain" &gt;Using mTLS with the macOS keychain&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;A guide on how to use the macOS system keystore to store your mTLS certificates and keys. We connect to an mTLS server
with applications that use the macOS system keychain to find the mTLS certificates.&lt;/p&gt;
&lt;h3 id="create-an-mtls-go-client"&gt;&lt;a href="#create-an-mtls-go-client" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-go-client" &gt;Create an mTLS Go client&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;We create a standard mTLS client in Go using the &lt;code&gt;crypto/tls&lt;/code&gt; library. This client loads the client certificate and
private key from the filesystem.&lt;/p&gt;
&lt;h3 id="add-a-custom-certificate-signer-to-the-mtls-go-client"&gt;&lt;a href="#add-a-custom-certificate-signer-to-the-mtls-go-client" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-go-custom-signer" &gt;Add a custom certificate signer to the mTLS Go client&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;We implement a custom &lt;code&gt;crypto.Signer&lt;/code&gt; to sign a client certificate during the mTLS handshake. Thus, we are a step closer
to removing our client certificate and private key from the filesystem.&lt;/p&gt;
&lt;h3 id="a-complete-mtls-go-client-using-the-macos-keychain"&gt;&lt;a href="#a-complete-mtls-go-client-using-the-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;A complete mTLS Go client using the macOS keychain&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;In this article, we continue the previous article by connecting our custom signer to the macOS keychain using CGO and
Apple APIs.&lt;/p&gt;
&lt;h3 id="using-mtls-with-the-windows-certificate-store"&gt;&lt;a href="#using-mtls-with-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-with-windows" &gt;Using mTLS with the Windows certificate store&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Switching to Windows, we learn how to use the Windows system keystore to store your mTLS certificates and keys. We
connect to an mTLS server with applications that use the Windows certificate store to find the mTLS certificates.&lt;/p&gt;
&lt;h3 id="create-an-mtls-go-client-using-the-windows-certificate-store"&gt;&lt;a href="#create-an-mtls-go-client-using-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-go-client-windows-certificate-store" &gt;Create an mTLS Go client using the Windows certificate store&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Using the software pattern from the previous articles on the macOS keychain, we build an mTLS client in Go integrated
with the Windows certificate store to store the mTLS certificates and keys.&lt;/p&gt;
&lt;h3 id="mtls-vs-http-signature-faceoff-securing-your-apis"&gt;&lt;a href="#mtls-vs-http-signature-faceoff-securing-your-apis" class="header-anchor"&gt;&lt;/a&gt;&lt;a class="link" href="../mtls-vs-http-signature/" &gt;mTLS vs HTTP signature faceoff: securing your APIs&lt;/a&gt;
&lt;/h3&gt;&lt;p&gt;Where do mTLS and HTTP message signatures fit, and how to choose the right one for your architecture.&lt;/p&gt;
&lt;h3 id="mutual-tls-mtls-building-a-client-using-the-system-keystore-video-playlist"&gt;&lt;a href="#mutual-tls-mtls-building-a-client-using-the-system-keystore-video-playlist" class="header-anchor"&gt;&lt;/a&gt;Mutual TLS (mTLS): building a client using the system keystore video playlist
&lt;/h3&gt;
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;"&gt;
&lt;iframe src="https://www.youtube.com/embed/videoseries?list=PLr-TrdMhEklRF4lQ_bIH0WJTUiY8ldc0W" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"&gt;&lt;/iframe&gt;
&lt;/div&gt;</description></item><item><title>Mutual TLS (mTLS) with Windows certificate store</title><link>https://victoronsoftware.com/posts/mtls-with-windows/</link><pubDate>Wed, 06 Mar 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-with-windows/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-with-windows/mtls-edge.png" alt="Featured image of post Mutual TLS (mTLS) with Windows certificate store" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-with-apple-keychain" &gt;mTLS with macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-client" &gt;mTLS Go client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-custom-signer" &gt;mTLS Go client with custom certificate signer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;mTLS Go client using macOS keychain&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="why-use-windows-certificate-store"&gt;&lt;a href="#why-use-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Why use Windows certificate store?
&lt;/h2&gt;&lt;p&gt;In our previous articles, we introduced mTLS and demonstrated how to use mTLS client certificates and keys. Keeping the mTLS client private key on the filesystem is insecure and not recommended. In the &lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;mTLS Go client using macOS keychain&lt;/a&gt;, we demonstrated achieving greater mTLS security with macOS keychain. In this article, we start exploring how to achieve the same level of protection with Windows certificate store.&lt;/p&gt;
&lt;p&gt;The Windows certificate store is a secure location to store certificates and keys. Many applications, such as Edge and Powershell use it. The Windows certificate store is an excellent place to store mTLS client certificates and keys.&lt;/p&gt;
&lt;p&gt;The Windows certificate stores have two types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User certificate store: Certificates and keys are stored for the current user, local to a user account.&lt;/li&gt;
&lt;li&gt;Local machine certificate store: Certificates and keys are stored for all users on the computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We will store our client mTLS certificate in the user certificate store and the other certificates in the local machine certificate store.&lt;/p&gt;
&lt;h2 id="generating-mtls-certificates-and-keys"&gt;&lt;a href="#generating-mtls-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Generating mTLS certificates and keys
&lt;/h2&gt;&lt;p&gt;We will use the following Powershell script to generate the mTLS certificates and keys. &lt;a class="link" href="https://www.openssl.org/" target="_blank" rel="noopener"
&gt;OpenSSL&lt;/a&gt; must be installed on your computer.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;New-Item -ItemType Directory -Force certs
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Private keys for CAs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/server-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/client-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate CA certificates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/server-ca.key -out certs/server-ca.crt -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testServerCA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/client-ca.key -out certs/client-ca.crt -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testClientCA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate a certificate signing request&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt; -nodes -keyout certs/server.key -out certs/server.req -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testServerTLS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt; -nodes -keyout certs/client.key -out certs/client.req -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testClientTLS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Have the CA sign the certificate requests and output the certificates.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/server.req -days &lt;span style="color:#ae81ff"&gt;398&lt;/span&gt; -CA certs/server-ca.crt -CAkey certs/server-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/server.crt -extfile localhost.ext
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/client.req -days &lt;span style="color:#ae81ff"&gt;398&lt;/span&gt; -CA certs/client-ca.crt -CAkey certs/client-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/client.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Create PFX file for importing to certificate store&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl pkcs12 -export -out certs\client.pfx -inkey certs\client.key -in certs\client.crt -passout pass&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Clean up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Remove-Item certs/server.req
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Remove-Item certs/client.req
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The maximum validity period for a TLS certificate is 398 days.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;localhost.ext&lt;/code&gt; file is used to specify the subject alternative name (SAN) for the server certificate. The &lt;code&gt;localhost.ext&lt;/code&gt; file contains the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[alt_names]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;DNS.1 = localhost
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;DNS.2 = myhost
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can access the server using either &lt;code&gt;localhost&lt;/code&gt; or &lt;code&gt;myhost&lt;/code&gt; names.&lt;/p&gt;
&lt;p&gt;The above script generates the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;certs/server-ca.crt&lt;/code&gt;: Server CA certificate&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/server-ca.key&lt;/code&gt;: Server CA private key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/client-ca.crt&lt;/code&gt;: Client CA certificate&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/client-ca.key&lt;/code&gt;: Client CA private key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/server.crt&lt;/code&gt;: Server certificate&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/server.key&lt;/code&gt;: Server private key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/client.crt&lt;/code&gt;: Client certificate&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/client.key&lt;/code&gt;: Client private key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;certs/client.pfx&lt;/code&gt;: Client certificate and private key in PFX format, needed for importing into the Windows certificate store&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="importing-the-client-certificate-and-key-into-the-windows-certificate-store"&gt;&lt;a href="#importing-the-client-certificate-and-key-into-the-windows-certificate-store" class="header-anchor"&gt;&lt;/a&gt;Importing the client certificate and key into the Windows certificate store
&lt;/h2&gt;&lt;p&gt;We will import the client certificate and key into the user certificate store using the following powershell script.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the server CA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Import-Certificate -FilePath &lt;span style="color:#e6db74"&gt;&amp;#34;certs\server-ca.crt&amp;#34;&lt;/span&gt; -CertStoreLocation Cert&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;\LocalMachine\Root
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the client CA so that client TLS certificates can be verified&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Import-Certificate -FilePath &lt;span style="color:#e6db74"&gt;&amp;#34;certs\client-ca.crt&amp;#34;&lt;/span&gt; -CertStoreLocation Cert&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;\LocalMachine\Root
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the client TLS certificate and key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Import-PfxCertificate -FilePath &lt;span style="color:#e6db74"&gt;&amp;#34;certs\client.pfx&amp;#34;&lt;/span&gt; -CertStoreLocation Cert&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;\CurrentUser\My
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The command result should be similar to the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PSParentPath: Microsoft.PowerShell.Security\Certificate::LocalMachine\Root
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Thumbprint Subject
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---------- -------
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;0A31BF3C48A3D98A91A2F63B5BD286818311A707 CN=testServerCA, OU=Your Unit, O=Your Organization, L=Austin, S=Texas, C=US
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;7F7E5612F3A90B9EB246762358251F98911A9D1A CN=testClientCA, OU=Your Unit, O=Your Organization, L=Austin, S=Texas, C=US
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; PSParentPath: Microsoft.PowerShell.Security\Certificate::CurrentUser\My
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Thumbprint Subject
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---------- -------
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;E2EBB991E3849E32E934D8465FAE42787D34C9ED CN=testClientTLS, OU=Your Unit, O=Your Organization, L=Austin, S=Texas, C=US
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default, the private key is marked as non-exportable. A user or an application cannot export the private key from the certificate store. They can only access the private key via Windows APIs. Using a non-exportable private key is the recommended security approach. You can use the &lt;code&gt;-Exportable&lt;/code&gt; parameter if you need to export the private key.&lt;/p&gt;
&lt;h2 id="verifying-imported-certificates-and-keys"&gt;&lt;a href="#verifying-imported-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Verifying imported certificates and keys
&lt;/h2&gt;&lt;p&gt;As an extra step, we can verify that the certificates and keys exist in the Windows certificate store. We can use the &lt;code&gt;certlm&lt;/code&gt; Local Machine Certificate Manager GUI, &lt;code&gt;certmgr&lt;/code&gt; User Certificate Manager GUI, or the &lt;code&gt;Get-ChildItem&lt;/code&gt; powershell command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Get-ChildItem -Path Cert&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;\LocalMachine\Root |
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Where-Object{$_.Subject &lt;span style="color:#f92672"&gt;-match&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;testServerCA&amp;#39;&lt;/span&gt;} |
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Test-Certificate -Policy SSL
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Get-ChildItem -Path Cert&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;\CurrentUser\My | Where-Object{$_.Subject &lt;span style="color:#f92672"&gt;-match&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;testClientTLS&amp;#39;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="running-the-mtls-server"&gt;&lt;a href="#running-the-mtls-server" class="header-anchor"&gt;&lt;/a&gt;Running the mTLS server
&lt;/h2&gt;&lt;p&gt;We will use the same &lt;code&gt;docker-compose.yml&lt;/code&gt; file from the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article. The &lt;code&gt;docker-compose.yml&lt;/code&gt; file starts two nginx servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://&amp;lt;your_host&amp;gt;:8888 for TLS&lt;/li&gt;
&lt;li&gt;https://&amp;lt;your_host&amp;gt;:8889 for mTLS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can run Docker on WSL (Windows Subsystem for Linux) or another machine. We will run it on a different machine, so we need to copy the &lt;code&gt;certs&lt;/code&gt; directory to the machine running Docker. When running the server on a different machine, we must update the &lt;code&gt;C:\Windows\System32\drivers\etc\hosts&lt;/code&gt; file to point to the other machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;10.0.0.5 myhost
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="connecting-to-the-tls-and-mtls-servers-with-clients"&gt;&lt;a href="#connecting-to-the-tls-and-mtls-servers-with-clients" class="header-anchor"&gt;&lt;/a&gt;Connecting to the TLS and mTLS servers with clients
&lt;/h2&gt;&lt;p&gt;Because we added the server CA to the root certificate store, we can now access the TLS server without any additional flags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Invoke-WebRequest -Uri https&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;//myhost&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8888&lt;/span&gt;/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;StatusCode : 200
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;StatusDescription : OK
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Content : TLS Hello World!
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;RawContent : HTTP/1.1 200 OK
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Connection: keep-alive
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Accept-Ranges: bytes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Content-Length: 17
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Content-Type: text/plain
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Date: Sun, 03 Mar 2024 17:28:29 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ETag: &amp;#34;65b29c19-11&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Last-Modified: Thu, 25 Jan 2024 1...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Forms : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Headers : {[Connection, keep-alive], [Accept-Ranges, bytes], [Content-Length, 17], [Content-Type, text/plain]...}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Images : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;InputFields : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Links : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ParsedHtml : System.__ComObject
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;RawContentLength : 17
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, we cannot access the mTLS server directly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Invoke-WebRequest -Uri https&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;//myhost&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8889&lt;/span&gt;/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The client attempted the TLS handshake, but the server rejected the connection because the client did not provide a certificate. Result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Invoke-WebRequest : 400 Bad Request
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;No required SSL certificate was sent
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;nginx/1.25.3
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;At line:1 char:1
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;+ Invoke-WebRequest -Uri https://myhost:8889/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; + CategoryInfo : InvalidOperation: (System.Net.HttpWebRequest:HttpWebRequest) [Invoke-WebRequest], WebException
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; + FullyQualifiedErrorId : WebCmdletWebResponseException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can, however, provide the client certificate thumbprint to access the mTLS server. We saw the thumbprint of the client certificate earlier when we imported it into the Windows certificate store.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Invoke-WebRequest -Uri https&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;//myhost&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt;&lt;span style="color:#ae81ff"&gt;8889&lt;/span&gt;/hello-world.txt -CertificateThumbprint E2EBB991E3849E32E934D8465FAE42787D34C9ED
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;StatusCode : 200
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;StatusDescription : OK
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Content : mTLS Hello World!
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;RawContent : HTTP/1.1 200 OK
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Connection: keep-alive
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Accept-Ranges: bytes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Content-Length: 18
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Content-Type: text/plain
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Date: Sun, 03 Mar 2024 17:31:55 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ETag: &amp;#34;65b29c19-12&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Last-Modified: Thu, 25 Jan 2024 1...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Forms : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Headers : {[Connection, keep-alive], [Accept-Ranges, bytes], [Content-Length, 18], [Content-Type, text/plain]...}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Images : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;InputFields : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Links : {}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ParsedHtml : System.__ComObject
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;RawContentLength : 18
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Edge browser can access the mTLS server. We can verify this by opening the following URL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-plaintext" data-lang="plaintext"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;https://myhost:8889/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We see the following popup:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/mtls-with-windows/mtls-edge.png"
alt="Edge mTLS popup"&gt;&lt;figcaption&gt;
&lt;p&gt;Edge mTLS popup&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We can click &lt;strong&gt;OK&lt;/strong&gt; to connect to the mTLS server. Future connections will not show the popup and will automatically use the client certificate.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Here is a helpful link that may resolve issues trying to use mTLS client certificates on Windows 10: &lt;a class="link" href="https://superuser.com/questions/1181163/unable-to-use-client-certificates-in-chrome-or-ie-on-windows-10" target="_blank" rel="noopener"
&gt;https://superuser.com/questions/1181163/unable-to-use-client-certificates-in-chrome-or-ie-on-windows-10&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on Github
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/mtls-with-windows" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/mtls-with-windows&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="creating-our-own-windows-mtls-client"&gt;&lt;a href="#creating-our-own-windows-mtls-client" class="header-anchor"&gt;&lt;/a&gt;Creating our own Windows mTLS client
&lt;/h2&gt;&lt;p&gt;In the following article, we will &lt;a class="link" href="../mtls-go-client-windows-certificate-store" &gt;create a custom Windows mTLS client using the Windows certificate store&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we wrote an article on &lt;a class="link" href="../test-ndes-scep-server" &gt;testing a Windows NDES SCEP server&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="mtls-with-windows-certificate-store-video"&gt;&lt;a href="#mtls-with-windows-certificate-store-video" class="header-anchor"&gt;&lt;/a&gt;mTLS with Windows certificate store video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/GuubP7vir1g"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS (mTLS) with macOS keychain</title><link>https://victoronsoftware.com/posts/mtls-with-apple-keychain/</link><pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-with-apple-keychain/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-with-apple-keychain/mtls-safari.png" alt="Featured image of post Mutual TLS (mTLS) with macOS keychain" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;. Check out the previous article: &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="securing-mtls-certificates-and-keys"&gt;&lt;a href="#securing-mtls-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Securing mTLS certificates and keys
&lt;/h2&gt;&lt;p&gt;In the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article, we generated mTLS certificates and keys for the client and the server. We also created two certificate authorities (CAs) and signed the client and server certificates with their respective CAs. We ended up with the following files:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;server CA: &lt;code&gt;certs/server-ca.crt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;server CA private key: &lt;code&gt;certs/server-ca.key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TLS certificate for localhost server: &lt;code&gt;certs/server.crt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;server TLS certificate private key: &lt;code&gt;certs/server.key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;client CA: &lt;code&gt;certs/client-ca.crt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;client CA private key: &lt;code&gt;certs/client-ca.key&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;TLS certificate for client: &lt;code&gt;certs/client.crt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;client TLS certificate private key: &lt;code&gt;certs/client.key&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a real-world scenario, we would need to secure these files. The server CA private key and the client CA private key are the most important files to secure. If an attacker gets access to these files, they can create new certificates and impersonate the server or the client. These two files should be secured in a dedicated secure storage.&lt;/p&gt;
&lt;p&gt;The server will need access to the client CA, the server TLS certificate, and the server TLS certificate private key. The server TLS certificate private key is the most important to secure out of these three files.&lt;/p&gt;
&lt;p&gt;The client will need access to the server CA, the client TLS certificate, and the client TLS certificate private key. We can use the macOS keychain to secure these files. In a future article, we will show how to secure these on Windows with certificate stores.&lt;/p&gt;
&lt;h2 id="apples-macos-keychain"&gt;&lt;a href="#apples-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;Apple&amp;rsquo;s macOS keychain
&lt;/h2&gt;&lt;p&gt;As I&amp;rsquo;ve written in &lt;a class="link" href="../inspecting-keychain-files-on-macos" &gt;inspecting keychain files on macOS&lt;/a&gt;, keychains are the macOS&amp;rsquo;s method to track and protect secure information such as passwords, private keys, and certificates.&lt;/p&gt;
&lt;p&gt;The system keychain is located at &lt;code&gt;/Library/Keychains/System.keychain&lt;/code&gt;. It contains the root certificates and other certificates. The login keychain is located at &lt;code&gt;/Users/&amp;lt;username&amp;gt;/Library/Keychains/login.keychain-db&lt;/code&gt;. It contains the user&amp;rsquo;s certificates and private keys. In this example, we will use the system keychain, which all users on the system can access.&lt;/p&gt;
&lt;h2 id="generating-mtls-certificates-and-keys"&gt;&lt;a href="#generating-mtls-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Generating mTLS certificates and keys
&lt;/h2&gt;&lt;p&gt;We will use the following script to generate the mTLS certificates and keys. It resembles the script from the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# This script generates certificates and keys needed for mTLS.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p certs
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Private keys for CAs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/server-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/client-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate CA certificates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/server-ca.key -out certs/server-ca.crt -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testServerCA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/client-ca.key -out certs/client-ca.crt -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testClientCA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate a certificate signing request&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa:2048 -nodes -keyout certs/server.key -out certs/server.req -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testServerTLS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa:2048 -nodes -keyout certs/client.key -out certs/client.req -subj &lt;span style="color:#e6db74"&gt;&amp;#34;/C=US/ST=Texas/L=Austin/O=Your Organization/OU=Your Unit/CN=testClientTLS&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Have the CA sign the certificate requests and output the certificates.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/server.req -days &lt;span style="color:#ae81ff"&gt;398&lt;/span&gt; -CA certs/server-ca.crt -CAkey certs/server-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/server.crt -extfile localhost.ext
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/client.req -days &lt;span style="color:#ae81ff"&gt;398&lt;/span&gt; -CA certs/client-ca.crt -CAkey certs/client-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/client.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Clean up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm certs/server.req
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm certs/client.req
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The maximum validity period for a TLS certificate is 398 days. Apple will reject certificates with a more extended validity period.&lt;/p&gt;
&lt;h2 id="importing-client-mtls-certificates-and-keys-into-the-macos-keychain"&gt;&lt;a href="#importing-client-mtls-certificates-and-keys-into-the-macos-keychain" class="header-anchor"&gt;&lt;/a&gt;Importing client mTLS certificates and keys into the macOS keychain
&lt;/h2&gt;&lt;p&gt;We will import the client mTLS certificates and keys into the macOS keychain using the following script. The script uses the &lt;a class="link" href="https://ss64.com/mac/security.html" target="_blank" rel="noopener"
&gt;security&lt;/a&gt; command line tool. Accessing the system keychain must be run as root (&lt;code&gt;sudo&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# This script imports mTLS certificates and keys into the Apple Keychain.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the server CA&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain certs/server-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the client CA so that client TLS certificates can be verified&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain certs/client-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Import the client TLS certificate and key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security import certs/client.crt -k /Library/Keychains/System.keychain
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security import certs/client.key -k /Library/Keychains/System.keychain -x -T /usr/bin/curl -T /Applications/Safari.app -T &lt;span style="color:#e6db74"&gt;&amp;#39;/Applications/Google Chrome.app&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;-x&lt;/code&gt; option marks the imported key as non-extractable. No application or user can view the private key once it is imported. The private key can only be used indirectly via Apple&amp;rsquo;s APIs.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;-T&lt;/code&gt; option specifies the applications that can access the key. Additional applications may be added later to the access control list.&lt;/p&gt;
&lt;h2 id="verifying-imported-certificates-and-keys"&gt;&lt;a href="#verifying-imported-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Verifying imported certificates and keys
&lt;/h2&gt;&lt;p&gt;As an extra step, we can verify the client and server certificates before using them in an application.&lt;/p&gt;
&lt;p&gt;We can verify the server certificate by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security verify-cert -c certs/server.crt -p ssl -s localhost -k /Library/Keychains/System.keychain
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output should include:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;...certificate verification successful.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Apple keychain automatically combines the certificate and the private key into an identity. We can verify the client identity by running the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;security find-identity -p ssl-client /Library/Keychains/System.keychain
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The list of identities should include:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Policy: SSL (client)
Matching identities
1) B307B90CCD374080E74F1B15AF602B35A75D8401 &amp;#34;testClientTLS&amp;#34;
1 identities found
Valid identities only
1) B307B90CCD374080E74F1B15AF602B35A75D8401 &amp;#34;testClientTLS&amp;#34;
1 valid identities found
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;macOS can validate the identity because we also imported the client CA into the system keychain.&lt;/p&gt;
&lt;h2 id="running-the-mtls-server"&gt;&lt;a href="#running-the-mtls-server" class="header-anchor"&gt;&lt;/a&gt;Running the mTLS server
&lt;/h2&gt;&lt;p&gt;As in the &lt;a class="link" href="../mtls-hello-world" &gt;mTLS Hello World&lt;/a&gt; article, we will use &lt;code&gt;docker compose up&lt;/code&gt; to start two nginx servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://localhost:8888 for TLS&lt;/li&gt;
&lt;li&gt;https://localhost:8889 for mTLS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="connecting-to-the-tls-and-mtls-servers-with-clients"&gt;&lt;a href="#connecting-to-the-tls-and-mtls-servers-with-clients" class="header-anchor"&gt;&lt;/a&gt;Connecting to the TLS and mTLS servers with clients
&lt;/h2&gt;&lt;p&gt;Because the server CA was added to the system keychain, curl can now access the TLS server without any additional flags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl https://localhost:8888/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, the built-in curl client cannot access the mTLS server. We use the &lt;code&gt;-v&lt;/code&gt; option for additional information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -v https://localhost:8889/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;* Trying [::1]:8889...
* Connected to localhost (::1) port 8889
* ALPN: curl offers h2,http/1.1
* (304) (OUT), TLS handshake, Client hello (1):
* CAfile: /etc/ssl/cert.pem
* CApath: none
* (304) (IN), TLS handshake, Server hello (2):
* (304) (IN), TLS handshake, Unknown (8):
* (304) (IN), TLS handshake, Request CERT (13):
* (304) (IN), TLS handshake, Certificate (11):
* (304) (IN), TLS handshake, CERT verify (15):
* (304) (IN), TLS handshake, Finished (20):
* (304) (OUT), TLS handshake, Certificate (11):
* (304) (OUT), TLS handshake, Finished (20):
* SSL connection using TLSv1.3 / AEAD-CHACHA20-POLY1305-SHA256
* ALPN: server accepted http/1.1
* Server certificate:
* subject: C=US; ST=Texas; L=Austin; O=Your Organization; OU=Your Unit; CN=testServerTLS
* start date: Jan 28 17:08:10 2024 GMT
* expire date: Mar 1 17:08:10 2025 GMT
* subjectAltName: host &amp;#34;localhost&amp;#34; matched cert&amp;#39;s &amp;#34;localhost&amp;#34;
* issuer: C=US; ST=Texas; L=Austin; O=Your Organization; OU=Your Unit; CN=testServerCA
* SSL certificate verify ok.
* using HTTP/1.1
&amp;gt; GET /hello-world.txt HTTP/1.1
&amp;gt; Host: localhost:8889
&amp;gt; User-Agent: curl/8.4.0
&amp;gt; Accept: */*
&amp;gt;
&amp;lt; HTTP/1.1 400 Bad Request
&amp;lt; Server: nginx/1.25.3
&amp;lt; Date: Sun, 28 Jan 2024 18:28:20 GMT
&amp;lt; Content-Type: text/html
&amp;lt; Content-Length: 237
&amp;lt; Connection: close
&amp;lt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;400 No required SSL certificate was sent&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;center&amp;gt;&amp;lt;h1&amp;gt;400 Bad Request&amp;lt;/h1&amp;gt;&amp;lt;/center&amp;gt;
&amp;lt;center&amp;gt;No required SSL certificate was sent&amp;lt;/center&amp;gt;
&amp;lt;hr&amp;gt;&amp;lt;center&amp;gt;nginx/1.25.3&amp;lt;/center&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
* Closing connection
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The client attempted the TLS handshake, but the server rejected the connection because the client did not provide a certificate. Our built-in curl client does not currently support mTLS using the macOS keychain. The client used for this example is:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;curl 8.4.0 (x86_64-apple-darwin23.0) libcurl/8.4.0 (SecureTransport) LibreSSL/3.3.6 zlib/1.2.12 nghttp2/1.55.1
Release-Date: 2023-10-11
Protocols: dict file ftp ftps gopher gophers http https imap imaps ldap ldaps mqtt pop3 pop3s rtsp smb smbs smtp smtps telnet tftp
Features: alt-svc AsynchDNS GSS-API HSTS HTTP2 HTTPS-proxy IPv6 Kerberos Largefile libz MultiSSL NTLM NTLM_WB SPNEGO SSL threadsafe UnixSockets
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On the other hand, Safari can access the mTLS server. We can verify this by opening the following URL in Safari:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;https://localhost:8889/hello-world.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We see the following popup:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/mtls-with-apple-keychain/mtls-safari.png"
alt="Safari mTLS popup"&gt;&lt;figcaption&gt;
&lt;p&gt;Safari mTLS popup&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We can click &lt;strong&gt;Continue&lt;/strong&gt; to connect to the mTLS server. Future connections will not show the popup and will automatically use the client certificate.&lt;/p&gt;
&lt;p&gt;Google Chrome&amp;rsquo;s behavior is similar.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If we did not add Safari as an application that can access the client key, Safari would ask for a username and password to connect to the system keychain.&lt;/p&gt;
&lt;h2 id="creating-our-own-mtls-client"&gt;&lt;a href="#creating-our-own-mtls-client" class="header-anchor"&gt;&lt;/a&gt;Creating our own mTLS client
&lt;/h2&gt;&lt;p&gt;In the following article, we will &lt;a class="link" href="../mtls-go-client" &gt;create our own mTLS client with the Go programming language&lt;/a&gt;. This is the first step toward &lt;a class="link" href="../mtls-go-client-using-apple-keychain" &gt;creating an mTLS client integrated with the macOS keychain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Later, we will &lt;a class="link" href="../mtls-with-windows" &gt;use mTLS with the Windows certificate store&lt;/a&gt; and &lt;a class="link" href="../mtls-go-client-windows-certificate-store" &gt;create an mTLS client integrated with the Windows certificate store&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we explained &lt;a class="link" href="../macos-launchd-agents-and-daemons/" &gt;agents and daemons and plists on macOS&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also showed &lt;a class="link" href="../script-only-macos-install-package/" &gt;how to convert a script into a macOS install package&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/mtls-with-apple-keychain" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/mtls-with-apple-keychain&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="mtls-with-macos-keychain-video"&gt;&lt;a href="#mtls-with-macos-keychain-video" class="header-anchor"&gt;&lt;/a&gt;mTLS with macOS keychain video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Y0y6-cCzz8w"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS intro and hands-on example</title><link>https://victoronsoftware.com/posts/mtls-hello-world/</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-hello-world/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-hello-world/mtls-handshake.png" alt="Featured image of post Mutual TLS intro and hands-on example" /&gt;&lt;h2 id="what-is-mtls-mutual-tls"&gt;&lt;a href="#what-is-mtls-mutual-tls" class="header-anchor"&gt;&lt;/a&gt;What is mTLS (mutual TLS)?
&lt;/h2&gt;&lt;p&gt;TLS stands for Transport Layer Security. It is a cryptographic protocol that provides privacy and data integrity between
two communicating applications. It is the successor to SSL (Secure Sockets Layer).&lt;/p&gt;
&lt;p&gt;In ordinary (non-mutual) TLS, the client authenticates the server, but the server does not authenticate the client. Most
websites use regular TLS. The client (web browser) knows it is talking to the correct server (website), but the server
knows very little about the client. Instead, web applications use other client authentication methods, such as
passwords, cookies, and session tokens.&lt;/p&gt;
&lt;p&gt;Mutual TLS (mTLS) is a way to authenticate both the client and the server in a TLS connection. It is also known as
client certificate authentication. In addition to the server authenticating itself to the client, the client also
authenticates itself to the server.&lt;/p&gt;
&lt;p&gt;mTLS is helpful as an additional layer of security. It is used in many applications, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VPNs&lt;/li&gt;
&lt;li&gt;Microservices&lt;/li&gt;
&lt;li&gt;Service mesh&lt;/li&gt;
&lt;li&gt;IoT (Internet of Things)&lt;/li&gt;
&lt;li&gt;Mobile apps&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-does-fleet-device-management-use-mtls"&gt;&lt;a href="#how-does-fleet-device-management-use-mtls" class="header-anchor"&gt;&lt;/a&gt;How does &lt;a class="link" href="https://fleetdm.com" target="_blank" rel="noopener"
&gt;Fleet Device Management&lt;/a&gt; use mTLS?
&lt;/h2&gt;&lt;p&gt;Many of Fleet&amp;rsquo;s customers use mTLS as an additional layer of security to authenticate the Fleet server to the Fleet
agent. The Fleet agent is a small program that runs on each host device, such as a corporate laptop. It collects
information about the host and sends it to the Fleet server.&lt;/p&gt;
&lt;h2 id="how-does-mtls-work"&gt;&lt;a href="#how-does-mtls-work" class="header-anchor"&gt;&lt;/a&gt;How does mTLS work?
&lt;/h2&gt;&lt;p&gt;TLS is a complex protocol with multiple versions (1.2, 1.3, etc.). We will only go over the basics to understand how
mTLS works.&lt;/p&gt;
&lt;p&gt;TLS uses a handshake protocol to establish a secure connection. The handshake protocol is a series of messages between
the client and the server.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/mtls-hello-world/mtls-handshake.png"
alt="Mutual TLS (mTLS) handshake diagram"&gt;
&lt;/figure&gt;
&lt;p&gt;The client sends a &amp;ldquo;Client Hello&amp;rdquo; message to the server. The server responds with a &amp;ldquo;Server Hello&amp;rdquo; message and sends its
certificate to the client. As an additional step for mTLS, the server requests a certificate from the client.&lt;/p&gt;
&lt;p&gt;The client verifies the server&amp;rsquo;s certificate by checking the certificate&amp;rsquo;s signature and verifying that the certificate
is valid and has not expired. The client also checks that the server&amp;rsquo;s hostname matches the hostname in the certificate.&lt;/p&gt;
&lt;p&gt;The client uses the server&amp;rsquo;s public key to encrypt the messages sent to the server, including the session key and its
certificate. The server decrypts these messages with its private key.&lt;/p&gt;
&lt;p&gt;The client also sends a digital signature, encrypted with its private key, to the server. The server verifies the
signature by decrypting it with the client&amp;rsquo;s public key.&lt;/p&gt;
&lt;p&gt;At this point, both the client and the server have verified each other&amp;rsquo;s identity. They complete the TLS handshake and
can exchange encrypted messages using a symmetric session key.&lt;/p&gt;
&lt;h2 id="generate-certificates-and-keys"&gt;&lt;a href="#generate-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Generate certificates and keys
&lt;/h2&gt;&lt;p&gt;We will use the &lt;a class="link" href="https://www.openssl.org/" target="_blank" rel="noopener"
&gt;OpenSSL&lt;/a&gt; command line tool to generate the certificates. OpenSSL is a popular
open-source library for TLS and SSL protocols.&lt;/p&gt;
&lt;p&gt;The following script generates the certificates and keys for the client and the server. It also creates two certificate
authorities (CAs) and signs the client and server certificates with their respective CA. The same CA may sign the
certificates, but we will use separate CAs for this example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# This script generates files needed for mTLS.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p certs
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Private keys for CAs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/server-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/client-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate CA certificates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/server-ca.key -out certs/server-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/client-ca.key -out certs/client-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate a certificate signing request&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa:2048 -nodes -keyout certs/server.key -out certs/server.req
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa:2048 -nodes -keyout certs/client.key -out certs/client.req
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Have the CA sign the certificate requests and output the certificates.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/server.req -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -CA certs/server-ca.crt -CAkey certs/server-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/server.crt -extfile localhost.ext
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/client.req -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -CA certs/client-ca.crt -CAkey certs/client-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/client.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Clean up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm certs/server.req
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm certs/client.req
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;localhost.ext&lt;/code&gt; file is used to specify the hostname for the server certificate. In our example, we will use
&lt;code&gt;localhost&lt;/code&gt;. The file contains the following:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = localhost
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="run-the-mtls-server"&gt;&lt;a href="#run-the-mtls-server" class="header-anchor"&gt;&lt;/a&gt;Run the mTLS server
&lt;/h2&gt;&lt;p&gt;We will use &lt;a class="link" href="https://www.nginx.com/" target="_blank" rel="noopener"
&gt;nginx&lt;/a&gt; as our mTLS server. nginx is a popular open-source web server.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;docker compose&lt;/code&gt;, we can run two nginx servers. One server will use ordinary TLS, and one will use mutual TLS. We
will use the following &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;version&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;nginx-tls&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;nginx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/server.crt:/etc/nginx/certificates/server.crt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/server.key:/etc/nginx/certificates/server.key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./nginx-tls/nginx.conf:/etc/nginx/conf.d/default.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./nginx-tls/hello-world.txt:/www/data/hello-world.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#34;8888:8888&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;nginx-mtls&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;nginx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/server.crt:/etc/nginx/certificates/server.crt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/server.key:/etc/nginx/certificates/server.key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/client-ca.crt:/etc/nginx/certificates/client-ca.crt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./nginx-mtls/nginx.conf:/etc/nginx/conf.d/default.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./nginx-mtls/hello-world.txt:/www/data/hello-world.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#34;8889:8889&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;nginx-tls&lt;/code&gt; service uses the &lt;code&gt;nginx-tls/nginx.conf&lt;/code&gt; file, which contains the following:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;server {
listen 8888 ssl;
server_name tls-hello-world;
# Server TLS certificate (client must have the CA cert to connect)
ssl_certificate /etc/nginx/certificates/server.crt;
ssl_certificate_key /etc/nginx/certificates/server.key;
location / {
root /www/data;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;nginx-mtls&lt;/code&gt; service uses the &lt;code&gt;nginx-mtls/nginx.conf&lt;/code&gt; file, which contains the following:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;server {
listen 8889 ssl;
server_name mtls-hello-world;
# Server TLS certificate (client must have the CA cert to connect)
ssl_certificate /etc/nginx/certificates/server.crt;
ssl_certificate_key /etc/nginx/certificates/server.key;
# Enable mTLS
ssl_client_certificate /etc/nginx/certificates/client-ca.crt;
ssl_verify_client on;
location / {
root /www/data;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;hello-world.txt&lt;/code&gt; files contain a simple text message.&lt;/p&gt;
&lt;h2 id="connect-to-the-mtls-server-with-curl-client"&gt;&lt;a href="#connect-to-the-mtls-server-with-curl-client" class="header-anchor"&gt;&lt;/a&gt;Connect to the mTLS server with curl client
&lt;/h2&gt;&lt;p&gt;We can connect to the mTLS server with the &lt;code&gt;curl&lt;/code&gt; command line tool. We will use the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl https://localhost:8889/hello-world.txt --cacert ./certs/server-ca.crt --cert ./certs/client.crt --key ./certs/client.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;--cacert&lt;/code&gt; option specifies the CA certificate that signed the server certificate. The &lt;code&gt;--cert&lt;/code&gt; and &lt;code&gt;--key&lt;/code&gt; options
select the client certificate and key.&lt;/p&gt;
&lt;p&gt;To connect to the ordinary TLS server, we do not need to specify the client certificate and key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl https://localhost:8888/hello-world.txt --cacert ./certs/server-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Curl can use &lt;code&gt;--insecure&lt;/code&gt; to ignore the server certificate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl --insecure https://localhost:8888/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, it is impossible to ignore the client certificate for mTLS. The server will reject the connection if the client
does not provide a valid certificate.&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/hello-world" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/hello-world&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="securing-mtls-certificates-and-keys"&gt;&lt;a href="#securing-mtls-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Securing mTLS certificates and keys
&lt;/h2&gt;&lt;p&gt;In the next article, we will
&lt;a class="link" href="../mtls-with-apple-keychain" &gt;secure the mTLS certificates and keys with the macOS keychain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a later article, we also
&lt;a class="link" href="../mtls-with-windows" &gt;secure the mTLS certificates and keys with the Windows certificate store&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class="link" href="../how-to-use-tpm/" &gt;How to Use TPM 2.0 to Secure Private Keys&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;Learn how to create, manage, and use TPM-backed
keys, including parent/child key hierarchies and secure signing.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mtls-hello-world-video"&gt;&lt;a href="#mtls-hello-world-video" class="header-anchor"&gt;&lt;/a&gt;mTLS Hello World video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/WA_RL_QtIgY"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Understanding the intricacies of Fleet policies</title><link>https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/</link><pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/</guid><description>&lt;img src="https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/understanding-the-intricacies-of-fleet-policies-main-policies-page-1999x978@2x.png" alt="Featured image of post Understanding the intricacies of Fleet policies" /&gt;&lt;p&gt;In the ever-evolving landscape of device management and cybersecurity, understanding the mechanics behind tools like Fleet is not just about technical curiosity; it&amp;rsquo;s about empowering IT professionals to safeguard digital assets more effectively. &lt;a class="link" href="https://fleetdm.com" target="_blank" rel="noopener"
&gt;Fleet&lt;/a&gt; gathers telemetry from various devices, from laptops to virtual machines, using &lt;a class="link" href="https://www.osquery.io/" target="_blank" rel="noopener"
&gt;osquery&lt;/a&gt;. At the heart of this system lies a crucial feature: &lt;a class="link" href="https://fleetdm.com/securing/what-are-fleet-policies" target="_blank" rel="noopener"
&gt;Fleet policies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Policies in Fleet are more than just rules; they are the gatekeepers of your device&amp;rsquo;s security, ensuring stringent adherence to security standards. By dissecting how Fleet policies operate &amp;ldquo;under the hood,&amp;rdquo; IT administrators and security professionals can gain invaluable insights. These insights allow for setting up efficient security protocols and rapid response to potential vulnerabilities, a necessity in a landscape where cyber threats are constantly evolving. This article delves into the inner workings of Fleet policies, providing you with the knowledge to better configure, manage, and leverage these policies for optimal device security and efficiency.&lt;/p&gt;
&lt;h2 id="policy-creation"&gt;&lt;a href="#policy-creation" class="header-anchor"&gt;&lt;/a&gt;Policy creation
&lt;/h2&gt;&lt;p&gt;Policies can be created from the web UI, the command-line interface called &lt;code&gt;fleetctl&lt;/code&gt; with config files, or the REST API. The user creates a policy and selects which devices need to be checked using that policy. Policies can be global or team-specific.&lt;/p&gt;
&lt;p&gt;When a policy is created, a record for it is stored in the &lt;strong&gt;policies&lt;/strong&gt; table of the MySQL database. A Fleet deployment consists of several servers behind a load balancer, so storing the record in the DB makes all servers aware of the new policy.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/understanding-the-intricacies-of-fleet-policies-policy-creation-1280x720@2x.png"
alt="Fleet policies block diagram"&gt;
&lt;/figure&gt;
&lt;h2 id="policy-execution"&gt;&lt;a href="#policy-execution" class="header-anchor"&gt;&lt;/a&gt;Policy execution
&lt;/h2&gt;&lt;p&gt;Policies are executed on the devices, which are called &lt;strong&gt;hosts&lt;/strong&gt; in Fleet, according to the &lt;a class="link" href="https://fleetdm.com/docs/configuration/fleet-server-configuration#osquery-policy-update-interval" target="_blank" rel="noopener"
&gt;FLEET_OSQUERY_POLICY_UPDATE_INTERVAL&lt;/a&gt;, which is set to 1 hour by default. This interval can be adjusted with the environment variable or set from the server’s command line.&lt;/p&gt;
&lt;p&gt;Policies are simply SQL queries that return a true or false result, so the flow they use on the hosts is the same as other queries. Hosts check in with Fleet servers every 10 seconds (the default) and access the &lt;code&gt;/api/v1/osquery/distributed/read&lt;/code&gt; API endpoint. The server checks when the policy was last executed to determine whether it should be executed again. If so, the server adds the policy to its response. For example, this policy in the server response checks if the macOS firewall is enabled:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;{
&amp;#34;queries&amp;#34;: {
&amp;#34;fleet_policy_query_9&amp;#34;: &amp;#34;SELECT 1 FROM alf WHERE global_state &amp;gt;= 1;&amp;#34;
},
&amp;#34;discovery&amp;#34;: {
&amp;#34;fleet_policy_query_9&amp;#34;: &amp;#34;SELECT 1&amp;#34;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the host has executed the policy, it writes the result to the server. The server updates the result in the &lt;strong&gt;policy_membership&lt;/strong&gt; table of the MySQL database. At this point, the Host Details page on the web UI is updated with the policy result.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/understanding-the-intricacies-of-fleet-policies-host-policy-view-1818x1999@2x.png"
alt="Fleet policies on host details page"&gt;
&lt;/figure&gt;
&lt;h2 id="force-policy-execution-on-a-device"&gt;&lt;a href="#force-policy-execution-on-a-device" class="header-anchor"&gt;&lt;/a&gt;Force policy execution on a device
&lt;/h2&gt;&lt;p&gt;The user can force the host to execute all of its policies by clicking the &lt;strong&gt;Refetch&lt;/strong&gt; link:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/understanding-the-intricacies-of-fleet-policies-refetch-204x64@2x.png"
alt="Fleet refetch host details"&gt;
&lt;/figure&gt;
&lt;h2 id="policy-results-aggregation"&gt;&lt;a href="#policy-results-aggregation" class="header-anchor"&gt;&lt;/a&gt;Policy results aggregation
&lt;/h2&gt;&lt;p&gt;However, the main &lt;strong&gt;Policies&lt;/strong&gt; page is not updated. This page shows the counts of all passing and failing hosts for each policy. A worker process on one of the Fleet servers updates it once an hour. The worker calculates the counts and stores them in the &lt;strong&gt;policy_stats&lt;/strong&gt; table in the database. This is done for better performance of the UI. For customers with 100,000s of hosts that asynchronously report their policy results, calculating the passing and failing counts in real time was noticeably slow.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/understanding-the-intricacies-of-fleet-policies/understanding-the-intricacies-of-fleet-policies-main-policies-page-1999x978@2x.png"
alt="Fleet policies page"&gt;
&lt;/figure&gt;
&lt;h2 id="summary"&gt;&lt;a href="#summary" class="header-anchor"&gt;&lt;/a&gt;Summary
&lt;/h2&gt;&lt;p&gt;Understanding the intricacies of Fleet policies is essential for IT professionals managing a fleet of devices. This deep dive into the mechanics of Fleet policies — from creation to execution — provides you with the necessary insights to optimize your cybersecurity strategy effectively. By leveraging these policies, you can ensure stringent security standards across your network, enhancing your organization&amp;rsquo;s digital defense. As the cyber landscape evolves, tools like Fleet remain crucial in maintaining robust and responsive security protocols. We encourage you to apply these insights in your Fleet usage, and as always, we welcome your feedback and experiences in the &lt;a class="link" href="https://fleetdm.com/support" target="_blank" rel="noopener"
&gt;Fleet community Slack channels&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="understanding-the-intricacies-of-fleet-policies-video"&gt;&lt;a href="#understanding-the-intricacies-of-fleet-policies-video" class="header-anchor"&gt;&lt;/a&gt;Understanding the intricacies of Fleet policies video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/A-Qapp7vYJk"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;This article originally appeared in &lt;a class="link" href="https://fleetdm.com/guides/understanding-the-intricacies-of-fleet-policies" target="_blank" rel="noopener"
&gt;Fleet&amp;rsquo;s blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description></item><item><title>Get current telemetry from your devices with live queries</title><link>https://victoronsoftware.com/posts/get-current-telemetry-from-your-devices-with-live-queries/</link><pubDate>Fri, 29 Dec 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/get-current-telemetry-from-your-devices-with-live-queries/</guid><description>&lt;img src="https://victoronsoftware.com/posts/get-current-telemetry-from-your-devices-with-live-queries/Live%20Query.png" alt="Featured image of post Get current telemetry from your devices with live queries" /&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Jh14hNjW0Uo"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;a class="link" href="https://fleetdm.com/" target="_blank" rel="noopener"
&gt;Fleet&lt;/a&gt; is an open-source platform for managing and gathering telemetry from devices such as laptops, desktops, VMs, etc. &lt;a class="link" href="https://www.osquery.io/" target="_blank" rel="noopener"
&gt;Osquery&lt;/a&gt; agents run on these devices and report to the Fleet server. One of Fleet’s features is the ability to query information from the devices in near real-time, called &lt;em&gt;live queries&lt;/em&gt;. This article discusses how live queries work “under the hood.”&lt;/p&gt;
&lt;h2 id="why-a-live-query"&gt;&lt;a href="#why-a-live-query" class="header-anchor"&gt;&lt;/a&gt;Why a live query?
&lt;/h2&gt;&lt;p&gt;Live queries enable administrators to ask near real-time questions of all online devices, such as checking the encryption status of SSH keys across endpoints, or obtaining the uptime of each server within their purview. This enables them to promptly identify and address any issues, thereby reducing downtime and maintaining operational efficiency. These tasks, which would be time-consuming and complex if done manually, are streamlined through live queries, offering real-time insights into the status and posture of the entire fleet of devices helping IT and security.&lt;/p&gt;
&lt;h2 id="live-queries-under-the-hood"&gt;&lt;a href="#live-queries-under-the-hood" class="header-anchor"&gt;&lt;/a&gt;Live queries under the hood
&lt;/h2&gt;&lt;p&gt;Live queries can be run from the web UI, the command-line interface called &lt;code&gt;fleetctl&lt;/code&gt;, or the REST API. The user creates a query and selects which devices will run that query. Here is an example using &lt;code&gt;fleetctl&lt;/code&gt; to obtain the operating system name and version for all devices:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;fleetctl query --query &lt;span style="color:#e6db74"&gt;&amp;#34;select name, version from os_version;&amp;#34;&lt;/span&gt; --labels &lt;span style="color:#e6db74"&gt;&amp;#34;All Hosts&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When a client initiates a live query, the server first creates a &lt;strong&gt;Query Campaign&lt;/strong&gt; record in the MySQL database. A Fleet deployment consists of several servers behind a load balancer, so storing the record in the DB makes all servers aware of the new query campaign.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/get-current-telemetry-from-your-devices-with-live-queries/Live%20Query.png"
alt="Query campaign"&gt;&lt;figcaption&gt;
&lt;h4&gt;Query campaign&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As devices called &lt;strong&gt;Hosts&lt;/strong&gt; in Fleet check in with the servers, they receive instructions to run a query. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;queries&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;fleet_distributed_query_140&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;SELECT name, version FROM os_version;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;discovery&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;fleet_distributed_query_140&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;SELECT 1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, the osquery agents run the actual query on their host, and write the result back to a Fleet server. As a server receives the result, it publishes it to the common cache using &lt;a class="link" href="https://redis.io/docs/interact/pubsub/" target="_blank" rel="noopener"
&gt;Redis Pub/Sub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Only the one server communicating with the client subscribes to the results. It processes the data from the cache, keeps track of how many hosts reported back, and communicates results back to the client. The web UI and &lt;code&gt;fleetctl&lt;/code&gt; interfaces use a &lt;a class="link" href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API" target="_blank" rel="noopener"
&gt;WebSockets API&lt;/a&gt;, and results are reported as they come in. The REST API, on the other hand, only sends a response after all online hosts have reported their query results.&lt;/p&gt;
&lt;h2 id="discover-more"&gt;&lt;a href="#discover-more" class="header-anchor"&gt;&lt;/a&gt;Discover more
&lt;/h2&gt;&lt;p&gt;Fleet’s live query feature represents a powerful tool in the arsenal of IT and security administrators. By harnessing the capabilities of live queries, tasks that once required extensive manual effort can now be executed swiftly and efficiently. This real-time querying ability enhances operational efficiency and significantly bolsters security and compliance measures across a range of devices.&lt;/p&gt;
&lt;p&gt;The integration of Fleet with Osquery agents, the flexibility offered by interfaces like the web UI, &lt;code&gt;fleetctl&lt;/code&gt;, and the REST API, and the efficient data handling through mechanisms like Redis Pub/Sub and WebSockets API all come together to create a robust, real-time telemetry gathering system. This system is designed to keep you informed about the current state of your device fleet, helping you make informed decisions quickly.&lt;/p&gt;
&lt;p&gt;As you reflect on the capabilities of live queries with Fleet, consider your network environment&amp;rsquo;s unique challenges and needs. &lt;strong&gt;What questions could live queries help you answer about your devices?&lt;/strong&gt; Whether it&amp;rsquo;s security audits, performance monitoring, or compliance checks, live queries offer a dynamic solution to address these concerns.&lt;/p&gt;
&lt;p&gt;We encourage you to explore the possibilities and share your thoughts or questions. Perhaps you’re facing a specific query challenge or an innovative use case you’ve discovered. Whatever it may be, the world of live queries is vast and ripe for exploration. Join us in &lt;a class="link" href="https://fleetdm.com/support" target="_blank" rel="noopener"
&gt;Fleet’s Slack forums&lt;/a&gt; to engage with a community of like-minded professionals and deepen your understanding of what live queries can achieve in your environment.&lt;/p&gt;
&lt;p&gt;API Documentation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://fleetdm.com/docs/rest-api/rest-api#run-live-query" target="_blank" rel="noopener"
&gt;Run live query with REST API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://github.com/fleetdm/fleet/blob/6fd06d648601edd89c01e25426e2e35ff2a8a37b/docs/Contributing/API-for-contributors.md#run-live-query" target="_blank" rel="noopener"
&gt;Run live query with WebSockets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;This article originally appeared in &lt;a class="link" href="https://fleetdm.com/guides/get-current-telemetry-from-your-devices-with-live-queries" target="_blank" rel="noopener"
&gt;Fleet&amp;rsquo;s blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description></item><item><title>Physical security meets cybersecurity with Matter</title><link>https://victoronsoftware.com/posts/physical-security-meets-cybersecurity-with-matter/</link><pubDate>Wed, 20 Dec 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/physical-security-meets-cybersecurity-with-matter/</guid><description>&lt;img src="https://victoronsoftware.com/posts/physical-security-meets-cybersecurity-with-matter/cover.png" alt="Featured image of post Physical security meets cybersecurity with Matter" /&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/mIVsLTrUork"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Matter is a recent open-source standard for connecting devices such as light switches, door locks,
motion sensors, and many others. The major goals of the standard are compatibility and
interoperability. This means that you will no longer need to be an expert hacker when trying to
control devices from multiple manufacturers under a single application. Apple, Amazon, and Google
are some of the major members driving the standard. This is great news for the majority of adopters
who haven’t yet fully embraced home automation and security.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/physical-security-meets-cybersecurity-with-matter/matter.jpeg"&gt;
&lt;/figure&gt;
&lt;p&gt;The Matter specification is published by
the &lt;a class="link" href="https://csa-iot.org/" target="_blank" rel="noopener"
&gt;Connectivity Standards Alliance&lt;/a&gt; (CSA) and includes a
&lt;a class="link" href="https://github.com/project-chip/connectedhomeip" target="_blank" rel="noopener"
&gt;software development kit&lt;/a&gt;. Version 1.0 of the
specification was released in October of 2022. In 2023,
we saw a slew of new devices and software upgrades compatible with Matter. Version 1.2 of the
specification was published in October of 2023. However, this latest specification is still missing
support for a few important device categories such as cameras and major appliances. Cameras are a
top priority for the CSA, and we may see Matter-compatible cameras in 2024.&lt;/p&gt;
&lt;p&gt;Matter is an important step for the management of IoT devices because it finally brings true
interoperability where it has been sorely missing for so many years. No longer will device
manufacturers need to decide and budget precious software resources to support Amazon Alexa, Google
Home, Apple HomeKit, or another connectivity hub. Customers will no longer be locked into using one
of the major home automation providers. And home automation solutions from smaller companies will
come onto the market.&lt;/p&gt;
&lt;p&gt;An important feature of Matter is &lt;strong&gt;multi-admin&lt;/strong&gt;, which means that devices can be read and
controlled by multiple clients. In Matter terminology, the device, such as a motion sensor, is
called a server or node, and the applications controlling it are called clients. For example, a
light switch may be simultaneously controlled by the manufacturer’s app, by Alexa, and by the user&amp;rsquo;s
hand-written custom API client.&lt;/p&gt;
&lt;p&gt;Multi-admin support means that a home or business may use one application to control their locks,
switches, and security sensors, and another application for reading telemetry from those same
devices. Businesses will find it easier to integrate physical security with cyber security. For
example, suppose a business’s device management server uses Matter to subscribe to the office door
lock. It receives an alert that &lt;em&gt;User A&lt;/em&gt; has entered their code. Afterwards, via regular scheduled
telemetry, it notices a successful login to &lt;em&gt;Computer B&lt;/em&gt;. The business SIEM (security information and
event management) system should immediately flag this suspicious sequence of events.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/physical-security-meets-cybersecurity-with-matter/cover.png"
alt="Physical security with Matter"&gt;
&lt;/figure&gt;
&lt;p&gt;Of course, the example above can be accomplished today by writing some custom code or using a third party integration. What Matter brings is scalability to such security approaches. The code and integration will no longer need to be redone for each new device and version that comes onto the market.&lt;/p&gt;</description></item><item><title>Setting up a virtual router (pfSense on Proxmox)</title><link>https://victoronsoftware.com/posts/setting-up-a-virtual-router/</link><pubDate>Wed, 22 Nov 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/setting-up-a-virtual-router/</guid><description>&lt;img src="https://victoronsoftware.com/posts/setting-up-a-virtual-router/cover.jpeg" alt="Featured image of post Setting up a virtual router (pfSense on Proxmox)" /&gt;&lt;p&gt;Traditionally, network routers used dedicated bare metal machines. However, in the last several years, we’ve seen a rise
in software-based routers that can be deployed either on bare metal, on a VM, or even on a container. This means these
virtual routers can be used to replace existing router software on an older router. They can run in the cloud. Or they
can be installed on do-it-yourself (DIY) hardware. A couple popular open source software-based routers are
&lt;a class="link" href="https://www.pfsense.org/" target="_blank" rel="noopener"
&gt;pfSense&lt;/a&gt; and &lt;a class="link" href="https://opnsense.org/" target="_blank" rel="noopener"
&gt;OPNsense&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-use-a-virtual-router"&gt;&lt;a href="#why-use-a-virtual-router" class="header-anchor"&gt;&lt;/a&gt;Why use a virtual router?
&lt;/h2&gt;&lt;p&gt;For one, these routers offer enterprise-level features such as build-in VPN support, traffic analysis, and extensive
diagnostics, among others. Another reason is that having a virtual router gives you the ability to experiment &amp;ndash; you can
install multiple routers on top of your hypervisor, and try all of them out. A third reason is that the virtual router
may be only one of many VMs that you run on your hardware. You can use the same piece of hardware to run a router, an
ad-blocking service, a media server, and other applications.&lt;/p&gt;
&lt;h2 id="advanced-virtual-router-installation-and-set-up"&gt;&lt;a href="#advanced-virtual-router-installation-and-set-up" class="header-anchor"&gt;&lt;/a&gt;Advanced virtual router installation and set up
&lt;/h2&gt;&lt;p&gt;When setting up our virtual router, we chose to use &lt;a class="link" href="https://pve.proxmox.com/wiki/PCI%28e%29_Passthrough" target="_blank" rel="noopener"
&gt;PCI Passthrough&lt;/a&gt;
to allow the virtual router direct access to the NIC hardware. Direct access to hardware improves the latency of our
internet traffic. In addition, we wanted our hypervisor to sit behind the router, and not be exposed to the public. This
reduces the attack surface for potential bad agents. However, routing hypervisor traffic through the router made our
setup a bit tricker. It is like the chicken or the egg dilemma &amp;ndash; how do you put your hypervisor behind the router when
the hypervisor is responsible for managing the router? Below is the approach we used when installing pfSense on top of
&lt;a class="link" href="https://www.proxmox.com/en/proxmox-virtual-environment/overview" target="_blank" rel="noopener"
&gt;Proxmox Virtual Environment (PVE)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For the initial installation, we did not use PCI Passthrough and instead used a virtual network bridge (&lt;strong&gt;vmbr0&lt;/strong&gt;). We
configured the router VM to start on boot.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/setting-up-a-virtual-router/Virtual-Router-1.jpg"
alt="Initial virtual router configuration"&gt;&lt;figcaption&gt;
&lt;h4&gt;Initial virtual router configuration&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This allowed us to continue controlling the virtual router through the PVE web GUI. We set up the router and enabled
access to it through the serial interface, which we used in the next step. Then, we put the system into its final
configuration.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/setting-up-a-virtual-router/Virtual-Router-2.jpg"
alt="Final virtual router configuration"&gt;&lt;figcaption&gt;
&lt;h4&gt;Final virtual router configuration&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In order to finish configuring, we had to plug in a monitor and keyboard into our hardware. We accessed the virtual
router via the serial interface from the PVE command line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;qm terminal &lt;span style="color:#ae81ff"&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We updated the WAN interface to use &lt;strong&gt;eth0&lt;/strong&gt;. At this point, the LAN interface &lt;strong&gt;eth1&lt;/strong&gt; had access to the internet.&lt;/p&gt;
&lt;p&gt;In addition, we added a second LAN interface for the network bridge (&lt;strong&gt;vmbr0&lt;/strong&gt;). We made sure firewall configurations
for both LAN interfaces were the same.&lt;/p&gt;
&lt;p&gt;Next, from the PVE command line, we updated the PVE IP and gateway to point at the router by modifying the following
files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/etc/network/interfaces
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/etc/hosts
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After rebooting PVE, we had access to the internet and to the PVE Web GUI from our new LAN.&lt;/p&gt;
&lt;h2 id="updating-router-software"&gt;&lt;a href="#updating-router-software" class="header-anchor"&gt;&lt;/a&gt;Updating router software
&lt;/h2&gt;&lt;p&gt;Using a virtual router with PCI Passthrough creates a unique challenge when doing software updates. What if the new
version doesn’t work? What if you lose all internet access.&lt;/p&gt;
&lt;p&gt;We can mitigate potential issues. First, we recommend always making a backup of the router VM when upgrading. That way
we can easily roll back the change. Switching to a backup, however, requires keyboard and monitor access to your
hardware, since it must be done via the PVE command line.&lt;/p&gt;
&lt;p&gt;Another way to safely upgrade is to spin up a second VM running updated router software. The second VM can be either
from a backup or brand new. This VM should use virtual network bridges for its connections. Once it is properly
configured, we can stop the first router VM and switch the port connections to the second VM. This flow also requires
accessing the router via the serial interface to update the WAN/LAN interfaces.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we have been &lt;a class="link" href="../why-you-need-vlan/" &gt;setting up VLANs on our home network&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="setting-up-a-virtual-router-video"&gt;&lt;a href="#setting-up-a-virtual-router-video" class="header-anchor"&gt;&lt;/a&gt;Setting up a virtual router video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/uj_lB__QDTc"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;</description></item><item><title>Inspecting keychain files on macOS</title><link>https://victoronsoftware.com/posts/inspecting-keychain-files-on-macos/</link><pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/inspecting-keychain-files-on-macos/</guid><description>&lt;p&gt;Keychains are the macOS’s method to track and protect secure information such as passwords, private keys, and
certificates. Traditionally, the keychain information was stored in files, such as:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/Library/Keychains/System.keychain
/Library/Keychains/apsd.keychain
/System/Library/Keychains/SystemRootCertificates.keychain
/Users/&amp;lt;username&amp;gt;/Library/Keychains/login.keychain-db
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the last several years, Apple also introduced data protection keychains, such as the iCloud Keychain. Although the
file-based keychains above are on the road to deprecation in favor of data protection keychains, current macOS systems
still heavily rely on them. It is unclear when, if ever, these keychains will be replaced by data protection keychains.&lt;/p&gt;
&lt;p&gt;Inspecting file-based keychains has gotten more difficult as Apple deprecated many of the APIs associated with them,
such as &lt;a class="link" href="https://developer.apple.com/documentation/security/1396431-seckeychainopen" target="_blank" rel="noopener"
&gt;SecKeychainOpen&lt;/a&gt;. In addition,
excessive use of these deprecated APIs may result in corruption of the Login Keychain, as mentioned in this
&lt;a class="link" href="https://github.com/osquery/osquery/issues/7780" target="_blank" rel="noopener"
&gt;osquery issue&lt;/a&gt;. By NOT using the deprecated APIs, the user only has
access to the following keychains from the above list:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;/Library/Keychains/System.keychain
/Users/&amp;lt;username&amp;gt;/Library/Keychains/login.keychain-db
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Root certificates are missing. And the APSD (Apple Push Service Daemon) keychain is missing, which is used for device
management, among other things.&lt;/p&gt;
&lt;p&gt;So, how can app developers and IT professionals continue to have access to ALL of these keychain files?&lt;/p&gt;
&lt;p&gt;One way is to continue using deprecated APIs until they stop working. We recommend making a secure copy of the keychain
files before accessing them with the APIs.&lt;/p&gt;
&lt;p&gt;Another option is to use the macOS &lt;a class="link" href="https://ss64.com/osx/security.html" target="_blank" rel="noopener"
&gt;security&lt;/a&gt; command line tool. For example, to
list root certificates, do the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo security find-certificate -a /System/Library/Keychains/SystemRootCertificates.keychain
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A third, and hardest, option is to parse the
&lt;a class="link" href="https://github.com/libyal/dtformats/blob/main/documentation/MacOS%20keychain%20database%20file%20format.asciidoc" target="_blank" rel="noopener"
&gt;keychain files&lt;/a&gt;
yourself. Some details on the keychain format are available. Please leave a comment if you or someone else has created a
tool to parse Apple keychains.&lt;/p&gt;
&lt;p&gt;The fourth option is to use an existing tool, such as &lt;a class="link" href="https://www.osquery.io/" target="_blank" rel="noopener"
&gt;osquery&lt;/a&gt;. Osquery is an open-source tool
built for security and IT professionals. Osquery developers are working on fixing any issues to continue providing
access to macOS keychain files via the following tables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://fleetdm.com/tables/certificates" target="_blank" rel="noopener"
&gt;certificates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://fleetdm.com/tables/keychain_acls" target="_blank" rel="noopener"
&gt;keychain_acls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="https://fleetdm.com/tables/keychain_items" target="_blank" rel="noopener"
&gt;keychain_items&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-inspect-macos-keychain-files"&gt;&lt;a href="#watch-how-to-inspect-macos-keychain-files" class="header-anchor"&gt;&lt;/a&gt;Watch how to inspect macOS keychain files
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/QBn_C2nl2ZE"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item></channel></rss>