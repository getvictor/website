<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Dependency Management on Victor on Software</title><link>https://victoronsoftware.com/tags/dependency-management/</link><description>Recent content in Dependency Management on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 05 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/dependency-management/index.xml" rel="self" type="application/rss+xml"/><item><title>How to find package dependencies of a Go package</title><link>https://victoronsoftware.com/posts/go-package-dependencies/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/go-package-dependencies/</guid><description>&lt;img src="https://victoronsoftware.com/posts/go-package-dependencies/go-dependencies-headline.png" alt="Featured image of post How to find package dependencies of a Go package" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#find-package-dependencies-using-go-list" &gt;Find package dependencies using &lt;code&gt;go list&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#find-package-dependencies-using-go-code" &gt;Find package dependencies using Go code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-are-package-dependencies-and-module-dependencies"&gt;&lt;a href="#what-are-package-dependencies-and-module-dependencies" class="header-anchor"&gt;&lt;/a&gt;What are package dependencies and module dependencies?
&lt;/h2&gt;&lt;p&gt;A package dependency is another package that your Go package imports. When you import a package in Go, you create a dependency on that package. The Go compiler will not compile your package if it cannot find and compile the package you depend on.&lt;/p&gt;
&lt;p&gt;On the other hand, a module dependency is a dependency on a module. A module is a collection of related Go packages that are versioned together. You declare your module dependencies in your &lt;code&gt;go.mod&lt;/code&gt; file. Your code may use one or more packages from your module dependencies.&lt;/p&gt;
&lt;h2 id="why-are-package-dependencies-important"&gt;&lt;a href="#why-are-package-dependencies-important" class="header-anchor"&gt;&lt;/a&gt;Why are package dependencies important?
&lt;/h2&gt;&lt;p&gt;Understanding your package dependencies is essential because they:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;indicate the amount of internal coupling in your codebase&lt;/li&gt;
&lt;li&gt;help you understand the structure of your codebase&lt;/li&gt;
&lt;li&gt;help you avoid too many dependencies&lt;/li&gt;
&lt;li&gt;help you avoid circular dependencies&lt;/li&gt;
&lt;li&gt;help you optimize your build times&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As your codebase grows, keeping track of package dependencies is vital to ensure that the codebase remains maintainable. Many developers import dependencies without considering the consequences. In modern IDE tools, they quickly click &lt;code&gt;Import&lt;/code&gt; in a pop-up to make the squiggly lines go away. In some cases, IDEs add imports without even asking the developer. However, code with many dependencies becomes coupled to other potentially unrelated code. This entanglement makes the codebase harder to understand, test, and maintain. For additional details, see &lt;a class="link" href="../scaling-codebase-evolutionary-architecture/#problems-with-the-current-architecture" &gt;the list of problems with a coupled architecture&lt;/a&gt; from our previous article.&lt;/p&gt;
&lt;h3 id="what-is-an-architectural-test"&gt;&lt;a href="#what-is-an-architectural-test" class="header-anchor"&gt;&lt;/a&gt;What is an architectural test?
&lt;/h3&gt;&lt;p&gt;An architectural test is a test that makes sure your code follows the architectural rules that you have defined. Codebases tend to devolve into a Big Ball of Mud as time passes. Architectural tests are one way to keep your codebase clean.&lt;/p&gt;
&lt;p&gt;In our example below, we will check to ensure that our Go package is NOT dependent on another package in our codebase. This is a common scenario when you want to refactor your codebase and remove a dependency or add a new package and want to ensure that it is not dependent on other parts of the codebase.&lt;/p&gt;
&lt;h2 id="find-package-dependencies-using-go-list"&gt;&lt;a href="#find-package-dependencies-using-go-list" class="header-anchor"&gt;&lt;/a&gt;Find package dependencies using &lt;code&gt;go list&lt;/code&gt;
&lt;/h2&gt;&lt;p&gt;&lt;code&gt;go list&lt;/code&gt; is a powerful tool that you can use to list information about Go packages. You can use the &lt;code&gt;-deps&lt;/code&gt; flag with &lt;code&gt;go list&lt;/code&gt; to find package dependencies. Here is an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go list -deps ./server/android...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result is a list of all the direct and indirect package dependencies of the &lt;code&gt;./server/android&lt;/code&gt; and its subpackages. To filter out standard library packages and sort the list, you can use the following command on macOS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go list -deps ./server/android... | grep -E &lt;span style="color:#e6db74"&gt;&amp;#39;^[^\/]*\.[^\/]*\/&amp;#39;&lt;/span&gt; | sort
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above regular expression looks for packages with a &lt;code&gt;.&lt;/code&gt; before the first &lt;code&gt;/&lt;/code&gt; in the package path. This regex filters out standard library packages. The &lt;code&gt;sort&lt;/code&gt; command sorts the list alphabetically.&lt;/p&gt;
&lt;p&gt;To check if a package is dependent on another package, you can use the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;! &lt;span style="color:#f92672"&gt;(&lt;/span&gt;go list -deps ./server/android... | grep -q &lt;span style="color:#e6db74"&gt;&amp;#39;github.com/fleetdm/fleet/v4/server/mdm/nanomdm/mdm&amp;#39;&lt;/span&gt;&lt;span style="color:#f92672"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The leading &lt;code&gt;!&lt;/code&gt; inverts the command&amp;rsquo;s exit status. If the package is dependent on the specified package, the command will return &lt;code&gt;1&lt;/code&gt;; if it is not, the command will return &lt;code&gt;0&lt;/code&gt;. You can use this command in your CI/CD pipelines to ensure that your package is not dependent on a specific package.&lt;/p&gt;
&lt;h2 id="find-package-dependencies-using-go-code"&gt;&lt;a href="#find-package-dependencies-using-go-code" class="header-anchor"&gt;&lt;/a&gt;Find package dependencies using Go code
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://pkg.go.dev/golang.org/x/tools/go/packages" target="_blank" rel="noopener"
&gt;packages&lt;/a&gt; is a Go package that allows one to load, parse, type-check, and import Go packages. We will use the &lt;code&gt;Load&lt;/code&gt; function to get a list of &lt;code&gt;Package&lt;/code&gt; values. In addition, we will use &lt;a class="link" href="https://pkg.go.dev/go/build#Context.Import" target="_blank" rel="noopener"
&gt;Context.Import method from build package&lt;/a&gt; to recursively find dependencies.&lt;/p&gt;
&lt;p&gt;Below is an example architecture test you can add to your test suite.&lt;/p&gt;
&lt;script type="application/javascript" src="https://gist.github.com/getvictor/17f495021211dcca087b16cd2d4b24d1.js"&gt;&lt;/script&gt;
&lt;p&gt;The above example is based on &lt;a class="link" href="https://github.com/matthewmcnew/archtest" target="_blank" rel="noopener"
&gt;https://github.com/matthewmcnew/archtest&lt;/a&gt;. You can &lt;a class="link" href="https://youtu.be/yIZcbTQvpCE?t=440&amp;amp;si=T2AqNGc9_YMjbCTx" target="_blank" rel="noopener"
&gt;jump to the code example section&lt;/a&gt; of the video below for a full explanation.&lt;/p&gt;
&lt;p&gt;A failing run of our architecture test will look like this:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;=== RUN TestPackageDependencies
arch_test.go:41: Error: package dependency not allowed. Dependency chain:
github.com/fleetdm/fleet/v4/server/android/service
github.com/fleetdm/fleet/v4/server/fleet
github.com/fleetdm/fleet/v4/server/mdm/nanomdm/mdm
--- FAIL: TestPackageDependencies (14.66s)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="find-how-a-dependency-is-included-in-the-build"&gt;&lt;a href="#find-how-a-dependency-is-included-in-the-build" class="header-anchor"&gt;&lt;/a&gt;Find how a dependency is included in the build
&lt;/h2&gt;&lt;p&gt;In our article on &lt;a class="link" href="../analyze-go-build" &gt;analyzing Go build times&lt;/a&gt;, we show how to use the &lt;code&gt;-debug-actiongraph&lt;/code&gt; flag to find &lt;a class="link" href="../analyze-go-build#find-why-dependencies" &gt;why a dependency is included in the build&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;In the previous article, we discussed &lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" &gt;how to scale your codebase with evolutionary architecture&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Before that, we &lt;a class="link" href="../go-modules-and-packages/" &gt;explained the difference between Go modules and Go packages&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also covered &lt;a class="link" href="../common-refactorings/" &gt;common code refactorings in Go for readability and maintainability&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-find-package-dependencies-of-a-go-package"&gt;&lt;a href="#watch-how-to-find-package-dependencies-of-a-go-package" class="header-anchor"&gt;&lt;/a&gt;Watch how to find package dependencies of a Go package
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/yIZcbTQvpCE"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Go modules and packages — which one to use and when</title><link>https://victoronsoftware.com/posts/go-modules-and-packages/</link><pubDate>Wed, 04 Dec 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/go-modules-and-packages/</guid><description>&lt;img src="https://victoronsoftware.com/posts/go-modules-and-packages/go-modules-and-packages.png" alt="Featured image of post Go modules and packages — which one to use and when" /&gt;&lt;h2 id="what-is-a-go-package"&gt;&lt;a href="#what-is-a-go-package" class="header-anchor"&gt;&lt;/a&gt;What is a Go package?
&lt;/h2&gt;&lt;p&gt;A Go package is a collection of Go source files in the same directory that are compiled together. It can contain
functions, types, and variables. Go packages organize code and provide a way to share code between different program
parts.&lt;/p&gt;
&lt;p&gt;By convention, the package name is the same as the last element of the import path. For example, the package name for
the &lt;code&gt;fmt&lt;/code&gt; package in the &lt;code&gt;fmt&lt;/code&gt; directory is &lt;code&gt;fmt&lt;/code&gt;. You can name the package differently from the directory name, but it
is not recommended.&lt;/p&gt;
&lt;p&gt;When a Go application is compiled, the Go compiler compiles all the packages imported by the main package. The main
package contains the &lt;code&gt;main&lt;/code&gt; function and is the entry point of the program. However, all the imported packages can be
compiled separately as well, even if they do not contain the &lt;code&gt;main&lt;/code&gt; function. That&amp;rsquo;s what happens when we run unit tests
for all packages in a Go project — each package is compiled separately and can be tested independently.&lt;/p&gt;
&lt;p&gt;The directory structure does not have to match the package dependencies. For example, given the following directory
structure:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;service/
service.go
api/
api.go
db/
db.go
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The packages &lt;code&gt;service&lt;/code&gt;, &lt;code&gt;api&lt;/code&gt;, and &lt;code&gt;db&lt;/code&gt; can be completely independent. The &lt;code&gt;service&lt;/code&gt; package does not include the
&lt;code&gt;api.go&lt;/code&gt; and &lt;code&gt;db.go&lt;/code&gt; files because they are in a different directory. Go&amp;rsquo;s package dependency graph has no relation to
the directory structure.&lt;/p&gt;
&lt;h2 id="what-is-a-go-module"&gt;&lt;a href="#what-is-a-go-module" class="header-anchor"&gt;&lt;/a&gt;What is a Go module?
&lt;/h2&gt;&lt;p&gt;A &lt;a class="link" href="https://go.dev/ref/mod" target="_blank" rel="noopener"
&gt;Go module&lt;/a&gt;, introduced in Go 1.11, is a collection of Go packages that are versioned
together. A Go module is defined by a &lt;code&gt;go.mod&lt;/code&gt; file located at the module&amp;rsquo;s root. The &lt;code&gt;go.mod&lt;/code&gt; file contains the module
name and the versions of the dependencies the module uses.&lt;/p&gt;
&lt;p&gt;A Go module can contain multiple packages, and the packages do not need to be related to each other.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/go-modules-and-packages/go-modules-and-packages.svg"
alt="Go project directory structure, containing one module at the top level with two packages in a subdirectory. Another module exists in a third subdirectory."&gt;&lt;figcaption&gt;
&lt;h4&gt;Sample project with two modules&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;A Go module can exist at any level of the directory structure, even nested within another module. The Go toolchain
treats all Go modules as independent entities, regardless of their location in the directory structure.&lt;/p&gt;
&lt;h2 id="how-to-use-multiple-modules-in-one-go-workarea"&gt;&lt;a href="#how-to-use-multiple-modules-in-one-go-workarea" class="header-anchor"&gt;&lt;/a&gt;How to use multiple modules in one Go workarea
&lt;/h2&gt;&lt;h3 id="1-create-a-new-go-workarea"&gt;&lt;a href="#1-create-a-new-go-workarea" class="header-anchor"&gt;&lt;/a&gt;1. Create a new Go workarea:
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p go-modules
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cd go-modules
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go mod init example.com/go-modules
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="2-create-a-simple-go-file-in-the-root-of-the-workarea"&gt;&lt;a href="#2-create-a-simple-go-file-in-the-root-of-the-workarea" class="header-anchor"&gt;&lt;/a&gt;2. Create a simple Go file in the root of the workarea:
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello, world.\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="3-create-a-new-go-module-in-a-subdirectory"&gt;&lt;a href="#3-create-a-new-go-module-in-a-subdirectory" class="header-anchor"&gt;&lt;/a&gt;3. Create a new Go module in a subdirectory:
&lt;/h3&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p adder
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cd adder
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go mod init example.com/go-modules/adder
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the following Go file in the &lt;code&gt;adder&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;adder&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Add&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;a&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;a&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;b&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="4-use-the-adder-package-in-the-main-package"&gt;&lt;a href="#4-use-the-adder-package-in-the-main-package" class="header-anchor"&gt;&lt;/a&gt;4. Use the &lt;code&gt;adder&lt;/code&gt; package in the &lt;code&gt;main&lt;/code&gt; package:
&lt;/h3&gt;&lt;p&gt;You cannot simply import the &lt;code&gt;adder&lt;/code&gt; package in the &lt;code&gt;main&lt;/code&gt; package because they are in different modules.&lt;/p&gt;
&lt;p&gt;One way to use the &lt;code&gt;adder&lt;/code&gt; package is to publish it and use &lt;code&gt;go get&lt;/code&gt; to download it as the &lt;code&gt;main&lt;/code&gt; dependency. However,
this is impractical for local development and doesn&amp;rsquo;t make sense when we explicitly want to use multiple modules in one
repository.&lt;/p&gt;
&lt;p&gt;The proper way is to use a &lt;a class="link" href="https://go.dev/ref/mod#workspaces" target="_blank" rel="noopener"
&gt;workspace, declared in the go.work file&lt;/a&gt;, introduced in
Go 1.18.&lt;/p&gt;
&lt;p&gt;In the top level of the workarea, create a &lt;code&gt;go.work&lt;/code&gt; file with all the modules in the subdirectories:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go work use -r .
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The resulting &lt;code&gt;go.work&lt;/code&gt; file will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-text" data-lang="text"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;go 1.23.2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;use (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ./adder
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, you can import the &lt;code&gt;adder&lt;/code&gt; package in the &lt;code&gt;main&lt;/code&gt; package:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;example.com/go-modules/adder&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Printf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello, world.\n&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Print&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;myadder&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Add&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="should-i-use-multiple-go-modules-in-one-repository"&gt;&lt;a href="#should-i-use-multiple-go-modules-in-one-repository" class="header-anchor"&gt;&lt;/a&gt;Should I use multiple Go modules in one repository?
&lt;/h2&gt;&lt;p&gt;Generally, it is not recommended to use multiple Go modules in one repository. However, there are some cases where it
makes sense, like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Temporarily pull in a third-party module to add a feature before this feature is merged upstream.&lt;/li&gt;
&lt;li&gt;Work on multiple interdependent modules that can be versioned and released independently.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Usually, it is better to use packages within a single module to organize and decouple code.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Read the follow-up article on &lt;a class="link" href="../go-package-dependencies/" &gt;how to find package dependencies of a Go package&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also &lt;a class="link" href="../software-modularity/" &gt;explained why modularity is important in software&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Recently, we covered &lt;a class="link" href="../method-overriding-in-go/" &gt;method overriding in Go&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also wrote about &lt;a class="link" href="../staticcheck-go-linter/" &gt;using the staticcheck linter on a large Go project&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Previously, we described &lt;a class="link" href="../go-json-unmarshal/" &gt;how to use Go to unmarshal JSON null, set, and missing fields&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also published an article on &lt;a class="link" href="../go-test-execution-time/" &gt;accurately measuring the execution time of Go tests&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="multiple-modules-in-one-go-project-on-github"&gt;&lt;a href="#multiple-modules-in-one-go-project-on-github" class="header-anchor"&gt;&lt;/a&gt;Multiple modules in one Go project on GitHub
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://github.com/getvictor/go-modules" target="_blank" rel="noopener"
&gt;Example Go project with multiple modules&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="watch-an-explanation-of-go-modules-and-packages-along-with-an-example-of-using-multiple-modules-in-one-repository"&gt;&lt;a href="#watch-an-explanation-of-go-modules-and-packages-along-with-an-example-of-using-multiple-modules-in-one-repository" class="header-anchor"&gt;&lt;/a&gt;Watch an explanation of Go modules and packages, along with an example of using multiple modules in one repository
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/EdV1rx5613g"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Fix security vulnerabilities in Yarn</title><link>https://victoronsoftware.com/posts/fix-security-vulnerabilities-yarn/</link><pubDate>Wed, 10 Apr 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/fix-security-vulnerabilities-yarn/</guid><description>&lt;img src="https://victoronsoftware.com/posts/fix-security-vulnerabilities-yarn/cover.png" alt="Featured image of post Fix security vulnerabilities in Yarn" /&gt;&lt;h2 id="why-fix-security-vulnerabilities"&gt;&lt;a href="#why-fix-security-vulnerabilities" class="header-anchor"&gt;&lt;/a&gt;Why fix security vulnerabilities?
&lt;/h2&gt;&lt;p&gt;Security vulnerabilities are a common issue in software development. They can lead to data breaches, unauthorized
access, and other security incidents. It is important to fix security vulnerabilities as soon as possible to protect
your data and users.&lt;/p&gt;
&lt;h2 id="finding-vulnerabilities"&gt;&lt;a href="#finding-vulnerabilities" class="header-anchor"&gt;&lt;/a&gt;Finding vulnerabilities
&lt;/h2&gt;&lt;p&gt;Nowadays, it is possible to integrate various vulnerability scanning tools into your CI/CD pipeline. These tools can
help you identify security vulnerabilities in your code and dependencies. One such tool is
&lt;a class="link" href="https://securityscorecards.dev/" target="_blank" rel="noopener"
&gt;OpenSSF Scorecard&lt;/a&gt;, which combines multiple other tools into a single GitHub action.
It uses the &lt;a class="link" href="https://osv.dev/" target="_blank" rel="noopener"
&gt;OSV service&lt;/a&gt; to find vulnerabilities affecting your project&amp;rsquo;s dependencies. OSV (Open
Source Vulnerabilities) is a Google-based vulnerability database providing information about open-source projects'
vulnerabilities.&lt;/p&gt;
&lt;p&gt;In this article, we will focus on fixing a few recent real-world security vulnerabilities in our &lt;code&gt;yarn.lock&lt;/code&gt;
dependencies.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;score is 3: 6 existing vulnerabilities detected:
Warn: Project is vulnerable to: GHSA-crh6-fp67-6883
Warn: Project is vulnerable to: GHSA-wf5p-g6vw-rhxx
Warn: Project is vulnerable to: GHSA-p6mc-m468-83gw
Warn: Project is vulnerable to: GHSA-566m-qj78-rww5
Warn: Project is vulnerable to: GHSA-7fh5-64p2-3v2j
Warn: Project is vulnerable to: GHSA-4wf5-vphf-c2xc
Click Remediation section below to solve this issue
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="using-local-tools-to-find-vulnerabilities"&gt;&lt;a href="#using-local-tools-to-find-vulnerabilities" class="header-anchor"&gt;&lt;/a&gt;Using local tools to find vulnerabilities
&lt;/h3&gt;&lt;p&gt;In a local environment, we can use &lt;a class="link" href="https://google.github.io/osv-scanner/" target="_blank" rel="noopener"
&gt;OSV-Scanner&lt;/a&gt; to find vulnerabilities in our
dependencies. Running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;osv-scanner scan --lockfile yarn.lock
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It will output the same vulnerabilities mentioned above but with additional details.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;╭─────────────────────────────────────┬──────┬───────────┬────────────────┬─────────┬───────────╮
│ OSV URL │ CVSS │ ECOSYSTEM │ PACKAGE │ VERSION │ SOURCE │
├─────────────────────────────────────┼──────┼───────────┼────────────────┼─────────┼───────────┤
│ https://osv.dev/GHSA-crh6-fp67-6883 │ 9.8 │ npm │ @xmldom/xmldom │ 0.8.3 │ yarn.lock │
│ https://osv.dev/GHSA-wf5p-g6vw-rhxx │ 6.5 │ npm │ axios │ 0.21.4 │ yarn.lock │
│ https://osv.dev/GHSA-p6mc-m468-83gw │ 7.4 │ npm │ lodash.set │ 4.3.2 │ yarn.lock │
│ https://osv.dev/GHSA-566m-qj78-rww5 │ 5.3 │ npm │ postcss │ 6.0.23 │ yarn.lock │
│ https://osv.dev/GHSA-7fh5-64p2-3v2j │ 5.3 │ npm │ postcss │ 6.0.23 │ yarn.lock │
│ https://osv.dev/GHSA-7fh5-64p2-3v2j │ 5.3 │ npm │ postcss │ 7.0.39 │ yarn.lock │
│ https://osv.dev/GHSA-7fh5-64p2-3v2j │ 5.3 │ npm │ postcss │ 8.4.21 │ yarn.lock │
│ https://osv.dev/GHSA-4wf5-vphf-c2xc │ 7.5 │ npm │ terser │ 5.12.1 │ yarn.lock │
╰─────────────────────────────────────┴──────┴───────────┴────────────────┴─────────┴───────────╯
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another way to find these vulnerabilities is by using the built-in &lt;a class="link" href="https://yarnpkg.com/cli/audit" target="_blank" rel="noopener"
&gt;yarn audit&lt;/a&gt; command.&lt;/p&gt;
&lt;h2 id="waiving-vulnerabilities"&gt;&lt;a href="#waiving-vulnerabilities" class="header-anchor"&gt;&lt;/a&gt;Waiving vulnerabilities
&lt;/h2&gt;&lt;p&gt;In some cases, you may decide to waive a vulnerability. This approach means that you examine the vulnerability
documentation and acknowledge it but decide not to fix it.&lt;/p&gt;
&lt;p&gt;To waive a vulnerability for the OSV flow, you can create an &lt;code&gt;osv-scanner.toml&lt;/code&gt; file in the root of your project. For
example, to waive the &lt;code&gt;GHSA-crh6-fp67-6883&lt;/code&gt; vulnerability, you can add the following to the &lt;code&gt;osv-scanner.toml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-toml" data-lang="toml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[[&lt;span style="color:#a6e22e"&gt;IgnoredVulns&lt;/span&gt;]]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;GHSA-crh6-fp67-6883&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;reason&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;We examined this vulnerability and concluded that it does not affect our project for a very good reason.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our example, we will not waive any vulnerabilities, but we will fix them by updating the dependencies.&lt;/p&gt;
&lt;h2 id="updating-an-inner-dependency"&gt;&lt;a href="#updating-an-inner-dependency" class="header-anchor"&gt;&lt;/a&gt;Updating an inner dependency
&lt;/h2&gt;&lt;p&gt;In our example, we have a vulnerability in the &lt;code&gt;@xmldom/xmldom&lt;/code&gt; package. From the vulnerability URL, we know we must
update this package to &lt;code&gt;0.8.4&lt;/code&gt; or later.&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;yarn why @xmldom/xmldom&lt;/code&gt; will show that it is an inner dependency of another package:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;=&amp;gt; Found &amp;#34;@xmldom/xmldom@0.8.3&amp;#34;
info Reasons this module exists
- &amp;#34;msw#@mswjs#interceptors&amp;#34; depends on it
- Hoisted from &amp;#34;msw#@mswjs#interceptors#@xmldom#xmldom&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Looking at &lt;code&gt;yarn.lock&lt;/code&gt; shows:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;#34;@xmldom/xmldom@^0.8.3&amp;#34;:
version &amp;#34;0.8.3&amp;#34;
resolved &amp;#34;https://registry.yarnpkg.com/@xmldom/xmldom/-/xmldom-0.8.3.tgz#beaf980612532aa9a3004aff7e428943aeaa0711&amp;#34;
integrity sha512-Lv2vySXypg4nfa51LY1nU8yDAGo/5YwF+EY/rUZgIbfvwVARcd67ttCM8SMsTeJy51YhHYavEq+FS6R0hW9PFQ==
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We see that &lt;code&gt;0.8.4&lt;/code&gt; will satisfy the dependency requirement of &lt;code&gt;^0.8.3&lt;/code&gt;. We can update the package by deleting the above
section from &lt;code&gt;yarn.lock&lt;/code&gt; and running &lt;code&gt;yarn install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We will then see the update:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;&amp;#34;@xmldom/xmldom@^0.8.3&amp;#34;:
version &amp;#34;0.8.10&amp;#34;
resolved &amp;#34;https://registry.yarnpkg.com/@xmldom/xmldom/-/xmldom-0.8.10.tgz#a1337ca426aa61cef9fe15b5b28e340a72f6fa99&amp;#34;
integrity sha512-2WALfTl4xo2SkGCYRt6rDTFfk9R1czmBvUQy12gK2KuRKIpWEhcbbzy8EZXtz/jkRqHX8bFEc6FC1HjX4TUWYw==
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="upgrading-an-inner-dependency-by-overriding-the-version"&gt;&lt;a href="#upgrading-an-inner-dependency-by-overriding-the-version" class="header-anchor"&gt;&lt;/a&gt;Upgrading an inner dependency by overriding the version
&lt;/h2&gt;&lt;p&gt;Our following vulnerability is in the &lt;code&gt;axios&lt;/code&gt; package. We need to update it to &lt;code&gt;0.28.0&lt;/code&gt; or later. By running
&lt;code&gt;yarn why axios&lt;/code&gt; we see that this package is part of a deep dependency chain:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;=&amp;gt; Found &amp;#34;wait-on#axios@0.21.4&amp;#34;
info This module exists because &amp;#34;@storybook#test-runner#jest-playwright-preset#jest-process-manager#wait-on&amp;#34; depends on it.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The needed version &lt;code&gt;0.28.0&lt;/code&gt; does not satisfy the &lt;code&gt;^0.21.4&lt;/code&gt; requirement. We can override the version by adding the
following to the &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;resolutions&amp;#34;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;**/wait-on/axios&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^0.28.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}&lt;span style="color:#960050;background-color:#1e0010"&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="upgrading-the-parent-dependency"&gt;&lt;a href="#upgrading-the-parent-dependency" class="header-anchor"&gt;&lt;/a&gt;Upgrading the parent dependency
&lt;/h2&gt;&lt;p&gt;The following vulnerability is in the &lt;code&gt;lodash.set&lt;/code&gt; package. The vulnerability URL shows that there is no fix for this
vulnerability. We also see at &lt;a class="link" href="https://www.npmjs.com/package/lodash.set" target="_blank" rel="noopener"
&gt;npmjs.com&lt;/a&gt; that this package was last updated
eight years ago.&lt;/p&gt;
&lt;p&gt;We need to update the parent package that uses &lt;code&gt;lodash.set&lt;/code&gt;. Running &lt;code&gt;yarn why lodash.set&lt;/code&gt; shows:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;info Reasons this module exists
- &amp;#34;nock&amp;#34; depends on it
- Hoisted from &amp;#34;nock#lodash.set&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We update the parent by running &lt;code&gt;yarn upgrade nock@latest&lt;/code&gt;. Luckily, the latest version of &lt;code&gt;nock&lt;/code&gt; does not depend on
&lt;code&gt;lodash.set&lt;/code&gt;, and &lt;code&gt;lodash.set&lt;/code&gt; is removed from &lt;code&gt;yarn.lock&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id="removing-a-dependency"&gt;&lt;a href="#removing-a-dependency" class="header-anchor"&gt;&lt;/a&gt;Removing a dependency
&lt;/h2&gt;&lt;p&gt;Sometimes the best way to fix a vulnerability is to remove the vulnerable dependency. This can be done with the
&lt;code&gt;yarn remove &amp;lt;dependency&amp;gt;&lt;/code&gt; command. However, this requires code changes. You must find a different library or implement
the removed functionality yourself.&lt;/p&gt;
&lt;h2 id="conclusion"&gt;&lt;a href="#conclusion" class="header-anchor"&gt;&lt;/a&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;We use the above strategies to fix the vulnerabilities in our project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Updating an inner dependency&lt;/li&gt;
&lt;li&gt;Upgrading an inner dependency by overriding the version&lt;/li&gt;
&lt;li&gt;Upgrading the parent dependency&lt;/li&gt;
&lt;li&gt;Removing a dependency&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can now rerun the vulnerability scanner to verify that we fixed the vulnerabilities.&lt;/p&gt;
&lt;p&gt;In addition, we must run our unit test and integration test suite to ensure that the updates do not break our
application.&lt;/p&gt;
&lt;h2 id="fix-security-vulnerabilities-in-yarn-video"&gt;&lt;a href="#fix-security-vulnerabilities-in-yarn-video" class="header-anchor"&gt;&lt;/a&gt;Fix security vulnerabilities in Yarn video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/59EpVz9mH_w"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item></channel></rss>