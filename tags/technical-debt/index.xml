<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technical Debt on Victor on Software</title><link>https://victoronsoftware.com/tags/technical-debt/</link><description>Recent content in Technical Debt on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/technical-debt/index.xml" rel="self" type="application/rss+xml"/><item><title>Why transparency beats everything else in engineering</title><link>https://victoronsoftware.com/posts/engineering-transparency/</link><pubDate>Tue, 12 Aug 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/engineering-transparency/</guid><description>&lt;img src="https://victoronsoftware.com/posts/engineering-transparency/engineering-transparency-headline.png" alt="Featured image of post Why transparency beats everything else in engineering" /&gt;&lt;p&gt;Have you ever felt like you&amp;rsquo;re working in a fog? Where everyone&amp;rsquo;s busy, everyone&amp;rsquo;s trying, but somehow nothing important
gets done? I&amp;rsquo;ve been there. The problem isn&amp;rsquo;t the people. It&amp;rsquo;s the system. And specifically, it&amp;rsquo;s the lack of
transparency and accountability.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#taking-action-what-you-can-do-when-you-have-no-visibility" &gt;Taking action: What you can do when you have no visibility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#key-takeaways" &gt;Key takeaways&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="the-weekly-dance-of-non-delivery"&gt;&lt;a href="#the-weekly-dance-of-non-delivery" class="header-anchor"&gt;&lt;/a&gt;The weekly dance of non-delivery
&lt;/h2&gt;&lt;p&gt;Let me take you back a couple of years. I was a tech lead at a large company, working on a project that depended on
another upstream engineering team. Every week, we&amp;rsquo;d have a joint meeting with both teams. And every week, I&amp;rsquo;d ask the
same question, trying to keep my tone professional:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Hey Alex, any update on that component we need from your side?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And every week, Alex would say:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Ah, I meant to, but I got pulled into something else. I&amp;rsquo;ll try to get to it this week.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At first, I gave it the benefit of the doubt. Stuff happens. Priorities shift.&lt;/p&gt;
&lt;p&gt;But then it kept happening. Two weeks, three, four. Same story. No progress. No accountability. No one stepping in.&lt;/p&gt;
&lt;p&gt;I was &lt;em&gt;boiling&lt;/em&gt; inside.&lt;/p&gt;
&lt;p&gt;I kept thinking:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Why is no one telling Alex to work on this? Why don&amp;rsquo;t we have a project manager? Who&amp;rsquo;s making the call on what really
matters?&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We technically had a roadmap. But let&amp;rsquo;s be honest: people didn&amp;rsquo;t actually take it seriously. If something couldn&amp;rsquo;t get
done, it quietly disappeared from the plan. Deadlines slipped. Commitments evaporated. Meanwhile, I had to face my boss
again with another non-update.&lt;/p&gt;
&lt;h2 id="years-in-the-fog"&gt;&lt;a href="#years-in-the-fog" class="header-anchor"&gt;&lt;/a&gt;Years in the fog
&lt;/h2&gt;&lt;p&gt;The frustration started eating at me. I&amp;rsquo;d sit in those meetings, and darker thoughts would creep in:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;How did Alex even get promoted? He can&amp;rsquo;t deliver anything.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Why am I killing myself here when clearly no one cares? Maybe I should take off for the rest of the day.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Maybe I should just get a side gig? At least someone would pay me for work that actually ships.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This situation wasn&amp;rsquo;t just a few bad weeks. It was years of my life, years of pretending everything was fine when it
wasn&amp;rsquo;t, years of wondering if this was just how companies worked.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d go home exhausted, not from hard work, but from the sheer weight of organizational dysfunction. My wife would ask
how my day was, and I&amp;rsquo;d just shrug. What was there to say? Another day, another meeting, another non-update.&lt;/p&gt;
&lt;h2 id="the-moment-of-clarity"&gt;&lt;a href="#the-moment-of-clarity" class="header-anchor"&gt;&lt;/a&gt;The moment of clarity
&lt;/h2&gt;&lt;p&gt;Then I switched companies.&lt;/p&gt;
&lt;p&gt;And everything changed.&lt;/p&gt;
&lt;p&gt;In my new company, everyone has access to clear company priorities: what we are building, why it is important, which
customer requests are critical, and who our key customers are. Engineers are empowered to make their own decisions based
on this shared context. If someone can&amp;rsquo;t deliver, they openly communicate why and offer alternatives grounded in the
company&amp;rsquo;s priorities.&lt;/p&gt;
&lt;p&gt;There is no hiding or pretending. Just reality, laid bare.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s when it hit me. The problem at my old company wasn&amp;rsquo;t Alex. He wasn&amp;rsquo;t slacking off. He was overwhelmed, like the
rest of us. Everyone was reacting to the noise instead of following the signal. No one had the authority or clarity to
say what actually mattered.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This wasn&amp;rsquo;t a communication problem. It was a trust and transparency problem.&lt;/strong&gt; And the absence of that created a
frustrating, demoralizing fog. Everyone thought they were doing the right thing, yet nothing moved forward.&lt;/p&gt;
&lt;p&gt;That experience changed my understanding of leadership.&lt;/p&gt;
&lt;p&gt;Because here&amp;rsquo;s the truth: Without shared visibility and shared accountability, even the best engineers will lose
direction. Polite status meetings won&amp;rsquo;t save you from a broken system.&lt;/p&gt;
&lt;p&gt;As leaders, our job isn&amp;rsquo;t just to set direction. It&amp;rsquo;s to make the invisible visible and to make sure it matters.&lt;/p&gt;
&lt;pre class="mermaid"&gt;
---
title: The hidden work iceberg
---
graph TD
subgraph Above[&amp;#34;üåä Above water&amp;lt;br/&amp;gt;What management sees&amp;#34;]
Spacer1[&amp;#34; &amp;#34;]
A1[&amp;#34;Weekly Status Updates&amp;lt;br/&amp;gt;‚úì &amp;#39;Working on it&amp;#39;&amp;#34;]
A2[&amp;#34;Sprint Deliverables&amp;lt;br/&amp;gt;‚úì &amp;#39;In progress&amp;#39;&amp;#34;]
A3[&amp;#34;Meeting Attendance&amp;lt;br/&amp;gt;‚úì &amp;#39;Present&amp;#39;&amp;#34;]
Spacer1 -.-&amp;gt; A1
Spacer1 -.-&amp;gt; A2
Spacer1 -.-&amp;gt; A3
end
subgraph Below[&amp;#34;üßä Below water&amp;lt;br/&amp;gt;The reality&amp;#34;]
direction TB
subgraph Row1[&amp;#34; &amp;#34;]
B1[&amp;#34;‚ùå Blocked by&amp;lt;br/&amp;gt;dependencies&amp;#34;]
B2[&amp;#34;‚ùå Unclear&amp;lt;br/&amp;gt;priorities&amp;#34;]
B3[&amp;#34;‚ùå Context&amp;lt;br/&amp;gt;switching&amp;#34;]
end
subgraph Row2[&amp;#34; &amp;#34;]
B4[&amp;#34;‚ùå Waiting for&amp;lt;br/&amp;gt;decisions&amp;#34;]
B5[&amp;#34;‚ùå Duplicate&amp;lt;br/&amp;gt;work&amp;#34;]
B6[&amp;#34;‚ùå Technical&amp;lt;br/&amp;gt;debt&amp;#34;]
end
subgraph Row3[&amp;#34; &amp;#34;]
B7[&amp;#34;‚ùå No authority&amp;lt;br/&amp;gt;to say no&amp;#34;]
B8[&amp;#34;‚ùå Overwhelmed&amp;lt;br/&amp;gt;with requests&amp;#34;]
end
end
Above -.-&amp;gt;|&amp;#34;Without Transparency&amp;#34;| Below
style Above fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000
style Below fill:#ffebee,stroke:#d32f2f,stroke-width:2px,color:#000
style Row1 fill:none,stroke:none
style Row2 fill:none,stroke:none
style Row3 fill:none,stroke:none
style Spacer1 fill:none,stroke:none
&lt;/pre&gt;
&lt;h2 id="taking-action-what-you-can-do-when-you-have-no-visibility"&gt;&lt;a href="#taking-action-what-you-can-do-when-you-have-no-visibility" class="header-anchor"&gt;&lt;/a&gt;Taking action: What you can do when you have no visibility
&lt;/h2&gt;&lt;p&gt;At the first level, you need to be aligned with your manager. You need to know your manager&amp;rsquo;s priorities, which means
knowing what your manager knows. You should strive to know about 90% of what your manager knows.&lt;/p&gt;
&lt;p&gt;If your manager attends cross-functional meetings with other managers where priorities and goals are discussed, you need
to know what&amp;rsquo;s happening at those meetings. There are a few ways to do that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Watch the recordings of those meetings. If they&amp;rsquo;re not recorded, ask if they could be.&lt;/li&gt;
&lt;li&gt;Read the meeting notes from those meetings. Could your company employ an AI notetaker?&lt;/li&gt;
&lt;li&gt;Ask your manager for a readout from those meetings in your weekly one-on-one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once you feel like you&amp;rsquo;re on the same page as your manager, repeat the process with your manager&amp;rsquo;s manager. If you&amp;rsquo;re
not meeting regularly with your manager&amp;rsquo;s manager, ask for a skip-level meeting and afterwards extend the ask for a
recurring skip-level meeting.&lt;/p&gt;
&lt;h3 id="how-to-ask-for-more-visibility"&gt;&lt;a href="#how-to-ask-for-more-visibility" class="header-anchor"&gt;&lt;/a&gt;How to ask for more visibility
&lt;/h3&gt;&lt;p&gt;Here&amp;rsquo;s a sample script you can adapt:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hey [Manager], I&amp;rsquo;ve been thinking about how I can be more effective in my role and better support our team&amp;rsquo;s goals.
I&amp;rsquo;d love to have more visibility into the broader priorities and context that drive our work.&lt;/p&gt;
&lt;p&gt;Specifically, I&amp;rsquo;m interested in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Understanding the key decisions and trade-offs being discussed in cross-functional meetings&lt;/li&gt;
&lt;li&gt;Getting insight into upcoming priorities that might affect our team&amp;rsquo;s roadmap&lt;/li&gt;
&lt;li&gt;Learning about dependencies or blockers other teams are facing that might impact us&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Would it be possible to either:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get access to recordings/notes from your planning meetings, or&lt;/li&gt;
&lt;li&gt;Have a brief weekly sync where you share the key takeaways?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I believe having this context would help me make better day-to-day decisions, spot potential issues earlier, and
contribute more strategically to our team&amp;rsquo;s success.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="key-takeaways"&gt;&lt;a href="#key-takeaways" class="header-anchor"&gt;&lt;/a&gt;Key takeaways
&lt;/h2&gt;&lt;p&gt;Looking back on my journey from frustration to clarity, here are the lessons that transformed how I work:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s not a communication problem, it&amp;rsquo;s a trust and transparency problem.&lt;/strong&gt; We had meetings. We had updates. What we
didn&amp;rsquo;t have was visibility into what actually mattered.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The absence of transparency creates a demoralizing fog.&lt;/strong&gt; When priorities aren&amp;rsquo;t clear and accountability doesn&amp;rsquo;t
exist, everyone thinks they&amp;rsquo;re doing the right thing while nothing moves forward.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Great engineers need visibility to thrive.&lt;/strong&gt; Alex wasn&amp;rsquo;t slacking. He was overwhelmed and reacting to noise instead of
signal because no one had the clarity to say what mattered.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You need to know what your manager knows.&lt;/strong&gt; Aim for 90% visibility into your manager&amp;rsquo;s context through meeting
recordings, notes, or regular readouts.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Leaders must make the invisible visible.&lt;/strong&gt; Their job isn&amp;rsquo;t just to set direction. It is to ensure that priorities,
trade-offs, and blockers are explicit and public.&lt;/p&gt;
&lt;p&gt;The fog I worked in for years wasn&amp;rsquo;t inevitable. It was a broken system where politeness trumped progress. You can build
better systems. You just need to start asking for and creating transparency.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../github-code-review-issues/" &gt;Top 3 issues with GitHub code review process&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Discover how poor visibility in code reviews creates bottlenecks and what you can do to improve team collaboration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../engineering-metrics-no-cost/" &gt;Full-featured engineering metrics‚Äîfor free&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Build transparency dashboards that make engineering work visible to everyone using free tools and GitHub data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../readable-code/" &gt;What is readable code and why is it important?&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Learn how code clarity impacts team velocity and why transparency starts at the code level.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-discuss-engineering-transparency"&gt;&lt;a href="#watch-us-discuss-engineering-transparency" class="header-anchor"&gt;&lt;/a&gt;Watch us discuss engineering transparency
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/3oSdwkC7iiI"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>6 business benefits of software modularity and cohesion</title><link>https://victoronsoftware.com/posts/software-modularity/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/software-modularity/</guid><description>&lt;img src="https://victoronsoftware.com/posts/software-modularity/software-modularity-headline.png" alt="Featured image of post 6 business benefits of software modularity and cohesion" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;strong&gt;technical debt&lt;/strong&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../readable-code/" &gt;Why readable code is essential&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" &gt;Incrementally scaling a codebase with evolutionary architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../code-complexity-metrics/" &gt;Top software code complexity metrics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="introduction"&gt;&lt;a href="#introduction" class="header-anchor"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;&lt;p&gt;Modularity and cohesion are key software engineering concepts that software engineers frequently misunderstand.
Frequently, software developers know that modularity is good in some vague general sense, but they can&amp;rsquo;t quantify the
benefits. This lack of understanding leads to poor decisions when adding new functionality or fixing system bugs, often
leading to the proverbial big ball of mud codebase. Sometimes, engineers feel like it is their manager or software
architect&amp;rsquo;s job to define the modules of a system, and they are simply responsible for implementing the details in the
quickest way they know how.&lt;/p&gt;
&lt;p&gt;This article provides
&lt;a class="link" href="#business-benefits-of-a-modular-codebase" &gt;specific reasons why using or adding modularity to your existing growing codebase is a good business decision&lt;/a&gt;.
Sometimes, engineers intuitively know how to do a good job, but they can&amp;rsquo;t explain it to business stakeholders. We try
to explain.&lt;/p&gt;
&lt;h2 id="its-all-about-complexity"&gt;&lt;a href="#its-all-about-complexity" class="header-anchor"&gt;&lt;/a&gt;It&amp;rsquo;s all about complexity
&lt;/h2&gt;&lt;p&gt;One of the challenging problems in software engineering is managing complexity. Modularity is a tool for managing
complexity. When we speak of complexity, we are referring to a mature, growing codebase with 10 or more software
developers. A young codebase with a couple of developers will benefit from modularity but not as much as a bigger, more
complex codebase.&lt;/p&gt;
&lt;p&gt;Bigger organizations must manage the complexity of both people and systems. People must be able to work independently at
maximum velocity without being slowed down by others. Systems must be simple enough to think about without being
overwhelmed. Complexity increases the cost of ownership of software because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;engineers cannot move at maximum velocity due to coupling to other teams or parts of the codebase&lt;/li&gt;
&lt;li&gt;engineers cannot understand the code, leading to slow development and more bugs&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="the-hero-engineer-anti-pattern"&gt;&lt;a href="#the-hero-engineer-anti-pattern" class="header-anchor"&gt;&lt;/a&gt;The &amp;ldquo;hero engineer&amp;rdquo; anti-pattern
&lt;/h3&gt;&lt;p&gt;Complex codebases often have &amp;ldquo;hero developers&amp;rdquo; who know the codebase and become the go-to people for solving critical
issues or implementing complex features. The prevalence of such heroes may be a sign that your codebase is too complex
and that you must change things to scale your business.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;hero engineer&amp;rdquo; may be contributing to the complexity issue by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;focusing on quick fixes rather than long-term solutions&lt;/li&gt;
&lt;li&gt;insisting that the current codebase is just fine because &amp;ldquo;that&amp;rsquo;s how we&amp;rsquo;ve always done it&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-modularity-and-cohesion"&gt;&lt;a href="#what-is-modularity-and-cohesion" class="header-anchor"&gt;&lt;/a&gt;What is modularity and cohesion
&lt;/h2&gt;&lt;p&gt;Modularity is the process of breaking up a complex system into smaller, independent, and interchangeable modules. Small
means small enough to easily understand. Independent means that we can compile and test the module independently of all
the other modules. Interchangeable means that we can substitute other implementations of modules in our system, which
often happens during testing.&lt;/p&gt;
&lt;p&gt;Cohesion refers to the degree to which the functionality inside a module belongs together. It is the metric we use for
creating modules. A good module has high cohesion. Logical changes in that module should generally not leak to other
modules. This metric means that a module comprising random functions is not a good one.&lt;/p&gt;
&lt;h2 id="business-benefits-of-a-modular-codebase"&gt;&lt;a href="#business-benefits-of-a-modular-codebase" class="header-anchor"&gt;&lt;/a&gt;Business benefits of a modular codebase
&lt;/h2&gt;&lt;h3 id="1-faster-development-and-easier-maintenance"&gt;&lt;a href="#1-faster-development-and-easier-maintenance" class="header-anchor"&gt;&lt;/a&gt;1. Faster development and easier maintenance
&lt;/h3&gt;&lt;p&gt;Modularity increases engineering velocity, which in turn lowers labor costs and reduces time to market. Since modules
are cohesive and easy to understand, engineers focus their changes on a limited set of modules without wading through
the whole codebase.&lt;/p&gt;
&lt;p&gt;Since modules are independent and interchangeable, they are easier to test. Writing tests becomes faster and easier.&lt;/p&gt;
&lt;h3 id="2-risk-reduction"&gt;&lt;a href="#2-risk-reduction" class="header-anchor"&gt;&lt;/a&gt;2. Risk reduction
&lt;/h3&gt;&lt;p&gt;A frequent occurrence in a complex codebase is that a change in one place introduces a bug in another seemingly
unrelated functionality. Because modules are cohesive and independent, a bug in one module is less likely to bring down
the entire system. Also, since modules are more straightforward to test, they are less likely to have bugs in the first
place.&lt;/p&gt;
&lt;h3 id="3-organizational-scalability"&gt;&lt;a href="#3-organizational-scalability" class="header-anchor"&gt;&lt;/a&gt;3. Organizational scalability
&lt;/h3&gt;&lt;p&gt;Management expects the software output to scale proportionally as the engineering organization scales. However, this is
not always the case. Adding more people to a codebase causes merge conflicts, ownership confusion, duplicated effort,
and communication overheads.&lt;/p&gt;
&lt;p&gt;Modularity allows engineers to work in parallel. Each person or team can work in parallel on their modules, minimizing
organizational coupling.&lt;/p&gt;
&lt;p&gt;The main reason microservices have become so popular is that engineers can work on them in parallel. The organizational
scalability benefits outweigh the added complexity of microservices.&lt;/p&gt;
&lt;h3 id="4-faster-onboarding"&gt;&lt;a href="#4-faster-onboarding" class="header-anchor"&gt;&lt;/a&gt;4. Faster onboarding
&lt;/h3&gt;&lt;p&gt;When new developers join the team, the engineering velocity often dips as senior developers help with onboarding.&lt;/p&gt;
&lt;p&gt;Since modules are small, they can &amp;ldquo;fit in your head&amp;rdquo; without having to understand all other parts of the system. New
developers can contribute more quickly by focusing their initial contributions on a limited set of modules. This
&amp;ldquo;simplicity&amp;rdquo; of the codebase means fewer distractions and less hand-holding for senior staff.&lt;/p&gt;
&lt;h3 id="5-flexibility"&gt;&lt;a href="#5-flexibility" class="header-anchor"&gt;&lt;/a&gt;5. Flexibility
&lt;/h3&gt;&lt;p&gt;Modularity gives the business more options for the product&amp;rsquo;s future direction since small modules are more
straightforward to modify or replace with new functionality.&lt;/p&gt;
&lt;p&gt;Modularity also allows engineers to experiment with newer and potentially better approaches. For example, an engineer
can try a different JSON library on one module. Engineering management would not consider such a library change in a
monolithic codebase since it would pose too much risk to existing functionality.&lt;/p&gt;
&lt;h3 id="6-professional-growth-for-software-engineers"&gt;&lt;a href="#6-professional-growth-for-software-engineers" class="header-anchor"&gt;&lt;/a&gt;6. Professional growth for software engineers
&lt;/h3&gt;&lt;p&gt;What about the engineers who have been with the company for years and are comfortable with (or used to) the current
monolithic approach?&lt;/p&gt;
&lt;p&gt;Modular software architectures are becoming the norm in the software industry. Building and maintaining a genuinely
modular codebase provides a valuable experience that engineers can carry to future projects within and beyond the
current company. If we interviewed a candidate whose preferred working style was to minimize the number of modules in
the codebase, that would be a serious red flag.&lt;/p&gt;
&lt;h2 id="downsides-of-a-modular-codebase"&gt;&lt;a href="#downsides-of-a-modular-codebase" class="header-anchor"&gt;&lt;/a&gt;Downsides of a modular codebase
&lt;/h2&gt;&lt;h3 id="1-initial-module-creation-overhead"&gt;&lt;a href="#1-initial-module-creation-overhead" class="header-anchor"&gt;&lt;/a&gt;1. Initial module creation overhead
&lt;/h3&gt;&lt;p&gt;Creating a new module requires defining its interface and directory structure and writing a new test harness. These
steps require more up-front work than simply dumping the code into an existing package.&lt;/p&gt;
&lt;h3 id="2-ci-complexity"&gt;&lt;a href="#2-ci-complexity" class="header-anchor"&gt;&lt;/a&gt;2. CI complexity
&lt;/h3&gt;&lt;p&gt;We can compile and test modules independently. To maximize the development speed of modules, each one can have its own
CI run. However, as the number of modules grows, this process can become complicated over time.&lt;/p&gt;
&lt;h3 id="3-cross-cutting-features-can-become-trickier"&gt;&lt;a href="#3-cross-cutting-features-can-become-trickier" class="header-anchor"&gt;&lt;/a&gt;3. Cross-cutting features can become trickier
&lt;/h3&gt;&lt;p&gt;Some features, such as security and auditing, affect multiple modules. Ensuring consistency while keeping modules
independent can require extra thought and coordination.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Check out our other articles in the &lt;strong&gt;technical debt&lt;/strong&gt; series. Links are at the top of this article.&lt;/li&gt;
&lt;li&gt;Recently, examined &lt;a class="link" href="../mermaid-intro/" &gt;the 4 key Mermaid diagrams for software developers&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Previously, we &lt;a class="link" href="../go-modules-and-packages/" &gt;explained the difference between Go modules and Go packages&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-explain-the-business-benefits-of-software-modularity"&gt;&lt;a href="#watch-us-explain-the-business-benefits-of-software-modularity" class="header-anchor"&gt;&lt;/a&gt;Watch us explain the business benefits of software modularity
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/UmSsmGFufTg"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>6 lessons from literate programming</title><link>https://victoronsoftware.com/posts/literate-programming-lessons/</link><pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/literate-programming-lessons/</guid><description>&lt;img src="https://victoronsoftware.com/posts/literate-programming-lessons/literate-programming-headline.png" alt="Featured image of post 6 lessons from literate programming" /&gt;&lt;p&gt;This article examines the literate programming paradigm introduced in 1984 by
&lt;a class="link" href="https://en.wikipedia.org/wiki/Donald_Knuth" target="_blank" rel="noopener"
&gt;Donald Knuth&lt;/a&gt;. We go through a &amp;ldquo;Hello World&amp;rdquo; example and extract the key
lessons relevant to making today&amp;rsquo;s software more readable and maintainable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#literate-programming-hello-world-example" &gt;Literate programming example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#key-takeaways-from-literate-programming" &gt;Key takeaways from literate programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-literate-programming"&gt;&lt;a href="#what-is-literate-programming" class="header-anchor"&gt;&lt;/a&gt;What is literate programming
&lt;/h2&gt;&lt;p&gt;Literate programming is a paradigm in which a computer program is written in a natural language, such as English. The
programming language source code is embedded into the program&amp;rsquo;s description. The aim was to create an artifact that a
human can easily read without jumping back and forth between different sections of the code file. The writer completely
controls the flow of the document, which can be reorganized in any fashion.&lt;/p&gt;
&lt;p&gt;Knuth called his implementation of literate programming &lt;a class="link" href="https://en.wikipedia.org/wiki/Web_%28programming_system%29" target="_blank" rel="noopener"
&gt;WEB&lt;/a&gt;
to emphasize that a computer program is built from many different pieces. He picked the name before the World Wide Web
was prominent. To produce source code, the user runs the &lt;strong&gt;tangle&lt;/strong&gt; command. To create documentation, the user runs the
&lt;strong&gt;weave&lt;/strong&gt; command.&lt;/p&gt;
&lt;h2 id="literate-programming-hello-world-example"&gt;&lt;a href="#literate-programming-hello-world-example" class="header-anchor"&gt;&lt;/a&gt;Literate programming &amp;ldquo;Hello World&amp;rdquo; example
&lt;/h2&gt;&lt;h3 id="writing-a-literate-program"&gt;&lt;a href="#writing-a-literate-program" class="header-anchor"&gt;&lt;/a&gt;Writing a literate program
&lt;/h3&gt;&lt;p&gt;To demonstrate literate programming, we will use the &lt;a class="link" href="https://github.com/nrnrnr/noweb" target="_blank" rel="noopener"
&gt;noweb&lt;/a&gt; literate programming tool
to write a simple program in Go.&lt;/p&gt;
&lt;p&gt;We create a &lt;code&gt;hello.nw&lt;/code&gt; file and start it with:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;This program teaches us how to print to the screen using:
&amp;lt;&amp;lt;print&amp;gt;&amp;gt;=
fmt.Println(message)
@
To print &amp;#34;Hello World&amp;#34;, pass a literal string to the function:
&amp;lt;&amp;lt;message&amp;gt;&amp;gt;=
&amp;#34;Hello World&amp;#34;
@
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We wrote the program in text with embedded code starting with &lt;code&gt;&amp;lt;&amp;lt;name&amp;gt;&amp;gt;=&lt;/code&gt; and ending with &lt;code&gt;@&lt;/code&gt;. The &lt;code&gt;&amp;lt;&amp;lt;name&amp;gt;&amp;gt;&lt;/code&gt; sections
are macros that we can reuse in other sections of the document, such as:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Now, we can create a function that prints a message:
&amp;lt;&amp;lt;mypackage_print&amp;gt;&amp;gt;=
func Print(message string) {
&amp;lt;&amp;lt;print&amp;gt;&amp;gt;
}
@
Finally, we can call this function from the main function:
&amp;lt;&amp;lt;main_call&amp;gt;&amp;gt;=
mypackage.Print(&amp;lt;&amp;lt;message&amp;gt;&amp;gt;)
@
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See &lt;a class="link" href="https://github.com/getvictor/noweb_example/blob/main/hello.nw" target="_blank" rel="noopener"
&gt;the complete literate program&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h3 id="generating-code-and-documentation-from-the-literate-program"&gt;&lt;a href="#generating-code-and-documentation-from-the-literate-program" class="header-anchor"&gt;&lt;/a&gt;Generating code and documentation from the literate program
&lt;/h3&gt;&lt;p&gt;To install the noweb tool with &lt;code&gt;brew&lt;/code&gt; on macOS, run the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install noweb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To generate the Go source code (tangle):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;notangle -Rgo.mod hello.nw &amp;gt; go.mod
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p mypackage
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;notangle -R&lt;span style="color:#e6db74"&gt;&amp;#39;mypackage/mypackage.go&amp;#39;&lt;/span&gt; hello.nw &amp;gt; mypackage/mypackage.go
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;notangle -Rmain.go hello.nw &amp;gt; main.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can run the program: &lt;code&gt;go run main.go&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To generate the HTML documentation (weave):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;noweave -html hello.nw &amp;gt; hello.html
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can open the &lt;code&gt;hello.html&lt;/code&gt; documentation in our web browser.&lt;/p&gt;
&lt;h2 id="key-takeaways-from-literate-programming"&gt;&lt;a href="#key-takeaways-from-literate-programming" class="header-anchor"&gt;&lt;/a&gt;Key takeaways from literate programming
&lt;/h2&gt;&lt;h3 id="1-the-developer-orders-the-code-for-maximum-readability"&gt;&lt;a href="#1-the-developer-orders-the-code-for-maximum-readability" class="header-anchor"&gt;&lt;/a&gt;1. The developer orders the code for maximum readability
&lt;/h3&gt;&lt;p&gt;Most of today&amp;rsquo;s programming languages were not designed with readability as their top guiding principle. They often
require the developer to put code in specific file sections, distracting the reader trying to understand the code. Some
examples include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;imports&lt;/li&gt;
&lt;li&gt;function and variable declarations, including nested functions&lt;/li&gt;
&lt;li&gt;error handling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Today&amp;rsquo;s IDEs (Integrated Development Environments) have tried to help with the situation by automatically collapsing
boilerplate sections. However, we have not seen them take the next step of entirely hiding or virtually relocating
distracting code. This area is where today&amp;rsquo;s programming languages and IDEs need to improve.&lt;/p&gt;
&lt;h3 id="2-comments-are-first-class-citizens"&gt;&lt;a href="#2-comments-are-first-class-citizens" class="header-anchor"&gt;&lt;/a&gt;2. Comments are first-class citizens
&lt;/h3&gt;&lt;p&gt;In literate programming, comments (natural language) are the main body of the program. Source code, on the other hand,
is delegated to macros. Comments are easy to write and can be enhanced with additional processing, such as Markdown,
Mermaid diagrams, etc.&lt;/p&gt;
&lt;p&gt;Many of today&amp;rsquo;s language toolchains also have processors that generate HTML documentation from the comments. However,
none can mix arbitrary pieces of code with their documentation.&lt;/p&gt;
&lt;p&gt;Linting requirements to include comments often lead to meaningless comments that make the code less readable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// This is a class.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Today, the closest mainstream approaches to literate programming are computational notebooks such as
&lt;a class="link" href="https://jupyter.org/" target="_blank" rel="noopener"
&gt;Jupyter&lt;/a&gt; and various online tutorials. These are great for sharing examples and small programs
with others but not sufficient for larger software projects.&lt;/p&gt;
&lt;p&gt;Some IDEs support rendering comments in a different style than the rest of the code, including rendering diagrams.
However, no standard works across IDEs and version control hosting systems like GitHub.&lt;/p&gt;
&lt;h3 id="3-code-from-multiple-source-files-can-be-present-in-one-place"&gt;&lt;a href="#3-code-from-multiple-source-files-can-be-present-in-one-place" class="header-anchor"&gt;&lt;/a&gt;3. Code from multiple source files can be present in one place
&lt;/h3&gt;&lt;p&gt;Literate programming allows us to include arbitrary source files in one program file. This behavior is helpful when you
want to keep related code in one place, such as an interface (abstract class) and its implementation.&lt;/p&gt;
&lt;p&gt;Modern IDEs can find all the implementations of an interface and often have a quick shortcut, allowing the developer to
jump between the two.&lt;/p&gt;
&lt;p&gt;Developers may also write their own preprocessors that split a single file into several modules or compile units.&lt;/p&gt;
&lt;p&gt;Although having more code in one file is sometimes useful, today&amp;rsquo;s developers typically have issues with splitting and
decoupling code files that have become too large and are no longer scalable.&lt;/p&gt;
&lt;h3 id="4-writing-code-is-more-difficult"&gt;&lt;a href="#4-writing-code-is-more-difficult" class="header-anchor"&gt;&lt;/a&gt;4. Writing code is more difficult
&lt;/h3&gt;&lt;p&gt;The main issue with literate programming is that it makes writing code much more difficult for the developer. It
introduces another level of abstraction and another set of tools and concepts that the software developer must be
familiar with.&lt;/p&gt;
&lt;p&gt;This general lesson applies to any system that tries to enhance the coding experience by adding another layer between
the user and the code. The new system must provide overwhelming benefits for software developers to switch to it.
TypeScript is an example of a successful layer over JavaScript.&lt;/p&gt;
&lt;h3 id="5-macros-make-reading-code-more-difficult"&gt;&lt;a href="#5-macros-make-reading-code-more-difficult" class="header-anchor"&gt;&lt;/a&gt;5. Macros make reading code more difficult
&lt;/h3&gt;&lt;p&gt;The literate program contains macros with their own names, adding to the namespace of functions and variables already
present in the computer program. These additional names increase the cognitive load of both reading and creating
literate programs.&lt;/p&gt;
&lt;p&gt;Today&amp;rsquo;s standard guidance is to make your variable and function names descriptive so the reader knows what they do
without additional comments. We can effectively replicate much of literate programming by replacing the literate
programming macros with our own well-named functions and ordering these functions in a file for maximum comprehension.&lt;/p&gt;
&lt;h3 id="6-no-tooling-support"&gt;&lt;a href="#6-no-tooling-support" class="header-anchor"&gt;&lt;/a&gt;6. No tooling support
&lt;/h3&gt;&lt;p&gt;Since literate programming is not widely used, it has little to no tooling support, syntax highlighting, or IDE support.
There is also no standard build system. Instead, the literate programming user must maintain their own custom build
system for the &amp;ldquo;tangle&amp;rdquo; and &amp;ldquo;weave&amp;rdquo; flows.&lt;/p&gt;
&lt;h2 id="see-literate-programming-example-code-on-github"&gt;&lt;a href="#see-literate-programming-example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;See literate programming example code on GitHub
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://github.com/getvictor/noweb_example" target="_blank" rel="noopener"
&gt;Literate programming example using noweb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Previously, we explained &lt;a class="link" href="../readable-code/" &gt;what readable code is and why it is important&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also reviewed &lt;a class="link" href="../code-complexity-metrics/" &gt;the top code complexity metrics&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-the-literate-programming-example-and-takeaways"&gt;&lt;a href="#watch-the-literate-programming-example-and-takeaways" class="header-anchor"&gt;&lt;/a&gt;Watch the literate programming example and takeaways
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/8cwxxioVbfA"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Top code complexity metrics every software dev should know</title><link>https://victoronsoftware.com/posts/code-complexity-metrics/</link><pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/code-complexity-metrics/</guid><description>&lt;img src="https://victoronsoftware.com/posts/code-complexity-metrics/code-complexity-headline.png" alt="Featured image of post Top code complexity metrics every software dev should know" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;strong&gt;technical debt&lt;/strong&gt;. Check out the previous articles:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../readable-code/" &gt;Ways to improve your code for readability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" &gt;How to scale a codebase with evolutionary architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="intro-to-code-complexity-metrics"&gt;&lt;a href="#intro-to-code-complexity-metrics" class="header-anchor"&gt;&lt;/a&gt;Intro to code complexity metrics
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#code-style" &gt;Code style&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#code-size" &gt;Code size&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#cyclomatic-complexity" &gt;Cyclomatic complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#cognitive-complexity" &gt;Cognitive complexity&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the previous article on &lt;a class="link" href="../readable-code/" &gt;readable code&lt;/a&gt;, we discussed a few metrics for measuring unreadable code.
In this article, we will expand on some of those ideas and specifically focus on code complexity.&lt;/p&gt;
&lt;p&gt;Code complexity primarily refers to the difficulty of understanding a piece of code or a piece of the codebase, such as
a module. Complex code is difficult to modify because engineers must spend considerable mental energy to understand it.
Frequently, engineers will not understand the code well enough, so they&amp;rsquo;ll make a change to fix a bug, and the change
will introduce a new bug somewhere else. Lack of understanding also leads to
&lt;a class="link" href="https://victoronsoftware.com/posts/common-refactorings/#why-are-engineers-afraid-of-refactoring" target="_blank" rel="noopener"
&gt;a fear of refactoring&lt;/a&gt;,
because engineers don&amp;rsquo;t want to break the codebase.&lt;/p&gt;
&lt;h2 id="code-complexity-metrics"&gt;&lt;a href="#code-complexity-metrics" class="header-anchor"&gt;&lt;/a&gt;Code complexity metrics
&lt;/h2&gt;&lt;p&gt;Many code complexity measures overlap since they all try to measure the same thing.&lt;/p&gt;
&lt;h3 id="code-style"&gt;&lt;a href="#code-style" class="header-anchor"&gt;&lt;/a&gt;Code style
&lt;/h3&gt;&lt;p&gt;A standard code style is helpful for readability. For example, if I opened a file and saw that it had no indentation,
the max line length was 20, and somebody named all the variables with a leading &lt;code&gt;iwuzhere&lt;/code&gt;, I would be confused. I would
have to stop and carefully process the file. I would not have to slow down if the code style were consistent.&lt;/p&gt;
&lt;p&gt;The metric to track is the number of code style violations or the number of files violating the code style. Most
companies enforce a code style with their CI pipeline. Modern tooling can automatically reformat code to match the
agreed-upon code style, so code style should no longer be a complexity or readability issue.&lt;/p&gt;
&lt;h3 id="code-size"&gt;&lt;a href="#code-size" class="header-anchor"&gt;&lt;/a&gt;Code size
&lt;/h3&gt;&lt;p&gt;How much code is there? The more code there is, the longer it takes to read and understand it. The common metrics are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;program size or lines of code (LOC)
&lt;ul&gt;
&lt;li&gt;in a function&lt;/li&gt;
&lt;li&gt;in a file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;number of functions/classes/modules/files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The motivation for tracking these metrics is to help engineers split their functions/files/projects into smaller, more
manageable pieces. James Lewis from ThoughtWorks said that &amp;ldquo;a microservice should be as big as my head.&amp;rdquo; His idea is
that one person should be able to understand the entire codebase. The smaller the piece of code, the easier it is to
understand.&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://en.wikipedia.org/wiki/Halstead_complexity_measures" target="_blank" rel="noopener"
&gt;Halstead introduced a set of software complexity measures&lt;/a&gt;
in 1977, and one of his metrics was the Halstead volume, which is directly related to code size. We can approximate the
Halstead volume by ignoring all comments and whitespace, then multiplying the average code line length by the number of
lines of code. This approximation is a good enough metric for our purposes.&lt;/p&gt;
&lt;h3 id="cyclomatic-complexity"&gt;&lt;a href="#cyclomatic-complexity" class="header-anchor"&gt;&lt;/a&gt;Cyclomatic complexity
&lt;/h3&gt;&lt;p&gt;&lt;a class="link" href="https://en.wikipedia.org/wiki/Cyclomatic_complexity" target="_blank" rel="noopener"
&gt;Cyclomatic complexity&lt;/a&gt; measures the number of linearly independent
paths through a program&amp;rsquo;s source code. It is often used as the master metric for code complexity, uncovering
maintainability and hard-to-test parts of the codebase.&lt;/p&gt;
&lt;p&gt;A typical calculation of cyclomatic complexity is as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 is the base complexity for a function&lt;/li&gt;
&lt;li&gt;for each &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, or other branching statement, add 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A good cyclomatic complexity is 10 or less. A score of 20 or more is generally considered difficult to understand. This
metric encourages us to write smaller functions.&lt;/p&gt;
&lt;h3 id="cognitive-complexity"&gt;&lt;a href="#cognitive-complexity" class="header-anchor"&gt;&lt;/a&gt;Cognitive complexity
&lt;/h3&gt;&lt;p&gt;An alternative to cyclomatic complexity is
&lt;a class="link" href="https://www.sonarsource.com/docs/CognitiveComplexity.pdf" target="_blank" rel="noopener"
&gt;cognitive complexity&lt;/a&gt;. This metric tries to adjust the
cyclomatic complexity metric to focus on the human reader&amp;rsquo;s mental load &amp;ndash; on the maintainability, and not on the
testability, of the code.&lt;/p&gt;
&lt;p&gt;The key differences in the calculation are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for nested structures, extra incremental penalties are added&lt;/li&gt;
&lt;li&gt;recursion is penalized&lt;/li&gt;
&lt;li&gt;jumps to labels, such as &lt;code&gt;goto LABEL&lt;/code&gt;, are penalized&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switch&lt;/code&gt; is preferred over nested &lt;code&gt;if&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;groups of similar logical operators are NOT penalized
&lt;ul&gt;
&lt;li&gt;for example, &lt;code&gt;a &amp;amp;&amp;amp; b &amp;amp;&amp;amp; c &amp;amp;&amp;amp; d&lt;/code&gt; is easier to understand than &lt;code&gt;a &amp;amp;&amp;amp; b || c &amp;amp;&amp;amp; d&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This metric is more difficult to calculate than cyclomatic complexity, but it is generally considered a better
approximation of code complexity. Many companies are adopting this metric.&lt;/p&gt;
&lt;h2 id="tool-and-language-specific-considerations"&gt;&lt;a href="#tool-and-language-specific-considerations" class="header-anchor"&gt;&lt;/a&gt;Tool and language-specific considerations
&lt;/h2&gt;&lt;p&gt;Modern tools can help with code maintainability issues. For example, AI tools that index the codebase can help explain
how a piece of code (or a feature) works. IDEs can also help by collapsing boilerplate code or improving readability in
other ways.&lt;/p&gt;
&lt;p&gt;In the Go programming language, the idiomatic way to check for errors is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;err&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code is repeated everywhere and is typically collapsed by modern IDEs. However, cyclomatic complexity and
cognitive complexity metrics penalize it.&lt;/p&gt;
&lt;p&gt;We need a complexity tool where the user can adjust the penalties. This way, an engineering team can agree on what is
considered complex code based on their experience, language, and code style.&lt;/p&gt;
&lt;h3 id="go-complexity-metrics"&gt;&lt;a href="#go-complexity-metrics" class="header-anchor"&gt;&lt;/a&gt;Go complexity metrics
&lt;/h3&gt;&lt;p&gt;For measuring cyclomatic complexity, Go has &lt;a class="link" href="https://github.com/fzipp/gocyclo" target="_blank" rel="noopener"
&gt;gocyclo&lt;/a&gt;. For measuring cognitive
complexity, there is &lt;a class="link" href="https://github.com/uudashr/gocognit" target="_blank" rel="noopener"
&gt;gocognit&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="what-is-modularity-and-why-is-it-important"&gt;&lt;a href="#what-is-modularity-and-why-is-it-important" class="header-anchor"&gt;&lt;/a&gt;What is modularity and why is it important
&lt;/h3&gt;&lt;p&gt;In the next article of this &lt;strong&gt;technical debt&lt;/strong&gt; series, we
&lt;a class="link" href="../software-modularity/" &gt;explain what is modularity and why it is important for modern scalable software systems&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a class="link" href="../engineering-metrics-no-cost/" &gt;Track your team‚Äôs engineering performance with open-source tools&lt;/a&gt;&lt;br&gt;
A step-by-step guide to setting up meaningful metrics using free-tier infrastructure‚Äîno SaaS subscriptions required.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Recently, we &lt;a class="link" href="../literate-programming-lessons/" &gt;showed an example and key takeaways from literate programming&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We also wrote &lt;a class="link" href="../ai-for-software-developers/" &gt;an overview of using AI in software development&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-discuss-and-show-examples-of-code-complexity-metrics"&gt;&lt;a href="#watch-us-discuss-and-show-examples-of-code-complexity-metrics" class="header-anchor"&gt;&lt;/a&gt;Watch us discuss and show examples of code complexity metrics
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/HzZQqrhX3cg"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Top code refactorings every software engineer should know</title><link>https://victoronsoftware.com/posts/common-refactorings/</link><pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/common-refactorings/</guid><description>&lt;img src="https://victoronsoftware.com/posts/common-refactorings/common-refactorings-headline.png" alt="Featured image of post Top code refactorings every software engineer should know" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#extract-method-aka-extract-function" &gt;Extract method (aka extract function)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#inline-variable" &gt;Inline variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#extract-variable" &gt;Extract variable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#inline-method-aka-inline-function" &gt;Inline method (aka inline function)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-code-refactoring"&gt;&lt;a href="#what-is-code-refactoring" class="header-anchor"&gt;&lt;/a&gt;What is code refactoring?
&lt;/h2&gt;&lt;p&gt;Code refactoring involves modifying existing software code without changing its observable behavior. Refactoring improves the code base&amp;rsquo;s readability and maintainability. See our previous article on &lt;a class="link" href="../readable-code/" &gt;why readable code is important&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="why-are-engineers-afraid-of-refactoring"&gt;&lt;a href="#why-are-engineers-afraid-of-refactoring" class="header-anchor"&gt;&lt;/a&gt;Why are engineers afraid of refactoring?
&lt;/h2&gt;&lt;p&gt;Refactoring is essential to software development and should be done regularly as part of day-to-day work. Unfortunately, many engineers are afraid of refactoring, don&amp;rsquo;t know how to do it, or don&amp;rsquo;t consider it part of their job responsibilities.&lt;/p&gt;
&lt;p&gt;Some engineers fear that refactoring will introduce bugs or break existing functionality. The root cause of this fear is the lack of automated tests. Without automated tests, ensuring that the refactored code behaves as expected is difficult. A code base without automated tests is a ticking time bomb and cannot be maintained by any sane engineer. Before refactoring code in such a code base, you should add automated tests for the targeted code.&lt;/p&gt;
&lt;p&gt;Other engineers fear that refactoring will take too much time. This fear is often unfounded, as refactoring can be done incrementally and in small steps. For example, after refactoring the code for an hour or less, merge your changes to your main branch and, if needed, continue doing the next small refactoring steps. Your organization should never allocate weeks of development for &amp;ldquo;large refactorings.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Engineers may also fear refactoring because they don&amp;rsquo;t want to make too many changes to the code, making it difficult for reviewers to review the changes. The issue is that many current code review systems don&amp;rsquo;t understand the code changes&amp;rsquo; semantics (i.e., the meaning). These systems only understand line changes and are frequently confused by relocated code. In this case, the coder should explain the changes to the reviewer. Alternatively, the organization can adopt a better code review tool. For a further discussion of &lt;a class="link" href="../github-code-review-issues/" &gt;issues with GitHub code reviews, see our previous article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article will show some common refactorings you can safely do with automation from your IDE (Integrated Development Environment).&lt;/p&gt;
&lt;h2 id="extract-method-aka-extract-function"&gt;&lt;a href="#extract-method-aka-extract-function" class="header-anchor"&gt;&lt;/a&gt;Extract method (aka extract function)
&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;extract method&lt;/code&gt; refactoring takes a piece of code and moves it into a new method. There are several reasons to do this, all of which improve the readability and maintainability of the code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The code is too long and must be broken into smaller, more manageable pieces.&lt;/li&gt;
&lt;li&gt;The code is duplicated in multiple places and needs to be consolidated into a single method.&lt;/li&gt;
&lt;li&gt;We want to separate the code implementation from the code intention. The code implementation is what the code does, and the code intention is why it does it. Move the code implementation into its own method and name the new method based on the code intention.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, consider the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pt&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;PackageTest&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;expandPackages&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;slices&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ContainsFunc&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contains&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// lots more code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When entering the &lt;code&gt;expandPackages&lt;/code&gt; method, the reader is immediately confronted with a complex expression. They must stop and think about what the code does. Even though the amount of code is small, it still hampers readability. The code implementation is mixed with the code intention. One way to improve the situation is to add a comment. A better way is to extract the code into its own method and name the new method based on the code intention.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pt&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;PackageTest&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;expandPackages&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;needExpansion&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// lots more code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;needExpansion&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;packages&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;slices&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ContainsFunc&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;packages&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contains&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most IDEs automatically perform this refactoring. Highlight the code you want to extract, open the refactoring menu, and select the &lt;code&gt;Extract Method&lt;/code&gt; option.&lt;/p&gt;
&lt;h2 id="inline-variable"&gt;&lt;a href="#inline-variable" class="header-anchor"&gt;&lt;/a&gt;Inline variable
&lt;/h2&gt;&lt;p&gt;Every variable should have a purpose and a good explanatory name that describes its intent. As the number of variables grows in a method, it becomes increasingly difficult to understand the code. One way to improve the readability of the code is to inline variables. Inlining a variable is replacing the variable with the right-hand side of the assignment.&lt;/p&gt;
&lt;p&gt;For example, consider the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;packageDependency&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;chain&lt;/span&gt;() (&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// lots more code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The variable &lt;code&gt;name&lt;/code&gt; does not add any value to the code. It is simply a copy of the &lt;code&gt;pd.name&lt;/code&gt; field. We can inline the variable to improve the readability of the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;packageDependency&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;chain&lt;/span&gt;() (&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;int&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt; &lt;span style="color:#f92672"&gt;==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;\n&amp;#34;&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// lots more code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Many IDEs automatically perform this refactoring. Highlight the variable you want to inline, open the refactoring menu, and select the &lt;code&gt;Inline&lt;/code&gt; option.&lt;/p&gt;
&lt;h2 id="extract-variable"&gt;&lt;a href="#extract-variable" class="header-anchor"&gt;&lt;/a&gt;Extract variable
&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;extract variable&lt;/code&gt; refactoring takes a complex expression and moves it into a new variable. Mechanically, it is the opposite of the above &lt;code&gt;inline variable&lt;/code&gt; refactoring. There are several reasons to do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The expression is complex and must be broken into smaller, more manageable pieces.&lt;/li&gt;
&lt;li&gt;The meaning of the expression is unclear and needs to be clarified with a descriptive variable name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sometimes, you have a choice between extracting a method or a variable. In general, you should extract a method to make the code more readable. However, if the method is only used once and the parent function is not complex, it may be better to extract a variable.&lt;/p&gt;
&lt;p&gt;For example, consider the same code from our &lt;code&gt;extract method&lt;/code&gt; example above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pt&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;PackageTest&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;expandPackages&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;slices&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ContainsFunc&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contains&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// lots more code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can extract the complex expression into a variable to improve the readability of the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pt&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;PackageTest&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;expandPackages&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;needExpansion&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;slices&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ContainsFunc&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;, &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;strings&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contains&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;...&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; !&lt;span style="color:#a6e22e"&gt;needExpansion&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// lots more code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Many IDEs automatically perform this refactoring. Highlight the expression you want to extract, open the refactoring menu, and select the &lt;code&gt;Extract Variable&lt;/code&gt; or &lt;code&gt;Introduce Variable&lt;/code&gt; option.&lt;/p&gt;
&lt;h2 id="inline-method-aka-inline-function"&gt;&lt;a href="#inline-method-aka-inline-function" class="header-anchor"&gt;&lt;/a&gt;Inline method (aka inline function)
&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;inline method&lt;/code&gt; refactoring takes a method and moves its code into the caller. Mechanically, it is the opposite of the &lt;code&gt;extract method&lt;/code&gt; refactoring. There are several reasons to do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The method is too simple, and its body is as clear as its name.&lt;/li&gt;
&lt;li&gt;We want to simplify code and remove a level of indirection.&lt;/li&gt;
&lt;li&gt;We must regroup code into a single method before proceeding with a better refactoring.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, consider the following code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// method code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;dep&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;has&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;expandedPackages&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// more coe ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt; &lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;packageDependency&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;has&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;bool&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;slices&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contains&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;pkgs&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can inline the &lt;code&gt;has&lt;/code&gt; method:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// method code ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;slices&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Contains&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;expandedPackages&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;pd&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;name&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// more coe ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Many IDEs automatically perform this refactoring. Highlight the method call you want to inline, open the refactoring menu, and select the &lt;code&gt;Inline Function/Method&lt;/code&gt; option.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;The code examples above are from our article on &lt;a class="link" href="../go-package-dependencies/" &gt;finding package dependencies of a Go package&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also discussed &lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" &gt;how to scale your codebase with evolutionary architecture&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;And &lt;a class="link" href="../analyze-go-build/" &gt;how to analyze Go build times&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-examples-of-top-code-refactorings"&gt;&lt;a href="#watch-examples-of-top-code-refactorings" class="header-anchor"&gt;&lt;/a&gt;Watch examples of top code refactorings
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Mzj9XQlieHk"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>How to scale your codebase with evolutionary architecture</title><link>https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/</link><pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/</guid><description>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/evolutionary-architecture-headline.png" alt="Featured image of post How to scale your codebase with evolutionary architecture" /&gt;&lt;p&gt;&lt;em&gt;This article is part of a series on &lt;strong&gt;technical debt&lt;/strong&gt;. Check out the previous article:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="../readable-code/" &gt;Why readable code is important and how to refactor code for readability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="intro-to-evolutionary-architecture"&gt;&lt;a href="#intro-to-evolutionary-architecture" class="header-anchor"&gt;&lt;/a&gt;Intro to evolutionary architecture
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#current-architecture" &gt;Current architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#problems-with-the-current-architecture" &gt;Problems with the current architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#good-architecture" &gt;Good architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#evolutionary-architecture" &gt;Evolutionary architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Evolutionary architecture refers to a software design approach that embraces change as a fundamental aspect of system
development. Instead of aiming to create a fixed and perfect architecture upfront, it allows the system to evolve in
response to new requirements, technologies, and insights. Evolutionary architecture is a critical tool for reducing
technical debt.&lt;/p&gt;
&lt;p&gt;Evolutionary design, or incremental design, is another term for this approach. Generally, evolutionary design refers to
changes on a smaller scale, such as refactoring code or adding new features. On the other hand, evolutionary
architecture refers to changes on a larger scale, such as reorganizing the codebase or splitting a monolithic
application into microservices. That said, there is no strict boundary between the two terms. We will use the term
evolutionary architecture.&lt;/p&gt;
&lt;p&gt;In this article, we provide an example of scaling your codebase to accommodate a growing number of features and
developers.&lt;/p&gt;
&lt;h2 id="current-architecture"&gt;&lt;a href="#current-architecture" class="header-anchor"&gt;&lt;/a&gt;Current architecture
&lt;/h2&gt;&lt;p&gt;We base our example on a theoretical codebase, but real-world experiences inspire it. The problems and solutions we
discuss are common in software development, especially in startups and small companies.&lt;/p&gt;
&lt;p&gt;The initial state of our example codebase is a web application developed in a mono-repository. The application was built
from the ground up with a simple architecture, focusing on adding new features and finding product-market fit.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/current-design.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Current design with a few large modules.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The current design divides the codebase into a few large modules. We use the term &lt;em&gt;module&lt;/em&gt; to mean a logical grouping of
code in the same files and directories.&lt;/p&gt;
&lt;p&gt;However, after a couple of years, the application has grown significantly in features, complexity, and team size. The
organization now has three product teams working on different functional areas of the application. No one has updated
the initial architecture, which is insufficient to support the growing codebase and development team.&lt;/p&gt;
&lt;h2 id="problems-with-the-current-architecture"&gt;&lt;a href="#problems-with-the-current-architecture" class="header-anchor"&gt;&lt;/a&gt;Problems with the current architecture
&lt;/h2&gt;&lt;p&gt;A significant problem that the engineering team has been facing is &lt;strong&gt;an increase in bugs and a longer time to fix
them&lt;/strong&gt;. The code for each feature is sprinkled throughout the codebase and tightly coupled to other seemingly unrelated
features. This complexity makes it difficult to understand, test, and keep existing features working as new ones are
added.&lt;/p&gt;
&lt;p&gt;Speaking of new features, the team has been struggling to add them on time. The codebase has become a tangled web of
dependencies, and any change in one part of the codebase can have unintended consequences in other parts. Adding a
feature requires modifying many parts of the codebase, which requires understanding the entire codebase, which many
developers lack. The lack of knowledge and the changes to many parts of the codebase have led to &lt;strong&gt;features taking
significantly longer to implement&lt;/strong&gt; than initially estimated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Maintaining feature branches&lt;/strong&gt; for over a few days and making patch fixes to existing releases has become impossible.
The codebase is so intertwined that any changes may cause merge conflicts. The increased likelihood of merge conflicts
has discouraged developers from refactoring and cleaning up the code base. This tendency to leave the code as-is has
perpetuated the slide in code quality.&lt;/p&gt;
&lt;p&gt;Tests have also become a problem. The &lt;strong&gt;test suite has been in a frequent state of disrepair&lt;/strong&gt;. There is no clear
ownership of tests, so engineers have been reluctant to fix them. Some engineers have stopped paying attention to
failing CI alerts, figuring that the problems are caused by one of the other two teams.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tests have also become slower&lt;/strong&gt; and slower, especially the integration tests that test the API and include the service
layer, the datastore layer, and an actual database. These tests do not run in parallel; every additional feature slows
down the compile and increases test time. Test files have become bloated with tests for multiple features, making them
slow to load in the editor, difficult to navigate, and impossible to diff for PR reviews.&lt;/p&gt;
&lt;p&gt;Finally, the &lt;strong&gt;onboarding time for new developers has been growing&lt;/strong&gt;. It takes weeks for new developers to understand
the codebase and start contributing.&lt;/p&gt;
&lt;h2 id="good-architecture"&gt;&lt;a href="#good-architecture" class="header-anchor"&gt;&lt;/a&gt;Good architecture
&lt;/h2&gt;&lt;p&gt;At this point in the company&amp;rsquo;s life, an exemplary architecture would be separate groups of modules corresponding to the
three product teams.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/ideal-design.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Good design with dedicated modules for each product team.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Each team would be responsible for its own set of modules, which aligns with Agile principles. The modules would be
loosely coupled, and the teams would be able to work independently on their features without affecting other teams. The
amount of code that each engineer has to understand and change would be drastically reduced.&lt;/p&gt;
&lt;p&gt;This architecture would have eliminated or significantly reduced the problems that the engineering team has been facing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The reduced complexity and increased understanding of the codebase would lead to fewer and faster to fix bugs&lt;/li&gt;
&lt;li&gt;Faster feature development due to cleaner code and fewer dependencies&lt;/li&gt;
&lt;li&gt;Reduced merge conflicts for PRs, especially for database migrations and schema changes&lt;/li&gt;
&lt;li&gt;Rarely failing test suite due to clear ownership of tests&lt;/li&gt;
&lt;li&gt;Faster tests due to each team focusing on testing their slice of the product. Limited complete product integration
tests would still be present.&lt;/li&gt;
&lt;li&gt;Faster onboarding time for new developers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, the company does not have this architecture. Building this architecture upfront would have been foolish since
it would have consumed critical engineering time. Yes, there was value in creating this structure upfront because it
would have saved time in the long run, but this value was insufficient for a young company that may not be around in a
few months.&lt;/p&gt;
&lt;h2 id="evolutionary-architecture"&gt;&lt;a href="#evolutionary-architecture" class="header-anchor"&gt;&lt;/a&gt;Evolutionary architecture
&lt;/h2&gt;&lt;p&gt;Many companies and engineers find themselves in this situation. They have a codebase with poor architecture for today&amp;rsquo;s
reality, blame the organization for not thinking about these problems earlier, and feel like they can&amp;rsquo;t improve the
situation.&lt;/p&gt;
&lt;p&gt;Evolutionary architecture is a way to incrementally improve the architecture of a codebase without having to do a big
rewrite. It is a way to make the codebase better today than it was yesterday and better tomorrow than it is today.&lt;/p&gt;
&lt;p&gt;This situation is not unique to this company. It is the norm. Most companies start with a simple architecture and
codebase that is good enough for the first few features. As the company grows, the architecture becomes a bottleneck.
Instead of worrying about not making the right decisions in the past, consider where the architecture needs to be a year
or two from now and start moving towards that.&lt;/p&gt;
&lt;p&gt;For example, when adding a new prominent feature to the product, decouple it from the rest of the codebase.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/evolutionary-design.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Evolutionary design with big features going into dedicated modules.&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Our example shows all the modules decoupled, but it may be OK to decouple one or two.&lt;/p&gt;
&lt;p&gt;Decoupling a feature from the rest of the codebase has many benefits similar to those we listed above for &amp;ldquo;good
architecture.&amp;rdquo; Additional benefits include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most of the feature can be tested by itself, reducing test time.&lt;/li&gt;
&lt;li&gt;The business gets the option to create a new team dedicated to the feature quickly &amp;ndash; the code is already
separate/independent&lt;/li&gt;
&lt;li&gt;Engineering can scale the feature separately from the rest of the product. For example, assign a dedicated database or
split the feature into a microservice.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code-example-of-splitting-the-database-schema"&gt;&lt;a href="#code-example-of-splitting-the-database-schema" class="header-anchor"&gt;&lt;/a&gt;Code example of splitting the database schema
&lt;/h2&gt;&lt;p&gt;It is nice to read about a theoretical example, but seeing an actual code example is even better. In this code example,
we begin with a monolithic application that has a single database schema. We then split the schema into two separate
schemas. It is the starting point and a reference for decoupling a new feature from the rest of the codebase. Since this
code example is a bit long and requires some context regarding the current implementation, we will not cover it in this
article. Instead, &lt;a class="link" href="https://www.youtube.com/watch?v=Li1GZzQVXWw&amp;amp;t=1070s" target="_blank" rel="noopener"
&gt;jump to the code example section&lt;/a&gt; of the video
below.&lt;/p&gt;
&lt;p&gt;Link to the
&lt;a class="link" href="https://github.com/fleetdm/fleet/compare/main...victor/feature-set-up" target="_blank" rel="noopener"
&gt;source code example decoupling a new backend feature from the rest of the codebase&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="track-code-complexity-metrics"&gt;&lt;a href="#track-code-complexity-metrics" class="header-anchor"&gt;&lt;/a&gt;Track code complexity metrics
&lt;/h2&gt;&lt;p&gt;In the next article of this &lt;strong&gt;technical debt&lt;/strong&gt; series, we
&lt;a class="link" href="../code-complexity-metrics/" &gt;go over the top code complexity metrics every software engineer should know&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we covered &lt;a class="link" href="../track-engineering-metrics/" &gt;how to easily track engineering metrics&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Previously, we demonstrated
&lt;a class="link" href="../github-code-review-issues/" &gt;the most significant issues with GitHub&amp;rsquo;s code review process&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also showed &lt;a class="link" href="../go-package-dependencies/" &gt;how to create an architectural test that finds Go package dependencies&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also published an article on &lt;a class="link" href="../common-refactorings/" &gt;the common code refactorings to improve code readability&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;In addition, we summarized &lt;a class="link" href="../ai-for-software-developers/" &gt;what every software engineer should know about AI&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Lastly, we &lt;a class="link" href="../mermaid-intro/" &gt;introduced the top Mermaid diagrams for software developers&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-how-to-scale-your-codebase-with-evolutionary-architecture"&gt;&lt;a href="#watch-how-to-scale-your-codebase-with-evolutionary-architecture" class="header-anchor"&gt;&lt;/a&gt;Watch how to scale your codebase with evolutionary architecture
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Li1GZzQVXWw"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>What is readable code and why is it important?</title><link>https://victoronsoftware.com/posts/readable-code/</link><pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/readable-code/</guid><description>&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-headline.png" alt="Featured image of post What is readable code and why is it important?" /&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#metrics-for-unreadable-code" &gt;Metrics for unreadable code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#how-to-make-your-codebase-more-readable" &gt;How to make your codebase more readable&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#fix-poor-software-structure" &gt;Fix poor software structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#refactor-local-code-for-understanding" &gt;Refactor local code for understanding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#use-unit-and-integration-tests" &gt;Use unit and integration tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#useful-comments" &gt;Useful comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Readable code is software code that is easy to understand and easy to change.&lt;/p&gt;
&lt;p&gt;Unreadable code is a common complaint among software developers and one of the main contributors to technical debt.
Abandoning unreadable code is one of the reasons engineers love to work on greenfield projects‚Äîthere is no legacy code
to deal with.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ve probably heard comments like, &amp;ldquo;It would take me longer to understand this code than to rewrite it from scratch.&amp;rdquo;
This sentiment illustrates the problem with unreadable code: it slows down the development process.&lt;/p&gt;
&lt;p&gt;Some engineers refer to readable code as &amp;ldquo;clean code.&amp;rdquo; In our opinion, &amp;ldquo;readable code&amp;rdquo; and &amp;ldquo;clean code&amp;rdquo; are synonymous,
and the term &amp;ldquo;readable code&amp;rdquo; is easier to understand and, therefore, more &amp;ldquo;readable.&amp;rdquo;&lt;/p&gt;
&lt;h2 id="why-is-unreadable-code-a-problem"&gt;&lt;a href="#why-is-unreadable-code-a-problem" class="header-anchor"&gt;&lt;/a&gt;Why is unreadable code a problem?
&lt;/h2&gt;&lt;p&gt;Although the &amp;ldquo;unreadable code&amp;rdquo; claim feels like a subjective opinion, it has a concrete business impact on software
projects.&lt;/p&gt;
&lt;p&gt;We want our code to be readable to speed up adding new features and bug fixes.&lt;/p&gt;
&lt;p&gt;For example, we recently spent three hours figuring out how a feature worked, only to realize there was a documentation
bug. Unfortunately, we made no improvements to make the code more readable, and the next developer will likely have the
same problem. This next developer may be ourselves one year from now when we will have forgotten everything we learned
about the feature.&lt;/p&gt;
&lt;h3 id="metrics-for-unreadable-code"&gt;&lt;a href="#metrics-for-unreadable-code" class="header-anchor"&gt;&lt;/a&gt;Metrics for unreadable code
&lt;/h3&gt;&lt;p&gt;You can use several metrics to measure your code&amp;rsquo;s readability. The ideal metric would be the time it takes to
understand the code, but this isn&amp;rsquo;t easy to measure. Instead, you can use the following proxies:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time to fix a bug&lt;/strong&gt;‚ÄîMeasure the time from when a developer starts working on a bug until the bug fix is ready for code
review. Alternatively, measure the time from when a developer starts working on a bug until their first commit. A first
commit is a good proxy for understanding the bug and starting to fix it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time to add a new feature&lt;/strong&gt;‚ÄîMeasure the time from when a developer starts working on a new feature until it is ready
for code review.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Time to onboard a new team member&lt;/strong&gt;‚ÄîMeasure the time it takes for a new team member to make their first commit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Code style violations&lt;/strong&gt;‚ÄîMeasure the codebase&amp;rsquo;s number of code style violations. Code style violations can be measured
using linters or static analysis tools. Some examples of code style violations relevant to readability are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Long functions&lt;/li&gt;
&lt;li&gt;Long files&lt;/li&gt;
&lt;li&gt;Deeply nested control structures&lt;/li&gt;
&lt;li&gt;Poorly named variables, such as 1-character variable names&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Instead of measuring these style code violations, you can also enforce them in your CI pipeline. Most languages have
linters that update your code to match a standard style. For example, Go has &lt;a class="link" href="https://pkg.go.dev/cmd/gofmt" target="_blank" rel="noopener"
&gt;&lt;code&gt;gofmt&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="how-to-make-your-codebase-more-readable"&gt;&lt;a href="#how-to-make-your-codebase-more-readable" class="header-anchor"&gt;&lt;/a&gt;How to make your codebase more readable
&lt;/h2&gt;&lt;p&gt;Readability is not a goal but a process. You can&amp;rsquo;t make your codebase readable overnight, but you can start making
incremental improvements. Whenever you touch a piece of code, try to make it more readable.&lt;/p&gt;
&lt;h3 id="fix-poor-software-structure"&gt;&lt;a href="#fix-poor-software-structure" class="header-anchor"&gt;&lt;/a&gt;Fix poor software structure
&lt;/h3&gt;&lt;p&gt;One pattern we see frequently is that the functionality of a core feature is spread across multiple software modules.
The first problem this creates is that the software developer trying to understand the feature has to discover all the
modules that implement the feature. Often, this requires grepping the codebase for key names &amp;ndash; a tedious and
error-prone process. The second problem is that the developer has to jump between files and directories to understand
how the feature works, files that often have tons of other unrelated and distracting code.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-before.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Hard to understand feature due to poor software design&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Poor software structure often arises when we hurry to implement a feature and don&amp;rsquo;t consider future developers needing
to make changes. This behavior is reactive software design‚Äîone developer reacts to the immediate need to implement a
feature. Later, when implementing new features becomes almost impossible due to unreadable code, they react again by
restructuring the code or rewriting old functionality from scratch. This process makes sense for prototypes or early
products looking for product-market fit, but it is not sustainable for mature long-term software projects.&lt;/p&gt;
&lt;p&gt;Often, developers may not be able to create a good software design when they start working on a new feature because they
don&amp;rsquo;t understand all its ramifications. However, they should restructure their work before moving on to the next
task‚Äîthe best time to improve code is when you have all the context in your head.&lt;/p&gt;
&lt;p&gt;We can restructure the above code example to move all the feature&amp;rsquo;s functionality into one or two modules. This
reorganization makes it easier to understand the feature because we have to look at a much smaller number of files and
are not distracted by unrelated code.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-after.png"&gt;&lt;figcaption&gt;
&lt;h4&gt;Easier to understand feature encapsulated in separate modules&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="refactor-local-code-for-understanding"&gt;&lt;a href="#refactor-local-code-for-understanding" class="header-anchor"&gt;&lt;/a&gt;Refactor local code for understanding
&lt;/h3&gt;&lt;p&gt;When entering a function, you should quickly understand what it does. The function code should be readable. If an
engineer who first sees the function can&amp;rsquo;t understand it, it is too complex and should be refactored.&lt;/p&gt;
&lt;p&gt;Long functions are difficult to understand because they require the developer to simultaneously keep a lot of
information in their head. Oftentimes, the function presents implementation details to the developer before they can
grasp the big picture. This process is cognitively demanding and error-prone.&lt;/p&gt;
&lt;p&gt;Instead, we can refactor extended functions into smaller functions that each do one thing. This refactoring makes the
code easier to understand because we can understand each small function in isolation. Hide complex logic in functions
with descriptive names.&lt;/p&gt;
&lt;p&gt;In addition, use descriptive names for variables. Good names make the code self-documenting and reduce the need for
comments.&lt;/p&gt;
&lt;p&gt;As an example of a function before and after refactoring, see this
&lt;a class="link" href="https://gist.github.com/getvictor/740c940ec06735ee02bc652f1093e0b8" target="_blank" rel="noopener"
&gt;refactoring example gist&lt;/a&gt;. For a full explanation,
you can &lt;a class="link" href="https://www.youtube.com/watch?v=HCGyWuE9zbY&amp;amp;t=720s" target="_blank" rel="noopener"
&gt;jump to the refactoring section&lt;/a&gt; of the video below.&lt;/p&gt;
&lt;p&gt;For more examples of common refactorings, see our article on
&lt;a class="link" href="../common-refactorings/" &gt;top refactorings every software developer should know&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id="use-unit-and-integration-tests"&gt;&lt;a href="#use-unit-and-integration-tests" class="header-anchor"&gt;&lt;/a&gt;Use unit and integration tests
&lt;/h3&gt;&lt;p&gt;From a readability perspective, tests are a form of documentation. They show how the code is supposed to work. When
reading a test, you can see how the code is supposed to behave in different scenarios.&lt;/p&gt;
&lt;p&gt;Tests should also be readable. The same restructuring and refactoring principles apply to tests.&lt;/p&gt;
&lt;p&gt;Another essential benefit of tests is that they allow developers to refactor code with confidence. When you refactor
code, you can run the tests to ensure that the code still works as expected. Unfortunately, this means that when you
want to make a change in legacy code without tests, you either have to write tests first or do a lot of manual testing
to ensure that the code still works.&lt;/p&gt;
&lt;h3 id="useful-comments"&gt;&lt;a href="#useful-comments" class="header-anchor"&gt;&lt;/a&gt;Useful comments
&lt;/h3&gt;&lt;p&gt;Comments should explain why the code is written the way it is, not what the code does. The code should be
self-explanatory with descriptive variable and function names and encapsulated implementation details.&lt;/p&gt;
&lt;p&gt;Sometimes, it is hard to tell the difference between &amp;ldquo;why&amp;rdquo; and &amp;ldquo;what,&amp;rdquo; so feel free to err on the side of commenting.&lt;/p&gt;
&lt;p&gt;You can remove the comment if you renamed a variable or a function, and now the comment duplicates the code. One problem
with comments is that they can get out of date, which is worse than no comments.&lt;/p&gt;
&lt;p&gt;For example, before refactoring, you had this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// figure out which declarations we should not delete, and put those into keepNames list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;keepNames&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; make([]&lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;, len(&lt;span style="color:#a6e22e"&gt;existingDecls&lt;/span&gt;)&lt;span style="color:#f92672"&gt;+&lt;/span&gt;len(&lt;span style="color:#a6e22e"&gt;fleetmdm&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ListFleetReservedMacOSDeclarationNames&lt;/span&gt;()))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;p&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;range&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;existingDecls&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;newP&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;incomingDecls&lt;/span&gt;[&lt;span style="color:#a6e22e"&gt;p&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Name&lt;/span&gt;]; &lt;span style="color:#a6e22e"&gt;newP&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;keepNames&lt;/span&gt; = append(&lt;span style="color:#a6e22e"&gt;keepNames&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;p&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Name&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;keepNames&lt;/span&gt; = append(&lt;span style="color:#a6e22e"&gt;keepNames&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;fleetmdm&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;ListFleetReservedMacOSDeclarationNames&lt;/span&gt;()&lt;span style="color:#f92672"&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After refactoring, the comment is a duplicate and no longer needed. It is even worse in this case because we renamed the
variable, but the comment still refers to the old name. The comment is not only a duplicate but also misleading:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// figure out which declarations we should not delete, and put those into keepNames list&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;namesToKeep&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;namesOfDeclarationsToNotDelete&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;existingDecls&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;enrichedDeclarations&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="language-features-that-make-the-code-less-readable"&gt;&lt;a href="#language-features-that-make-the-code-less-readable" class="header-anchor"&gt;&lt;/a&gt;Language features that make the code less readable
&lt;/h2&gt;&lt;p&gt;Some language features can make the code less readable. We will give an example from Go because we are familiar with Go,
but the same principles apply to other languages.&lt;/p&gt;
&lt;h3 id="go-nested-functions"&gt;&lt;a href="#go-nested-functions" class="header-anchor"&gt;&lt;/a&gt;Go nested functions
&lt;/h3&gt;&lt;p&gt;Go supports nested functions like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;outer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;foo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Foo&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;bar&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Bar&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;inner&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Item&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// many lines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// of implementation details&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// many lines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// of additional code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;range&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;something&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;inner&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// more code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Upon entering the function as a reader, the first thing you see is the &lt;code&gt;inner&lt;/code&gt; function. The reader is presented with
specific implementation details before understanding the big picture. Instead, the reader should know where the nested
function is used before reading these implementation details.&lt;/p&gt;
&lt;p&gt;One way to solve this issue is to forbid nested functions in your style guide. Always extract nested functions to the
struct level or file level. However, this approach loses the benefits of closures and increases the number of functions
at the struct/file level.&lt;/p&gt;
&lt;p&gt;We hope that the Go team will improve the readability of nested functions in the future. For example, they could allow
nested functions to be defined at the end of the function after the primary implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;outer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;foo&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Foo&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;bar&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Bar&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// many lines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// of additional code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;_&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;i&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;range&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;something&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;inner&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;i&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// more code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// nested functions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;inner&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Item&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// many lines&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// ...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// of implementation details&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternatively, IDE vendors can improve readability by entirely hiding nested functions by default.&lt;/p&gt;
&lt;h2 id="additional-benefits-of-readable-code"&gt;&lt;a href="#additional-benefits-of-readable-code" class="header-anchor"&gt;&lt;/a&gt;Additional benefits of readable code
&lt;/h2&gt;&lt;p&gt;As you improve the readability of your code, you will notice several side effects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many bugs will be easier to spot&lt;/li&gt;
&lt;li&gt;Other developers will be less likely to interrupt you with questions about your code&lt;/li&gt;
&lt;li&gt;If your code is open source, you may get more contributions&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="make-bigger-improvements-to-your-codebase-with-evolutionary-architecture"&gt;&lt;a href="#make-bigger-improvements-to-your-codebase-with-evolutionary-architecture" class="header-anchor"&gt;&lt;/a&gt;Make bigger improvements to your codebase with evolutionary architecture
&lt;/h2&gt;&lt;p&gt;In the following article, we
&lt;a class="link" href="../scaling-codebase-evolutionary-architecture" &gt;discuss how to make bigger improvements to your codebase with evolutionary architecture&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../engineering-transparency/" &gt;Why transparency beats everything else in engineering&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
How making work visible transforms teams from frustrated to high-performing through organizational transparency.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../first-conference-talk/" &gt;My first conference talk experience&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Lessons learned from presenting about readable code at a major software engineering conference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../engineering-metrics-no-cost/" &gt;Build beautiful engineering dashboards‚Äîwithout paying a dime&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Learn how to use GitHub, Grafana, and SQL to create powerful, drill-down metrics using only free tools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../literate-programming-lessons/" &gt;Key takeaways from literate programming&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Discover how Donald Knuth&amp;rsquo;s literate programming principles can improve your code documentation practices.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../track-engineering-metrics/" &gt;How to easily track engineering metrics with GitHub Actions and Google APIs&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Build automated systems to measure and visualize your team&amp;rsquo;s engineering performance over time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../go-test-execution-time/" &gt;Measuring and improving the execution time of Go tests&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Optimize your test suite performance and reduce CI/CD pipeline duration with practical techniques.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../github-code-review-issues/" &gt;Top 3 issues with GitHub&amp;rsquo;s code review process&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Understand the scalability and developer experience problems with GitHub&amp;rsquo;s default review workflow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class="link" href="../ai-for-software-developers/" &gt;Common use cases of AI for today&amp;rsquo;s software developers&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;
Explore how AI tools can enhance productivity without replacing the need for readable, maintainable code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-us-discuss-why-readable-code-is-important"&gt;&lt;a href="#watch-us-discuss-why-readable-code-is-important" class="header-anchor"&gt;&lt;/a&gt;Watch us discuss why readable code is important
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/HCGyWuE9zbY"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item></channel></rss>