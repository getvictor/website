<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Technical Debt on Victor on Software</title><link>https://victoronsoftware.com/tags/technical-debt/</link><description>Recent content in Technical Debt on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Feb 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/technical-debt/index.xml" rel="self" type="application/rss+xml"/><item><title>Top code refactorings every software engineer should know</title><link>https://victoronsoftware.com/posts/common-refactorings/</link><pubDate>Wed, 12 Feb 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/common-refactorings/</guid><description>&lt;img src="https://victoronsoftware.com/posts/common-refactorings/common-refactorings-headline.png" alt="Featured image of post Top code refactorings every software engineer should know" />&lt;ul>
&lt;li>&lt;a class="link" href="#extract-method-aka-extract-function" >Extract method (aka extract function)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#inline-variable" >Inline variable&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#extract-variable" >Extract variable&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#inline-method-aka-inline-function" >Inline method (aka inline function)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-code-refactoring">&lt;a href="#what-is-code-refactoring" class="header-anchor">&lt;/a>What is code refactoring?
&lt;/h2>&lt;p>Code refactoring involves modifying existing software code without changing its observable behavior. Refactoring improves the code base&amp;rsquo;s readability and maintainability. See our previous article on &lt;a class="link" href="../readable-code/" >why readable code is important&lt;/a>.&lt;/p>
&lt;h2 id="why-are-engineers-afraid-of-refactoring">&lt;a href="#why-are-engineers-afraid-of-refactoring" class="header-anchor">&lt;/a>Why are engineers afraid of refactoring?
&lt;/h2>&lt;p>Refactoring is essential to software development and should be done regularly as part of day-to-day work. Unfortunately, many engineers are afraid of refactoring, don&amp;rsquo;t know how to do it, or don&amp;rsquo;t consider it part of their job responsibilities.&lt;/p>
&lt;p>Some engineers fear that refactoring will introduce bugs or break existing functionality. The root cause of this fear is the lack of automated tests. Without automated tests, ensuring that the refactored code behaves as expected is difficult. A code base without automated tests is a ticking time bomb and cannot be maintained by any sane engineer. Before refactoring code in such a code base, you should add automated tests for the targeted code.&lt;/p>
&lt;p>Other engineers fear that refactoring will take too much time. This fear is often unfounded, as refactoring can be done incrementally and in small steps. For example, after refactoring the code for an hour or less, merge your changes to your main branch and, if needed, continue doing the next small refactoring steps. Your organization should never allocate weeks of development for &amp;ldquo;large refactorings.&amp;rdquo;&lt;/p>
&lt;p>Engineers may also fear refactoring because they don&amp;rsquo;t want to make too many changes to the code, making it difficult for reviewers to review the changes. The issue is that many current code review systems don&amp;rsquo;t understand the code changes&amp;rsquo; semantics (i.e., the meaning). These systems only understand line changes and are frequently confused by relocated code. In this case, the coder should explain the changes to the reviewer. Alternatively, the organization can adopt a better code review tool. For a further discussion of &lt;a class="link" href="../github-code-review-issues/" >issues with GitHub code reviews, see our previous article&lt;/a>.&lt;/p>
&lt;p>This article will show some common refactorings you can safely do with automation from your IDE (Integrated Development Environment).&lt;/p>
&lt;h2 id="extract-method-aka-extract-function">&lt;a href="#extract-method-aka-extract-function" class="header-anchor">&lt;/a>Extract method (aka extract function)
&lt;/h2>&lt;p>The &lt;code>extract method&lt;/code> refactoring takes a piece of code and moves it into a new method. There are several reasons to do this, all of which improve the readability and maintainability of the code:&lt;/p>
&lt;ul>
&lt;li>The code is too long and must be broken into smaller, more manageable pieces.&lt;/li>
&lt;li>The code is duplicated in multiple places and needs to be consolidated into a single method.&lt;/li>
&lt;li>We want to separate the code implementation from the code intention. The code implementation is what the code does, and the code intention is why it does it. Move the code implementation into its own method and name the new method based on the code intention.&lt;/li>
&lt;/ul>
&lt;p>For example, consider the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">pt&lt;/span> &lt;span style="color:#a6e22e">PackageTest&lt;/span>) &lt;span style="color:#a6e22e">expandPackages&lt;/span>(&lt;span style="color:#a6e22e">pkgs&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) []&lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">slices&lt;/span>.&lt;span style="color:#a6e22e">ContainsFunc&lt;/span>(&lt;span style="color:#a6e22e">pkgs&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">pkgs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// lots more code ...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When entering the &lt;code>expandPackages&lt;/code> method, the reader is immediately confronted with a complex expression. They must stop and think about what the code does. Even though the amount of code is small, it still hampers readability. The code implementation is mixed with the code intention. One way to improve the situation is to add a comment. A better way is to extract the code into its own method and name the new method based on the code intention.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">pt&lt;/span> &lt;span style="color:#a6e22e">PackageTest&lt;/span>) &lt;span style="color:#a6e22e">expandPackages&lt;/span>(&lt;span style="color:#a6e22e">pkgs&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) []&lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">needExpansion&lt;/span>(&lt;span style="color:#a6e22e">pkgs&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">pkgs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// lots more code ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">needExpansion&lt;/span>(&lt;span style="color:#a6e22e">packages&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">slices&lt;/span>.&lt;span style="color:#a6e22e">ContainsFunc&lt;/span>(&lt;span style="color:#a6e22e">packages&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Most IDEs automatically perform this refactoring. Highlight the code you want to extract, open the refactoring menu, and select the &lt;code>Extract Method&lt;/code> option.&lt;/p>
&lt;h2 id="inline-variable">&lt;a href="#inline-variable" class="header-anchor">&lt;/a>Inline variable
&lt;/h2>&lt;p>Every variable should have a purpose and a good explanatory name that describes its intent. As the number of variables grows in a method, it becomes increasingly difficult to understand the code. One way to improve the readability of the code is to inline variables. Inlining a variable is replacing the variable with the right-hand side of the assignment.&lt;/p>
&lt;p>For example, consider the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">pd&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">packageDependency&lt;/span>) &lt;span style="color:#a6e22e">chain&lt;/span>() (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">pd&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">pd&lt;/span>.&lt;span style="color:#a6e22e">parent&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// lots more code ...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The variable &lt;code>name&lt;/code> does not add any value to the code. It is simply a copy of the &lt;code>pd.name&lt;/code> field. We can inline the variable to improve the readability of the code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">pd&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">packageDependency&lt;/span>) &lt;span style="color:#a6e22e">chain&lt;/span>() (&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">pd&lt;/span>.&lt;span style="color:#a6e22e">parent&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">pd&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span>, &lt;span style="color:#ae81ff">1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// lots more code ...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Many IDEs automatically perform this refactoring. Highlight the variable you want to inline, open the refactoring menu, and select the &lt;code>Inline&lt;/code> option.&lt;/p>
&lt;h2 id="extract-variable">&lt;a href="#extract-variable" class="header-anchor">&lt;/a>Extract variable
&lt;/h2>&lt;p>The &lt;code>extract variable&lt;/code> refactoring takes a complex expression and moves it into a new variable. Mechanically, it is the opposite of the above &lt;code>inline variable&lt;/code> refactoring. There are several reasons to do this:&lt;/p>
&lt;ul>
&lt;li>The expression is complex and must be broken into smaller, more manageable pieces.&lt;/li>
&lt;li>The meaning of the expression is unclear and needs to be clarified with a descriptive variable name.&lt;/li>
&lt;/ul>
&lt;p>Sometimes, you have a choice between extracting a method or a variable. In general, you should extract a method to make the code more readable. However, if the method is only used once and the parent function is not complex, it may be better to extract a variable.&lt;/p>
&lt;p>For example, consider the same code from our &lt;code>extract method&lt;/code> example above:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">pt&lt;/span> &lt;span style="color:#a6e22e">PackageTest&lt;/span>) &lt;span style="color:#a6e22e">expandPackages&lt;/span>(&lt;span style="color:#a6e22e">pkgs&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) []&lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">slices&lt;/span>.&lt;span style="color:#a6e22e">ContainsFunc&lt;/span>(&lt;span style="color:#a6e22e">pkgs&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">pkgs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// lots more code ...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can extract the complex expression into a variable to improve the readability of the code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">pt&lt;/span> &lt;span style="color:#a6e22e">PackageTest&lt;/span>) &lt;span style="color:#a6e22e">expandPackages&lt;/span>(&lt;span style="color:#a6e22e">pkgs&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) []&lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">needExpansion&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">slices&lt;/span>.&lt;span style="color:#a6e22e">ContainsFunc&lt;/span>(&lt;span style="color:#a6e22e">pkgs&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">p&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> !&lt;span style="color:#a6e22e">needExpansion&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">pkgs&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// lots more code ...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Many IDEs automatically perform this refactoring. Highlight the expression you want to extract, open the refactoring menu, and select the &lt;code>Extract Variable&lt;/code> or &lt;code>Introduce Variable&lt;/code> option.&lt;/p>
&lt;h2 id="inline-method-aka-inline-function">&lt;a href="#inline-method-aka-inline-function" class="header-anchor">&lt;/a>Inline method (aka inline function)
&lt;/h2>&lt;p>The &lt;code>inline method&lt;/code> refactoring takes a method and moves its code into the caller. Mechanically, it is the opposite of the &lt;code>extract method&lt;/code> refactoring. There are several reasons to do this:&lt;/p>
&lt;ul>
&lt;li>The method is too simple, and its body is as clear as its name.&lt;/li>
&lt;li>We want to simplify code and remove a level of indirection.&lt;/li>
&lt;li>We must regroup code into a single method before proceeding with a better refactoring.&lt;/li>
&lt;/ul>
&lt;p>For example, consider the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// method code ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">dep&lt;/span>.&lt;span style="color:#a6e22e">has&lt;/span>(&lt;span style="color:#a6e22e">expandedPackages&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// more coe ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> (&lt;span style="color:#a6e22e">pd&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">packageDependency&lt;/span>) &lt;span style="color:#a6e22e">has&lt;/span>(&lt;span style="color:#a6e22e">pkgs&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">bool&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">slices&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">pkgs&lt;/span>, &lt;span style="color:#a6e22e">pd&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can inline the &lt;code>has&lt;/code> method:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// method code ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">slices&lt;/span>.&lt;span style="color:#a6e22e">Contains&lt;/span>(&lt;span style="color:#a6e22e">expandedPackages&lt;/span>, &lt;span style="color:#a6e22e">pd&lt;/span>.&lt;span style="color:#a6e22e">name&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// more coe ...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Many IDEs automatically perform this refactoring. Highlight the method call you want to inline, open the refactoring menu, and select the &lt;code>Inline Function/Method&lt;/code> option.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>The code examples above are from our article on &lt;a class="link" href="../go-package-dependencies/" >finding package dependencies of a Go package&lt;/a>.&lt;/li>
&lt;li>We also discussed &lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" >how to scale your codebase with evolutionary architecture&lt;/a>.&lt;/li>
&lt;li>And &lt;a class="link" href="../analyze-go-build/" >how to analyze Go build times&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-examples-of-top-code-refactorings">&lt;a href="#watch-examples-of-top-code-refactorings" class="header-anchor">&lt;/a>Watch examples of top code refactorings
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Mzj9XQlieHk"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to scale your codebase with evolutionary architecture</title><link>https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/</link><pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/</guid><description>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/evolutionary-architecture-headline.png" alt="Featured image of post How to scale your codebase with evolutionary architecture" />&lt;p>&lt;em>This article is part of a series on &lt;strong>technical debt&lt;/strong>. Check out the previous article:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="../readable-code/" >Why readable code is important and how to refactor code for readability&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="intro-to-evolutionary-architecture">&lt;a href="#intro-to-evolutionary-architecture" class="header-anchor">&lt;/a>Intro to evolutionary architecture
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="#current-architecture" >Current architecture&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#problems-with-the-current-architecture" >Problems with the current architecture&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#good-architecture" >Good architecture&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#evolutionary-architecture" >Evolutionary architecture&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Evolutionary architecture refers to a software design approach that embraces change as a fundamental aspect of system
development. Instead of aiming to create a fixed and perfect architecture upfront, it allows the system to evolve in
response to new requirements, technologies, and insights. Evolutionary architecture is a critical tool for reducing
technical debt.&lt;/p>
&lt;p>Evolutionary design, or incremental design, is another term for this approach. Generally, evolutionary design refers to
changes on a smaller scale, such as refactoring code or adding new features. On the other hand, evolutionary
architecture refers to changes on a larger scale, such as reorganizing the codebase or splitting a monolithic
application into microservices. That said, there is no strict boundary between the two terms. We will use the term
evolutionary architecture.&lt;/p>
&lt;p>In this article, we provide an example of scaling your codebase to accommodate a growing number of features and
developers.&lt;/p>
&lt;h2 id="current-architecture">&lt;a href="#current-architecture" class="header-anchor">&lt;/a>Current architecture
&lt;/h2>&lt;p>We base our example on a theoretical codebase, but real-world experiences inspire it. The problems and solutions we
discuss are common in software development, especially in startups and small companies.&lt;/p>
&lt;p>The initial state of our example codebase is a web application developed in a mono-repository. The application was built
from the ground up with a simple architecture, focusing on adding new features and finding product-market fit.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/current-design.png">&lt;figcaption>
&lt;h4>Current design with a few large modules.&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The current design divides the codebase into a few large modules. We use the term &lt;em>module&lt;/em> to mean a logical grouping of
code in the same files and directories.&lt;/p>
&lt;p>However, after a couple of years, the application has grown significantly in features, complexity, and team size. The
organization now has three product teams working on different functional areas of the application. No one has updated
the initial architecture, which is insufficient to support the growing codebase and development team.&lt;/p>
&lt;h2 id="problems-with-the-current-architecture">&lt;a href="#problems-with-the-current-architecture" class="header-anchor">&lt;/a>Problems with the current architecture
&lt;/h2>&lt;p>A significant problem that the engineering team has been facing is &lt;strong>an increase in bugs and a longer time to fix
them&lt;/strong>. The code for each feature is sprinkled throughout the codebase and tightly coupled to other seemingly unrelated
features. This complexity makes it difficult to understand, test, and keep existing features working as new ones are
added.&lt;/p>
&lt;p>Speaking of new features, the team has been struggling to add them on time. The codebase has become a tangled web of
dependencies, and any change in one part of the codebase can have unintended consequences in other parts. Adding a
feature requires modifying many parts of the codebase, which requires understanding the entire codebase, which many
developers lack. The lack of knowledge and the changes to many parts of the codebase have led to &lt;strong>features taking
significantly longer to implement&lt;/strong> than initially estimated.&lt;/p>
&lt;p>&lt;strong>Maintaining feature branches&lt;/strong> for over a few days and making patch fixes to existing releases has become impossible.
The codebase is so intertwined that any changes may cause merge conflicts. The increased likelihood of merge conflicts
has discouraged developers from refactoring and cleaning up the code base. This tendency to leave the code as-is has
perpetuated the slide in code quality.&lt;/p>
&lt;p>Tests have also become a problem. The &lt;strong>test suite has been in a frequent state of disrepair&lt;/strong>. There is no clear
ownership of tests, so engineers have been reluctant to fix them. Some engineers have stopped paying attention to
failing CI alerts, figuring that the problems are caused by one of the other two teams.&lt;/p>
&lt;p>&lt;strong>Tests have also become slower&lt;/strong> and slower, especially the integration tests that test the API and include the service
layer, the datastore layer, and an actual database. These tests do not run in parallel; every additional feature slows
down the compile and increases test time. Test files have become bloated with tests for multiple features, making them
slow to load in the editor, difficult to navigate, and impossible to diff for PR reviews.&lt;/p>
&lt;p>Finally, the &lt;strong>onboarding time for new developers has been growing&lt;/strong>. It takes weeks for new developers to understand
the codebase and start contributing.&lt;/p>
&lt;h2 id="good-architecture">&lt;a href="#good-architecture" class="header-anchor">&lt;/a>Good architecture
&lt;/h2>&lt;p>At this point in the company&amp;rsquo;s life, an exemplary architecture would be separate groups of modules corresponding to the
three product teams.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/ideal-design.png">&lt;figcaption>
&lt;h4>Good design with dedicated modules for each product team.&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Each team would be responsible for its own set of modules, which aligns with Agile principles. The modules would be
loosely coupled, and the teams would be able to work independently on their features without affecting other teams. The
amount of code that each engineer has to understand and change would be drastically reduced.&lt;/p>
&lt;p>This architecture would have eliminated or significantly reduced the problems that the engineering team has been facing.&lt;/p>
&lt;ul>
&lt;li>The reduced complexity and increased understanding of the codebase would lead to fewer and faster to fix bugs&lt;/li>
&lt;li>Faster feature development due to cleaner code and fewer dependencies&lt;/li>
&lt;li>Reduced merge conflicts for PRs, especially for database migrations and schema changes&lt;/li>
&lt;li>Rarely failing test suite due to clear ownership of tests&lt;/li>
&lt;li>Faster tests due to each team focusing on testing their slice of the product. Limited complete product integration
tests would still be present.&lt;/li>
&lt;li>Faster onboarding time for new developers&lt;/li>
&lt;/ul>
&lt;p>However, the company does not have this architecture. Building this architecture upfront would have been foolish since
it would have consumed critical engineering time. Yes, there was value in creating this structure upfront because it
would have saved time in the long run, but this value was insufficient for a young company that may not be around in a
few months.&lt;/p>
&lt;h2 id="evolutionary-architecture">&lt;a href="#evolutionary-architecture" class="header-anchor">&lt;/a>Evolutionary architecture
&lt;/h2>&lt;p>Many companies and engineers find themselves in this situation. They have a codebase with poor architecture for today&amp;rsquo;s
reality, blame the organization for not thinking about these problems earlier, and feel like they can&amp;rsquo;t improve the
situation.&lt;/p>
&lt;p>Evolutionary architecture is a way to incrementally improve the architecture of a codebase without having to do a big
rewrite. It is a way to make the codebase better today than it was yesterday and better tomorrow than it is today.&lt;/p>
&lt;p>This situation is not unique to this company. It is the norm. Most companies start with a simple architecture and
codebase that is good enough for the first few features. As the company grows, the architecture becomes a bottleneck.
Instead of worrying about not making the right decisions in the past, consider where the architecture needs to be a year
or two from now and start moving towards that.&lt;/p>
&lt;p>For example, when adding a new prominent feature to the product, decouple it from the rest of the codebase.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/evolutionary-design.png">&lt;figcaption>
&lt;h4>Evolutionary design with big features going into dedicated modules.&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Our example shows all the modules decoupled, but it may be OK to decouple one or two.&lt;/p>
&lt;p>Decoupling a feature from the rest of the codebase has many benefits similar to those we listed above for &amp;ldquo;good
architecture.&amp;rdquo; Additional benefits include:&lt;/p>
&lt;ul>
&lt;li>Most of the feature can be tested by itself, reducing test time.&lt;/li>
&lt;li>The business gets the option to create a new team dedicated to the feature quickly &amp;ndash; the code is already
separate/independent&lt;/li>
&lt;li>Engineering can scale the feature separately from the rest of the product. For example, assign a dedicated database or
split the feature into a microservice.&lt;/li>
&lt;/ul>
&lt;h2 id="code-example-of-splitting-the-database-schema">&lt;a href="#code-example-of-splitting-the-database-schema" class="header-anchor">&lt;/a>Code example of splitting the database schema
&lt;/h2>&lt;p>It is nice to read about a theoretical example, but seeing an actual code example is even better. In this code example,
we begin with a monolithic application that has a single database schema. We then split the schema into two separate
schemas. It is the starting point and a reference for decoupling a new feature from the rest of the codebase. Since this
code example is a bit long and requires some context regarding the current implementation, we will not cover it in this
article. Instead, &lt;a class="link" href="https://www.youtube.com/watch?v=Li1GZzQVXWw&amp;amp;t=1070s" target="_blank" rel="noopener"
>jump to the code example section&lt;/a> of the video
below.&lt;/p>
&lt;p>Link to the
&lt;a class="link" href="https://github.com/fleetdm/fleet/compare/main...victor/feature-set-up" target="_blank" rel="noopener"
>source code example decoupling a new backend feature from the rest of the codebase&lt;/a>.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>Recently, we covered &lt;a class="link" href="../track-engineering-metrics/" >how to easily track engineering metrics&lt;/a>.&lt;/li>
&lt;li>Previously, we demonstrated
&lt;a class="link" href="../github-code-review-issues/" >the most significant issues with GitHub&amp;rsquo;s code review process&lt;/a>.&lt;/li>
&lt;li>We also showed &lt;a class="link" href="../go-package-dependencies/" >how to create an architectural test that finds Go package dependencies&lt;/a>.&lt;/li>
&lt;li>We also published an article on &lt;a class="link" href="../common-refactorings/" >the common code refactorings to improve code readability&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-how-to-scale-your-codebase-with-evolutionary-architecture">&lt;a href="#watch-how-to-scale-your-codebase-with-evolutionary-architecture" class="header-anchor">&lt;/a>Watch how to scale your codebase with evolutionary architecture
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Li1GZzQVXWw"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>What is readable code and why is it important?</title><link>https://victoronsoftware.com/posts/readable-code/</link><pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/readable-code/</guid><description>&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-headline.png" alt="Featured image of post What is readable code and why is it important?" />&lt;ul>
&lt;li>&lt;a class="link" href="#metrics-for-unreadable-code" >Metrics for unreadable code&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#how-to-make-your-codebase-more-readable" >How to make your codebase more readable&lt;/a>
&lt;ul>
&lt;li>&lt;a class="link" href="#fix-poor-software-structure" >Fix poor software structure&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#refactor-local-code-for-understanding" >Refactor local code for understanding&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#use-unit-and-integration-tests" >Use unit and integration tests&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#useful-comments" >Useful comments&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Readable code is software code that is easy to understand and easy to change.&lt;/p>
&lt;p>Unreadable code is a common complaint among software developers and one of the main contributors to technical debt.
Abandoning unreadable code is one of the reasons engineers love to work on greenfield projects—there is no legacy code
to deal with.&lt;/p>
&lt;p>You&amp;rsquo;ve probably heard comments like, &amp;ldquo;It would take me longer to understand this code than to rewrite it from scratch.&amp;rdquo;
This sentiment illustrates the problem with unreadable code: it slows down the development process.&lt;/p>
&lt;p>Some engineers refer to readable code as &amp;ldquo;clean code.&amp;rdquo; In our opinion, &amp;ldquo;readable code&amp;rdquo; and &amp;ldquo;clean code&amp;rdquo; are synonymous,
and the term &amp;ldquo;readable code&amp;rdquo; is easier to understand and, therefore, more &amp;ldquo;readable.&amp;rdquo;&lt;/p>
&lt;h2 id="why-is-unreadable-code-a-problem">&lt;a href="#why-is-unreadable-code-a-problem" class="header-anchor">&lt;/a>Why is unreadable code a problem?
&lt;/h2>&lt;p>Although the &amp;ldquo;unreadable code&amp;rdquo; claim feels like a subjective opinion, it has a concrete business impact on software
projects.&lt;/p>
&lt;p>We want our code to be readable to speed up adding new features and bug fixes.&lt;/p>
&lt;p>For example, we recently spent three hours figuring out how a feature worked, only to realize there was a documentation
bug. Unfortunately, we made no improvements to make the code more readable, and the next developer will likely have the
same problem. This next developer may be ourselves one year from now when we will have forgotten everything we learned
about the feature.&lt;/p>
&lt;h3 id="metrics-for-unreadable-code">&lt;a href="#metrics-for-unreadable-code" class="header-anchor">&lt;/a>Metrics for unreadable code
&lt;/h3>&lt;p>You can use several metrics to measure your code&amp;rsquo;s readability. The ideal metric would be the time it takes to
understand the code, but this isn&amp;rsquo;t easy to measure. Instead, you can use the following proxies:&lt;/p>
&lt;p>&lt;strong>Time to fix a bug&lt;/strong>—Measure the time from when a developer starts working on a bug until the bug fix is ready for code
review. Alternatively, measure the time from when a developer starts working on a bug until their first commit. A first
commit is a good proxy for understanding the bug and starting to fix it.&lt;/p>
&lt;p>&lt;strong>Time to add a new feature&lt;/strong>—Measure the time from when a developer starts working on a new feature until it is ready
for code review.&lt;/p>
&lt;p>&lt;strong>Time to onboard a new team member&lt;/strong>—Measure the time it takes for a new team member to make their first commit.&lt;/p>
&lt;p>&lt;strong>Code style violations&lt;/strong>—Measure the codebase&amp;rsquo;s number of code style violations. Code style violations can be measured
using linters or static analysis tools. Some examples of code style violations relevant to readability are:&lt;/p>
&lt;ul>
&lt;li>Long functions&lt;/li>
&lt;li>Long files&lt;/li>
&lt;li>Deeply nested control structures&lt;/li>
&lt;li>Poorly named variables, such as 1-character variable names&lt;/li>
&lt;/ul>
&lt;p>Instead of measuring these style code violations, you can also enforce them in your CI pipeline. Most languages have
linters that update your code to match a standard style. For example, Go has &lt;a class="link" href="https://pkg.go.dev/cmd/gofmt" target="_blank" rel="noopener"
>&lt;code>gofmt&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="how-to-make-your-codebase-more-readable">&lt;a href="#how-to-make-your-codebase-more-readable" class="header-anchor">&lt;/a>How to make your codebase more readable
&lt;/h2>&lt;p>Readability is not a goal but a process. You can&amp;rsquo;t make your codebase readable overnight, but you can start making
incremental improvements. Whenever you touch a piece of code, try to make it more readable.&lt;/p>
&lt;h3 id="fix-poor-software-structure">&lt;a href="#fix-poor-software-structure" class="header-anchor">&lt;/a>Fix poor software structure
&lt;/h3>&lt;p>One pattern we see frequently is that the functionality of a core feature is spread across multiple software modules.
The first problem this creates is that the software developer trying to understand the feature has to discover all the
modules that implement the feature. Often, this requires grepping the codebase for key names &amp;ndash; a tedious and
error-prone process. The second problem is that the developer has to jump between files and directories to understand
how the feature works, files that often have tons of other unrelated and distracting code.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-before.png">&lt;figcaption>
&lt;h4>Hard to understand feature due to poor software design&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Poor software structure often arises when we hurry to implement a feature and don&amp;rsquo;t consider future developers needing
to make changes. This behavior is reactive software design—one developer reacts to the immediate need to implement a
feature. Later, when implementing new features becomes almost impossible due to unreadable code, they react again by
restructuring the code or rewriting old functionality from scratch. This process makes sense for prototypes or early
products looking for product-market fit, but it is not sustainable for mature long-term software projects.&lt;/p>
&lt;p>Often, developers may not be able to create a good software design when they start working on a new feature because they
don&amp;rsquo;t understand all its ramifications. However, they should restructure their work before moving on to the next
task—the best time to improve code is when you have all the context in your head.&lt;/p>
&lt;p>We can restructure the above code example to move all the feature&amp;rsquo;s functionality into one or two modules. This
reorganization makes it easier to understand the feature because we have to look at a much smaller number of files and
are not distracted by unrelated code.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-after.png">&lt;figcaption>
&lt;h4>Easier to understand feature encapsulated in separate modules&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="refactor-local-code-for-understanding">&lt;a href="#refactor-local-code-for-understanding" class="header-anchor">&lt;/a>Refactor local code for understanding
&lt;/h3>&lt;p>When entering a function, you should quickly understand what it does. The function code should be readable. If an
engineer who first sees the function can&amp;rsquo;t understand it, it is too complex and should be refactored.&lt;/p>
&lt;p>Long functions are difficult to understand because they require the developer to simultaneously keep a lot of
information in their head. Oftentimes, the function presents implementation details to the developer before they can
grasp the big picture. This process is cognitively demanding and error-prone.&lt;/p>
&lt;p>Instead, we can refactor extended functions into smaller functions that each do one thing. This refactoring makes the
code easier to understand because we can understand each small function in isolation. Hide complex logic in functions
with descriptive names.&lt;/p>
&lt;p>In addition, use descriptive names for variables. Good names make the code self-documenting and reduce the need for
comments.&lt;/p>
&lt;p>As an example of a function before and after refactoring, see this
&lt;a class="link" href="https://gist.github.com/getvictor/740c940ec06735ee02bc652f1093e0b8" target="_blank" rel="noopener"
>refactoring example gist&lt;/a>. For a full explanation,
you can &lt;a class="link" href="https://www.youtube.com/watch?v=HCGyWuE9zbY&amp;amp;t=720s" target="_blank" rel="noopener"
>jump to the refactoring section&lt;/a> of the video below.&lt;/p>
&lt;p>For more examples of common refactorings, see our article on
&lt;a class="link" href="../common-refactorings/" >top refactorings every software developer should know&lt;/a>.&lt;/p>
&lt;h3 id="use-unit-and-integration-tests">&lt;a href="#use-unit-and-integration-tests" class="header-anchor">&lt;/a>Use unit and integration tests
&lt;/h3>&lt;p>From a readability perspective, tests are a form of documentation. They show how the code is supposed to work. When
reading a test, you can see how the code is supposed to behave in different scenarios.&lt;/p>
&lt;p>Tests should also be readable. The same restructuring and refactoring principles apply to tests.&lt;/p>
&lt;p>Another essential benefit of tests is that they allow developers to refactor code with confidence. When you refactor
code, you can run the tests to ensure that the code still works as expected. Unfortunately, this means that when you
want to make a change in legacy code without tests, you either have to write tests first or do a lot of manual testing
to ensure that the code still works.&lt;/p>
&lt;h3 id="useful-comments">&lt;a href="#useful-comments" class="header-anchor">&lt;/a>Useful comments
&lt;/h3>&lt;p>Comments should explain why the code is written the way it is, not what the code does. The code should be
self-explanatory with descriptive variable and function names and encapsulated implementation details.&lt;/p>
&lt;p>Sometimes, it is hard to tell the difference between &amp;ldquo;why&amp;rdquo; and &amp;ldquo;what,&amp;rdquo; so feel free to err on the side of commenting.&lt;/p>
&lt;p>You can remove the comment if you renamed a variable or a function, and now the comment duplicates the code. One problem
with comments is that they can get out of date, which is worse than no comments.&lt;/p>
&lt;p>For example, before refactoring, you had this code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// figure out which declarations we should not delete, and put those into keepNames list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">keepNames&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, len(&lt;span style="color:#a6e22e">existingDecls&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>len(&lt;span style="color:#a6e22e">fleetmdm&lt;/span>.&lt;span style="color:#a6e22e">ListFleetReservedMacOSDeclarationNames&lt;/span>()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">existingDecls&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">newP&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">incomingDecls&lt;/span>[&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>]; &lt;span style="color:#a6e22e">newP&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">keepNames&lt;/span> = append(&lt;span style="color:#a6e22e">keepNames&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">keepNames&lt;/span> = append(&lt;span style="color:#a6e22e">keepNames&lt;/span>, &lt;span style="color:#a6e22e">fleetmdm&lt;/span>.&lt;span style="color:#a6e22e">ListFleetReservedMacOSDeclarationNames&lt;/span>()&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After refactoring, the comment is a duplicate and no longer needed. It is even worse in this case because we renamed the
variable, but the comment still refers to the old name. The comment is not only a duplicate but also misleading:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// figure out which declarations we should not delete, and put those into keepNames list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">namesToKeep&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">namesOfDeclarationsToNotDelete&lt;/span>(&lt;span style="color:#a6e22e">existingDecls&lt;/span>, &lt;span style="color:#a6e22e">enrichedDeclarations&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="language-features-that-make-the-code-less-readable">&lt;a href="#language-features-that-make-the-code-less-readable" class="header-anchor">&lt;/a>Language features that make the code less readable
&lt;/h2>&lt;p>Some language features can make the code less readable. We will give an example from Go because we are familiar with Go,
but the same principles apply to other languages.&lt;/p>
&lt;h3 id="go-nested-functions">&lt;a href="#go-nested-functions" class="header-anchor">&lt;/a>Go nested functions
&lt;/h3>&lt;p>Go supports nested functions like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">outer&lt;/span>(&lt;span style="color:#a6e22e">foo&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span>, &lt;span style="color:#a6e22e">bar&lt;/span> &lt;span style="color:#a6e22e">Bar&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inner&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// many lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// of implementation details&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// many lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// of additional code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">something&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inner&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// more code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Upon entering the function as a reader, the first thing you see is the &lt;code>inner&lt;/code> function. The reader is presented with
specific implementation details before understanding the big picture. Instead, the reader should know where the nested
function is used before reading these implementation details.&lt;/p>
&lt;p>One way to solve this issue is to forbid nested functions in your style guide. Always extract nested functions to the
struct level or file level. However, this approach loses the benefits of closures and increases the number of functions
at the struct/file level.&lt;/p>
&lt;p>We hope that the Go team will improve the readability of nested functions in the future. For example, they could allow
nested functions to be defined at the end of the function after the primary implementation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">outer&lt;/span>(&lt;span style="color:#a6e22e">foo&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span>, &lt;span style="color:#a6e22e">bar&lt;/span> &lt;span style="color:#a6e22e">Bar&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// many lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// of additional code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">something&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inner&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// more code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// nested functions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">inner&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// many lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// of implementation details&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively, IDE vendors can improve readability by entirely hiding nested functions by default.&lt;/p>
&lt;h2 id="additional-benefits-of-readable-code">&lt;a href="#additional-benefits-of-readable-code" class="header-anchor">&lt;/a>Additional benefits of readable code
&lt;/h2>&lt;p>As you improve the readability of your code, you will notice several side effects:&lt;/p>
&lt;ul>
&lt;li>Many bugs will be easier to spot&lt;/li>
&lt;li>Other developers will be less likely to interrupt you with questions about your code&lt;/li>
&lt;li>If your code is open source, you may get more contributions&lt;/li>
&lt;/ul>
&lt;h2 id="make-bigger-improvements-to-your-codebase-with-evolutionary-architecture">&lt;a href="#make-bigger-improvements-to-your-codebase-with-evolutionary-architecture" class="header-anchor">&lt;/a>Make bigger improvements to your codebase with evolutionary architecture
&lt;/h2>&lt;p>In the following article, we
&lt;a class="link" href="../scaling-codebase-evolutionary-architecture" >discuss how to make bigger improvements to your codebase with evolutionary architecture&lt;/a>.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>Recently, we
&lt;a class="link" href="../track-engineering-metrics/" >showed how to easily track engineering metrics with GitHub Actions and Google APIs&lt;/a>.&lt;/li>
&lt;li>We also wrote about &lt;a class="link" href="../go-test-execution-time/" >measuring and improving the execution time of Go tests&lt;/a>.&lt;/li>
&lt;li>In addition, we &lt;a class="link" href="../github-code-review-issues/" >pointed out the issues with GitHub&amp;rsquo;s code review process&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch">&lt;a href="#watch" class="header-anchor">&lt;/a>Watch
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/HCGyWuE9zbY"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item></channel></rss>