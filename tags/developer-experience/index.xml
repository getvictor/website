<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer Experience on Victor on Software</title><link>https://victoronsoftware.com/tags/developer-experience/</link><description>Recent content in Developer Experience on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 12 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/developer-experience/index.xml" rel="self" type="application/rss+xml"/><item><title>Why transparency beats everything else in engineering</title><link>https://victoronsoftware.com/posts/engineering-transparency/</link><pubDate>Tue, 12 Aug 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/engineering-transparency/</guid><description>&lt;img src="https://victoronsoftware.com/posts/engineering-transparency/engineering-transparency-headline.png" alt="Featured image of post Why transparency beats everything else in engineering" />&lt;p>Have you ever felt like you&amp;rsquo;re working in a fog? Where everyone&amp;rsquo;s busy, everyone&amp;rsquo;s trying, but somehow nothing important
gets done? I&amp;rsquo;ve been there. The problem isn&amp;rsquo;t the people. It&amp;rsquo;s the system. And specifically, it&amp;rsquo;s the lack of
transparency and accountability.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="#taking-action-what-you-can-do-when-you-have-no-visibility" >Taking action: What you can do when you have no visibility&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#key-takeaways" >Key takeaways&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="the-weekly-dance-of-non-delivery">&lt;a href="#the-weekly-dance-of-non-delivery" class="header-anchor">&lt;/a>The weekly dance of non-delivery
&lt;/h2>&lt;p>Let me take you back a couple of years. I was a tech lead at a large company, working on a project that depended on
another upstream engineering team. Every week, we&amp;rsquo;d have a joint meeting with both teams. And every week, I&amp;rsquo;d ask the
same question, trying to keep my tone professional:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Hey Alex, any update on that component we need from your side?&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;p>And every week, Alex would say:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Ah, I meant to, but I got pulled into something else. I&amp;rsquo;ll try to get to it this week.&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;p>At first, I gave it the benefit of the doubt. Stuff happens. Priorities shift.&lt;/p>
&lt;p>But then it kept happening. Two weeks, three, four. Same story. No progress. No accountability. No one stepping in.&lt;/p>
&lt;p>I was &lt;em>boiling&lt;/em> inside.&lt;/p>
&lt;p>I kept thinking:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;Why is no one telling Alex to work on this? Why don&amp;rsquo;t we have a project manager? Who&amp;rsquo;s making the call on what really
matters?&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;p>We technically had a roadmap. But let&amp;rsquo;s be honest: people didn&amp;rsquo;t actually take it seriously. If something couldn&amp;rsquo;t get
done, it quietly disappeared from the plan. Deadlines slipped. Commitments evaporated. Meanwhile, I had to face my boss
again with another non-update.&lt;/p>
&lt;h2 id="years-in-the-fog">&lt;a href="#years-in-the-fog" class="header-anchor">&lt;/a>Years in the fog
&lt;/h2>&lt;p>The frustration started eating at me. I&amp;rsquo;d sit in those meetings, and darker thoughts would creep in:&lt;/p>
&lt;blockquote>
&lt;p>&amp;ldquo;How did Alex even get promoted? He can&amp;rsquo;t deliver anything.&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;Why am I killing myself here when clearly no one cares? Maybe I should take off for the rest of the day.&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;blockquote>
&lt;p>&amp;ldquo;Maybe I should just get a side gig? At least someone would pay me for work that actually ships.&amp;rdquo;&lt;/p>&lt;/blockquote>
&lt;p>This situation wasn&amp;rsquo;t just a few bad weeks. It was years of my life, years of pretending everything was fine when it
wasn&amp;rsquo;t, years of wondering if this was just how companies worked.&lt;/p>
&lt;p>I&amp;rsquo;d go home exhausted, not from hard work, but from the sheer weight of organizational dysfunction. My wife would ask
how my day was, and I&amp;rsquo;d just shrug. What was there to say? Another day, another meeting, another non-update.&lt;/p>
&lt;h2 id="the-moment-of-clarity">&lt;a href="#the-moment-of-clarity" class="header-anchor">&lt;/a>The moment of clarity
&lt;/h2>&lt;p>Then I switched companies.&lt;/p>
&lt;p>And everything changed.&lt;/p>
&lt;p>In my new company, everyone has access to clear company priorities: what we are building, why it is important, which
customer requests are critical, and who our key customers are. Engineers are empowered to make their own decisions based
on this shared context. If someone can&amp;rsquo;t deliver, they openly communicate why and offer alternatives grounded in the
company&amp;rsquo;s priorities.&lt;/p>
&lt;p>There is no hiding or pretending. Just reality, laid bare.&lt;/p>
&lt;p>That&amp;rsquo;s when it hit me. The problem at my old company wasn&amp;rsquo;t Alex. He wasn&amp;rsquo;t slacking off. He was overwhelmed, like the
rest of us. Everyone was reacting to the noise instead of following the signal. No one had the authority or clarity to
say what actually mattered.&lt;/p>
&lt;p>&lt;strong>This wasn&amp;rsquo;t a communication problem. It was a trust and transparency problem.&lt;/strong> And the absence of that created a
frustrating, demoralizing fog. Everyone thought they were doing the right thing, yet nothing moved forward.&lt;/p>
&lt;p>That experience changed my understanding of leadership.&lt;/p>
&lt;p>Because here&amp;rsquo;s the truth: Without shared visibility and shared accountability, even the best engineers will lose
direction. Polite status meetings won&amp;rsquo;t save you from a broken system.&lt;/p>
&lt;p>As leaders, our job isn&amp;rsquo;t just to set direction. It&amp;rsquo;s to make the invisible visible and to make sure it matters.&lt;/p>
&lt;pre class="mermaid">
---
title: The hidden work iceberg
---
graph TD
subgraph Above[&amp;#34;🌊 Above water&amp;lt;br/&amp;gt;What management sees&amp;#34;]
Spacer1[&amp;#34; &amp;#34;]
A1[&amp;#34;Weekly Status Updates&amp;lt;br/&amp;gt;✓ &amp;#39;Working on it&amp;#39;&amp;#34;]
A2[&amp;#34;Sprint Deliverables&amp;lt;br/&amp;gt;✓ &amp;#39;In progress&amp;#39;&amp;#34;]
A3[&amp;#34;Meeting Attendance&amp;lt;br/&amp;gt;✓ &amp;#39;Present&amp;#39;&amp;#34;]
Spacer1 -.-&amp;gt; A1
Spacer1 -.-&amp;gt; A2
Spacer1 -.-&amp;gt; A3
end
subgraph Below[&amp;#34;🧊 Below water&amp;lt;br/&amp;gt;The reality&amp;#34;]
direction TB
subgraph Row1[&amp;#34; &amp;#34;]
B1[&amp;#34;❌ Blocked by&amp;lt;br/&amp;gt;dependencies&amp;#34;]
B2[&amp;#34;❌ Unclear&amp;lt;br/&amp;gt;priorities&amp;#34;]
B3[&amp;#34;❌ Context&amp;lt;br/&amp;gt;switching&amp;#34;]
end
subgraph Row2[&amp;#34; &amp;#34;]
B4[&amp;#34;❌ Waiting for&amp;lt;br/&amp;gt;decisions&amp;#34;]
B5[&amp;#34;❌ Duplicate&amp;lt;br/&amp;gt;work&amp;#34;]
B6[&amp;#34;❌ Technical&amp;lt;br/&amp;gt;debt&amp;#34;]
end
subgraph Row3[&amp;#34; &amp;#34;]
B7[&amp;#34;❌ No authority&amp;lt;br/&amp;gt;to say no&amp;#34;]
B8[&amp;#34;❌ Overwhelmed&amp;lt;br/&amp;gt;with requests&amp;#34;]
end
end
Above -.-&amp;gt;|&amp;#34;Without Transparency&amp;#34;| Below
style Above fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000
style Below fill:#ffebee,stroke:#d32f2f,stroke-width:2px,color:#000
style Row1 fill:none,stroke:none
style Row2 fill:none,stroke:none
style Row3 fill:none,stroke:none
style Spacer1 fill:none,stroke:none
&lt;/pre>
&lt;h2 id="taking-action-what-you-can-do-when-you-have-no-visibility">&lt;a href="#taking-action-what-you-can-do-when-you-have-no-visibility" class="header-anchor">&lt;/a>Taking action: What you can do when you have no visibility
&lt;/h2>&lt;p>At the first level, you need to be aligned with your manager. You need to know your manager&amp;rsquo;s priorities, which means
knowing what your manager knows. You should strive to know about 90% of what your manager knows.&lt;/p>
&lt;p>If your manager attends cross-functional meetings with other managers where priorities and goals are discussed, you need
to know what&amp;rsquo;s happening at those meetings. There are a few ways to do that:&lt;/p>
&lt;ul>
&lt;li>Watch the recordings of those meetings. If they&amp;rsquo;re not recorded, ask if they could be.&lt;/li>
&lt;li>Read the meeting notes from those meetings. Could your company employ an AI notetaker?&lt;/li>
&lt;li>Ask your manager for a readout from those meetings in your weekly one-on-one.&lt;/li>
&lt;/ul>
&lt;p>Once you feel like you&amp;rsquo;re on the same page as your manager, repeat the process with your manager&amp;rsquo;s manager. If you&amp;rsquo;re
not meeting regularly with your manager&amp;rsquo;s manager, ask for a skip-level meeting and afterwards extend the ask for a
recurring skip-level meeting.&lt;/p>
&lt;h3 id="how-to-ask-for-more-visibility">&lt;a href="#how-to-ask-for-more-visibility" class="header-anchor">&lt;/a>How to ask for more visibility
&lt;/h3>&lt;p>Here&amp;rsquo;s a sample script you can adapt:&lt;/p>
&lt;blockquote>
&lt;p>Hey [Manager], I&amp;rsquo;ve been thinking about how I can be more effective in my role and better support our team&amp;rsquo;s goals.
I&amp;rsquo;d love to have more visibility into the broader priorities and context that drive our work.&lt;/p>
&lt;p>Specifically, I&amp;rsquo;m interested in:&lt;/p>
&lt;ul>
&lt;li>Understanding the key decisions and trade-offs being discussed in cross-functional meetings&lt;/li>
&lt;li>Getting insight into upcoming priorities that might affect our team&amp;rsquo;s roadmap&lt;/li>
&lt;li>Learning about dependencies or blockers other teams are facing that might impact us&lt;/li>
&lt;/ul>
&lt;p>Would it be possible to either:&lt;/p>
&lt;ol>
&lt;li>Get access to recordings/notes from your planning meetings, or&lt;/li>
&lt;li>Have a brief weekly sync where you share the key takeaways?&lt;/li>
&lt;/ol>
&lt;p>I believe having this context would help me make better day-to-day decisions, spot potential issues earlier, and
contribute more strategically to our team&amp;rsquo;s success.&lt;/p>&lt;/blockquote>
&lt;h2 id="key-takeaways">&lt;a href="#key-takeaways" class="header-anchor">&lt;/a>Key takeaways
&lt;/h2>&lt;p>Looking back on my journey from frustration to clarity, here are the lessons that transformed how I work:&lt;/p>
&lt;p>&lt;strong>It&amp;rsquo;s not a communication problem, it&amp;rsquo;s a trust and transparency problem.&lt;/strong> We had meetings. We had updates. What we
didn&amp;rsquo;t have was visibility into what actually mattered.&lt;/p>
&lt;p>&lt;strong>The absence of transparency creates a demoralizing fog.&lt;/strong> When priorities aren&amp;rsquo;t clear and accountability doesn&amp;rsquo;t
exist, everyone thinks they&amp;rsquo;re doing the right thing while nothing moves forward.&lt;/p>
&lt;p>&lt;strong>Great engineers need visibility to thrive.&lt;/strong> Alex wasn&amp;rsquo;t slacking. He was overwhelmed and reacting to noise instead of
signal because no one had the clarity to say what mattered.&lt;/p>
&lt;p>&lt;strong>You need to know what your manager knows.&lt;/strong> Aim for 90% visibility into your manager&amp;rsquo;s context through meeting
recordings, notes, or regular readouts.&lt;/p>
&lt;p>&lt;strong>Leaders must make the invisible visible.&lt;/strong> Their job isn&amp;rsquo;t just to set direction. It is to ensure that priorities,
trade-offs, and blockers are explicit and public.&lt;/p>
&lt;p>The fog I worked in for years wasn&amp;rsquo;t inevitable. It was a broken system where politeness trumped progress. You can build
better systems. You just need to start asking for and creating transparency.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../github-code-review-issues/" >Top 3 issues with GitHub code review process&lt;/a>&lt;/strong>&lt;br>
Discover how poor visibility in code reviews creates bottlenecks and what you can do to improve team collaboration.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../engineering-metrics-no-cost/" >Full-featured engineering metrics—for free&lt;/a>&lt;/strong>&lt;br>
Build transparency dashboards that make engineering work visible to everyone using free tools and GitHub data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../readable-code/" >What is readable code and why is it important?&lt;/a>&lt;/strong>&lt;br>
Learn how code clarity impacts team velocity and why transparency starts at the code level.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="watch-us-discuss-engineering-transparency">&lt;a href="#watch-us-discuss-engineering-transparency" class="header-anchor">&lt;/a>Watch us discuss engineering transparency
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/3oSdwkC7iiI"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>Will AI agents replace software developers?</title><link>https://victoronsoftware.com/posts/will-ai-agents-replace-developers/</link><pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/will-ai-agents-replace-developers/</guid><description>&lt;img src="https://victoronsoftware.com/posts/will-ai-agents-replace-developers/ai-agents-replace-developers-headline.png" alt="Featured image of post Will AI agents replace software developers?" />&lt;p>&lt;strong>TL;DR:&lt;/strong> AI coding agents are becoming mainstream, but their impact is focused mainly on implementation and automated
testing. Productivity gains are real but capped, and engineers must still actively guide and supervise these tools.
Complete developer replacement is unlikely anytime soon.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="#requirements-gathering" >Requirements gathering&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#design" >Design&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#implementation" >Implementation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#testing" >Testing&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#deployment" >Deployment&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#maintenance" >Maintenance&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#ai-coding-agent-impact-across-the-sdlc" >AI coding agent impact across the SDLC&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#will-ai-coding-agents-replace-software-developers" >Will AI coding agents replace software developers?&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="introduction">&lt;a href="#introduction" class="header-anchor">&lt;/a>Introduction
&lt;/h2>&lt;p>AI is no longer just autocomplete. With AI coding agents, it is becoming a collaborator. But what happens when that
collaborator starts writing and testing entire chunks of your codebase? Will software engineers become managers of
fleets of AI agents, or will their jobs evolve in less dramatic ways?&lt;/p>
&lt;p>Our previous article covered the &lt;a class="link" href="../ai-for-software-developers/" >AI trends in the first half of 2025&lt;/a>. Using AI for
code completion and code generation was becoming mainstream. Today, in the second half of 2025, we can expect most
software developers to be using AI, off and on, for these tasks. But what about using AI coding agents to make
significant changes to the codebase, including automatically running and fixing tests? Recent surveys show that most
software engineers are NOT using AI agents. With AI code completion tools like GitHub Copilot being widely adopted
within about one year, we can reasonably assume that AI agents will likewise be widely adopted by the second half
of 2026. With that in mind, what will a typical engineer&amp;rsquo;s day look like in 2026?&lt;/p>
&lt;h3 id="ai-tools-adoption-timeline-in-software-development">&lt;a href="#ai-tools-adoption-timeline-in-software-development" class="header-anchor">&lt;/a>AI tools adoption timeline in software development
&lt;/h3>&lt;pre class="mermaid">
timeline
2022-2023 : GitHub Copilot Launch
: Early AI code completion
: Developer experimentation
2024 : Code completion mainstream
: ChatGPT for development
: Basic code generation
2025 : Advanced code generation
: AI debugging tools
: Early AI agents (experimental)
2026 : AI agents widely adopted
: Automated testing with AI
: AI code review assistants
2027+ : AI-native development workflows
: Advanced agent orchestration
: Full SDLC integration
&lt;/pre>
&lt;p>Let&amp;rsquo;s walk through the software development lifecycle (SDLC) and understand where these new AI coding agents can be
used. We will focus specifically on the new capabilities that AI coding agents bring, and not on the existing and
largely mainstream capabilities of AI code completion and chatbots.&lt;/p>
&lt;pre class="mermaid">
---
title: SDLC
---
graph LR
Requirements[Requirements gathering] --&amp;gt; Design[Design]
Design --&amp;gt; Implementation[Implementation]
Implementation --&amp;gt; Testing[Testing]
Testing --&amp;gt; Deployment[Deployment]
Deployment --&amp;gt; Maintenance[Maintenance]
%% Color coding based on AI agent impact level
%% Low impact - light blue
%% Medium impact - yellow/orange
%% High impact - green
classDef lowImpact fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000
classDef mediumImpact fill:#fff3e0,stroke:#f57c00,stroke-width:2px,color:#000
classDef highImpact fill:#e8f5e8,stroke:#388e3c,stroke-width:2px,color:#000
class Requirements,Deployment lowImpact
class Design,Maintenance mediumImpact
class Implementation,Testing highImpact
&lt;/pre>
&lt;h2 id="requirements-gathering">&lt;a href="#requirements-gathering" class="header-anchor">&lt;/a>Requirements gathering
&lt;/h2>&lt;p>In requirements gathering, we need to figure out why we are adding a feature and what the feature is, at a high level.
We have two major sources of product features. The first one is a strategic feature that will open up new sources of
revenue for us. The second is a customer request, which we must build to keep our customers happy. A single feature
could be both of these.&lt;/p>
&lt;p>To understand the customer, we actually need to talk to the customer. Barring that, we could do market analysis to see
what similar features our competition has. ChatGPT can speed up this process by aggregating and explaining the
information. In this case, ChatGPT makes research more efficient, much like Google made research more efficient than
going to the library. But this is not a new AI use case. Product managers have been using AI to speed up their work for
years now.&lt;/p>
&lt;p>As far as figuring out what we&amp;rsquo;re building and why, AI coding agents may have little to add. That said, they may have
some use cases, such as writing a script to fetch and analyze data from a public API.&lt;/p>
&lt;p>&lt;em>Note:&lt;/em> Requirements gathering combines the planning and requirements analysis phases, assuming we use a fast-paced
Agile iterative process.&lt;/p>
&lt;h2 id="design">&lt;a href="#design" class="header-anchor">&lt;/a>Design
&lt;/h2>&lt;p>In the design phase, we get into the details of what we&amp;rsquo;re building. We specify the UI requirements, API changes,
integrations with other services, and other technical requirements.&lt;/p>
&lt;h3 id="spike-stories-and-proof-of-concepts-pocs">&lt;a href="#spike-stories-and-proof-of-concepts-pocs" class="header-anchor">&lt;/a>Spike stories and proof of concepts (POCs)
&lt;/h3>&lt;p>Often, there are enough uncertainties in the feature that software engineers must do a spike story or build a POC. A
spike story is an Agile user story to research a technical question. Spike stories uncover things like:&lt;/p>
&lt;ul>
&lt;li>Technical feasibility (e.g., can we use TPM to sign HTTP messages?)&lt;/li>
&lt;li>Implementation approach (e.g., should we use webhooks or polling?)&lt;/li>
&lt;li>Integration behavior (e.g., how does this 3rd party API handle pagination and errors?)&lt;/li>
&lt;li>Tool or library evaluation (e.g., does this 3rd party library provide all the features we need?)&lt;/li>
&lt;li>Unknown complexities or risk (e.g., will this actually work?)&lt;/li>
&lt;/ul>
&lt;p>In a spike story or POC, we often write quick throwaway code without other architectural considerations, such as
maintainability. And this is where AI coding agents can help. Theoretically, an AI coding agent can create a whole POC
with only a cursory review from the software developer. But this is an extreme case. In most cases, the work will be a
mix of coding, reviewing technical documentation, searching the web, and talking with ChatGPT.&lt;/p>
&lt;p>So, with the help of an AI coding agent, we could finish our spike story faster. If the work was timeboxed, the end
result should be higher quality.&lt;/p>
&lt;h3 id="final-design">&lt;a href="#final-design" class="header-anchor">&lt;/a>Final design
&lt;/h3>&lt;p>After the spike story, we still need to finish the design, providing all the technical specifications required for
estimation and implementation. These details include an understanding of how this feature interacts with all the other
parts of our application, such as:&lt;/p>
&lt;ul>
&lt;li>UI&lt;/li>
&lt;li>configuration&lt;/li>
&lt;li>authentication&lt;/li>
&lt;li>monitoring and logging&lt;/li>
&lt;li>error handling&lt;/li>
&lt;li>scalability and performance&lt;/li>
&lt;li>internationalization&lt;/li>
&lt;/ul>
&lt;p>Although some of these aspects are shared between features, we, as software developers, still need to consider and
investigate the new feature&amp;rsquo;s implications. AI coding agents are of little help here, besides providing boilerplate
requirements.&lt;/p>
&lt;h2 id="implementation">&lt;a href="#implementation" class="header-anchor">&lt;/a>Implementation
&lt;/h2>&lt;p>After the feature has been designed and estimated, it is time to get down to the work of coding. Can an AI agent do all
of this? Well, we may not be able to take the design and feed it to our agent. A product manager or another engineer may
have done the design, and this design may lack enough details for implementation. So we have to add details, like:&lt;/p>
&lt;ul>
&lt;li>Function names (e.g., &lt;code>sendEmailNotification&lt;/code>)&lt;/li>
&lt;li>Constant and enum names (e.g., &lt;code>RoleAdmin&lt;/code>)&lt;/li>
&lt;li>File and package structure (e.g., &lt;code>handlers/user.go&lt;/code>)&lt;/li>
&lt;li>Error handling strategy (e.g., wrap errors and add context)&lt;/li>
&lt;li>Interface design (e.g., create a new interface to simplify testing)&lt;/li>
&lt;li>Security considerations (e.g., validate inputs)&lt;/li>
&lt;/ul>
&lt;p>Yes, an AI coding agent may indeed come up with some of these on its own. However, we must consciously consider these to
ensure our codebase is maintainable, testable, scalable, and handles corner cases.&lt;/p>
&lt;p>So, once we know what we need to code, we can write a prompt to the AI coding agent and let it do its work. Today&amp;rsquo;s AI
coding agents are not very fast. In our experience, we ask an AI agent to do a chunk of work, and it completes it in
several minutes. Then we do a brief review of what it did and come back to it with corrections. Corrections often
include things like:&lt;/p>
&lt;ul>
&lt;li>Using the correct coding standards for our codebase&lt;/li>
&lt;li>Removing unneeded code (e.g., handling cases that we know cannot happen)&lt;/li>
&lt;li>Removing/merging duplicate code&lt;/li>
&lt;li>Using better names for functions/variables (e.g., don&amp;rsquo;t use &lt;code>err2&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>If we let the AI agent do a bigger chunk of work (30+ minutes), there is a greater chance that it will go off the rails,
and all the work must be redone. For example, an AI agent could decide to implement a third-party library itself because
it couldn&amp;rsquo;t figure out how to use the existing one.&lt;/p>
&lt;pre class="mermaid">
---
title: AI agent development workflow
---
flowchart TD
A[Developer writes prompt] --&amp;gt; B[AI agent codes&amp;lt;br/&amp;gt;3-5 minutes]
B --&amp;gt; C[Human reviews code]
C --&amp;gt; D{Code acceptable?}
D --&amp;gt;|No| E[Developer provides&amp;lt;br/&amp;gt;corrections]
E --&amp;gt; B
D --&amp;gt;|Yes| F[Final code review]
F --&amp;gt; G[Ask AI agent to review code]
G --&amp;gt; H[Human peer review]
H --&amp;gt; I[Ready for QA]
%% Styling
classDef humanTask fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000
classDef aiTask fill:#fff3e0,stroke:#f57c00,stroke-width:2px,color:#000
classDef reviewTask fill:#e8f5e8,stroke:#388e3c,stroke-width:2px,color:#000
class A,C,E,F,H humanTask
class B,G aiTask
class D,I reviewTask
&lt;/pre>
&lt;p>Once we reach a good stopping point, we need to review all the code changes that we and our AI agent have made. Since
much of the code was autogenerated, we must take extra care to do a thorough review. The goal is to fully understand the
implementation so that we can speak about it as if we coded all of it ourselves.&lt;/p>
&lt;p>Once we have checked in the code or opened a PR, we can ask another AI agent to review it. With multiple LLMs and coding
agents out there, it is good practice to have one AI agent check the work of another AI agent for anything that we may
have missed. Unfortunately, this means wading through a few false positives. However, the end result is higher-quality
code that is ready for one of our peers to review.&lt;/p>
&lt;h3 id="multitasking-with-multiple-ai-agents">&lt;a href="#multitasking-with-multiple-ai-agents" class="header-anchor">&lt;/a>Multitasking with multiple AI agents
&lt;/h3>&lt;p>Some developers report using multiple AI agents to work on numerous projects simultaneously. In our workflow, this
approach is not practical. We know from behavioral science research that it takes a human up to 15 minutes to entirely
switch between different tasks because they must reload and recall all of the context associated with the new task into
their brain. So, if we switch between tasks every 5-10 minutes, the result is that we&amp;rsquo;re never deeply engaged with any
of these tasks, likely leading to lower quality software.&lt;/p>
&lt;p>Perhaps two AI coding agents can work on two tasks for the same feature. However, in this case, the two tasks must be
independent, which is more of an exception than the norm.&lt;/p>
&lt;p>Even if we decide to save some time by switching from AI agent coding to a longer task, such as a code review for one of
our peers, when we return to the agent, we will need to recall what we told the agent to do and what our expectations
were.&lt;/p>
&lt;h3 id="integration-with-the-rest-of-the-codebase">&lt;a href="#integration-with-the-rest-of-the-codebase" class="header-anchor">&lt;/a>Integration with the rest of the codebase
&lt;/h3>&lt;p>A lot of software development work involves hooking up the feature into the existing codebase. For example, we need to
create the new object and properly do dependency injection. These things often only take a few lines of code. Although
AI coding agents can do these integrations, it is often just as fast and more reliable to manually code these smaller
snippets.&lt;/p>
&lt;h3 id="full-stack-development">&lt;a href="#full-stack-development" class="header-anchor">&lt;/a>Full stack development
&lt;/h3>&lt;p>AI coding agents can help you write in a programming language you&amp;rsquo;re unfamiliar with. The agent will do the brunt work,
getting the syntax (mostly) right, and you can review the code to make sure it looks reasonable. This means software
developers can easily expand beyond their functional specialty into other languages and parts of the codebase.&lt;/p>
&lt;p>From an SDLC perspective, a single feature is now more likely to be assigned to a single developer instead of being
partitioned across backend/frontend or server/client boundaries. In this case, a single developer should be able to
finish a feature faster, without the handoffs and the issues they entail.&lt;/p>
&lt;p>Overall, AI coding agents can significantly help speed up the implementation phase. However, we must note that AI agent
effectiveness varies by task. Specifically, agents struggle with complex/niche designs and unfamiliar contexts.&lt;/p>
&lt;h2 id="testing">&lt;a href="#testing" class="header-anchor">&lt;/a>Testing
&lt;/h2>&lt;p>The two main testing areas are automated tests, including unit and integration tests, and manual tests.&lt;/p>
&lt;h3 id="automated-unit-tests">&lt;a href="#automated-unit-tests" class="header-anchor">&lt;/a>Automated (unit) tests
&lt;/h3>&lt;p>Writing tests has been a primary use case for generative AI over the past few years. So, given detailed instructions
regarding the scenarios to test, an AI coding agent should be able to write the test, run the test, and fix any issues.
The software developer will still need to review and adjust the tests. Some common problems with agent-generated tests
include:&lt;/p>
&lt;ul>
&lt;li>Not following project standards regarding the test helper methods being used (e.g., wrong HTTP client, wrong assert
method)&lt;/li>
&lt;li>Wordy and hard to maintain tests (e.g., not following a table test approach, not using subtests)&lt;/li>
&lt;li>Duplicated tests (e.g., testing a case that was covered elsewhere in the test suite)&lt;/li>
&lt;li>Using numbers in test variables instead of descriptive names (e.g., rsp1, err2)&lt;/li>
&lt;li>Not actually testing anything (e.g., hard-coding test expectations in the source implementation)&lt;/li>
&lt;/ul>
&lt;p>The AI agent may come up with some corner cases to test, but it cannot be relied on for full functional correctness.
Since the AI agent can see the implementation, it often bases its tests on what has been implemented. It lacks an
understanding of the intended requirements and, hence, what should be tested.&lt;/p>
&lt;h3 id="manual-tests">&lt;a href="#manual-tests" class="header-anchor">&lt;/a>Manual tests
&lt;/h3>&lt;p>Before handing over the implementation to the QA team, the software developer should review the test plan themselves and
perform all the manual tests. Any issues found can be candidates for additional automated tests.&lt;/p>
&lt;p>There is no AI agent today that can replace manual testers, but engineers can try to take advantage of AI to help in
some areas:&lt;/p>
&lt;ul>
&lt;li>Convert natural language to test steps&lt;/li>
&lt;li>Identify visual (UI) regressions&lt;/li>
&lt;li>Accessibility testing&lt;/li>
&lt;li>Auto-healing tests: updating tests when UI changes&lt;/li>
&lt;/ul>
&lt;p>So, for the testing phase, AI coding agents provide much help with creating and fixing automated tests, but not so much
with manual testing.&lt;/p>
&lt;h2 id="deployment">&lt;a href="#deployment" class="header-anchor">&lt;/a>Deployment
&lt;/h2>&lt;p>Before deploying the app to customers, engineers should do a release readiness check covering items like:&lt;/p>
&lt;ul>
&lt;li>All committed features implemented&lt;/li>
&lt;li>Testing and QA complete&lt;/li>
&lt;li>Security checks passed&lt;/li>
&lt;li>Load testing complete&lt;/li>
&lt;/ul>
&lt;p>After deployment, engineers should conduct smoke tests and health checks to ensure the app is working.&lt;/p>
&lt;p>In addition, deployment involves communication tasks, such as:&lt;/p>
&lt;ul>
&lt;li>demos, guides, FAQs&lt;/li>
&lt;li>release notes and changelogs&lt;/li>
&lt;/ul>
&lt;p>Generative AI is being used to generate some communication content. AI coding agents can provide little additional value
in the deployment phase.&lt;/p>
&lt;h2 id="maintenance">&lt;a href="#maintenance" class="header-anchor">&lt;/a>Maintenance
&lt;/h2>&lt;p>The maintenance phase of the software development lifecycle includes:&lt;/p>
&lt;ul>
&lt;li>Answering customer and internal questions&lt;/li>
&lt;li>Responding to alerts and incidents (e.g., investigating high CPU usage, resolving a failed background job)&lt;/li>
&lt;li>Reproducing and fixing customer-reported bugs&lt;/li>
&lt;/ul>
&lt;p>AI search tools have been helpful with searching the codebase and documentation to answer questions. Some upcoming tools
are trying to close the loop between production monitoring and source code fixes, and this is a great area to watch.
Reproducing bugs is still very much a manual process.&lt;/p>
&lt;p>Fixing bugs is an implementation task, so AI coding agents can help create the fix and a unit test. However, bug fixes
tend to be small in nature, with most of the software engineer&amp;rsquo;s time spent figuring out where the bug is and how best
to fix it.&lt;/p>
&lt;h2 id="ai-coding-agent-impact-across-the-sdlc">&lt;a href="#ai-coding-agent-impact-across-the-sdlc" class="header-anchor">&lt;/a>AI coding agent impact across the SDLC
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>SDLC Phase&lt;/th>
&lt;th>AI Agent Impact&lt;/th>
&lt;th>🔍 Notes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>📝 Requirements&lt;/td>
&lt;td>❌ Low&lt;/td>
&lt;td>Some research support, but little for strategic/product thinking&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>🧠 Design&lt;/td>
&lt;td>⚠️ Low–Medium&lt;/td>
&lt;td>Help limited to spike stories and boilerplate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>💻 Implementation&lt;/td>
&lt;td>✅ High&lt;/td>
&lt;td>Most benefit seen here (code gen, agent pair programming)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>🧪 Automated Testing&lt;/td>
&lt;td>✅ High&lt;/td>
&lt;td>Strong at generating/fixing tests, needs human oversight&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>🧍 Manual Testing&lt;/td>
&lt;td>❌ Low&lt;/td>
&lt;td>Still mostly a human-driven process&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>🚀 Deployment&lt;/td>
&lt;td>❌ Low&lt;/td>
&lt;td>Some help with writing release notes, limited technical role&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>🔧 Maintenance&lt;/td>
&lt;td>⚠️ Medium&lt;/td>
&lt;td>Good at fixes; weak at reproducing or analyzing issues&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="risk-and-tradeoffs">&lt;a href="#risk-and-tradeoffs" class="header-anchor">&lt;/a>Risk and tradeoffs
&lt;/h2>&lt;p>While AI coding agents offer clear benefits, they also introduce new risks and tradeoffs that teams must actively
manage:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Shallow code understanding&lt;/strong>: Engineers may be tempted to rely on agents without fully understanding the generated
code. This erodes accountability and leads to slower debugging when issues arise.&lt;/li>
&lt;li>&lt;strong>Inconsistent quality&lt;/strong>: Agent-generated code can be verbose, redundant, or subtly incorrect. Without careful review,
these issues can slip into production.&lt;/li>
&lt;li>&lt;strong>Developer deskilling&lt;/strong>: Over-reliance on agents may reduce hands-on practice with fundamentals, particularly for
junior engineers who are still developing intuition.&lt;/li>
&lt;li>&lt;strong>Security and compliance&lt;/strong>: Agents can unknowingly introduce vulnerabilities or use unsafe patterns, especially when
integrating with third-party APIs or handling sensitive data.&lt;/li>
&lt;/ul>
&lt;p>In short, AI agents amplify output, but without discipline and oversight, they can amplify problems too. Teams must
treat agent-generated code with &lt;strong>greater&lt;/strong> rigor than human-written code.&lt;/p>
&lt;h2 id="will-ai-coding-agents-replace-software-developers">&lt;a href="#will-ai-coding-agents-replace-software-developers" class="header-anchor">&lt;/a>Will AI coding agents replace software developers?
&lt;/h2>&lt;p>Recent studies suggest that current AI tools improve productivity by 10% to 20%.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://arxiv.org/abs/2410.12944" target="_blank" rel="noopener"
>AI speeds up Google engineers by 21%&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://nypost.com/2025/03/14/business/jpmorgan-credits-coding-assistant-tool-for-boosting-engineers-efficiency/" target="_blank" rel="noopener"
>JPMorgan claims AI boosts efficiency by up to 20%&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.itpro.com/software/development/atlassian-says-ai-has-created-an-unexpected-paradox-for-software-developers-theyre-saving-over-10-hours-a-week-but-theyre-still-overworked-and-losing-an-equal-amount-of-time-due-to-organizational-inefficiencies" target="_blank" rel="noopener"
>Atlassian says AI is saving over 10 hours per week&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.reuters.com/business/ai-slows-down-some-experienced-software-developers-study-finds-2025-07-10" target="_blank" rel="noopener"
>AI slows down some developers&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>So, will the productivity improvements jump with AI coding agents becoming mainstream? Will one engineer be able to do
the work of a whole team?&lt;/p>
&lt;p>Looking at the whole software development process, we see that the most significant gains from AI coding agents are in
the implementation and automated testing phases. The consensus from studies and industry reports is that software
engineers spend only about 30% of their time writing code. The rest of the time is spent in the other phases of the
SDLC, as well as on other tasks such as:&lt;/p>
&lt;ul>
&lt;li>attending and preparing for meetings (e.g., planning, retros, 1:1s)&lt;/li>
&lt;li>mentoring, teaching, and continuous learning&lt;/li>
&lt;li>context switching and task juggling&lt;/li>
&lt;li>recruiting, interviewing, and candidate evaluation&lt;/li>
&lt;li>writing or reviewing internal documentation, ADRs, and RFCs&lt;/li>
&lt;li>developer advocacy, blogging, and community engagement&lt;/li>
&lt;li>travel for conferences, offsites, or customer visits&lt;/li>
&lt;li>improving tooling, automation, and developer environments&lt;/li>
&lt;/ul>
&lt;p>Even assuming AI agents completely automate coding tasks (30% of work), the maximum productivity gain would be 43%: if
70% of work remains unchanged, then 30% time savings translates to doing 1.43x the work. In other words, 7 people can
now do the work of 10 people. This is far from the popular claims that AI will replace all software engineers.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/will-ai-agents-replace-developers/productivity-gain.svg">
&lt;/figure>
&lt;p>In summary, AI in general and AI coding agents in particular should continue to have a noticeable impact on software
developer productivity. However, developers&amp;rsquo; work is complex and varied, and AI can only provide efficiency improvements
and not wholesale replacement. AI coding agents won&amp;rsquo;t replace developers, but developers who know how to use them will
replace those who don&amp;rsquo;t.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../ai-for-software-developers/" >How to use AI for software development (2025)&lt;/a>&lt;/strong>&lt;br>
&lt;em>What every software engineer needs to know about AI right now: code completion, generation, and AI agents.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../introducing-mcp/" >Introducing MCP: Lessons from building an AI-driven server&lt;/a>&lt;/strong>&lt;br>
&lt;em>How we taught an AI agent to use our product with MCP.&lt;/em>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="watch-us-discuss-whether-ai-agents-can-replace-software-developers">&lt;a href="#watch-us-discuss-whether-ai-agents-can-replace-software-developers" class="header-anchor">&lt;/a>Watch us discuss whether AI agents can replace software developers
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/fdBxpWXajSE"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to speed up a large Go test suite</title><link>https://victoronsoftware.com/posts/large-go-test-suite/</link><pubDate>Wed, 09 Apr 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/large-go-test-suite/</guid><description>&lt;img src="https://victoronsoftware.com/posts/large-go-test-suite/large-go-test-suite-headline.png" alt="Featured image of post How to speed up a large Go test suite" />&lt;p>Fast Continuous Integration (CI) test results are crucial for maintaining a good developer velocity. Quick test results
give developers immediate feedback on their changes, resulting in a more enjoyable development process. For critical
changes, slow tests can become a bottleneck, delaying deployments.&lt;/p>
&lt;p>Previously, we covered &lt;a class="link" href="../go-test-execution-time/" >how to accurately measure the execution time of Go tests&lt;/a>. This
article will demonstrate one approach to breaking apart a large Go test suite and running each part in parallel. This
approach should reduce the CI cycle time, benefitting developers and the organization.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="#split-up-the-go-test-suite" >Split up the Go test suite&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#create-parallel-go-test-jobs-in-ci" >Create parallel Go test jobs in CI&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="understanding-your-go-test-suite">&lt;a href="#understanding-your-go-test-suite" class="header-anchor">&lt;/a>Understanding your Go test suite
&lt;/h2>&lt;p>The standard way to run all the tests in your Go project is with the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go test ./...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command will compile all the Go packages and their tests, each compiling to a separate binary. The Go toolchain
will then run each binary in parallel. The &lt;code>-p&lt;/code> flag controls this parallel test behavior, which defaults to the number
of CPUs on your machine.&lt;/p>
&lt;p>Splitting up the test suite makes sense if you have a lot of packages to test. If you have few packages or if you have 1
or 2 packages that dominate your project&amp;rsquo;s test run time, then a simple split may not help much. You may need to
refactor your code or split the tests in a single Go package across multiple CI jobs. Splitting a single package is
generally inefficient since each CI job must compile the same package separately, and we will not cover this approach.&lt;/p>
&lt;p>To find all the packages in your project, you can list them with the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go list ./...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To identify time-consuming packages, you can run your test suite with the &lt;code>-json&lt;/code> switch and save the results. Then,
find the elapsed time of each package and sort the times. This operation can be done with &lt;a class="link" href="https://jqlang.org/" target="_blank" rel="noopener"
>jq&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cat test-result.json | jq -s &lt;span style="color:#e6db74">&amp;#39;map(select(has(&amp;#34;Test&amp;#34;) | not)) | group_by(.Package) | map({package: .[0].Package, elapsed: (map(.Elapsed) | add)}) | sort_by(.elapsed) | reverse&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="split-up-the-go-test-suite">&lt;a href="#split-up-the-go-test-suite" class="header-anchor">&lt;/a>Split up the Go test suite
&lt;/h2>&lt;p>You can specify the packages at the end of the &lt;code>go test&lt;/code> command to run a subset of packages in a CI job. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go test ./cmd/fleetctl/... ./server/service
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next, manually create groups of packages and identify them with a name.&lt;/p>
&lt;p>To create a catchall group for packages that were not explicitly assigned to a group, you can use the Linux
&lt;a class="link" href="https://linux.die.net/man/1/comm" target="_blank" rel="noopener"
>comm&lt;/a> command to generate the remaining packages. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>comm -23 &amp;lt;&lt;span style="color:#f92672">(&lt;/span>go list ./... | sort&lt;span style="color:#f92672">)&lt;/span> &amp;lt;&lt;span style="color:#f92672">({&lt;/span> go list ./cmd/fleetctl/... &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> go list ./server/service/... ;&lt;span style="color:#f92672">}&lt;/span> | sort&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above command returns the packages unique to the first list, which includes all the packages (&lt;code>./...&lt;/code>).&lt;/p>
&lt;p>The following is a real-world example from Fleet&amp;rsquo;s Makefile that creates test suite groups with identifiers:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Makefile" data-lang="Makefile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Set up packages for CI testing.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>DEFAULT_PKGS_TO_TEST &lt;span style="color:#f92672">:=&lt;/span> ./cmd/... ./ee/... ./orbit/pkg/... ./orbit/cmd/orbit ./pkg/... ./server/... ./tools/...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># fast tests are quick and do not require out-of-process dependencies (such as MySQL, etc.)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>FAST_PKGS_TO_TEST &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ./ee/tools/mdm &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ./orbit/pkg/cryptoinfo &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ./orbit/pkg/dataflatten &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ./orbit/pkg/keystore &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ./server/goose &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ./server/mdm/apple/appmanifest &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ./server/mdm/lifecycle &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ./server/mdm/scep/challenge &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ./server/mdm/scep/x509util &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> ./server/policies
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>FLEETCTL_PKGS_TO_TEST &lt;span style="color:#f92672">:=&lt;/span> ./cmd/fleetctl/...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MYSQL_PKGS_TO_TEST &lt;span style="color:#f92672">:=&lt;/span> ./server/datastore/mysql/... ./server/mdm/android/mysql
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SCRIPTS_PKGS_TO_TEST &lt;span style="color:#f92672">:=&lt;/span> ./orbit/pkg/scripts
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>SERVICE_PKGS_TO_TEST &lt;span style="color:#f92672">:=&lt;/span> ./server/service
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>VULN_PKGS_TO_TEST &lt;span style="color:#f92672">:=&lt;/span> ./server/vulnerabilities/...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">ifeq&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>CI_TEST_PKG&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">main)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># This is the bucket of all the tests that are not in a specific group. We take a diff between DEFAULT_PKG_TO_TEST and all the specific *_PKGS_TO_TEST.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> CI_PKG_TO_TEST&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>shell /bin/bash -c &lt;span style="color:#e6db74">&amp;#34;comm -23 &amp;lt;(go list &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>DEFAULT_PKGS_TO_TEST&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> | sort) &amp;lt;({ \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> go list &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>FAST_PKGS_TO_TEST&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74"> &amp;amp;&amp;amp; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> go list &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>FLEETCTL_PKGS_TO_TEST&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74"> &amp;amp;&amp;amp; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> go list &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>MYSQL_PKGS_TO_TEST&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74"> &amp;amp;&amp;amp; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> go list &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>SCRIPTS_PKGS_TO_TEST&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74"> &amp;amp;&amp;amp; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> go list &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>SERVICE_PKGS_TO_TEST&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74"> &amp;amp;&amp;amp; \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> go list &lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>VULN_PKGS_TO_TEST&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#e6db74"> \
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> ;} | sort)&amp;#34;&lt;/span>&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">else&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ifeq&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>CI_TEST_PKG&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">fast)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CI_PKG_TO_TEST&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>FAST_PKGS_TO_TEST&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">else&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ifeq&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>CI_TEST_PKG&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">fleetctl)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CI_PKG_TO_TEST&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>FLEETCTL_PKGS_TO_TEST&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">else&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ifeq&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>CI_TEST_PKG&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">mysql)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CI_PKG_TO_TEST&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>MYSQL_PKGS_TO_TEST&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">else&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ifeq&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>CI_TEST_PKG&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">scripts)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CI_PKG_TO_TEST&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>SCRIPTS_PKGS_TO_TEST&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">else&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ifeq&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>CI_TEST_PKG&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">service)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CI_PKG_TO_TEST&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>SERVICE_PKGS_TO_TEST&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">else&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">ifeq&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">(&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>CI_TEST_PKG&lt;span style="color:#66d9ef">)&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">vuln)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CI_PKG_TO_TEST&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>VULN_PKGS_TO_TEST&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> CI_PKG_TO_TEST&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#66d9ef">$(&lt;/span>DEFAULT_PKGS_TO_TEST&lt;span style="color:#66d9ef">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">endif&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="create-parallel-go-test-jobs-in-ci">&lt;a href="#create-parallel-go-test-jobs-in-ci" class="header-anchor">&lt;/a>Create parallel Go test jobs in CI
&lt;/h2>&lt;p>The major CI tools provide a way to start multiple jobs in parallel. In GitHub, this is done with a
&lt;a class="link" href="https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/running-variations-of-jobs-in-a-workflow" target="_blank" rel="noopener"
>matrix strategy&lt;/a>.&lt;/p>
&lt;p>In the previous step, we gave an example of named test suites. Now, we feed those names into the GitHub matrix job:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">test-go&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">strategy&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">matrix&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">suite&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;fast&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;fleetctl&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;main&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;mysql&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;scripts&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;service&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;vuln&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">os&lt;/span>: [&lt;span style="color:#ae81ff">ubuntu-latest]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">${{ matrix.os }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout Code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9&lt;/span> &lt;span style="color:#75715e"># v3.5.3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install Go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-go@0a12ed9d6a96ab950c8f026ed9f722fe0da7ef32&lt;/span> &lt;span style="color:#75715e"># v5.0.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">go-version-file&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;go.mod&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Run Go Tests&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">CI_TEST_PKG=${{ matrix.suite }} make test-go&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above workflow runs our test suites in parallel, speeding up our overall CI cycle time.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;p>Recently, we covered &lt;a class="link" href="../analyze-go-build/" >analyzing Go build times&lt;/a>.&lt;/p>
&lt;p>In the past, we reviewed &lt;a class="link" href="../fuzz-testing-with-go/" >the state of fuzz testing in Go&lt;/a>.&lt;/p>
&lt;h2 id="watch-how-to-break-apart-a-large-go-test-suite">&lt;a href="#watch-how-to-break-apart-a-large-go-test-suite" class="header-anchor">&lt;/a>Watch how to break apart a large Go test suite
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/AFVlbf5LZwc"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>6 business benefits of software modularity and cohesion</title><link>https://victoronsoftware.com/posts/software-modularity/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/software-modularity/</guid><description>&lt;img src="https://victoronsoftware.com/posts/software-modularity/software-modularity-headline.png" alt="Featured image of post 6 business benefits of software modularity and cohesion" />&lt;p>&lt;em>This article is part of a series on &lt;strong>technical debt&lt;/strong>. Check out the previous articles:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="../readable-code/" >Why readable code is essential&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" >Incrementally scaling a codebase with evolutionary architecture&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../code-complexity-metrics/" >Top software code complexity metrics&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="introduction">&lt;a href="#introduction" class="header-anchor">&lt;/a>Introduction
&lt;/h2>&lt;p>Modularity and cohesion are key software engineering concepts that software engineers frequently misunderstand.
Frequently, software developers know that modularity is good in some vague general sense, but they can&amp;rsquo;t quantify the
benefits. This lack of understanding leads to poor decisions when adding new functionality or fixing system bugs, often
leading to the proverbial big ball of mud codebase. Sometimes, engineers feel like it is their manager or software
architect&amp;rsquo;s job to define the modules of a system, and they are simply responsible for implementing the details in the
quickest way they know how.&lt;/p>
&lt;p>This article provides
&lt;a class="link" href="#business-benefits-of-a-modular-codebase" >specific reasons why using or adding modularity to your existing growing codebase is a good business decision&lt;/a>.
Sometimes, engineers intuitively know how to do a good job, but they can&amp;rsquo;t explain it to business stakeholders. We try
to explain.&lt;/p>
&lt;h2 id="its-all-about-complexity">&lt;a href="#its-all-about-complexity" class="header-anchor">&lt;/a>It&amp;rsquo;s all about complexity
&lt;/h2>&lt;p>One of the challenging problems in software engineering is managing complexity. Modularity is a tool for managing
complexity. When we speak of complexity, we are referring to a mature, growing codebase with 10 or more software
developers. A young codebase with a couple of developers will benefit from modularity but not as much as a bigger, more
complex codebase.&lt;/p>
&lt;p>Bigger organizations must manage the complexity of both people and systems. People must be able to work independently at
maximum velocity without being slowed down by others. Systems must be simple enough to think about without being
overwhelmed. Complexity increases the cost of ownership of software because:&lt;/p>
&lt;ul>
&lt;li>engineers cannot move at maximum velocity due to coupling to other teams or parts of the codebase&lt;/li>
&lt;li>engineers cannot understand the code, leading to slow development and more bugs&lt;/li>
&lt;/ul>
&lt;h3 id="the-hero-engineer-anti-pattern">&lt;a href="#the-hero-engineer-anti-pattern" class="header-anchor">&lt;/a>The &amp;ldquo;hero engineer&amp;rdquo; anti-pattern
&lt;/h3>&lt;p>Complex codebases often have &amp;ldquo;hero developers&amp;rdquo; who know the codebase and become the go-to people for solving critical
issues or implementing complex features. The prevalence of such heroes may be a sign that your codebase is too complex
and that you must change things to scale your business.&lt;/p>
&lt;p>The &amp;ldquo;hero engineer&amp;rdquo; may be contributing to the complexity issue by:&lt;/p>
&lt;ul>
&lt;li>focusing on quick fixes rather than long-term solutions&lt;/li>
&lt;li>insisting that the current codebase is just fine because &amp;ldquo;that&amp;rsquo;s how we&amp;rsquo;ve always done it&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-modularity-and-cohesion">&lt;a href="#what-is-modularity-and-cohesion" class="header-anchor">&lt;/a>What is modularity and cohesion
&lt;/h2>&lt;p>Modularity is the process of breaking up a complex system into smaller, independent, and interchangeable modules. Small
means small enough to easily understand. Independent means that we can compile and test the module independently of all
the other modules. Interchangeable means that we can substitute other implementations of modules in our system, which
often happens during testing.&lt;/p>
&lt;p>Cohesion refers to the degree to which the functionality inside a module belongs together. It is the metric we use for
creating modules. A good module has high cohesion. Logical changes in that module should generally not leak to other
modules. This metric means that a module comprising random functions is not a good one.&lt;/p>
&lt;h2 id="business-benefits-of-a-modular-codebase">&lt;a href="#business-benefits-of-a-modular-codebase" class="header-anchor">&lt;/a>Business benefits of a modular codebase
&lt;/h2>&lt;h3 id="1-faster-development-and-easier-maintenance">&lt;a href="#1-faster-development-and-easier-maintenance" class="header-anchor">&lt;/a>1. Faster development and easier maintenance
&lt;/h3>&lt;p>Modularity increases engineering velocity, which in turn lowers labor costs and reduces time to market. Since modules
are cohesive and easy to understand, engineers focus their changes on a limited set of modules without wading through
the whole codebase.&lt;/p>
&lt;p>Since modules are independent and interchangeable, they are easier to test. Writing tests becomes faster and easier.&lt;/p>
&lt;h3 id="2-risk-reduction">&lt;a href="#2-risk-reduction" class="header-anchor">&lt;/a>2. Risk reduction
&lt;/h3>&lt;p>A frequent occurrence in a complex codebase is that a change in one place introduces a bug in another seemingly
unrelated functionality. Because modules are cohesive and independent, a bug in one module is less likely to bring down
the entire system. Also, since modules are more straightforward to test, they are less likely to have bugs in the first
place.&lt;/p>
&lt;h3 id="3-organizational-scalability">&lt;a href="#3-organizational-scalability" class="header-anchor">&lt;/a>3. Organizational scalability
&lt;/h3>&lt;p>Management expects the software output to scale proportionally as the engineering organization scales. However, this is
not always the case. Adding more people to a codebase causes merge conflicts, ownership confusion, duplicated effort,
and communication overheads.&lt;/p>
&lt;p>Modularity allows engineers to work in parallel. Each person or team can work in parallel on their modules, minimizing
organizational coupling.&lt;/p>
&lt;p>The main reason microservices have become so popular is that engineers can work on them in parallel. The organizational
scalability benefits outweigh the added complexity of microservices.&lt;/p>
&lt;h3 id="4-faster-onboarding">&lt;a href="#4-faster-onboarding" class="header-anchor">&lt;/a>4. Faster onboarding
&lt;/h3>&lt;p>When new developers join the team, the engineering velocity often dips as senior developers help with onboarding.&lt;/p>
&lt;p>Since modules are small, they can &amp;ldquo;fit in your head&amp;rdquo; without having to understand all other parts of the system. New
developers can contribute more quickly by focusing their initial contributions on a limited set of modules. This
&amp;ldquo;simplicity&amp;rdquo; of the codebase means fewer distractions and less hand-holding for senior staff.&lt;/p>
&lt;h3 id="5-flexibility">&lt;a href="#5-flexibility" class="header-anchor">&lt;/a>5. Flexibility
&lt;/h3>&lt;p>Modularity gives the business more options for the product&amp;rsquo;s future direction since small modules are more
straightforward to modify or replace with new functionality.&lt;/p>
&lt;p>Modularity also allows engineers to experiment with newer and potentially better approaches. For example, an engineer
can try a different JSON library on one module. Engineering management would not consider such a library change in a
monolithic codebase since it would pose too much risk to existing functionality.&lt;/p>
&lt;h3 id="6-professional-growth-for-software-engineers">&lt;a href="#6-professional-growth-for-software-engineers" class="header-anchor">&lt;/a>6. Professional growth for software engineers
&lt;/h3>&lt;p>What about the engineers who have been with the company for years and are comfortable with (or used to) the current
monolithic approach?&lt;/p>
&lt;p>Modular software architectures are becoming the norm in the software industry. Building and maintaining a genuinely
modular codebase provides a valuable experience that engineers can carry to future projects within and beyond the
current company. If we interviewed a candidate whose preferred working style was to minimize the number of modules in
the codebase, that would be a serious red flag.&lt;/p>
&lt;h2 id="downsides-of-a-modular-codebase">&lt;a href="#downsides-of-a-modular-codebase" class="header-anchor">&lt;/a>Downsides of a modular codebase
&lt;/h2>&lt;h3 id="1-initial-module-creation-overhead">&lt;a href="#1-initial-module-creation-overhead" class="header-anchor">&lt;/a>1. Initial module creation overhead
&lt;/h3>&lt;p>Creating a new module requires defining its interface and directory structure and writing a new test harness. These
steps require more up-front work than simply dumping the code into an existing package.&lt;/p>
&lt;h3 id="2-ci-complexity">&lt;a href="#2-ci-complexity" class="header-anchor">&lt;/a>2. CI complexity
&lt;/h3>&lt;p>We can compile and test modules independently. To maximize the development speed of modules, each one can have its own
CI run. However, as the number of modules grows, this process can become complicated over time.&lt;/p>
&lt;h3 id="3-cross-cutting-features-can-become-trickier">&lt;a href="#3-cross-cutting-features-can-become-trickier" class="header-anchor">&lt;/a>3. Cross-cutting features can become trickier
&lt;/h3>&lt;p>Some features, such as security and auditing, affect multiple modules. Ensuring consistency while keeping modules
independent can require extra thought and coordination.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>Check out our other articles in the &lt;strong>technical debt&lt;/strong> series. Links are at the top of this article.&lt;/li>
&lt;li>Recently, examined &lt;a class="link" href="../mermaid-intro/" >the 4 key Mermaid diagrams for software developers&lt;/a>.&lt;/li>
&lt;li>Previously, we &lt;a class="link" href="../go-modules-and-packages/" >explained the difference between Go modules and Go packages&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-us-explain-the-business-benefits-of-software-modularity">&lt;a href="#watch-us-explain-the-business-benefits-of-software-modularity" class="header-anchor">&lt;/a>Watch us explain the business benefits of software modularity
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/UmSsmGFufTg"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>6 lessons from literate programming</title><link>https://victoronsoftware.com/posts/literate-programming-lessons/</link><pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/literate-programming-lessons/</guid><description>&lt;img src="https://victoronsoftware.com/posts/literate-programming-lessons/literate-programming-headline.png" alt="Featured image of post 6 lessons from literate programming" />&lt;p>This article examines the literate programming paradigm introduced in 1984 by
&lt;a class="link" href="https://en.wikipedia.org/wiki/Donald_Knuth" target="_blank" rel="noopener"
>Donald Knuth&lt;/a>. We go through a &amp;ldquo;Hello World&amp;rdquo; example and extract the key
lessons relevant to making today&amp;rsquo;s software more readable and maintainable.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="#literate-programming-hello-world-example" >Literate programming example&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#key-takeaways-from-literate-programming" >Key takeaways from literate programming&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-literate-programming">&lt;a href="#what-is-literate-programming" class="header-anchor">&lt;/a>What is literate programming
&lt;/h2>&lt;p>Literate programming is a paradigm in which a computer program is written in a natural language, such as English. The
programming language source code is embedded into the program&amp;rsquo;s description. The aim was to create an artifact that a
human can easily read without jumping back and forth between different sections of the code file. The writer completely
controls the flow of the document, which can be reorganized in any fashion.&lt;/p>
&lt;p>Knuth called his implementation of literate programming &lt;a class="link" href="https://en.wikipedia.org/wiki/Web_%28programming_system%29" target="_blank" rel="noopener"
>WEB&lt;/a>
to emphasize that a computer program is built from many different pieces. He picked the name before the World Wide Web
was prominent. To produce source code, the user runs the &lt;strong>tangle&lt;/strong> command. To create documentation, the user runs the
&lt;strong>weave&lt;/strong> command.&lt;/p>
&lt;h2 id="literate-programming-hello-world-example">&lt;a href="#literate-programming-hello-world-example" class="header-anchor">&lt;/a>Literate programming &amp;ldquo;Hello World&amp;rdquo; example
&lt;/h2>&lt;h3 id="writing-a-literate-program">&lt;a href="#writing-a-literate-program" class="header-anchor">&lt;/a>Writing a literate program
&lt;/h3>&lt;p>To demonstrate literate programming, we will use the &lt;a class="link" href="https://github.com/nrnrnr/noweb" target="_blank" rel="noopener"
>noweb&lt;/a> literate programming tool
to write a simple program in Go.&lt;/p>
&lt;p>We create a &lt;code>hello.nw&lt;/code> file and start it with:&lt;/p>
&lt;pre tabindex="0">&lt;code>This program teaches us how to print to the screen using:
&amp;lt;&amp;lt;print&amp;gt;&amp;gt;=
fmt.Println(message)
@
To print &amp;#34;Hello World&amp;#34;, pass a literal string to the function:
&amp;lt;&amp;lt;message&amp;gt;&amp;gt;=
&amp;#34;Hello World&amp;#34;
@
&lt;/code>&lt;/pre>&lt;p>We wrote the program in text with embedded code starting with &lt;code>&amp;lt;&amp;lt;name&amp;gt;&amp;gt;=&lt;/code> and ending with &lt;code>@&lt;/code>. The &lt;code>&amp;lt;&amp;lt;name&amp;gt;&amp;gt;&lt;/code> sections
are macros that we can reuse in other sections of the document, such as:&lt;/p>
&lt;pre tabindex="0">&lt;code>Now, we can create a function that prints a message:
&amp;lt;&amp;lt;mypackage_print&amp;gt;&amp;gt;=
func Print(message string) {
&amp;lt;&amp;lt;print&amp;gt;&amp;gt;
}
@
Finally, we can call this function from the main function:
&amp;lt;&amp;lt;main_call&amp;gt;&amp;gt;=
mypackage.Print(&amp;lt;&amp;lt;message&amp;gt;&amp;gt;)
@
&lt;/code>&lt;/pre>&lt;p>See &lt;a class="link" href="https://github.com/getvictor/noweb_example/blob/main/hello.nw" target="_blank" rel="noopener"
>the complete literate program&lt;/a> on GitHub.&lt;/p>
&lt;h3 id="generating-code-and-documentation-from-the-literate-program">&lt;a href="#generating-code-and-documentation-from-the-literate-program" class="header-anchor">&lt;/a>Generating code and documentation from the literate program
&lt;/h3>&lt;p>To install the noweb tool with &lt;code>brew&lt;/code> on macOS, run the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>brew install noweb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To generate the Go source code (tangle):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>notangle -Rgo.mod hello.nw &amp;gt; go.mod
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mkdir -p mypackage
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>notangle -R&lt;span style="color:#e6db74">&amp;#39;mypackage/mypackage.go&amp;#39;&lt;/span> hello.nw &amp;gt; mypackage/mypackage.go
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>notangle -Rmain.go hello.nw &amp;gt; main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now we can run the program: &lt;code>go run main.go&lt;/code>&lt;/p>
&lt;p>To generate the HTML documentation (weave):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>noweave -html hello.nw &amp;gt; hello.html
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can open the &lt;code>hello.html&lt;/code> documentation in our web browser.&lt;/p>
&lt;h2 id="key-takeaways-from-literate-programming">&lt;a href="#key-takeaways-from-literate-programming" class="header-anchor">&lt;/a>Key takeaways from literate programming
&lt;/h2>&lt;h3 id="1-the-developer-orders-the-code-for-maximum-readability">&lt;a href="#1-the-developer-orders-the-code-for-maximum-readability" class="header-anchor">&lt;/a>1. The developer orders the code for maximum readability
&lt;/h3>&lt;p>Most of today&amp;rsquo;s programming languages were not designed with readability as their top guiding principle. They often
require the developer to put code in specific file sections, distracting the reader trying to understand the code. Some
examples include:&lt;/p>
&lt;ul>
&lt;li>imports&lt;/li>
&lt;li>function and variable declarations, including nested functions&lt;/li>
&lt;li>error handling&lt;/li>
&lt;/ul>
&lt;p>Today&amp;rsquo;s IDEs (Integrated Development Environments) have tried to help with the situation by automatically collapsing
boilerplate sections. However, we have not seen them take the next step of entirely hiding or virtually relocating
distracting code. This area is where today&amp;rsquo;s programming languages and IDEs need to improve.&lt;/p>
&lt;h3 id="2-comments-are-first-class-citizens">&lt;a href="#2-comments-are-first-class-citizens" class="header-anchor">&lt;/a>2. Comments are first-class citizens
&lt;/h3>&lt;p>In literate programming, comments (natural language) are the main body of the program. Source code, on the other hand,
is delegated to macros. Comments are easy to write and can be enhanced with additional processing, such as Markdown,
Mermaid diagrams, etc.&lt;/p>
&lt;p>Many of today&amp;rsquo;s language toolchains also have processors that generate HTML documentation from the comments. However,
none can mix arbitrary pieces of code with their documentation.&lt;/p>
&lt;p>Linting requirements to include comments often lead to meaningless comments that make the code less readable:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// This is a class.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Today, the closest mainstream approaches to literate programming are computational notebooks such as
&lt;a class="link" href="https://jupyter.org/" target="_blank" rel="noopener"
>Jupyter&lt;/a> and various online tutorials. These are great for sharing examples and small programs
with others but not sufficient for larger software projects.&lt;/p>
&lt;p>Some IDEs support rendering comments in a different style than the rest of the code, including rendering diagrams.
However, no standard works across IDEs and version control hosting systems like GitHub.&lt;/p>
&lt;h3 id="3-code-from-multiple-source-files-can-be-present-in-one-place">&lt;a href="#3-code-from-multiple-source-files-can-be-present-in-one-place" class="header-anchor">&lt;/a>3. Code from multiple source files can be present in one place
&lt;/h3>&lt;p>Literate programming allows us to include arbitrary source files in one program file. This behavior is helpful when you
want to keep related code in one place, such as an interface (abstract class) and its implementation.&lt;/p>
&lt;p>Modern IDEs can find all the implementations of an interface and often have a quick shortcut, allowing the developer to
jump between the two.&lt;/p>
&lt;p>Developers may also write their own preprocessors that split a single file into several modules or compile units.&lt;/p>
&lt;p>Although having more code in one file is sometimes useful, today&amp;rsquo;s developers typically have issues with splitting and
decoupling code files that have become too large and are no longer scalable.&lt;/p>
&lt;h3 id="4-writing-code-is-more-difficult">&lt;a href="#4-writing-code-is-more-difficult" class="header-anchor">&lt;/a>4. Writing code is more difficult
&lt;/h3>&lt;p>The main issue with literate programming is that it makes writing code much more difficult for the developer. It
introduces another level of abstraction and another set of tools and concepts that the software developer must be
familiar with.&lt;/p>
&lt;p>This general lesson applies to any system that tries to enhance the coding experience by adding another layer between
the user and the code. The new system must provide overwhelming benefits for software developers to switch to it.
TypeScript is an example of a successful layer over JavaScript.&lt;/p>
&lt;h3 id="5-macros-make-reading-code-more-difficult">&lt;a href="#5-macros-make-reading-code-more-difficult" class="header-anchor">&lt;/a>5. Macros make reading code more difficult
&lt;/h3>&lt;p>The literate program contains macros with their own names, adding to the namespace of functions and variables already
present in the computer program. These additional names increase the cognitive load of both reading and creating
literate programs.&lt;/p>
&lt;p>Today&amp;rsquo;s standard guidance is to make your variable and function names descriptive so the reader knows what they do
without additional comments. We can effectively replicate much of literate programming by replacing the literate
programming macros with our own well-named functions and ordering these functions in a file for maximum comprehension.&lt;/p>
&lt;h3 id="6-no-tooling-support">&lt;a href="#6-no-tooling-support" class="header-anchor">&lt;/a>6. No tooling support
&lt;/h3>&lt;p>Since literate programming is not widely used, it has little to no tooling support, syntax highlighting, or IDE support.
There is also no standard build system. Instead, the literate programming user must maintain their own custom build
system for the &amp;ldquo;tangle&amp;rdquo; and &amp;ldquo;weave&amp;rdquo; flows.&lt;/p>
&lt;h2 id="see-literate-programming-example-code-on-github">&lt;a href="#see-literate-programming-example-code-on-github" class="header-anchor">&lt;/a>See literate programming example code on GitHub
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/getvictor/noweb_example" target="_blank" rel="noopener"
>Literate programming example using noweb&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>Previously, we explained &lt;a class="link" href="../readable-code/" >what readable code is and why it is important&lt;/a>.&lt;/li>
&lt;li>We also reviewed &lt;a class="link" href="../code-complexity-metrics/" >the top code complexity metrics&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-the-literate-programming-example-and-takeaways">&lt;a href="#watch-the-literate-programming-example-and-takeaways" class="header-anchor">&lt;/a>Watch the literate programming example and takeaways
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/8cwxxioVbfA"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>Top code complexity metrics every software dev should know</title><link>https://victoronsoftware.com/posts/code-complexity-metrics/</link><pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/code-complexity-metrics/</guid><description>&lt;img src="https://victoronsoftware.com/posts/code-complexity-metrics/code-complexity-headline.png" alt="Featured image of post Top code complexity metrics every software dev should know" />&lt;p>&lt;em>This article is part of a series on &lt;strong>technical debt&lt;/strong>. Check out the previous articles:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="../readable-code/" >Ways to improve your code for readability&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" >How to scale a codebase with evolutionary architecture&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="intro-to-code-complexity-metrics">&lt;a href="#intro-to-code-complexity-metrics" class="header-anchor">&lt;/a>Intro to code complexity metrics
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="#code-style" >Code style&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#code-size" >Code size&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#cyclomatic-complexity" >Cyclomatic complexity&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#cognitive-complexity" >Cognitive complexity&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In the previous article on &lt;a class="link" href="../readable-code/" >readable code&lt;/a>, we discussed a few metrics for measuring unreadable code.
In this article, we will expand on some of those ideas and specifically focus on code complexity.&lt;/p>
&lt;p>Code complexity primarily refers to the difficulty of understanding a piece of code or a piece of the codebase, such as
a module. Complex code is difficult to modify because engineers must spend considerable mental energy to understand it.
Frequently, engineers will not understand the code well enough, so they&amp;rsquo;ll make a change to fix a bug, and the change
will introduce a new bug somewhere else. Lack of understanding also leads to
&lt;a class="link" href="https://victoronsoftware.com/posts/common-refactorings/#why-are-engineers-afraid-of-refactoring" target="_blank" rel="noopener"
>a fear of refactoring&lt;/a>,
because engineers don&amp;rsquo;t want to break the codebase.&lt;/p>
&lt;h2 id="code-complexity-metrics">&lt;a href="#code-complexity-metrics" class="header-anchor">&lt;/a>Code complexity metrics
&lt;/h2>&lt;p>Many code complexity measures overlap since they all try to measure the same thing.&lt;/p>
&lt;h3 id="code-style">&lt;a href="#code-style" class="header-anchor">&lt;/a>Code style
&lt;/h3>&lt;p>A standard code style is helpful for readability. For example, if I opened a file and saw that it had no indentation,
the max line length was 20, and somebody named all the variables with a leading &lt;code>iwuzhere&lt;/code>, I would be confused. I would
have to stop and carefully process the file. I would not have to slow down if the code style were consistent.&lt;/p>
&lt;p>The metric to track is the number of code style violations or the number of files violating the code style. Most
companies enforce a code style with their CI pipeline. Modern tooling can automatically reformat code to match the
agreed-upon code style, so code style should no longer be a complexity or readability issue.&lt;/p>
&lt;h3 id="code-size">&lt;a href="#code-size" class="header-anchor">&lt;/a>Code size
&lt;/h3>&lt;p>How much code is there? The more code there is, the longer it takes to read and understand it. The common metrics are:&lt;/p>
&lt;ul>
&lt;li>program size or lines of code (LOC)
&lt;ul>
&lt;li>in a function&lt;/li>
&lt;li>in a file&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>number of functions/classes/modules/files&lt;/li>
&lt;/ul>
&lt;p>The motivation for tracking these metrics is to help engineers split their functions/files/projects into smaller, more
manageable pieces. James Lewis from ThoughtWorks said that &amp;ldquo;a microservice should be as big as my head.&amp;rdquo; His idea is
that one person should be able to understand the entire codebase. The smaller the piece of code, the easier it is to
understand.&lt;/p>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Halstead_complexity_measures" target="_blank" rel="noopener"
>Halstead introduced a set of software complexity measures&lt;/a>
in 1977, and one of his metrics was the Halstead volume, which is directly related to code size. We can approximate the
Halstead volume by ignoring all comments and whitespace, then multiplying the average code line length by the number of
lines of code. This approximation is a good enough metric for our purposes.&lt;/p>
&lt;h3 id="cyclomatic-complexity">&lt;a href="#cyclomatic-complexity" class="header-anchor">&lt;/a>Cyclomatic complexity
&lt;/h3>&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Cyclomatic_complexity" target="_blank" rel="noopener"
>Cyclomatic complexity&lt;/a> measures the number of linearly independent
paths through a program&amp;rsquo;s source code. It is often used as the master metric for code complexity, uncovering
maintainability and hard-to-test parts of the codebase.&lt;/p>
&lt;p>A typical calculation of cyclomatic complexity is as follows:&lt;/p>
&lt;ul>
&lt;li>1 is the base complexity for a function&lt;/li>
&lt;li>for each &lt;code>if&lt;/code>, &lt;code>case&lt;/code>, &lt;code>while&lt;/code>, &lt;code>for&lt;/code>, or other branching statement, add 1&lt;/li>
&lt;/ul>
&lt;p>A good cyclomatic complexity is 10 or less. A score of 20 or more is generally considered difficult to understand. This
metric encourages us to write smaller functions.&lt;/p>
&lt;h3 id="cognitive-complexity">&lt;a href="#cognitive-complexity" class="header-anchor">&lt;/a>Cognitive complexity
&lt;/h3>&lt;p>An alternative to cyclomatic complexity is
&lt;a class="link" href="https://www.sonarsource.com/docs/CognitiveComplexity.pdf" target="_blank" rel="noopener"
>cognitive complexity&lt;/a>. This metric tries to adjust the
cyclomatic complexity metric to focus on the human reader&amp;rsquo;s mental load &amp;ndash; on the maintainability, and not on the
testability, of the code.&lt;/p>
&lt;p>The key differences in the calculation are:&lt;/p>
&lt;ul>
&lt;li>for nested structures, extra incremental penalties are added&lt;/li>
&lt;li>recursion is penalized&lt;/li>
&lt;li>jumps to labels, such as &lt;code>goto LABEL&lt;/code>, are penalized&lt;/li>
&lt;li>&lt;code>switch&lt;/code> is preferred over nested &lt;code>if&lt;/code>&lt;/li>
&lt;li>groups of similar logical operators are NOT penalized
&lt;ul>
&lt;li>for example, &lt;code>a &amp;amp;&amp;amp; b &amp;amp;&amp;amp; c &amp;amp;&amp;amp; d&lt;/code> is easier to understand than &lt;code>a &amp;amp;&amp;amp; b || c &amp;amp;&amp;amp; d&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>This metric is more difficult to calculate than cyclomatic complexity, but it is generally considered a better
approximation of code complexity. Many companies are adopting this metric.&lt;/p>
&lt;h2 id="tool-and-language-specific-considerations">&lt;a href="#tool-and-language-specific-considerations" class="header-anchor">&lt;/a>Tool and language-specific considerations
&lt;/h2>&lt;p>Modern tools can help with code maintainability issues. For example, AI tools that index the codebase can help explain
how a piece of code (or a feature) works. IDEs can also help by collapsing boilerplate code or improving readability in
other ways.&lt;/p>
&lt;p>In the Go programming language, the idiomatic way to check for errors is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above code is repeated everywhere and is typically collapsed by modern IDEs. However, cyclomatic complexity and
cognitive complexity metrics penalize it.&lt;/p>
&lt;p>We need a complexity tool where the user can adjust the penalties. This way, an engineering team can agree on what is
considered complex code based on their experience, language, and code style.&lt;/p>
&lt;h3 id="go-complexity-metrics">&lt;a href="#go-complexity-metrics" class="header-anchor">&lt;/a>Go complexity metrics
&lt;/h3>&lt;p>For measuring cyclomatic complexity, Go has &lt;a class="link" href="https://github.com/fzipp/gocyclo" target="_blank" rel="noopener"
>gocyclo&lt;/a>. For measuring cognitive
complexity, there is &lt;a class="link" href="https://github.com/uudashr/gocognit" target="_blank" rel="noopener"
>gocognit&lt;/a>.&lt;/p>
&lt;h3 id="what-is-modularity-and-why-is-it-important">&lt;a href="#what-is-modularity-and-why-is-it-important" class="header-anchor">&lt;/a>What is modularity and why is it important
&lt;/h3>&lt;p>In the next article of this &lt;strong>technical debt&lt;/strong> series, we
&lt;a class="link" href="../software-modularity/" >explain what is modularity and why it is important for modern scalable software systems&lt;/a>.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="../engineering-metrics-no-cost/" >Track your team’s engineering performance with open-source tools&lt;/a>&lt;br>
A step-by-step guide to setting up meaningful metrics using free-tier infrastructure—no SaaS subscriptions required.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Recently, we &lt;a class="link" href="../literate-programming-lessons/" >showed an example and key takeaways from literate programming&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We also wrote &lt;a class="link" href="../ai-for-software-developers/" >an overview of using AI in software development&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="watch-us-discuss-and-show-examples-of-code-complexity-metrics">&lt;a href="#watch-us-discuss-and-show-examples-of-code-complexity-metrics" class="header-anchor">&lt;/a>Watch us discuss and show examples of code complexity metrics
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/HzZQqrhX3cg"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to use AI for software development (2025)</title><link>https://victoronsoftware.com/posts/ai-for-software-developers/</link><pubDate>Wed, 26 Feb 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/ai-for-software-developers/</guid><description>&lt;img src="https://victoronsoftware.com/posts/ai-for-software-developers/ai-building-software.png" alt="Featured image of post How to use AI for software development (2025)" />&lt;p>The AI landscape is changing rapidly. A new tool seems to come out weekly, or we hear about a breakthrough. As a
software engineer, it is hard to keep up with all the latest developments and even harder to figure out what is relevant
to your day-to-day work. Many tech leaders claim that AI is helping them achieve greater engineering velocity, improving
the quality of their code, and enhancing the engineering experience, to name a few. But how can you leverage AI to
improve your work as a software engineer? And, most importantly, what is the most effective way to use AI right now?&lt;/p>
&lt;p>We have followed AI since the early 2000s, when Jeff Hawkins published
&lt;a class="link" href="https://en.wikipedia.org/wiki/On_Intelligence" target="_blank" rel="noopener"
>On Intelligence&lt;/a>. AI has come a long way since then. Today, most
software engineers can benefit from some AI.&lt;/p>
&lt;p>The top AI use cases for software engineers are:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="#code-completion" >Code completion&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#code-generation" >Code generation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#summarizing-or-explaining-code" >Summarizing or explaining code&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#agentic-coding" >Agentic coding&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Some software developers have other use cases for AI, such as image generation, but this article will focus on the above
ones.&lt;/p>
&lt;h2 id="code-completion">&lt;a href="#code-completion" class="header-anchor">&lt;/a>Code completion
&lt;/h2>&lt;p>The original GitHub Copilot popularized AI code completion. It is a tool that can be integrated into your IDE and can
perform multi-line code completions. GitHub Copilot and similar tools have been extremely popular with software
developers. We found AI code completion extremely helpful, even though it occasionally generates function signatures and
other code that is not quite right.&lt;/p>
&lt;p>For example, after creating the &lt;code>PubSubMessage&lt;/code> struct in our code, Copilot recommended the &lt;code>PubSubMessageAttributes&lt;/code>
struct. Opening the completions window shows other multi-line suggestions.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/ai-for-software-developers/copilot-example.png">&lt;figcaption>
&lt;h4>GitHub Copilot code completion example&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The code completion is not only for software code. We used it for documentation, such as writing a user guide for a new
feature. AI is most useful for boilerplate introductory content. However, beware that some search engines may be able to
detect the use of AI in your documentation and reduce your search ranking.&lt;/p>
&lt;h2 id="code-generation">&lt;a href="#code-generation" class="header-anchor">&lt;/a>Code generation
&lt;/h2>&lt;p>Code generation is similar to code completion, but the desired result is a complete function or code block. Typically,
engineers use a chat interface such as ChatGPT and provide it with a description of the desired function. Providing a
detailed description along with inputs and outputs is key to getting the best results.&lt;/p>
&lt;p>For example, given the following prompt:&lt;/p>
&lt;blockquote>
&lt;p>Write a Golang function that takes path.URL, makes a GET request to that URL, parses the JSON response, and returns
the &amp;ldquo;attributes&amp;rdquo; and &amp;ldquo;data&amp;rdquo; fields of the response.&lt;/p>&lt;/blockquote>
&lt;p>ChatGPT o1 model generated the following code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// FetchAttributesAndData makes a GET request to the provided URL, parses&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// the JSON response, and returns the &amp;#34;attributes&amp;#34; and &amp;#34;data&amp;#34; fields.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">FetchAttributesAndData&lt;/span>(&lt;span style="color:#a6e22e">u&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">url&lt;/span>.&lt;span style="color:#a6e22e">URL&lt;/span>) (&lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">Get&lt;/span>(&lt;span style="color:#a6e22e">u&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defer&lt;/span> &lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>.&lt;span style="color:#a6e22e">Close&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// You may also check resp.StatusCode for error handling if desired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">StatusCode&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">http&lt;/span>.&lt;span style="color:#a6e22e">StatusOK&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unexpected status code: %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">StatusCode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Define a struct to capture the JSON structure&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Attributes&lt;/span> &lt;span style="color:#66d9ef">map&lt;/span>[&lt;span style="color:#66d9ef">string&lt;/span>]&lt;span style="color:#66d9ef">interface&lt;/span>{} &lt;span style="color:#e6db74">`json:&amp;#34;attributes&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Data&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span>{} &lt;span style="color:#e6db74">`json:&amp;#34;data&amp;#34;`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">NewDecoder&lt;/span>(&lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">Body&lt;/span>).&lt;span style="color:#a6e22e">Decode&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">result&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Attributes&lt;/span>, &lt;span style="color:#a6e22e">result&lt;/span>.&lt;span style="color:#a6e22e">Data&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>ChatGPT also provided some documentation and a usage example.&lt;/p>
&lt;p>Previously, software engineers would accomplish this task by searching Google or StackOverflow for similar code
snippets. Now, they can use AI chatbots to generate this code. This approach is most useful when you need to generate
code that&amp;rsquo;s not your area of expertise.&lt;/p>
&lt;p>Some programming languages have dedicated AI code-generation tools. For example, you can create Go functions and
packages online with &lt;a class="link" href="https://sketch.dev/" target="_blank" rel="noopener"
>sketch.dev&lt;/a>.&lt;/p>
&lt;h2 id="summarizing-or-explaining-code">&lt;a href="#summarizing-or-explaining-code" class="header-anchor">&lt;/a>Summarizing or explaining code
&lt;/h2>&lt;p>When software engineers work on a large codebase, they often need to understand code written by other engineers, some of
whom may have left the company, and they may also need to find a specific piece of code in the codebase.&lt;/p>
&lt;p>AI can help by reading the codebase and adding it to its context. This is an example of Retrieval-Augmented Generation
(RAG), where AI combines its general knowledge with the specific context of the codebase.&lt;/p>
&lt;p>To understand the codebase, the AI tool needs to add the code to its context or to index the codebase. Then, the tool
can use a combination of AI and deterministic search to find the relevant code. Below is an example of a question we
asked &lt;a class="link" href="https://www.cursor.com/" target="_blank" rel="noopener"
>Cursor&lt;/a> IDE about our codebase:&lt;/p>
&lt;blockquote>
&lt;p>In which Go files is macOS disk encryption code located?&lt;/p>&lt;/blockquote>
&lt;p>Cursor provided a list of files and additional information on the top hits.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/ai-for-software-developers/cursor-example.png">&lt;figcaption>
&lt;h4>Cursor codebase search example&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Codebase-wide queries are a great way to find information yourself before asking the broader team. They are also a
decent way to learn the codebase.&lt;/p>
&lt;h2 id="agentic-coding">&lt;a href="#agentic-coding" class="header-anchor">&lt;/a>Agentic coding
&lt;/h2>&lt;p>Agentic coding refers to using an AI agent to write code and perform tasks on your behalf. Using agents is a more
advanced use case, requiring you to know the AI tools, processes, and LLMs well. A good AI agent can:&lt;/p>
&lt;ul>
&lt;li>Write code, including creating and moving files&lt;/li>
&lt;li>Write and run tests, including Browser UI tests&lt;/li>
&lt;li>Write, read, and follow documentation&lt;/li>
&lt;li>Do terminal operations such as installing applications&lt;/li>
&lt;li>Do Git operations such as pushing&lt;/li>
&lt;li>Connect to other servers with SSH&lt;/li>
&lt;/ul>
&lt;p>Currently, the top agentic coding tools are:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://github.com/RooVetGit/Roo-Code" target="_blank" rel="noopener"
>Roo Code&lt;/a> (VSCode plugin)&lt;/li>
&lt;li>&lt;a class="link" href="https://cline.bot/" target="_blank" rel="noopener"
>Cline&lt;/a> (VSCode plugin)&lt;/li>
&lt;li>&lt;a class="link" href="https://www.cursor.com/" target="_blank" rel="noopener"
>Cursor&lt;/a> (IDE built on top of VSCode)&lt;/li>
&lt;/ul>
&lt;p>There are many other tools and platforms available. GitHub Copilot also announced Agent mode, which is available in
preview as of this writing. JetBrains has announced &lt;a class="link" href="https://www.jetbrains.com/junie/" target="_blank" rel="noopener"
>Junie&lt;/a>, which is only available
via the Early Access Program.&lt;/p>
&lt;p>As the agentic coding tools are still in their early stages, changing rapidly, and require a lot of handholding, it is
reasonable to wait 6 to 12 months before revisiting them.&lt;/p>
&lt;h3 id="ai-coding-agent-workflows">&lt;a href="#ai-coding-agent-workflows" class="header-anchor">&lt;/a>AI coding agent workflows
&lt;/h3>&lt;p>The following are some workflow suggestions for using an AI coding agent to create a small application.&lt;/p>
&lt;p>First, start with some context regarding what you want to build. Create a README or a plan outlining how you want to
structure the application and the steps to implement it. You can use another general-purse AI, such as ChatGPT, to help
you create the high-level plan.&lt;/p>
&lt;p>For example, we asked ChatGPT to create a high-level plan with the following prompt:&lt;/p>
&lt;blockquote>
&lt;p>We want to create a mock Google Android Management API server using an AI agent. The server is written in Golang and
will interact with our MDM solution during testing. It should hold the state for enterprises, profiles, and fake
devices enrolled in it. The server should have a mock PubSub webhook that will push notifications regarding ENROLLMENT
and STATUS_REPORTs. Please create a plan that another AI agent can implement in several steps.&lt;/p>&lt;/blockquote>
&lt;p>Next, ask the AI agent to read the plan, update it, and create a more detailed plan. It may make sense to break the plan
into smaller parts and treat each part as a separate project. In effect, you act as the AI agent&amp;rsquo;s project manager.&lt;/p>
&lt;p>Make sure to have documentation and have the AI agent update it regularly. In addition to the README, you can have API
specs, secrets, and other documentation files.&lt;/p>
&lt;p>Tell the AI agent to initialize a git repo, create the project structure, and start implementing the plan. For each
step, ask the AI agent to create tests. After each step, ask the AI agent to update the documentation and commit the
changes. This way, you can easily rollback if the AI agent gets stuck or goes off the rails.&lt;/p>
&lt;p>Try to be as precise as possible in your prompts.&lt;/p>
&lt;p>When adding a new feature, you can start a new session with the AI agent and ask it to read all the documentation. This
will &amp;ldquo;initialize&amp;rdquo; the AI agent with the project context.&lt;/p>
&lt;p>Work in small development iterations with your AI agent.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/ai-for-software-developers/ai-agent-workflow.png">&lt;figcaption>
&lt;h4>AI agent workflow&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Learn about your AI agent&amp;rsquo;s specific features to level up your skills. Often, there are ways to provide context to the
agent or give special meaning to certain words or files.&lt;/p>
&lt;p>At some point, you may want to take over the maintenance of the code from the AI agent. For example, check the code into
your main repository and maintain it as any other human-written code.&lt;/p>
&lt;h3 id="ai-coding-agent-issues">&lt;a href="#ai-coding-agent-issues" class="header-anchor">&lt;/a>AI coding agent issues
&lt;/h3>&lt;p>The main issue with AI coding agents is that they make mistakes. If you spot their mistake, you can tell them about it,
and they will generally correct it. However, if you can&amp;rsquo;t spot their mistake, the agent may end up in a loop where it
keeps trying to fix the issue, but your application still doesn&amp;rsquo;t work. That is why it is essential to work in small
iterations where you can roll back and start over.&lt;/p>
&lt;p>The other issue is that AI agents are slow. Often, they need to take several steps to make progress, and the human is
left waiting—being there just in case they need help or go off track. Theoretically, a single human could manage
multiple AI agents, but in practice, it is hard for people to frequently switch between multiple cognitively demanding
tasks.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>For a deeper look at AI agents&amp;rsquo; impact on software development, check out &lt;a class="link" href="../will-ai-agents-replace-developers/" >Will AI agents replace software developers?&lt;/a>&lt;/li>
&lt;li>We just published &lt;a class="link" href="../introducing-mcp/" >our lessons learned from building an AI-driven MCP server&lt;/a>.&lt;/li>
&lt;li>We recently discussed
&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" >how to scale your codebase with incremental design&lt;/a>.&lt;/li>
&lt;li>We also wrote about &lt;a class="link" href="../readable-code/" >the importance of readable code&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-how-to-use-ai-for-software-development">&lt;a href="#watch-how-to-use-ai-for-software-development" class="header-anchor">&lt;/a>Watch how to use AI for software development
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/PVdqwcwc2_o"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to analyze Go build times</title><link>https://victoronsoftware.com/posts/analyze-go-build/</link><pubDate>Wed, 19 Feb 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/analyze-go-build/</guid><description>&lt;img src="https://victoronsoftware.com/posts/analyze-go-build/analyze-go-build-headline.png" alt="Featured image of post How to analyze Go build times" />&lt;p>Go is designed for fast compilation. However, sometimes, you notice that your builds have gotten slower or that certain
code changes cause an unexpectedly long recompile time. In this article, we show how to analyze your compilation times
and take steps to improve them.&lt;/p>
&lt;h2 id="turn-on-the-go-build-cache">&lt;a href="#turn-on-the-go-build-cache" class="header-anchor">&lt;/a>Turn on the Go build cache
&lt;/h2>&lt;p>First, you must know that Go is very good at caching build artifacts. If you make a small change and rerun the build,
the rerun will be significantly faster because Go will reuse the cached artifacts from the previous build. However, if
you update the Go version, change the build flags, or pull in new or different dependencies, Go may rebuild everything
from scratch.&lt;/p>
&lt;p>The first step in improving your build time is to make sure you are using a build cache. The cache is enabled by default
on your development machine, but that may not be true on your CI/CD system. Ensure you use a build cache across multiple
CI/CD runs. For example, the GitHub Actions
&lt;a class="link" href="https://github.com/actions/setup-go?tab=readme-ov-file#caching-dependency-files-and-build-outputs" target="_blank" rel="noopener"
>&lt;code>setup-go&lt;/code> action has caching turned on by default&lt;/a>.&lt;/p>
&lt;h2 id="analyze-a-go-build">&lt;a href="#analyze-a-go-build" class="header-anchor">&lt;/a>Analyze a Go build
&lt;/h2>&lt;p>We can clear the build cache with the following:&lt;/p>
&lt;pre tabindex="0">&lt;code>go clean -cache
&lt;/code>&lt;/pre>&lt;p>Now, we can run a clean build with the &lt;code>-debug-trace&lt;/code> flag:&lt;/p>
&lt;pre tabindex="0">&lt;code>time go build -debug-trace=debug-trace.json ./cmd/fleet
&lt;/code>&lt;/pre>&lt;p>We use the &lt;code>time&lt;/code> command to measure the time the build takes. It is good practice to always use the &lt;code>time&lt;/code> command when
measuring performance. The &lt;code>time&lt;/code> command is built into our Z shell (zsh), but a similar command is available in other
shells and OSes.&lt;/p>
&lt;p>In the time output, we see how long our build took:&lt;/p>
&lt;pre tabindex="0">&lt;code>79.25s user 20.13s system 518% cpu 19.183 total
&lt;/code>&lt;/pre>&lt;p>The total time (19.183s) is the wall clock time we waited for the build to finish. The user and system times are spent
executing user and system code. They are larger than the wall clock time because we use a multi-core machine.&lt;/p>
&lt;p>The debug trace is in
&lt;a class="link" href="https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU/preview" target="_blank" rel="noopener"
>Trace Event Format&lt;/a> and looks
like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>[
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;Running build command&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ph&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ts&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1739801608027038&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>,{&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;load.PackagesAndErrors&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ph&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ts&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1739801608027222&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>,{&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;modfetch.download github.com/WatchBeam/clock@v0.0.0-20170901150240-b08e6b4da7ea&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ph&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ts&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1739801608038996&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>,{&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;modfetch.download github.com/WatchBeam/clock@v0.0.0-20170901150240-b08e6b4da7ea&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ph&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;E&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ts&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1739801608039035&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>,{&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;modfetch.download github.com/briandowns/spinner@v1.23.1&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ph&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ts&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1739801608039382&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>,{&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;modfetch.download github.com/briandowns/spinner@v1.23.1&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ph&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;E&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ts&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1739801608039410&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>,{&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;modfetch.download github.com/e-dard/netbug@v0.0.0-20151029172837-e64d308a0b20&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ph&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ts&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1739801608039643&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>,{&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;modfetch.download github.com/e-dard/netbug@v0.0.0-20151029172837-e64d308a0b20&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ph&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;E&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ts&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1739801608039808&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>,{&lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;modfetch.download github.com/getsentry/sentry-go@v0.18.0&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ph&amp;#34;&lt;/span>:&lt;span style="color:#e6db74">&amp;#34;B&amp;#34;&lt;/span>,&lt;span style="color:#f92672">&amp;#34;ts&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">1739801608053496&lt;/span>,&lt;span style="color:#f92672">&amp;#34;pid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>,&lt;span style="color:#f92672">&amp;#34;tid&amp;#34;&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">...&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">and&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">so&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">on&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A widespread tool for visualizing Trace Event Format is &lt;a class="link" href="https://ui.perfetto.dev/" target="_blank" rel="noopener"
>Perfetto&lt;/a>. Click &lt;code>Open trace file&lt;/code>
and upload your trace. Use &lt;code>Ctrl&lt;/code> + &lt;code>Scroll&lt;/code> to zoom in and out and &lt;code>Shift&lt;/code> + &lt;code>Scroll&lt;/code> to move right or left. The &lt;code>WASD&lt;/code>
keyboard keys also work.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/analyze-go-build/debug-trace-clean.png">&lt;figcaption>
&lt;h4>The Perfetto tool showing a Go build debug trace&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The trace shows that our &lt;a class="link" href="https://github.com/mattn/go-sqlite3" target="_blank" rel="noopener"
>https://github.com/mattn/go-sqlite3&lt;/a> dependency is taking most of the build time. The fact that
we have 16 cores doesn&amp;rsquo;t help because Go is not parallelizing the build for this dependency. This dependency uses CGO,
so the build takes time to compile C files.&lt;/p>
&lt;p>We attempted to speed up the build by adding the &lt;code>go-sqlite3&lt;/code> dependency to our top &lt;code>./cmd/fleet&lt;/code> package, assuming the
build tool would start compiling it first. However, the total build took longer because the subsequent link step became
much slower.&lt;/p>
&lt;p>As we mentioned above, the initial compile time is usually not a big concern if you are using a build cache. So, let&amp;rsquo;s
try making a small change and analyzing the recompile time. We make a change to a frequently modified package.&lt;/p>
&lt;pre tabindex="0">&lt;code>echo &amp;#39;var _ = &amp;#34;bozo&amp;#34;&amp;#39; &amp;gt;&amp;gt; ./server/datastore/mysql/mysql.go
time go build -debug-trace=debug-trace-recompile.json ./cmd/fleet
&lt;/code>&lt;/pre>&lt;p>The total recompile time is 1.229s, and the trace looks like this:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/analyze-go-build/debug-trace-recompile.png">&lt;figcaption>
&lt;h4>The Perfetto tool showing a Go recompile debug trace&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>We see that the &lt;code>mysql&lt;/code> package we modified is taking about half the recompile time. The &lt;code>load.PackagesAndErrors&lt;/code> step
takes ~300ms and is not parallelized. This step is part of the Go toolchain. Modifying a smaller package would reduce
the recompile time. If you have a large package that is frequently modified, you can improve the build time by splitting
it into smaller packages.&lt;/p>
&lt;h2 id="find-why-dependencies">&lt;a href="#find-why-dependencies" class="header-anchor">&lt;/a>Find why dependencies are included in the build
&lt;/h2>&lt;p>In a previous article, we described &lt;a class="link" href="../go-package-dependencies" >how to find Go package dependencies&lt;/a>. A way to analyze
the build and see why a dependency is being pulled in is to use the &lt;code>-debug-actiongraph&lt;/code> flag:&lt;/p>
&lt;pre tabindex="0">&lt;code>go clean -cache
time go build -debug-actiongraph=actiongraph.json ./cmd/fleet
&lt;/code>&lt;/pre>&lt;p>The resulting &lt;code>actiongraph.json&lt;/code> is a JSON file containing an array of entries such as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ID&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">27&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Mode&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;build&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/server/datastore/filesystem&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Deps&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">4&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">11&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">23&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">33&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">93&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">97&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">180&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">103&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Objdir&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;/var/folders/r6/br06kz3s6lxb_75zz6dkjvvc0000gn/T/go-build3105381437/b845/&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Priority&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">843&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;NeedBuild&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ActionID&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;JGOAJdypDJJbwlHvaUPE&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;BuildID&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;JGOAJdypDJJbwlHvaUPE/B47ZHL3FCDKdll6TubU2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;TimeReady&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2025-02-18T09:02:54.257806-06:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;TimeStart&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2025-02-18T09:02:54.272756-06:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;TimeDone&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2025-02-18T09:02:54.293356-06:00&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Cmd&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;/opt/homebrew/Cellar/go/1.23.4/libexec/pkg/tool/darwin_arm64/compile -o /var/folders/r6/br06kz3s6lxb_75zz6dkjvvc0000gn/T/go-build3105381437/b845/_pkg_.a -trimpath \&amp;#34;/var/folders/r6/br06kz3s6lxb_75zz6dkjvvc0000gn/T/go-build3105381437/b845=\u003e\&amp;#34; -p github.com/fleetdm/fleet/v4/server/datastore/filesystem -lang=go1.23 -complete -buildid JGOAJdypDJJbwlHvaUPE/JGOAJdypDJJbwlHvaUPE -goversion go1.23.4 -c=4 -shared -nolocalimports -importcfg /var/folders/r6/br06kz3s6lxb_75zz6dkjvvc0000gn/T/go-build3105381437/b845/importcfg -pack /Users/victor/work/fleet/server/datastore/filesystem/software_installer.go&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;CmdReal&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">17479792&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;CmdUser&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">17327000&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;CmdSys&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">5692000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>CmdReal&lt;/code>, &lt;code>CmdUser&lt;/code>, and &lt;code>CmdSys&lt;/code> fields show the real, user, and system time spent executing the command. The
&lt;code>Deps&lt;/code> field shows the package&amp;rsquo;s dependencies.&lt;/p>
&lt;p>Although we can write our own tool to analyze the &lt;code>actiongraph.json&lt;/code> file, we can also use the
&lt;a class="link" href="https://github.com/icio/actiongraph" target="_blank" rel="noopener"
>https://github.com/icio/actiongraph&lt;/a> tool. Install the tool with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go install github.com/icio/actiongraph@latest
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can find the longest compile steps with:&lt;/p>
&lt;pre tabindex="0">&lt;code>actiongraph -f actiongraph.json top
13.786s 16.14% build github.com/mattn/go-sqlite3
1.396s 17.78% build runtime/cgo
1.327s 19.33% build github.com/aws/aws-sdk-go/service/s3
1.295s 20.85% build github.com/aws/aws-sdk-go/aws/endpoints
1.095s 22.13% build github.com/google/go-github/v37/github
1.078s 23.39% build github.com/elastic/go-sysinfo/providers/darwin
0.983s 24.55% build github.com/open-policy-agent/opa/ast
0.975s 25.69% build github.com/klauspost/compress/zstd
0.916s 26.76% build github.com/shoenig/go-m1cpu
0.755s 27.64% build crypto/tls
0.742s 28.51% build github.com/fleetdm/fleet/v4/server/fleet
0.722s 29.36% build github.com/shirou/gopsutil/v3/process
0.664s 30.14% build net
0.626s 30.87% build github.com/open-policy-agent/opa/topdown
0.625s 31.60% build runtime
0.622s 32.33% build google.golang.org/protobuf/internal/impl
0.609s 33.04% build github.com/fleetdm/fleet/v4/server/datastore/mysql
0.605s 33.75% build golang.org/x/net/http2
0.577s 34.43% build github.com/aws/aws-sdk-go/service/lambda
0.576s 35.10% build github.com/spf13/pflag
&lt;/code>&lt;/pre>&lt;p>The tool also has a &lt;code>graph&lt;/code> subcommand to highlight all import paths from the build target to the package indicated by
&lt;code>--why&lt;/code>. We can convert the &lt;code>.dot&lt;/code> file to an SVG file with the &lt;a class="link" href="https://graphviz.org/" target="_blank" rel="noopener"
>Graphviz&lt;/a> &lt;code>dot&lt;/code> command.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>actiongraph -f actiongraph.json graph --why github.com/mattn/go-sqlite3 &amp;gt; actiongraph-sqlite3.dot
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dot -Tsvg &amp;lt; actiongraph-sqlite3.dot &amp;gt; actiongraph-sqlite3.svg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="https://victoronsoftware.com/posts/analyze-go-build/actiongraph-sqlite3.svg">&lt;figcaption>
&lt;h4>Why the go-sqlite3 package is included in the build&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>We can use this knowledge to refactor the codebase or, perhaps, hide the problematic dependency behind a build flag.&lt;/p>
&lt;p>There is no official documentation for the above debug flags. However, they can be found in the
&lt;a class="link" href="https://go.dev/src/cmd/go/internal/work/build.go" target="_blank" rel="noopener"
>Go source code&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Undocumented, unstable debugging flags.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Flag&lt;/span>.&lt;span style="color:#a6e22e">StringVar&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">DebugActiongraph&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;debug-actiongraph&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Flag&lt;/span>.&lt;span style="color:#a6e22e">StringVar&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">DebugRuntimeTrace&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;debug-runtime-trace&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">cmd&lt;/span>.&lt;span style="color:#a6e22e">Flag&lt;/span>.&lt;span style="color:#a6e22e">StringVar&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">cfg&lt;/span>.&lt;span style="color:#a6e22e">DebugTrace&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;debug-trace&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>Previously, we explained &lt;a class="link" href="../go-test-execution-time/" >how to accurately measure the execution time of Go tests&lt;/a> and
&lt;a class="link" href="../large-go-test-suite/" >how to break apart a large Go test suite&lt;/a>.&lt;/li>
&lt;li>We also &lt;a class="link" href="../common-refactorings/" >demonstrated some common code refactorings that can be done with your IDE&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-how-to-analyze-go-builds">&lt;a href="#watch-how-to-analyze-go-builds" class="header-anchor">&lt;/a>Watch how to analyze Go builds
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/fs81KvxhwhI"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to scale your codebase with evolutionary architecture</title><link>https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/</link><pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/</guid><description>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/evolutionary-architecture-headline.png" alt="Featured image of post How to scale your codebase with evolutionary architecture" />&lt;p>&lt;em>This article is part of a series on &lt;strong>technical debt&lt;/strong>. Check out the previous article:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="../readable-code/" >Why readable code is important and how to refactor code for readability&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="intro-to-evolutionary-architecture">&lt;a href="#intro-to-evolutionary-architecture" class="header-anchor">&lt;/a>Intro to evolutionary architecture
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="#current-architecture" >Current architecture&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#problems-with-the-current-architecture" >Problems with the current architecture&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#good-architecture" >Good architecture&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#evolutionary-architecture" >Evolutionary architecture&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Evolutionary architecture refers to a software design approach that embraces change as a fundamental aspect of system
development. Instead of aiming to create a fixed and perfect architecture upfront, it allows the system to evolve in
response to new requirements, technologies, and insights. Evolutionary architecture is a critical tool for reducing
technical debt.&lt;/p>
&lt;p>Evolutionary design, or incremental design, is another term for this approach. Generally, evolutionary design refers to
changes on a smaller scale, such as refactoring code or adding new features. On the other hand, evolutionary
architecture refers to changes on a larger scale, such as reorganizing the codebase or splitting a monolithic
application into microservices. That said, there is no strict boundary between the two terms. We will use the term
evolutionary architecture.&lt;/p>
&lt;p>In this article, we provide an example of scaling your codebase to accommodate a growing number of features and
developers.&lt;/p>
&lt;h2 id="current-architecture">&lt;a href="#current-architecture" class="header-anchor">&lt;/a>Current architecture
&lt;/h2>&lt;p>We base our example on a theoretical codebase, but real-world experiences inspire it. The problems and solutions we
discuss are common in software development, especially in startups and small companies.&lt;/p>
&lt;p>The initial state of our example codebase is a web application developed in a mono-repository. The application was built
from the ground up with a simple architecture, focusing on adding new features and finding product-market fit.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/current-design.png">&lt;figcaption>
&lt;h4>Current design with a few large modules.&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The current design divides the codebase into a few large modules. We use the term &lt;em>module&lt;/em> to mean a logical grouping of
code in the same files and directories.&lt;/p>
&lt;p>However, after a couple of years, the application has grown significantly in features, complexity, and team size. The
organization now has three product teams working on different functional areas of the application. No one has updated
the initial architecture, which is insufficient to support the growing codebase and development team.&lt;/p>
&lt;h2 id="problems-with-the-current-architecture">&lt;a href="#problems-with-the-current-architecture" class="header-anchor">&lt;/a>Problems with the current architecture
&lt;/h2>&lt;p>A significant problem that the engineering team has been facing is &lt;strong>an increase in bugs and a longer time to fix
them&lt;/strong>. The code for each feature is sprinkled throughout the codebase and tightly coupled to other seemingly unrelated
features. This complexity makes it difficult to understand, test, and keep existing features working as new ones are
added.&lt;/p>
&lt;p>Speaking of new features, the team has been struggling to add them on time. The codebase has become a tangled web of
dependencies, and any change in one part of the codebase can have unintended consequences in other parts. Adding a
feature requires modifying many parts of the codebase, which requires understanding the entire codebase, which many
developers lack. The lack of knowledge and the changes to many parts of the codebase have led to &lt;strong>features taking
significantly longer to implement&lt;/strong> than initially estimated.&lt;/p>
&lt;p>&lt;strong>Maintaining feature branches&lt;/strong> for over a few days and making patch fixes to existing releases has become impossible.
The codebase is so intertwined that any changes may cause merge conflicts. The increased likelihood of merge conflicts
has discouraged developers from refactoring and cleaning up the code base. This tendency to leave the code as-is has
perpetuated the slide in code quality.&lt;/p>
&lt;p>Tests have also become a problem. The &lt;strong>test suite has been in a frequent state of disrepair&lt;/strong>. There is no clear
ownership of tests, so engineers have been reluctant to fix them. Some engineers have stopped paying attention to
failing CI alerts, figuring that the problems are caused by one of the other two teams.&lt;/p>
&lt;p>&lt;strong>Tests have also become slower&lt;/strong> and slower, especially the integration tests that test the API and include the service
layer, the datastore layer, and an actual database. These tests do not run in parallel; every additional feature slows
down the compile and increases test time. Test files have become bloated with tests for multiple features, making them
slow to load in the editor, difficult to navigate, and impossible to diff for PR reviews.&lt;/p>
&lt;p>Finally, the &lt;strong>onboarding time for new developers has been growing&lt;/strong>. It takes weeks for new developers to understand
the codebase and start contributing.&lt;/p>
&lt;h2 id="good-architecture">&lt;a href="#good-architecture" class="header-anchor">&lt;/a>Good architecture
&lt;/h2>&lt;p>At this point in the company&amp;rsquo;s life, an exemplary architecture would be separate groups of modules corresponding to the
three product teams.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/ideal-design.png">&lt;figcaption>
&lt;h4>Good design with dedicated modules for each product team.&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Each team would be responsible for its own set of modules, which aligns with Agile principles. The modules would be
loosely coupled, and the teams would be able to work independently on their features without affecting other teams. The
amount of code that each engineer has to understand and change would be drastically reduced.&lt;/p>
&lt;p>This architecture would have eliminated or significantly reduced the problems that the engineering team has been facing.&lt;/p>
&lt;ul>
&lt;li>The reduced complexity and increased understanding of the codebase would lead to fewer and faster to fix bugs&lt;/li>
&lt;li>Faster feature development due to cleaner code and fewer dependencies&lt;/li>
&lt;li>Reduced merge conflicts for PRs, especially for database migrations and schema changes&lt;/li>
&lt;li>Rarely failing test suite due to clear ownership of tests&lt;/li>
&lt;li>Faster tests due to each team focusing on testing their slice of the product. Limited complete product integration
tests would still be present.&lt;/li>
&lt;li>Faster onboarding time for new developers&lt;/li>
&lt;/ul>
&lt;p>However, the company does not have this architecture. Building this architecture upfront would have been foolish since
it would have consumed critical engineering time. Yes, there was value in creating this structure upfront because it
would have saved time in the long run, but this value was insufficient for a young company that may not be around in a
few months.&lt;/p>
&lt;h2 id="evolutionary-architecture">&lt;a href="#evolutionary-architecture" class="header-anchor">&lt;/a>Evolutionary architecture
&lt;/h2>&lt;p>Many companies and engineers find themselves in this situation. They have a codebase with poor architecture for today&amp;rsquo;s
reality, blame the organization for not thinking about these problems earlier, and feel like they can&amp;rsquo;t improve the
situation.&lt;/p>
&lt;p>Evolutionary architecture is a way to incrementally improve the architecture of a codebase without having to do a big
rewrite. It is a way to make the codebase better today than it was yesterday and better tomorrow than it is today.&lt;/p>
&lt;p>This situation is not unique to this company. It is the norm. Most companies start with a simple architecture and
codebase that is good enough for the first few features. As the company grows, the architecture becomes a bottleneck.
Instead of worrying about not making the right decisions in the past, consider where the architecture needs to be a year
or two from now and start moving towards that.&lt;/p>
&lt;p>For example, when adding a new prominent feature to the product, decouple it from the rest of the codebase.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/evolutionary-design.png">&lt;figcaption>
&lt;h4>Evolutionary design with big features going into dedicated modules.&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Our example shows all the modules decoupled, but it may be OK to decouple one or two.&lt;/p>
&lt;p>Decoupling a feature from the rest of the codebase has many benefits similar to those we listed above for &amp;ldquo;good
architecture.&amp;rdquo; Additional benefits include:&lt;/p>
&lt;ul>
&lt;li>Most of the feature can be tested by itself, reducing test time.&lt;/li>
&lt;li>The business gets the option to create a new team dedicated to the feature quickly &amp;ndash; the code is already
separate/independent&lt;/li>
&lt;li>Engineering can scale the feature separately from the rest of the product. For example, assign a dedicated database or
split the feature into a microservice.&lt;/li>
&lt;/ul>
&lt;h2 id="code-example-of-splitting-the-database-schema">&lt;a href="#code-example-of-splitting-the-database-schema" class="header-anchor">&lt;/a>Code example of splitting the database schema
&lt;/h2>&lt;p>It is nice to read about a theoretical example, but seeing an actual code example is even better. In this code example,
we begin with a monolithic application that has a single database schema. We then split the schema into two separate
schemas. It is the starting point and a reference for decoupling a new feature from the rest of the codebase. Since this
code example is a bit long and requires some context regarding the current implementation, we will not cover it in this
article. Instead, &lt;a class="link" href="https://www.youtube.com/watch?v=Li1GZzQVXWw&amp;amp;t=1070s" target="_blank" rel="noopener"
>jump to the code example section&lt;/a> of the video
below.&lt;/p>
&lt;p>Link to the
&lt;a class="link" href="https://github.com/fleetdm/fleet/compare/main...victor/feature-set-up" target="_blank" rel="noopener"
>source code example decoupling a new backend feature from the rest of the codebase&lt;/a>.&lt;/p>
&lt;h2 id="track-code-complexity-metrics">&lt;a href="#track-code-complexity-metrics" class="header-anchor">&lt;/a>Track code complexity metrics
&lt;/h2>&lt;p>In the next article of this &lt;strong>technical debt&lt;/strong> series, we
&lt;a class="link" href="../code-complexity-metrics/" >go over the top code complexity metrics every software engineer should know&lt;/a>.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>Recently, we covered &lt;a class="link" href="../track-engineering-metrics/" >how to easily track engineering metrics&lt;/a>.&lt;/li>
&lt;li>Previously, we demonstrated
&lt;a class="link" href="../github-code-review-issues/" >the most significant issues with GitHub&amp;rsquo;s code review process&lt;/a>.&lt;/li>
&lt;li>We also showed &lt;a class="link" href="../go-package-dependencies/" >how to create an architectural test that finds Go package dependencies&lt;/a>.&lt;/li>
&lt;li>We also published an article on &lt;a class="link" href="../common-refactorings/" >the common code refactorings to improve code readability&lt;/a>.&lt;/li>
&lt;li>In addition, we summarized &lt;a class="link" href="../ai-for-software-developers/" >what every software engineer should know about AI&lt;/a>.&lt;/li>
&lt;li>Lastly, we &lt;a class="link" href="../mermaid-intro/" >introduced the top Mermaid diagrams for software developers&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-how-to-scale-your-codebase-with-evolutionary-architecture">&lt;a href="#watch-how-to-scale-your-codebase-with-evolutionary-architecture" class="header-anchor">&lt;/a>Watch how to scale your codebase with evolutionary architecture
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Li1GZzQVXWw"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>What is readable code and why is it important?</title><link>https://victoronsoftware.com/posts/readable-code/</link><pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/readable-code/</guid><description>&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-headline.png" alt="Featured image of post What is readable code and why is it important?" />&lt;ul>
&lt;li>&lt;a class="link" href="#metrics-for-unreadable-code" >Metrics for unreadable code&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#how-to-make-your-codebase-more-readable" >How to make your codebase more readable&lt;/a>
&lt;ul>
&lt;li>&lt;a class="link" href="#fix-poor-software-structure" >Fix poor software structure&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#refactor-local-code-for-understanding" >Refactor local code for understanding&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#use-unit-and-integration-tests" >Use unit and integration tests&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#useful-comments" >Useful comments&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Readable code is software code that is easy to understand and easy to change.&lt;/p>
&lt;p>Unreadable code is a common complaint among software developers and one of the main contributors to technical debt.
Abandoning unreadable code is one of the reasons engineers love to work on greenfield projects—there is no legacy code
to deal with.&lt;/p>
&lt;p>You&amp;rsquo;ve probably heard comments like, &amp;ldquo;It would take me longer to understand this code than to rewrite it from scratch.&amp;rdquo;
This sentiment illustrates the problem with unreadable code: it slows down the development process.&lt;/p>
&lt;p>Some engineers refer to readable code as &amp;ldquo;clean code.&amp;rdquo; In our opinion, &amp;ldquo;readable code&amp;rdquo; and &amp;ldquo;clean code&amp;rdquo; are synonymous,
and the term &amp;ldquo;readable code&amp;rdquo; is easier to understand and, therefore, more &amp;ldquo;readable.&amp;rdquo;&lt;/p>
&lt;h2 id="why-is-unreadable-code-a-problem">&lt;a href="#why-is-unreadable-code-a-problem" class="header-anchor">&lt;/a>Why is unreadable code a problem?
&lt;/h2>&lt;p>Although the &amp;ldquo;unreadable code&amp;rdquo; claim feels like a subjective opinion, it has a concrete business impact on software
projects.&lt;/p>
&lt;p>We want our code to be readable to speed up adding new features and bug fixes.&lt;/p>
&lt;p>For example, we recently spent three hours figuring out how a feature worked, only to realize there was a documentation
bug. Unfortunately, we made no improvements to make the code more readable, and the next developer will likely have the
same problem. This next developer may be ourselves one year from now when we will have forgotten everything we learned
about the feature.&lt;/p>
&lt;h3 id="metrics-for-unreadable-code">&lt;a href="#metrics-for-unreadable-code" class="header-anchor">&lt;/a>Metrics for unreadable code
&lt;/h3>&lt;p>You can use several metrics to measure your code&amp;rsquo;s readability. The ideal metric would be the time it takes to
understand the code, but this isn&amp;rsquo;t easy to measure. Instead, you can use the following proxies:&lt;/p>
&lt;p>&lt;strong>Time to fix a bug&lt;/strong>—Measure the time from when a developer starts working on a bug until the bug fix is ready for code
review. Alternatively, measure the time from when a developer starts working on a bug until their first commit. A first
commit is a good proxy for understanding the bug and starting to fix it.&lt;/p>
&lt;p>&lt;strong>Time to add a new feature&lt;/strong>—Measure the time from when a developer starts working on a new feature until it is ready
for code review.&lt;/p>
&lt;p>&lt;strong>Time to onboard a new team member&lt;/strong>—Measure the time it takes for a new team member to make their first commit.&lt;/p>
&lt;p>&lt;strong>Code style violations&lt;/strong>—Measure the codebase&amp;rsquo;s number of code style violations. Code style violations can be measured
using linters or static analysis tools. Some examples of code style violations relevant to readability are:&lt;/p>
&lt;ul>
&lt;li>Long functions&lt;/li>
&lt;li>Long files&lt;/li>
&lt;li>Deeply nested control structures&lt;/li>
&lt;li>Poorly named variables, such as 1-character variable names&lt;/li>
&lt;/ul>
&lt;p>Instead of measuring these style code violations, you can also enforce them in your CI pipeline. Most languages have
linters that update your code to match a standard style. For example, Go has &lt;a class="link" href="https://pkg.go.dev/cmd/gofmt" target="_blank" rel="noopener"
>&lt;code>gofmt&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="how-to-make-your-codebase-more-readable">&lt;a href="#how-to-make-your-codebase-more-readable" class="header-anchor">&lt;/a>How to make your codebase more readable
&lt;/h2>&lt;p>Readability is not a goal but a process. You can&amp;rsquo;t make your codebase readable overnight, but you can start making
incremental improvements. Whenever you touch a piece of code, try to make it more readable.&lt;/p>
&lt;h3 id="fix-poor-software-structure">&lt;a href="#fix-poor-software-structure" class="header-anchor">&lt;/a>Fix poor software structure
&lt;/h3>&lt;p>One pattern we see frequently is that the functionality of a core feature is spread across multiple software modules.
The first problem this creates is that the software developer trying to understand the feature has to discover all the
modules that implement the feature. Often, this requires grepping the codebase for key names &amp;ndash; a tedious and
error-prone process. The second problem is that the developer has to jump between files and directories to understand
how the feature works, files that often have tons of other unrelated and distracting code.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-before.png">&lt;figcaption>
&lt;h4>Hard to understand feature due to poor software design&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Poor software structure often arises when we hurry to implement a feature and don&amp;rsquo;t consider future developers needing
to make changes. This behavior is reactive software design—one developer reacts to the immediate need to implement a
feature. Later, when implementing new features becomes almost impossible due to unreadable code, they react again by
restructuring the code or rewriting old functionality from scratch. This process makes sense for prototypes or early
products looking for product-market fit, but it is not sustainable for mature long-term software projects.&lt;/p>
&lt;p>Often, developers may not be able to create a good software design when they start working on a new feature because they
don&amp;rsquo;t understand all its ramifications. However, they should restructure their work before moving on to the next
task—the best time to improve code is when you have all the context in your head.&lt;/p>
&lt;p>We can restructure the above code example to move all the feature&amp;rsquo;s functionality into one or two modules. This
reorganization makes it easier to understand the feature because we have to look at a much smaller number of files and
are not distracted by unrelated code.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-after.png">&lt;figcaption>
&lt;h4>Easier to understand feature encapsulated in separate modules&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="refactor-local-code-for-understanding">&lt;a href="#refactor-local-code-for-understanding" class="header-anchor">&lt;/a>Refactor local code for understanding
&lt;/h3>&lt;p>When entering a function, you should quickly understand what it does. The function code should be readable. If an
engineer who first sees the function can&amp;rsquo;t understand it, it is too complex and should be refactored.&lt;/p>
&lt;p>Long functions are difficult to understand because they require the developer to simultaneously keep a lot of
information in their head. Oftentimes, the function presents implementation details to the developer before they can
grasp the big picture. This process is cognitively demanding and error-prone.&lt;/p>
&lt;p>Instead, we can refactor extended functions into smaller functions that each do one thing. This refactoring makes the
code easier to understand because we can understand each small function in isolation. Hide complex logic in functions
with descriptive names.&lt;/p>
&lt;p>In addition, use descriptive names for variables. Good names make the code self-documenting and reduce the need for
comments.&lt;/p>
&lt;p>As an example of a function before and after refactoring, see this
&lt;a class="link" href="https://gist.github.com/getvictor/740c940ec06735ee02bc652f1093e0b8" target="_blank" rel="noopener"
>refactoring example gist&lt;/a>. For a full explanation,
you can &lt;a class="link" href="https://www.youtube.com/watch?v=HCGyWuE9zbY&amp;amp;t=720s" target="_blank" rel="noopener"
>jump to the refactoring section&lt;/a> of the video below.&lt;/p>
&lt;p>For more examples of common refactorings, see our article on
&lt;a class="link" href="../common-refactorings/" >top refactorings every software developer should know&lt;/a>.&lt;/p>
&lt;h3 id="use-unit-and-integration-tests">&lt;a href="#use-unit-and-integration-tests" class="header-anchor">&lt;/a>Use unit and integration tests
&lt;/h3>&lt;p>From a readability perspective, tests are a form of documentation. They show how the code is supposed to work. When
reading a test, you can see how the code is supposed to behave in different scenarios.&lt;/p>
&lt;p>Tests should also be readable. The same restructuring and refactoring principles apply to tests.&lt;/p>
&lt;p>Another essential benefit of tests is that they allow developers to refactor code with confidence. When you refactor
code, you can run the tests to ensure that the code still works as expected. Unfortunately, this means that when you
want to make a change in legacy code without tests, you either have to write tests first or do a lot of manual testing
to ensure that the code still works.&lt;/p>
&lt;h3 id="useful-comments">&lt;a href="#useful-comments" class="header-anchor">&lt;/a>Useful comments
&lt;/h3>&lt;p>Comments should explain why the code is written the way it is, not what the code does. The code should be
self-explanatory with descriptive variable and function names and encapsulated implementation details.&lt;/p>
&lt;p>Sometimes, it is hard to tell the difference between &amp;ldquo;why&amp;rdquo; and &amp;ldquo;what,&amp;rdquo; so feel free to err on the side of commenting.&lt;/p>
&lt;p>You can remove the comment if you renamed a variable or a function, and now the comment duplicates the code. One problem
with comments is that they can get out of date, which is worse than no comments.&lt;/p>
&lt;p>For example, before refactoring, you had this code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// figure out which declarations we should not delete, and put those into keepNames list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">keepNames&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, len(&lt;span style="color:#a6e22e">existingDecls&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>len(&lt;span style="color:#a6e22e">fleetmdm&lt;/span>.&lt;span style="color:#a6e22e">ListFleetReservedMacOSDeclarationNames&lt;/span>()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">existingDecls&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">newP&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">incomingDecls&lt;/span>[&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>]; &lt;span style="color:#a6e22e">newP&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">keepNames&lt;/span> = append(&lt;span style="color:#a6e22e">keepNames&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">keepNames&lt;/span> = append(&lt;span style="color:#a6e22e">keepNames&lt;/span>, &lt;span style="color:#a6e22e">fleetmdm&lt;/span>.&lt;span style="color:#a6e22e">ListFleetReservedMacOSDeclarationNames&lt;/span>()&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After refactoring, the comment is a duplicate and no longer needed. It is even worse in this case because we renamed the
variable, but the comment still refers to the old name. The comment is not only a duplicate but also misleading:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// figure out which declarations we should not delete, and put those into keepNames list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">namesToKeep&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">namesOfDeclarationsToNotDelete&lt;/span>(&lt;span style="color:#a6e22e">existingDecls&lt;/span>, &lt;span style="color:#a6e22e">enrichedDeclarations&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="language-features-that-make-the-code-less-readable">&lt;a href="#language-features-that-make-the-code-less-readable" class="header-anchor">&lt;/a>Language features that make the code less readable
&lt;/h2>&lt;p>Some language features can make the code less readable. We will give an example from Go because we are familiar with Go,
but the same principles apply to other languages.&lt;/p>
&lt;h3 id="go-nested-functions">&lt;a href="#go-nested-functions" class="header-anchor">&lt;/a>Go nested functions
&lt;/h3>&lt;p>Go supports nested functions like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">outer&lt;/span>(&lt;span style="color:#a6e22e">foo&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span>, &lt;span style="color:#a6e22e">bar&lt;/span> &lt;span style="color:#a6e22e">Bar&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inner&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// many lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// of implementation details&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// many lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// of additional code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">something&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inner&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// more code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Upon entering the function as a reader, the first thing you see is the &lt;code>inner&lt;/code> function. The reader is presented with
specific implementation details before understanding the big picture. Instead, the reader should know where the nested
function is used before reading these implementation details.&lt;/p>
&lt;p>One way to solve this issue is to forbid nested functions in your style guide. Always extract nested functions to the
struct level or file level. However, this approach loses the benefits of closures and increases the number of functions
at the struct/file level.&lt;/p>
&lt;p>We hope that the Go team will improve the readability of nested functions in the future. For example, they could allow
nested functions to be defined at the end of the function after the primary implementation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">outer&lt;/span>(&lt;span style="color:#a6e22e">foo&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span>, &lt;span style="color:#a6e22e">bar&lt;/span> &lt;span style="color:#a6e22e">Bar&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// many lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// of additional code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">something&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inner&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// more code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// nested functions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">inner&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// many lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// of implementation details&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively, IDE vendors can improve readability by entirely hiding nested functions by default.&lt;/p>
&lt;h2 id="additional-benefits-of-readable-code">&lt;a href="#additional-benefits-of-readable-code" class="header-anchor">&lt;/a>Additional benefits of readable code
&lt;/h2>&lt;p>As you improve the readability of your code, you will notice several side effects:&lt;/p>
&lt;ul>
&lt;li>Many bugs will be easier to spot&lt;/li>
&lt;li>Other developers will be less likely to interrupt you with questions about your code&lt;/li>
&lt;li>If your code is open source, you may get more contributions&lt;/li>
&lt;/ul>
&lt;h2 id="make-bigger-improvements-to-your-codebase-with-evolutionary-architecture">&lt;a href="#make-bigger-improvements-to-your-codebase-with-evolutionary-architecture" class="header-anchor">&lt;/a>Make bigger improvements to your codebase with evolutionary architecture
&lt;/h2>&lt;p>In the following article, we
&lt;a class="link" href="../scaling-codebase-evolutionary-architecture" >discuss how to make bigger improvements to your codebase with evolutionary architecture&lt;/a>.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../engineering-transparency/" >Why transparency beats everything else in engineering&lt;/a>&lt;/strong>&lt;br>
How making work visible transforms teams from frustrated to high-performing through organizational transparency.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../first-conference-talk/" >My first conference talk experience&lt;/a>&lt;/strong>&lt;br>
Lessons learned from presenting about readable code at a major software engineering conference.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../engineering-metrics-no-cost/" >Build beautiful engineering dashboards—without paying a dime&lt;/a>&lt;/strong>&lt;br>
Learn how to use GitHub, Grafana, and SQL to create powerful, drill-down metrics using only free tools.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../literate-programming-lessons/" >Key takeaways from literate programming&lt;/a>&lt;/strong>&lt;br>
Discover how Donald Knuth&amp;rsquo;s literate programming principles can improve your code documentation practices.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../track-engineering-metrics/" >How to easily track engineering metrics with GitHub Actions and Google APIs&lt;/a>&lt;/strong>&lt;br>
Build automated systems to measure and visualize your team&amp;rsquo;s engineering performance over time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../go-test-execution-time/" >Measuring and improving the execution time of Go tests&lt;/a>&lt;/strong>&lt;br>
Optimize your test suite performance and reduce CI/CD pipeline duration with practical techniques.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../github-code-review-issues/" >Top 3 issues with GitHub&amp;rsquo;s code review process&lt;/a>&lt;/strong>&lt;br>
Understand the scalability and developer experience problems with GitHub&amp;rsquo;s default review workflow.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../ai-for-software-developers/" >Common use cases of AI for today&amp;rsquo;s software developers&lt;/a>&lt;/strong>&lt;br>
Explore how AI tools can enhance productivity without replacing the need for readable, maintainable code.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="watch-us-discuss-why-readable-code-is-important">&lt;a href="#watch-us-discuss-why-readable-code-is-important" class="header-anchor">&lt;/a>Watch us discuss why readable code is important
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/HCGyWuE9zbY"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to create a custom GitHub Action using TypeScript</title><link>https://victoronsoftware.com/posts/typescript-github-action/</link><pubDate>Wed, 23 Oct 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/typescript-github-action/</guid><description>&lt;img src="https://victoronsoftware.com/posts/typescript-github-action/typescript-github-action-headline.png" alt="Featured image of post How to create a custom GitHub Action using TypeScript" />&lt;p>In this article, we&amp;rsquo;ll create a custom reusable GitHub Action using TypeScript. As covered in our article on
&lt;a class="link" href="../github-reusable-workflows-and-steps/" >reusing GitHub workflows and steps&lt;/a>, GitHub Actions allow you to automate your
software development workflows. By creating a custom GitHub Action, you can extend the functionality of GitHub Actions
to suit your specific needs.&lt;/p>
&lt;p>We will create a simple GitHub Action to replace
&lt;a class="link" href="../github-code-review-issues/" >GitHub&amp;rsquo;s broken Pull Request review process&lt;/a>. This custom GitHub Action will
automatically approve Pull Requests that meet specific criteria.&lt;/p>
&lt;h2 id="start-with-githubs-action-template">&lt;a href="#start-with-githubs-action-template" class="header-anchor">&lt;/a>Start with GitHub&amp;rsquo;s Action template
&lt;/h2>&lt;p>GitHub provides a
&lt;a class="link" href="https://github.com/actions/typescript-action" target="_blank" rel="noopener"
>template for creating a new GitHub Action using TypeScript&lt;/a>. You can use
this template to get started quickly. The template includes the necessary files and structure to create a new GitHub
Action. Anything unnecessary can be removed or modified to suit your requirements.&lt;/p>
&lt;p>Follow the instructions in the template&amp;rsquo;s README to set up your action.&lt;/p>
&lt;ol>
&lt;li>Click the &lt;strong>Use this template&lt;/strong> button at the top of the repository&lt;/li>
&lt;li>Select &lt;strong>Create a new repository&lt;/strong>&lt;/li>
&lt;li>Select an owner and name for your new repository&lt;/li>
&lt;li>Click &lt;strong>Create repository&lt;/strong>&lt;/li>
&lt;li>Clone your new repository&lt;/li>
&lt;/ol>
&lt;p>Check out your new repository, go to the cloned repo directory, and make sure your node version matches the one in the
&lt;code>.node-version&lt;/code> file. If you&amp;rsquo;re using &lt;a class="link" href="https://github.com/nvm-sh/nvm/blob/master/README.md" target="_blank" rel="noopener"
>nvm (Node Version Manager)&lt;/a>,
you can run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>cp .node-version .nvmrc
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>nvm install
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>node --version
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>Note:&lt;/strong> Our example is based on
&lt;a class="link" href="https://github.com/actions/typescript-action/tree/0467e124e81b527a246cabdaef9c3b433febf9a8" target="_blank" rel="noopener"
>this commit of the template repository&lt;/a>.&lt;/p>
&lt;h2 id="implement-your-custom-github-action">&lt;a href="#implement-your-custom-github-action" class="header-anchor">&lt;/a>Implement your custom GitHub Action
&lt;/h2>&lt;p>Install the template&amp;rsquo;s dependencies with &lt;code>npm install&lt;/code>. In addition, install the &lt;code>@actions/github&lt;/code> package with
&lt;code>npm install @actions/github&lt;/code>.&lt;/p>
&lt;p>The template provides a basic structure for your GitHub Action. Update the &lt;code>action.yml&lt;/code> file with your action&amp;rsquo;s name,
description, author, and updated inputs/outputs.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Code review&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Improved code review process&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">author&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Victor on Software&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Add your action&amp;#39;s branding here. This will appear on the GitHub Marketplace.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">branding&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">icon&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;heart&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">color&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;red&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Define your inputs here.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">inputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">github-token&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;GitHub secret token&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">required&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">runs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">using&lt;/span>: &lt;span style="color:#ae81ff">node20&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">main&lt;/span>: &lt;span style="color:#ae81ff">dist/index.js&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, our new action will have a single input, &lt;code>github-token&lt;/code>, the GitHub secret token to use the GitHub API.&lt;/p>
&lt;p>Next, we can modify the code in the &lt;code>src/main.ts&lt;/code> file to implement our custom logic.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#a6e22e">core&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@actions/core&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#a6e22e">github&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;@actions/github&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">readFileSync&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;fs&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * The main function of the action.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> * @returns {Promise&amp;lt;void&amp;gt;} Resolves when the action is complete.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">run&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>&amp;lt;&lt;span style="color:#f92672">void&lt;/span>&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">try&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Get the PR number from the payload. This action is only intended for PRs.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">prNumber&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">github&lt;/span>.&lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">payload&lt;/span>.&lt;span style="color:#a6e22e">pull_request&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#66d9ef">number&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">prNumber&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Get the required reviewer from the REVIEWERS file.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// This simplified example assumes that the REVIEWERS file contains a single reviewer.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// In a real-world scenario, we would need to parse the REVIEWERS file at the top directory
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// of our changed files to get the reviewers.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">reviewer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">readFileSync&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;REVIEWERS&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;utf8&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">trim&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">reviewer&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">core&lt;/span>.&lt;span style="color:#a6e22e">setFailed&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;No reviewer found in REVIEWERS file&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Get all the reviews for this PR.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">githubToken&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">core&lt;/span>.&lt;span style="color:#a6e22e">getInput&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;github-token&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">octokit&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">github&lt;/span>.&lt;span style="color:#a6e22e">getOctokit&lt;/span>(&lt;span style="color:#a6e22e">githubToken&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">reviews&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">octokit&lt;/span>.&lt;span style="color:#a6e22e">rest&lt;/span>.&lt;span style="color:#a6e22e">pulls&lt;/span>.&lt;span style="color:#a6e22e">listReviews&lt;/span>({
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">owner&lt;/span>: &lt;span style="color:#66d9ef">github.context.repo.owner&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">repo&lt;/span>: &lt;span style="color:#66d9ef">github.context.repo.repo&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">pull_number&lt;/span>: &lt;span style="color:#66d9ef">prNumber&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Check if the required reviewer has approved the PR.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// This action does not require the reviewer to re-approve the PR if new changes are pushed.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">approved&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">reviews&lt;/span>.&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">forEach&lt;/span>(&lt;span style="color:#a6e22e">review&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">review&lt;/span>.&lt;span style="color:#a6e22e">user&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">login&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">reviewer&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">review&lt;/span>.&lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;APPROVED&amp;#39;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">approved&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Fail the workflow run if the required reviewer has not approved the PR.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">approved&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">core&lt;/span>.&lt;span style="color:#a6e22e">setFailed&lt;/span>(&lt;span style="color:#e6db74">`Reviewer &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">reviewer&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> needs to approve the PR`&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">catch&lt;/span> (&lt;span style="color:#a6e22e">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Fail the workflow run if an error occurs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">error&lt;/span> &lt;span style="color:#66d9ef">instanceof&lt;/span> Error) &lt;span style="color:#a6e22e">core&lt;/span>.&lt;span style="color:#a6e22e">setFailed&lt;/span>(&lt;span style="color:#a6e22e">error&lt;/span>.&lt;span style="color:#a6e22e">message&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We read the &lt;code>REVIEWERS&lt;/code> file to get the required reviewer for the PR. We then retrieve all the reviews for the pull
request and check if the needed reviewer has approved the PR. If the reviewer has not approved the PR, we fail the run.&lt;/p>
&lt;h2 id="build-your-custom-github-action">&lt;a href="#build-your-custom-github-action" class="header-anchor">&lt;/a>Build your custom GitHub Action
&lt;/h2>&lt;p>To build your action, run &lt;code>npm run bundle&lt;/code>. This will compile the TypeScript code in the &lt;code>src/&lt;/code> directory and output the
JavaScript code in the &lt;code>dist/&lt;/code> directory. The exact command for &lt;code>bundle&lt;/code> is defined in the &lt;code>package.json&lt;/code> file.&lt;/p>
&lt;p>The &lt;code>bundle&lt;/code> step is required before you can test your action locally or use it in a workflow because the &lt;code>action.yml&lt;/code>
file points at the &lt;code>dist/index.js&lt;/code> bundled version of your code.&lt;/p>
&lt;p>This step can easily be forgotten, and you may wonder why your changes are not reflected in the action. You can
configure our IDE to do &lt;code>npm run bundle&lt;/code> automatically on save, create a check as a
&lt;a class="link" href="https://git-scm.com/book/ms/v2/Customizing-Git-Git-Hooks" target="_blank" rel="noopener"
>git pre-commit hook&lt;/a> to ensure the &lt;code>dist/&lt;/code> directory is
up-to-date, or rely on the &lt;code>Check Transpiled Javascript&lt;/code> workflow in the &lt;code>.github/workflows/&lt;/code> directory.&lt;/p>
&lt;p>Now, commit your changes and push them to your repository.&lt;/p>
&lt;p>&lt;strong>Note:&lt;/strong> We will not cover testing in this article, but you should add tests to the &lt;code>__tests__/&lt;/code> directory for your
source code. For this example, we must refactor the code to make it more testable.&lt;/p>
&lt;h2 id="test-your-custom-github-action-in-another-repository">&lt;a href="#test-your-custom-github-action-in-another-repository" class="header-anchor">&lt;/a>Test your custom GitHub Action in another repository
&lt;/h2>&lt;h3 id="add-workflows-and-reviewers-file">&lt;a href="#add-workflows-and-reviewers-file" class="header-anchor">&lt;/a>Add workflows and REVIEWERS file
&lt;/h3>&lt;p>You can use the &lt;code>uses&lt;/code> keyword in a workflow file to try your action in another repository. Create a new workflow file
in the repository&amp;rsquo;s &lt;code>.github/workflows/&lt;/code> directory where you want to test your action. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Code review&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">workflow_dispatch&lt;/span>: &lt;span style="color:#75715e"># Manual (for debug)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pull_request&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">code-review&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Code review&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">checkout&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Code review action&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">test-action&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">getvictor/code-review-demo@main&lt;/span> &lt;span style="color:#75715e"># Your action goes here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">github-token&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We are using &lt;code>@main&lt;/code> as the version of the action to test the latest code on the main branch. You can replace this with
a specific version tag or branch name.&lt;/p>
&lt;p>In addition, create a &lt;code>REVIEWERS&lt;/code> file at the repository&amp;rsquo;s root with the required reviewer&amp;rsquo;s GitHub username.&lt;/p>
&lt;p>Notice that the above workflow runs on &lt;code>pull_request&lt;/code> events but not on &lt;code>pull_request_review&lt;/code> events. This is because
GitHub Actions treats the &lt;code>pull_request&lt;/code> workflow runs and the &lt;code>pull_request_review&lt;/code> workflow runs as distinct. Instead,
we want the same workflow run to be triggered by both events. This is a common pitfall when working with GitHub Actions.
We need to add another workflow file that listens for &lt;code>pull_request_review&lt;/code> events and triggers the &lt;code>pull_request&lt;/code>
workflow run to fix this.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Rerun checks after review&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">pull_request_review&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">types&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">submitted&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#ae81ff">dismissed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">rerun_checks&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Rerun specified checks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">permissions&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">actions&lt;/span>: &lt;span style="color:#ae81ff">write&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Rerun Checks&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">shqear93/rerun-checks@v3&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">github-token&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">check-names&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Code review&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="configure-a-github-rule-to-require-code-review">&lt;a href="#configure-a-github-rule-to-require-code-review" class="header-anchor">&lt;/a>Configure a GitHub rule to require code review
&lt;/h3>&lt;p>Create a branch protection rule in the repository settings that requires the above &lt;code>Code review&lt;/code> workflow to pass in a
PR before merging to your default branch.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/typescript-github-action/github-code-review-rule.png"
alt="Require a pull request before merging. Require the Code review status check to pass.">
&lt;/figure>
&lt;h3 id="create-a-pull-request">&lt;a href="#create-a-pull-request" class="header-anchor">&lt;/a>Create a pull request
&lt;/h3>&lt;p>Commit your changes to a new branch and create a pull request. The &lt;code>Code review&lt;/code> workflow should run automatically and
show the Failed status.&lt;/p>
&lt;p>Once the required reviewer approves the PR, the &lt;code>Rerun checks after review&lt;/code> workflow will run and trigger the
&lt;code>Code review&lt;/code> workflow. The rerun should pass, and you should be able to merge the PR.&lt;/p>
&lt;h2 id="clean-up-your-custom-github-action-repo">&lt;a href="#clean-up-your-custom-github-action-repo" class="header-anchor">&lt;/a>Clean up your custom GitHub Action repo
&lt;/h2>&lt;p>As an optional step, you can clean up your custom GitHub Action repository:&lt;/p>
&lt;ul>
&lt;li>Update README.md with instructions on how to use your new action&lt;/li>
&lt;li>Remove the &lt;code>src/wait.ts&lt;/code> file and associated tests&lt;/li>
&lt;li>Update workflows in the &lt;code>.github/workflows/&lt;/code> directory&lt;/li>
&lt;/ul>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;p>In a previous article, we described
&lt;a class="link" href="../git-merges-and-pull-requests/" >what happens in a GitHub pull request after a &lt;code>git merge&lt;/code>&lt;/a>.&lt;/p>
&lt;p>In another article, we covered
&lt;a class="link" href="../use-github-actions-for-general-purpose-tasks/" >how to use GitHub Actions for general-purpose tasks&lt;/a>.&lt;/p>
&lt;h2 id="example-code-on-github">&lt;a href="#example-code-on-github" class="header-anchor">&lt;/a>Example code on GitHub
&lt;/h2>&lt;p>The code for our simple GitHub Action is available on GitHub: &lt;a class="link" href="https://github.com/getvictor/code-review-demo" target="_blank" rel="noopener"
>https://github.com/getvictor/code-review-demo&lt;/a>&lt;/p>
&lt;h2 id="watch-how-to-create-a-custom-github-action-using-typescript">&lt;a href="#watch-how-to-create-a-custom-github-action-using-typescript" class="header-anchor">&lt;/a>Watch how to create a custom GitHub Action using TypeScript
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/NFIwPxz5La8"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to set up a remote development environment</title><link>https://victoronsoftware.com/posts/remote-development-environment/</link><pubDate>Sun, 22 Sep 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/remote-development-environment/</guid><description>&lt;img src="https://victoronsoftware.com/posts/remote-development-environment/remote-dev-environment-headline.png" alt="Featured image of post How to set up a remote development environment" />&lt;h1 id="why-set-up-a-remote-development-environment">&lt;a href="#why-set-up-a-remote-development-environment" class="header-anchor">&lt;/a>Why set up a remote development environment?
&lt;/h1>&lt;p>A remote development environment can be beneficial for several reasons:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Offload processing power&lt;/strong>: Your local machine may not have enough processing power to run resource-intensive tasks.
By using a remote development environment, you can use more powerful hardware.&lt;/li>
&lt;li>&lt;strong>Consistent environment&lt;/strong>: A remote development environment ensures all team members can work in the same
environment, reducing configuration issues and ensuring consistent behavior across different machines. For example,
developers may be using a mix of macOS, Windows, and Linux machines, which can lead to differences in behavior due to
operating system-specific issues.&lt;/li>
&lt;li>&lt;strong>Multiple environments&lt;/strong>: You can set up multiple environments for different projects or tasks without cluttering
your local machine.&lt;/li>
&lt;li>&lt;strong>Access from anywhere&lt;/strong>: A remote development environment allows you to access your work from any device with an
internet connection.&lt;/li>
&lt;li>&lt;strong>Collaboration&lt;/strong>: You can easily collaborate with team members by sharing the same development environment. For
example, after coding a feature, the developer can hand off the environment to another engineer for review or QA.&lt;/li>
&lt;li>&lt;strong>Security&lt;/strong>: Keeping your code and development environment on a remote server reduces the risk of data loss in case
of local hardware failure or theft.&lt;/li>
&lt;li>&lt;strong>Scalability&lt;/strong>: You can quickly scale your development environment up or down based on your needs without affecting
your local machine.&lt;/li>
&lt;li>&lt;strong>Cost-effective&lt;/strong>: A remote development environment can be more cost-effective than purchasing and maintaining
high-end hardware for your local machine.&lt;/li>
&lt;/ul>
&lt;h1 id="setting-up-a-remote-development-environment">&lt;a href="#setting-up-a-remote-development-environment" class="header-anchor">&lt;/a>Setting up a remote development environment
&lt;/h1>&lt;p>For our development example, we will use a standalone server application connected to a database and a Redis cache. The
application uses a monolith repo with a frontend and a backend codebase.&lt;/p>
&lt;h2 id="choose-a-cloud-provider">&lt;a href="#choose-a-cloud-provider" class="header-anchor">&lt;/a>Choose a cloud provider
&lt;/h2>&lt;p>We used a &lt;a class="link" href="https://www.digitalocean.com/" target="_blank" rel="noopener"
>Digital Ocean&lt;/a> VM with 8GB of RAM, 4 CPUs, and a 160 GB disk, running Ubuntu
24.04 LTS for our remote development environment. We found that Digital Ocean provides VMs that are generally cheaper
than other cloud providers.&lt;/p>
&lt;p>Any other cloud provider, such as AWS, Google Cloud, or Azure, can also be used. Your choice of provider depends on your
specific requirements, budget, and familiarity with the platform.&lt;/p>
&lt;p>After spinning up the VM, we SSH&amp;rsquo;ed into the server, installed the necessary software for our application, and launched
the server.&lt;/p>
&lt;p>Since our server required multiple running processes, we used &lt;a class="link" href="https://github.com/tmux/tmux" target="_blank" rel="noopener"
>tmux&lt;/a> to manage multiple
terminal sessions. Tmux allowed us to create numerous panes and windows within a single terminal session, making it
easier to manage the server processes. We could disconnect from the server, and the tmux processes ran in the
background. When reconnected to the server, we could easily reattach to the tmux session and resume work. Additionally,
we used &lt;a class="link" href="https://iterm2.com/documentation-tmux-integration.html" target="_blank" rel="noopener"
>iTerm2 tmux integration&lt;/a> to enhance our terminal
experience.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/remote-development-environment/tmux-on-remote-server.png"
alt="4 open windows with running processes">&lt;figcaption>
&lt;h4>tmux running on remote dev server&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="connect-your-ide-to-the-remote-development-environment">&lt;a href="#connect-your-ide-to-the-remote-development-environment" class="header-anchor">&lt;/a>Connect your IDE to the remote development environment
&lt;/h2>&lt;p>We used &lt;a class="link" href="https://www.jetbrains.com/" target="_blank" rel="noopener"
>JetBrains IDE&lt;/a> for development work and
&lt;a class="link" href="https://www.jetbrains.com/remote-development/gateway/" target="_blank" rel="noopener"
>JetBrains Gateway&lt;/a> to connect to our remote development server
using SSH. JetBrains Gateway automatically installed the IDE backend on the remote server and brought up a local client
of the IDE.&lt;/p>
&lt;p>In our case, we wanted to use one IDE for backend development (GoLand) and another IDE for frontend development
(WebStorm).&lt;/p>
&lt;p>We had trouble starting them up and could not run both IDEs simultaneously. Either one or both of them would disconnect
from the remote development server without an obvious way to fix the issue. We suspect the issue was due to insufficient
memory on the machine &amp;ndash; try to plan for around 4 GB of memory per IDE.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/remote-development-environment/jetbrains-disconnect.png"
alt="No Connection message in GoLand IDE">
&lt;/figure>
&lt;p>However, we could use one of the IDEs at a time, which was sufficient for most of our needs.&lt;/p>
&lt;h1 id="using-a-remote-development-environment">&lt;a href="#using-a-remote-development-environment" class="header-anchor">&lt;/a>Using a remote development environment
&lt;/h1>&lt;p>After setting up the remote development environment, we reviewed common development use cases to ensure that everything
was working as expected.&lt;/p>
&lt;h2 id="make-a-code-change-and-restart-the-application-server">&lt;a href="#make-a-code-change-and-restart-the-application-server" class="header-anchor">&lt;/a>Make a code change and restart the application server
&lt;/h2>&lt;p>We made a simple code change in the backend service, saved the file, and restarted the application server. We verified
that the change was reflected in the application.&lt;/p>
&lt;p>The compile time was slower than on our local machine, likely due to the remote server&amp;rsquo;s lower CPU count and total RAM
compared to our local machine.&lt;/p>
&lt;h2 id="run-unit-tests">&lt;a href="#run-unit-tests" class="header-anchor">&lt;/a>Run unit tests
&lt;/h2>&lt;p>We ran the unit tests for the backend service. The tests passed successfully.&lt;/p>
&lt;h2 id="connect-to-the-database-and-redis-cache">&lt;a href="#connect-to-the-database-and-redis-cache" class="header-anchor">&lt;/a>Connect to the database and Redis cache
&lt;/h2>&lt;p>From our local development machine, we connected to the development server&amp;rsquo;s database and Redis cache to verify that the
services were running correctly.&lt;/p>
&lt;h2 id="reconnecting-to-remote-development-environment">&lt;a href="#reconnecting-to-remote-development-environment" class="header-anchor">&lt;/a>Reconnecting to remote development environment
&lt;/h2>&lt;p>After opening up our local computer the next day, we found that the JetBrains Gateway and the IDE has disconnected from
the remote server. Refreshing the Gateway re-established the connection, and the IDE also showed as connected within 60
seconds or so.&lt;/p>
&lt;h1 id="security-considerations">&lt;a href="#security-considerations" class="header-anchor">&lt;/a>Security considerations
&lt;/h1>&lt;p>When setting up a remote development environment, consider the following security best practices:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>SSH key authentication&lt;/strong>: For secure access to the remote server, use SSH key authentication instead of passwords.&lt;/li>
&lt;li>&lt;strong>Firewall rules&lt;/strong>: Configure firewall rules to restrict access to the server to only necessary IP addresses.&lt;/li>
&lt;li>&lt;strong>Secure connections&lt;/strong>: Use HTTPS for web applications and encrypted connections for database access.&lt;/li>
&lt;li>&lt;strong>Data encryption&lt;/strong>: Encrypt sensitive data at rest and in transit. Always encrypt sensitive data in the database.&lt;/li>
&lt;/ul>
&lt;h2 id="docker-firewall-rules">&lt;a href="#docker-firewall-rules" class="header-anchor">&lt;/a>Docker firewall rules
&lt;/h2>&lt;p>Docker containers use &lt;code>iptables&lt;/code> rules to open ports for incoming traffic. We can
&lt;a class="link" href="https://docs.docker.com/engine/network/packet-filtering-firewalls/#restrict-external-connections-to-containers" target="_blank" rel="noopener"
>restrict external connections to containers&lt;/a>
by adding rules to the &lt;code>DOCKER-USER&lt;/code> chain, such as:&lt;/p>
&lt;pre tabindex="0">&lt;code>iptables -I DOCKER-USER -i eth0 ! -s &amp;lt;your local IP&amp;gt; -j DROP
&lt;/code>&lt;/pre>&lt;p>Where &lt;code>eth0&lt;/code> is the network interface connected to the internet and &lt;code>&amp;lt;your local IP&amp;gt;&lt;/code> is the IP address of your local
machine. This rule blocks all incoming traffic to Docker from the internet except for your local IP.&lt;/p>
&lt;p>After setting up and testing your rules, you can persist them across restarts with the &lt;code>iptables-persistent&lt;/code> package or
other methods.&lt;/p>
&lt;h1 id="overall-impressions">&lt;a href="#overall-impressions" class="header-anchor">&lt;/a>Overall impressions
&lt;/h1>&lt;p>After using the remote development environment for a few days, we found it usable but not as smooth as working on a
local machine. For our use case, it is an excellent option for a secondary development environment or for working on a
resource-intensive feature.&lt;/p>
&lt;p>Some issues we encountered included:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Latency&lt;/strong>: Occasionally, clicking on an element or using a keyboard shortcut had a noticeable delay.&lt;/li>
&lt;li>&lt;strong>Missing features&lt;/strong>: Some features, such as only searching inside text strings, were not available in the remote
development environment.&lt;/li>
&lt;li>&lt;strong>Issues with plugins&lt;/strong>: GitHub Copilot did not work out of the box; it did not provide suggestions in the editor. We
did not drill down to the issue, but a potential workaround is to use JetBrains&amp;rsquo;s code assistant plugin.&lt;/li>
&lt;/ul>
&lt;h1 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h1>&lt;ul>
&lt;li>We recently explained &lt;a class="link" href="../secure-mysql-docker" >how to secure a MySQL Docker container for Zero Trust&lt;/a>.&lt;/li>
&lt;li>We also discussed &lt;a class="link" href="../github-code-review-issues" >the issues with GitHub&amp;rsquo;s code review process&lt;/a>.&lt;/li>
&lt;li>We wrote about &lt;a class="link" href="../google-sheets-api/" >quickly editing a Google Sheets spreadsheet via the API&lt;/a>.&lt;/li>
&lt;li>We also covered &lt;a class="link" href="../cloudfront-signed-urls/" >creating secure signed URLs with AWS CloudFront&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h1 id="watch-how-to-set-up-a-remote-development-environment">&lt;a href="#watch-how-to-set-up-a-remote-development-environment" class="header-anchor">&lt;/a>Watch how to set up a remote development environment
&lt;/h1>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/_VDtA9Tq-1E"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>Top 3 issues with GitHub code review process</title><link>https://victoronsoftware.com/posts/github-code-review-issues/</link><pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/github-code-review-issues/</guid><description>&lt;img src="https://victoronsoftware.com/posts/github-code-review-issues/developer-on-tightrope-headline.png" alt="Featured image of post Top 3 issues with GitHub code review process" />&lt;ul>
&lt;li>&lt;a class="link" href="#issue-1-codeowners-is-not-scalable" >CODEOWNERS is not scalable&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#issue-2-re-approvals-for-every-push" >Re-approvals for every push&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#issue-3-impractical-to-maintain-a-protected-feature-branch" >Impractical for protected feature branches&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Our team has been using GitHub to review the code for our open-source product. We have encountered several issues with
GitHub code reviews. The default GitHub code review process is not scalable and provides a poor developer experience.&lt;/p>
&lt;h2 id="how-to-set-up-a-github-code-review-process">&lt;a href="#how-to-set-up-a-github-code-review-process" class="header-anchor">&lt;/a>How to set up a GitHub code review process
&lt;/h2>&lt;p>GitHub admins can create a
&lt;a class="link" href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/managing-a-branch-protection-rule" target="_blank" rel="noopener"
>branch protection rule&lt;/a>
that requires a code review before merging the code to the main branch.&lt;/p>
&lt;p>Here&amp;rsquo;s a representative branch protection rule:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/github-code-review-issues/pr-branch-protection-rule.png"
alt="Branch protection rule requiring code review before merging">&lt;figcaption>
&lt;h4>PR branch protection rule&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>When a developer creates a pull request, GitHub requires code reviews from all relevant owners specified by the
&lt;code>CODEOWNERS&lt;/code> file in the repository. If someone makes a new push to the PR, all the owners need to re-approve the PR.&lt;/p>
&lt;p>In a previous article, we covered &lt;a class="link" href="../find-code-owners-for-pull-request" >how to find the required code owners for a PR&lt;/a>.
This is another issue, but we will not discuss it in this article.&lt;/p>
&lt;h2 id="issue-1-codeowners-is-not-scalable">&lt;a href="#issue-1-codeowners-is-not-scalable" class="header-anchor">&lt;/a>Issue 1: CODEOWNERS is not scalable
&lt;/h2>&lt;p>GitHub uses a
&lt;a class="link" href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners" target="_blank" rel="noopener"
>&lt;code>CODEOWNERS&lt;/code> file to define individuals or teams responsible for each file in the repository&lt;/a>.&lt;/p>
&lt;p>The &lt;code>CODEOWNERS&lt;/code> file format favors fine-grained code ownership, where the last matching pattern takes precedence over
previous patterns. Here is an example from the GitHub documentation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span># In this example, @octocat owns any file in the `/apps`
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># directory in the root of your repository except for the `/apps/github`
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># subdirectory, as this subdirectory has its own owner @doctocat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/apps/ @octocat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/apps/github @doctocat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>CODEOWNERS&lt;/code> file is not scalable for medium-to-large and even small organizations. As the number of code owners
grows, each pull request is likely to require approval from more code owners. Each code owner may request changes,
potentially leading to cycles and cycles of re-approvals.&lt;/p>
&lt;p>Tracking down multiple people to approve and re-approve a PR can be time-consuming and frustrating for developers. This
results in longer PR turnaround times, slower development velocity, and missed commitments.&lt;/p>
&lt;p>From a developer experience perspective, we want to make the code review process as smooth and efficient as possible,
which means one reviewer for one PR. This approach is feasible by manually inverting the
&lt;code>last matching pattern takes precedence&lt;/code> rule in the &lt;code>CODEOWNERS&lt;/code> file by always including the owner(s) from the
previous pattern. For example, we would rewrite the above owners as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>/apps/ @octocat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/apps/github @octocat @doctocat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Keeping the &lt;code>CODEOWNERS&lt;/code> file in this format may be cumbersome to do manually, but it can be done with a script.&lt;/p>
&lt;h2 id="issue-2-re-approvals-for-every-push">&lt;a href="#issue-2-re-approvals-for-every-push" class="header-anchor">&lt;/a>Issue 2: Re-approvals for every push
&lt;/h2>&lt;p>When a developer makes a new push to a PR, all the code owners need to re-approve it. This is a poor developer
experience, as it requires the code owners to review potentially the same code changes multiple times.&lt;/p>
&lt;p>The issue stems from the lack of fine-grained control over the following option:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/github-code-review-issues/dismiss-stale-pr-approvals.png"
alt="Dismiss stale pull request approvals when new commits are pushed">
&lt;/figure>
&lt;p>With multiple code owners, every code owner must re-approve every change.&lt;/p>
&lt;p>A code owner should not need to re-review code that didn&amp;rsquo;t change &amp;ndash; this is a waste of time and effort.&lt;/p>
&lt;p>With a single code owner, the reviewer must re-approve trivial or irrelevant changes, such as:&lt;/p>
&lt;ul>
&lt;li>fixing a typo in a comment&lt;/li>
&lt;li>fully accepting a suggestion from the reviewer&lt;/li>
&lt;li>re-generating an auto-generated file, such as documentation&lt;/li>
&lt;/ul>
&lt;p>The required re-approvals can be frustrating and time-consuming for developers and code owners. They make developers
feel untrusted and inefficient.&lt;/p>
&lt;p>The main argument for requiring re-approvals is security—we don&amp;rsquo;t want to merge potentially malicious code. If that&amp;rsquo;s
the case, we should have a security review process in place, not a code review process. A security review can be done by
a separate individual and improved by automated tools.&lt;/p>
&lt;p>In addition, we should be able to completely exclude some files/directories from the code review process. For example,
generated files, such as documentation based on code changes, should not require code review. Other generated files,
such as testing mocks, may have CI/CD checks that ensure they are generated correctly, and they should not require code
review either.&lt;/p>
&lt;h2 id="issue-3-impractical-to-maintain-a-protected-feature-branch">&lt;a href="#issue-3-impractical-to-maintain-a-protected-feature-branch" class="header-anchor">&lt;/a>Issue 3: Impractical to maintain a protected feature branch
&lt;/h2>&lt;p>A protected feature branch requires code reviews before merging. Since all the commits on the feature branch have
already been reviewed and approved, it is considered safe to merge into the main branch.&lt;/p>
&lt;p>The main issue is that the developer cannot simply update this feature branch with the latest changes on the main
branch. They need PR approval from all the code owners who have already approved the same changes on the main branch.
This busy work is another example of a waste of time and effort.&lt;/p>
&lt;p>In addition, a feature branch may be long-lived and introduce changes across multiple areas of the code base. This means
that it may require approval from many code owners, which can be time-consuming and frustrating.&lt;/p>
&lt;h2 id="solution-custom-github-action-to-manage-code-reviews">&lt;a href="#solution-custom-github-action-to-manage-code-reviews" class="header-anchor">&lt;/a>Solution: Custom GitHub Action to manage code reviews
&lt;/h2>&lt;p>Instead of relying on the default GitHub code review process, we can create a custom GitHub Action to manage code
reviews. The custom GitHub Action can:&lt;/p>
&lt;ul>
&lt;li>automatically identify a single reviewer for a PR (or identify a small group of reviewers, each of whom can approve
the PR)&lt;/li>
&lt;li>automatically exclude specific files/directories from the code review process&lt;/li>
&lt;li>automatically maintain the approval state of the PR when new commits meeting explicit criteria are pushed&lt;/li>
&lt;li>enable a usable and practical protected feature branch&lt;/li>
&lt;/ul>
&lt;p>Here is an example &lt;a class="link" href="../typescript-github-action/" >GitHub Action to replace GitHub&amp;rsquo;s pull request review process&lt;/a>.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../engineering-transparency/" >Why transparency beats everything else in engineering&lt;/a>&lt;/strong>&lt;br>
How making work visible transforms teams from frustrated to high-performing through organizational transparency.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../track-engineering-metrics/" >How to track engineering metrics with GitHub Actions&lt;/a>&lt;/strong>&lt;br>
Implement automated tracking of engineering performance metrics using GitHub&amp;rsquo;s built-in tools and APIs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../git-merges-and-pull-requests" >How git merge works with PRs&lt;/a>&lt;/strong>&lt;br>
Understand the mechanics behind pull request merges and how to optimize your git workflow.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../github-reusable-workflows-and-steps" >How to reuse GitHub workflows and steps&lt;/a>&lt;/strong>&lt;br>
Build maintainable CI/CD pipelines by creating reusable components for your GitHub Actions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../readable-code/" >What is clean, readable code and why it matters?&lt;/a>&lt;/strong>&lt;br>
Discover why code readability directly impacts team productivity and how to measure it effectively.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" >How to scale your codebase with evolutionary architecture&lt;/a>&lt;/strong>&lt;br>
Learn architectural patterns that help teams maintain velocity as codebases and organizations grow.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../remote-development-environment" >Set up a remote dev environment&lt;/a>&lt;/strong>&lt;br>
Configure development environments that enhance team collaboration and reduce onboarding friction.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="watch-the-top-3-issues-with-github-code-reviews">&lt;a href="#watch-the-top-3-issues-with-github-code-reviews" class="header-anchor">&lt;/a>Watch the top 3 issues with GitHub code reviews
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/RWnJ84vTK48"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to measure the execution time of Go tests accurately</title><link>https://victoronsoftware.com/posts/go-test-execution-time/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/go-test-execution-time/</guid><description>&lt;img src="https://victoronsoftware.com/posts/go-test-execution-time/crash-test-dummy-headline.png" alt="Featured image of post How to measure the execution time of Go tests accurately" />&lt;ul>
&lt;li>&lt;a class="link" href="#accurately-measuring-test-execution-time" >Accurately measuring test execution time&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="why-measure-test-execution-time">&lt;a href="#why-measure-test-execution-time" class="header-anchor">&lt;/a>Why measure test execution time?
&lt;/h2>&lt;p>By speeding up your test suite, you&amp;rsquo;re improving developer experience and productivity. Faster tests mean faster feedback, which leads to quicker iterations and better code quality.&lt;/p>
&lt;p>When you run tests, you want to know how long they take to execute. This information can help you optimize your test suite and make it run faster. By measuring the execution time of your tests, you can identify slow tests and improve their performance.&lt;/p>
&lt;h2 id="problems-with-current-measurement-tools">&lt;a href="#problems-with-current-measurement-tools" class="header-anchor">&lt;/a>Problems with current measurement tools
&lt;/h2>&lt;p>We have yet to find a tool that provides detailed, actionable insights into the performance of Go tests.&lt;/p>
&lt;p>For example, running the &lt;code>gotestsum tool slowest&lt;/code> command from the &lt;a class="link" href="https://github.com/gotestyourself/gotestsum" target="_blank" rel="noopener"
>gotestsum&lt;/a> tool gave us the following output for our test suite:&lt;/p>
&lt;pre tabindex="0">&lt;code>github.com/fleetdm/fleet/v4/server/datastore/mysql TestMDMApple 6m9.65s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestSoftware 4m8.9s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestPolicies 3m31s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestActivity 2m16.67s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestMDMWindows 2m14.85s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestMDMShared 2m10.27s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestVulnerabilities 2m7.98s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestPacks 1m59.2s
github.com/fleetdm/fleet/v4/server/worker TestAppleMDM 1m55.11s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestTeams 1m47.82s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestAppConfig 1m42.81s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestHosts 1m41.79s
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709183940 1m36.43s
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709132642 1m36.34s
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240725182118 1m35.95s
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240730171504 1m35.73s
github.com/fleetdm/fleet/v4/server/vulnerabilities/nvd TestTranslateCPEToCVE/recent_vulns 1m34.87s
...
&lt;/code>&lt;/pre>&lt;p>The first thing to notice is that the numbers don&amp;rsquo;t add up. Our test suite takes around 14 minutes to run, but the times in the report add up to more than 14 minutes. This discrepancy makes it hard to identify the slowest tests.&lt;/p>
&lt;p>The second thing to notice is that our tests contain many subtests. The &lt;code>TestMDMApple&lt;/code> test contains over 40 subtests. We want to know the execution time of each subtest, not just the total time for the test.&lt;/p>
&lt;p>The third thing to notice is that the output does not provide any information regarding parallelism. We want to know if our tests run in parallel and how many run concurrently. We want to run tests in parallel when possible to speed up the test suite.&lt;/p>
&lt;h2 id="understanding-parallelism-in-go-tests">&lt;a href="#understanding-parallelism-in-go-tests" class="header-anchor">&lt;/a>Understanding parallelism in Go tests
&lt;/h2>&lt;p>Before measuring the execution time of our tests, we need to understand how Go tests run in parallel.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/go-test-execution-time/go-test-parallelism.svg"
alt="Sequence diagram of a go test run with two packages, two tests, and two subtests.">
&lt;/figure>
&lt;p>When you run &lt;code>go test&lt;/code>, Go compiles each package in your test suite in a separate binary. It then runs each binary in parallel. The tests in different packages run concurrently. This behavior is controlled by the &lt;code>-p&lt;/code> flag, which defaults to &lt;code>GOMAXPROCS&lt;/code>, the number of CPUs on your machine.&lt;/p>
&lt;p>Within a package, tests run sequentially by default &amp;ndash; the tests in the same package run one after the other. However, you can run tests in parallel within a package by calling &lt;code>t.Parallel()&lt;/code> in your test functions. This behavior is controlled by the &lt;code>-parallel&lt;/code> flag, which also defaults to &lt;code>GOMAXPROCS&lt;/code>. So, in a system with 8 CPUs, running a test suite with many packages and parallel tests will run 8 packages concurrently and 8 tests within each package concurrently, for a total of 64 tests running concurrently.&lt;/p>
&lt;p>Each test function may have multiple subtests, which may have their own subtests, and so on. Subtests run sequentially by default. However, you can also run subtests in parallel by calling &lt;code>t.Parallel()&lt;/code> in your subtest functions.&lt;/p>
&lt;h2 id="accurately-measuring-test-execution-time">&lt;a href="#accurately-measuring-test-execution-time" class="header-anchor">&lt;/a>Accurately measuring test execution time
&lt;/h2>&lt;p>To measure the execution time of your tests, we must use the &lt;code>-json&lt;/code> flag with the &lt;code>go test&lt;/code> command. This flag outputs test results in JSON format, which we can parse and analyze.&lt;/p>
&lt;p>The &lt;code>Action&lt;/code> field in the JSON output shows the start and end times of each test and subtest.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.969606869Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;run&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.96984165Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;run&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.969928132Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pause&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.969983777Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;run&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.970052987Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pause&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.970090377Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cont&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.973464469Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cont&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:52.015505184Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pass&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Elapsed&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0.04&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:52.015523238Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pass&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Elapsed&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0.04&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:52.015527907Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pass&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Elapsed&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>While parsing the JSON output, we can track how many tests are running in parallel. We can then adjust the execution time of each test by dividing the total time by the number of tests running concurrently. Since we don&amp;rsquo;t have access to the actual CPU time each test used, this is the best approximation we can get.&lt;/p>
&lt;p>When tests run in parallel, we typically see the &lt;code>pause&lt;/code> and &lt;code>cont&lt;/code> actions. If we see these actions, we know that the test or subtest is running in parallel.&lt;/p>
&lt;p>We created a parser called &lt;a class="link" href="https://github.com/getvictor/goteststats" target="_blank" rel="noopener"
>goteststats&lt;/a> that does these calculations.&lt;/p>
&lt;h2 id="accurate-test-execution-time-measurement-in-practice">&lt;a href="#accurate-test-execution-time-measurement-in-practice" class="header-anchor">&lt;/a>Accurate test execution time measurement in practice
&lt;/h2>&lt;p>By running our &lt;a class="link" href="https://github.com/getvictor/goteststats" target="_blank" rel="noopener"
>goteststats&lt;/a> parser on the JSON output of our test suite, we gained actionable insights into our tests&amp;rsquo; performance.&lt;/p>
&lt;pre tabindex="0">&lt;code>WARNING: Stopped test not found in running tests: TestGenerateMDMApple/successful_run
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709132642: 8.142s (total: 2m12.806s parallel: 16)
github.com/fleetdm/fleet/v4/server/cron TestCalendarEvents1KHosts: 7.853s (total: 36.158s parallel: 4)
github.com/fleetdm/fleet/v4/server/cron TestEventForDifferentHost: 7.853s (total: 36.158s parallel: 4)
github.com/fleetdm/fleet/v4/cmd/fleet TestCronVulnerabilitiesCreatesDatabasesPath: 6.878s (total: 30.232s parallel: 4)
github.com/fleetdm/fleet/v4/server/vulnerabilities/nvd TestTranslateCPEToCVE/find_vulns_on_cpes: 6.849s (total: 1m34.89s parallel: 13)
github.com/fleetdm/fleet/v4/server/vulnerabilities/nvd TestTranslateCPEToCVE/recent_vulns: 6.849s (total: 1m34.89s parallel: 13)
github.com/fleetdm/fleet/v4/server/vulnerabilities/oval TestOvalAnalyzer/#load/invalid_vuln_path: 5.844s (total: 1m25.152s parallel: 14)
github.com/fleetdm/fleet/v4/server/vulnerabilities/oval TestOvalAnalyzer/analyzing_RHEL_software: 5.844s (total: 1m25.152s parallel: 14)
github.com/fleetdm/fleet/v4/server/vulnerabilities/oval TestOvalAnalyzer/analyzing_Ubuntu_software: 5.844s (total: 1m25.151s parallel: 14)
github.com/fleetdm/fleet/v4/cmd/fleet TestAutomationsSchedule: 5.699s (total: 14.213s parallel: 2)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240725182118: 5.623s (total: 1m37.577s parallel: 17)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709183940: 5.588s (total: 1m36.771s parallel: 17)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709124958: 5.52s (total: 1m35.622s parallel: 17)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240730171504: 5.517s (total: 1m35.74s parallel: 17)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240726100517: 5.418s (total: 1m33.987s parallel: 17)
...
&lt;/code>&lt;/pre>&lt;p>For a given test, we provide the adjusted time, the total time, and the average number of tests running concurrently with this test. The adjusted time is the time the test took to execute, which is also the time saved if we removed this test from the suite.&lt;/p>
&lt;p>The first thing to notice is that the numbers add up. The total time for the test suite is around 14 minutes, and the times in the report add up to around 14 minutes.&lt;/p>
&lt;p>The second thing to notice is that we now have the execution time of each subtest. This information is crucial for identifying slow tests and improving their performance.&lt;/p>
&lt;p>The third thing to notice is that we now have information about parallelism. We can see how many tests are running concurrently and how many tests are running in parallel. If we see a test with a low parallelism number, we know that this test is a bottleneck and should parallelized.&lt;/p>
&lt;p>The WARNING message indicates that the JSON output did not contain the start time of the test. This issue can happen if the console output of the code under test does not include a new line and gets mixed with the output of Go&amp;rsquo;s testing package. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:23:17.8084601Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;output&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/fleetctl&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestGenerateMDMApple/CSR_API_call_fails&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Output&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;requesting APNs CSR: GET /api/latest/fleet/mdm/apple/request_csr received status 502 Bad Gateway: FleetDM CSR request failed: bad request=== RUN TestGenerateMDMApple/successful_run\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="goteststats-on-github">&lt;a href="#goteststats-on-github" class="header-anchor">&lt;/a>&lt;code>goteststats&lt;/code> on GitHub
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/getvictor/goteststats" target="_blank" rel="noopener"
>goteststats&lt;/a> is available on GitHub. You can use it to get detailed performance data for your Go test suite.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>Recently, we wrote about &lt;a class="link" href="../optimizing-performance-of-go-app" >optimizing the performance of Go applications&lt;/a> and &lt;a class="link" href="../analyze-go-build/" >analyzing Go build times&lt;/a>.&lt;/li>
&lt;li>And &lt;a class="link" href="../readable-code/" >how to measure and fix unreadable code&lt;/a>.&lt;/li>
&lt;li>We also explored &lt;a class="link" href="../fuzz-testing-with-go" >fuzz testing with Go&lt;/a>.&lt;/li>
&lt;li>In addition, we showed &lt;a class="link" href="../exe-installer" >how to create an EXE installer for a Go program&lt;/a>.&lt;/li>
&lt;li>We also published an article on &lt;a class="link" href="../go-modules-and-packages" >using Go modules and packages&lt;/a>.&lt;/li>
&lt;li>And we wrote about &lt;a class="link" href="../track-engineering-metrics/" >automatically tracking engineering metrics with Go&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-how-to-measure-the-execution-time-of-go-tests-accurately">&lt;a href="#watch-how-to-measure-the-execution-time-of-go-tests-accurately" class="header-anchor">&lt;/a>Watch how to measure the execution time of Go tests accurately
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/caTDvS5vCjA"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item></channel></rss>