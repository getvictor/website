<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer Experience on Victor on Software</title><link>https://victoronsoftware.com/tags/developer-experience/</link><description>Recent content in Developer Experience on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 22 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/developer-experience/index.xml" rel="self" type="application/rss+xml"/><item><title>How to set up a remote development environment</title><link>https://victoronsoftware.com/posts/remote-development-environment/</link><pubDate>Sun, 22 Sep 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/remote-development-environment/</guid><description>&lt;img src="https://victoronsoftware.com/posts/remote-development-environment/remote-dev-environment-headline.png" alt="Featured image of post How to set up a remote development environment" />&lt;h1 id="why-set-up-a-remote-development-environment">&lt;a href="#why-set-up-a-remote-development-environment" class="header-anchor">&lt;/a>Why set up a remote development environment?
&lt;/h1>&lt;p>A remote development environment can be beneficial for several reasons:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Offload processing power&lt;/strong>: Your local machine may not have enough processing power to run resource-intensive tasks.
By using a remote development environment, you can use more powerful hardware.&lt;/li>
&lt;li>&lt;strong>Consistent environment&lt;/strong>: A remote development environment ensures all team members can work in the same
environment, reducing configuration issues and ensuring consistent behavior across different machines. For example,
developers may be using a mix of macOS, Windows, and Linux machines, which can lead to differences in behavior due to
operating system-specific issues.&lt;/li>
&lt;li>&lt;strong>Multiple environments&lt;/strong>: You can set up multiple environments for different projects or tasks without cluttering
your local machine.&lt;/li>
&lt;li>&lt;strong>Access from anywhere&lt;/strong>: A remote development environment allows you to access your work from any device with an
internet connection.&lt;/li>
&lt;li>&lt;strong>Collaboration&lt;/strong>: You can easily collaborate with team members by sharing the same development environment. For
example, after coding a feature, the developer can hand off the environment to another engineer for review or QA.&lt;/li>
&lt;li>&lt;strong>Security&lt;/strong>: Keeping your code and development environment on a remote server reduces the risk of data loss in case
of local hardware failure or theft.&lt;/li>
&lt;li>&lt;strong>Scalability&lt;/strong>: You can quickly scale your development environment up or down based on your needs without affecting
your local machine.&lt;/li>
&lt;li>&lt;strong>Cost-effective&lt;/strong>: A remote development environment can be more cost-effective than purchasing and maintaining
high-end hardware for your local machine.&lt;/li>
&lt;/ul>
&lt;h1 id="setting-up-a-remote-development-environment">&lt;a href="#setting-up-a-remote-development-environment" class="header-anchor">&lt;/a>Setting up a remote development environment
&lt;/h1>&lt;p>For our development example, we will use a standalone server application connected to a database and a Redis cache. The
application uses a monolith repo with a frontend and a backend codebase.&lt;/p>
&lt;h2 id="choose-a-cloud-provider">&lt;a href="#choose-a-cloud-provider" class="header-anchor">&lt;/a>Choose a cloud provider
&lt;/h2>&lt;p>We used a &lt;a class="link" href="https://www.digitalocean.com/" target="_blank" rel="noopener"
>Digital Ocean&lt;/a> VM with 8GB of RAM, 4 CPUs, and a 160 GB disk, running Ubuntu
24.04 LTS for our remote development environment. We found that Digital Ocean provides VMs that are generally cheaper
than other cloud providers.&lt;/p>
&lt;p>Any other cloud provider, such as AWS, Google Cloud, or Azure, can also be used. Your choice of provider depends on your
specific requirements, budget, and familiarity with the platform.&lt;/p>
&lt;p>After spinning up the VM, we SSH&amp;rsquo;ed into the server, installed the necessary software for our application, and launched
the server.&lt;/p>
&lt;p>Since our server required multiple running processes, we used &lt;a class="link" href="https://github.com/tmux/tmux" target="_blank" rel="noopener"
>tmux&lt;/a> to manage multiple
terminal sessions. Tmux allowed us to create numerous panes and windows within a single terminal session, making it
easier to manage the server processes. We could disconnect from the server, and the tmux processes ran in the
background. When reconnected to the server, we could easily reattach to the tmux session and resume work. Additionally,
we used &lt;a class="link" href="https://iterm2.com/documentation-tmux-integration.html" target="_blank" rel="noopener"
>iTerm2 tmux integration&lt;/a> to enhance our terminal
experience.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/remote-development-environment/tmux-on-remote-server.png"
alt="4 open windows with running processes">&lt;figcaption>
&lt;h4>tmux running on remote dev server&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="connect-your-ide-to-the-remote-development-environment">&lt;a href="#connect-your-ide-to-the-remote-development-environment" class="header-anchor">&lt;/a>Connect your IDE to the remote development environment
&lt;/h2>&lt;p>We used &lt;a class="link" href="https://www.jetbrains.com/" target="_blank" rel="noopener"
>JetBrains IDE&lt;/a> for development work and
&lt;a class="link" href="https://www.jetbrains.com/remote-development/gateway/" target="_blank" rel="noopener"
>JetBrains Gateway&lt;/a> to connect to our remote development server
using SSH. JetBrains Gateway automatically installed the IDE backend on the remote server and brought up a local client
of the IDE.&lt;/p>
&lt;p>In our case, we wanted to use one IDE for backend development (GoLand) and another IDE for frontend development
(WebStorm).&lt;/p>
&lt;p>We had trouble starting them up and could not run both IDEs simultaneously. Either one or both of them would disconnect
from the remote development server without an obvious way to fix the issue. We suspect the issue was due to insufficient
memory on the machine &amp;ndash; try to plan for around 4 GB of memory per IDE.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/remote-development-environment/jetbrains-disconnect.png"
alt="No Connection message in GoLand IDE">
&lt;/figure>
&lt;p>However, we could use one of the IDEs at a time, which was sufficient for most of our needs.&lt;/p>
&lt;h1 id="using-a-remote-development-environment">&lt;a href="#using-a-remote-development-environment" class="header-anchor">&lt;/a>Using a remote development environment
&lt;/h1>&lt;p>After setting up the remote development environment, we reviewed common development use cases to ensure that everything
was working as expected.&lt;/p>
&lt;h2 id="make-a-code-change-and-restart-the-application-server">&lt;a href="#make-a-code-change-and-restart-the-application-server" class="header-anchor">&lt;/a>Make a code change and restart the application server
&lt;/h2>&lt;p>We made a simple code change in the backend service, saved the file, and restarted the application server. We verified
that the change was reflected in the application.&lt;/p>
&lt;p>The compile time was slower than on our local machine, likely due to the remote server&amp;rsquo;s lower CPU count and total RAM
compared to our local machine.&lt;/p>
&lt;h2 id="run-unit-tests">&lt;a href="#run-unit-tests" class="header-anchor">&lt;/a>Run unit tests
&lt;/h2>&lt;p>We ran the unit tests for the backend service. The tests passed successfully.&lt;/p>
&lt;h2 id="connect-to-the-database-and-redis-cache">&lt;a href="#connect-to-the-database-and-redis-cache" class="header-anchor">&lt;/a>Connect to the database and Redis cache
&lt;/h2>&lt;p>From our local development machine, we connected to the development server&amp;rsquo;s database and Redis cache to verify that the
services were running correctly.&lt;/p>
&lt;h2 id="reconnecting-to-remote-development-environment">&lt;a href="#reconnecting-to-remote-development-environment" class="header-anchor">&lt;/a>Reconnecting to remote development environment
&lt;/h2>&lt;p>After opening up our local computer the next day, we found that the JetBrains Gateway and the IDE has disconnected from
the remote server. Refreshing the Gateway re-established the connection, and the IDE also showed as connected within 60
seconds or so.&lt;/p>
&lt;h1 id="security-considerations">&lt;a href="#security-considerations" class="header-anchor">&lt;/a>Security considerations
&lt;/h1>&lt;p>When setting up a remote development environment, consider the following security best practices:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>SSH key authentication&lt;/strong>: For secure access to the remote server, use SSH key authentication instead of passwords.&lt;/li>
&lt;li>&lt;strong>Firewall rules&lt;/strong>: Configure firewall rules to restrict access to the server to only necessary IP addresses.&lt;/li>
&lt;li>&lt;strong>Secure connections&lt;/strong>: Use HTTPS for web applications and encrypted connections for database access.&lt;/li>
&lt;li>&lt;strong>Data encryption&lt;/strong>: Encrypt sensitive data at rest and in transit. Always encrypt sensitive data in the database.&lt;/li>
&lt;/ul>
&lt;h2 id="docker-firewall-rules">&lt;a href="#docker-firewall-rules" class="header-anchor">&lt;/a>Docker firewall rules
&lt;/h2>&lt;p>Docker containers use &lt;code>iptables&lt;/code> rules to open ports for incoming traffic. We can
&lt;a class="link" href="https://docs.docker.com/engine/network/packet-filtering-firewalls/#restrict-external-connections-to-containers" target="_blank" rel="noopener"
>restrict external connections to containers&lt;/a>
by adding rules to the &lt;code>DOCKER-USER&lt;/code> chain, such as:&lt;/p>
&lt;pre tabindex="0">&lt;code>iptables -I DOCKER-USER -i eth0 ! -s &amp;lt;your local IP&amp;gt; -j DROP
&lt;/code>&lt;/pre>&lt;p>Where &lt;code>eth0&lt;/code> is the network interface connected to the internet and &lt;code>&amp;lt;your local IP&amp;gt;&lt;/code> is the IP address of your local
machine. This rule blocks all incoming traffic to Docker from the internet except for your local IP.&lt;/p>
&lt;p>After setting up and testing your rules, you can persist them across restarts with the &lt;code>iptables-persistent&lt;/code> package or
other methods.&lt;/p>
&lt;h1 id="overall-impressions">&lt;a href="#overall-impressions" class="header-anchor">&lt;/a>Overall impressions
&lt;/h1>&lt;p>After using the remote development environment for a few days, we found it usable but not as smooth as working on a
local machine. For our use case, it is an excellent option for a secondary development environment or for working on a
resource-intensive feature.&lt;/p>
&lt;p>Some issues we encountered included:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Latency&lt;/strong>: Occasionally, clicking on an element or using a keyboard shortcut had a noticeable delay.&lt;/li>
&lt;li>&lt;strong>Missing features&lt;/strong>: Some features, such as only searching inside text strings, were not available in the remote
development environment.&lt;/li>
&lt;li>&lt;strong>Issues with plugins&lt;/strong>: GitHub Copilot did not work out of the box; it did not provide suggestions in the editor. We
did not drill down to the issue, but a potential workaround is to use JetBrains&amp;rsquo;s code assistant plugin.&lt;/li>
&lt;/ul>
&lt;h1 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h1>&lt;p>We recently explained &lt;a class="link" href="../secure-mysql-docker" >how to secure a MySQL Docker container for Zero Trust&lt;/a>.&lt;/p>
&lt;p>We also discussed &lt;a class="link" href="../github-code-review-issues" >the issues with GitHub&amp;rsquo;s code review process&lt;/a>.&lt;/p>
&lt;h1 id="watch-how-to-set-up-a-remote-development-environment">&lt;a href="#watch-how-to-set-up-a-remote-development-environment" class="header-anchor">&lt;/a>Watch how to set up a remote development environment
&lt;/h1>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/_VDtA9Tq-1E"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>Top 3 issues with GitHub code review process</title><link>https://victoronsoftware.com/posts/github-code-review-issues/</link><pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/github-code-review-issues/</guid><description>&lt;img src="https://victoronsoftware.com/posts/github-code-review-issues/developer-on-tightrope-headline.png" alt="Featured image of post Top 3 issues with GitHub code review process" />&lt;ul>
&lt;li>&lt;a class="link" href="#issue-1-codeowners-is-not-scalable" >CODEOWNERS is not scalable&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#issue-2-re-approvals-for-every-push" >Re-approvals for every push&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#issue-3-impractical-to-maintain-a-protected-feature-branch" >Impractical for protected feature branches&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Our team has been using GitHub to review the code for our open-source product. We have encountered several issues with
GitHub code reviews. The default GitHub code review process is not scalable and provides a poor developer experience.&lt;/p>
&lt;h2 id="how-to-set-up-a-github-code-review-process">&lt;a href="#how-to-set-up-a-github-code-review-process" class="header-anchor">&lt;/a>How to set up a GitHub code review process
&lt;/h2>&lt;p>GitHub admins can create a
&lt;a class="link" href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/managing-a-branch-protection-rule" target="_blank" rel="noopener"
>branch protection rule&lt;/a>
that requires a code review before merging the code to the main branch.&lt;/p>
&lt;p>Here&amp;rsquo;s a representative branch protection rule:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/github-code-review-issues/pr-branch-protection-rule.png"
alt="Branch protection rule requiring code review before merging">&lt;figcaption>
&lt;h4>PR branch protection rule&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>When a developer creates a pull request, GitHub requires code reviews from all relevant owners specified by the
&lt;code>CODEOWNERS&lt;/code> file in the repository. If someone makes a new push to the PR, all the owners need to re-approve the PR.&lt;/p>
&lt;p>In a previous article, we covered &lt;a class="link" href="../find-code-owners-for-pull-request" >how to find the required code owners for a PR&lt;/a>.
This is another issue, but we will not discuss it in this article.&lt;/p>
&lt;h2 id="issue-1-codeowners-is-not-scalable">&lt;a href="#issue-1-codeowners-is-not-scalable" class="header-anchor">&lt;/a>Issue 1: CODEOWNERS is not scalable
&lt;/h2>&lt;p>GitHub uses a
&lt;a class="link" href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners" target="_blank" rel="noopener"
>&lt;code>CODEOWNERS&lt;/code> file to define individuals or teams responsible for each file in the repository&lt;/a>.&lt;/p>
&lt;p>The &lt;code>CODEOWNERS&lt;/code> file format favors fine-grained code ownership, where the last matching pattern takes precedence over
previous patterns. Here is an example from the GitHub documentation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span># In this example, @octocat owns any file in the `/apps`
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># directory in the root of your repository except for the `/apps/github`
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># subdirectory, as this subdirectory has its own owner @doctocat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/apps/ @octocat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/apps/github @doctocat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>CODEOWNERS&lt;/code> file is not scalable for medium-to-large and even small organizations. As the number of code owners
grows, each pull request is likely to require approval from more code owners. Each code owner may request changes,
potentially leading to cycles and cycles of re-approvals.&lt;/p>
&lt;p>Tracking down multiple people to approve and re-approve a PR can be time-consuming and frustrating for developers. This
results in longer PR turnaround times, slower development velocity, and missed commitments.&lt;/p>
&lt;p>From a developer experience perspective, we want to make the code review process as smooth and efficient as possible,
which means one reviewer for one PR. This approach is feasible by manually inverting the
&lt;code>last matching pattern takes precedence&lt;/code> rule in the &lt;code>CODEOWNERS&lt;/code> file by always including the owner(s) from the
previous pattern. For example, we would rewrite the above owners as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>/apps/ @octocat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/apps/github @octocat @doctocat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Keeping the &lt;code>CODEOWNERS&lt;/code> file in this format may be cumbersome to do manually, but it can be done with a script.&lt;/p>
&lt;h2 id="issue-2-re-approvals-for-every-push">&lt;a href="#issue-2-re-approvals-for-every-push" class="header-anchor">&lt;/a>Issue 2: Re-approvals for every push
&lt;/h2>&lt;p>When a developer makes a new push to a PR, all the code owners need to re-approve it. This is a poor developer
experience, as it requires the code owners to review potentially the same code changes multiple times.&lt;/p>
&lt;p>The issue stems from the lack of fine-grained control over the following option:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/github-code-review-issues/dismiss-stale-pr-approvals.png"
alt="Dismiss stale pull request approvals when new commits are pushed">
&lt;/figure>
&lt;p>With multiple code owners, every code owner must re-approve every change.&lt;/p>
&lt;p>A code owner should not need to re-review code that didn&amp;rsquo;t change &amp;ndash; this is a waste of time and effort.&lt;/p>
&lt;p>With a single code owner, the reviewer must re-approve trivial or irrelevant changes, such as:&lt;/p>
&lt;ul>
&lt;li>fixing a typo in a comment&lt;/li>
&lt;li>fully accepting a suggestion from the reviewer&lt;/li>
&lt;li>re-generating an auto-generated file, such as documentation&lt;/li>
&lt;/ul>
&lt;p>The required re-approvals can be frustrating and time-consuming for developers and code owners. They make developers
feel untrusted and inefficient.&lt;/p>
&lt;p>The main argument for requiring re-approvals is security—we don&amp;rsquo;t want to merge potentially malicious code. If that&amp;rsquo;s
the case, we should have a security review process in place, not a code review process. A security review can be done by
a separate individual and improved by automated tools.&lt;/p>
&lt;p>In addition, we should be able to completely exclude some files/directories from the code review process. For example,
generated files, such as documentation based on code changes, should not require code review. Other generated files,
such as testing mocks, may have CI/CD checks that ensure they are generated correctly, and they should not require code
review either.&lt;/p>
&lt;h2 id="issue-3-impractical-to-maintain-a-protected-feature-branch">&lt;a href="#issue-3-impractical-to-maintain-a-protected-feature-branch" class="header-anchor">&lt;/a>Issue 3: Impractical to maintain a protected feature branch
&lt;/h2>&lt;p>A protected feature branch requires code reviews before merging. Since all the commits on the feature branch have
already been reviewed and approved, it is considered safe to merge into the main branch.&lt;/p>
&lt;p>The main issue is that the developer cannot simply update this feature branch with the latest changes on the main
branch. They need PR approval from all the code owners who have already approved the same changes on the main branch.
This busy work is another example of a waste of time and effort.&lt;/p>
&lt;p>In addition, a feature branch may be long-lived and introduce changes across multiple areas of the code base. This means
that it may require approval from many code owners, which can be time-consuming and frustrating.&lt;/p>
&lt;h2 id="solution-custom-github-action-to-manage-code-reviews">&lt;a href="#solution-custom-github-action-to-manage-code-reviews" class="header-anchor">&lt;/a>Solution: Custom GitHub Action to manage code reviews
&lt;/h2>&lt;p>Instead of relying on the default GitHub code review process, we can create a custom GitHub Action to manage code
reviews. The custom GitHub Action can:&lt;/p>
&lt;ul>
&lt;li>automatically identify a single reviewer for a PR (or identify a small group of reviewers, each of whom can approve
the PR)&lt;/li>
&lt;li>automatically exclude specific files/directories from the code review process&lt;/li>
&lt;li>automatically maintain the approval state of the PR when new commits meeting explicit criteria are pushed&lt;/li>
&lt;li>enable a usable and practical protected feature branch&lt;/li>
&lt;/ul>
&lt;p>In a future article, we will explore how to create a custom GitHub Action to manage code reviews.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="../git-merges-and-pull-requests" >How git merge works with PRs&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../github-reusable-workflows-and-steps" >How to reuse GitHub workflows and steps&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../remote-development-environment" >Set up a remote dev environment&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="watch-the-top-3-issues-with-github-code-reviews">&lt;a href="#watch-the-top-3-issues-with-github-code-reviews" class="header-anchor">&lt;/a>Watch the top 3 issues with GitHub code reviews
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/RWnJ84vTK48"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to measure the execution time of Go tests accurately</title><link>https://victoronsoftware.com/posts/go-test-execution-time/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/go-test-execution-time/</guid><description>&lt;img src="https://victoronsoftware.com/posts/go-test-execution-time/crash-test-dummy-headline.png" alt="Featured image of post How to measure the execution time of Go tests accurately" />&lt;ul>
&lt;li>&lt;a class="link" href="#accurately-measuring-test-execution-time" >Accurately measuring test execution time&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="why-measure-test-execution-time">&lt;a href="#why-measure-test-execution-time" class="header-anchor">&lt;/a>Why measure test execution time?
&lt;/h2>&lt;p>By speeding up your test suite, you&amp;rsquo;re improving developer experience and productivity. Faster tests mean faster
feedback, which leads to quicker iterations and better code quality.&lt;/p>
&lt;p>When you run tests, you want to know how long they take to execute. This information can help you optimize your test
suite and make it run faster. By measuring the execution time of your tests, you can identify slow tests and improve
their performance.&lt;/p>
&lt;h2 id="problems-with-current-measurement-tools">&lt;a href="#problems-with-current-measurement-tools" class="header-anchor">&lt;/a>Problems with current measurement tools
&lt;/h2>&lt;p>We have yet to find a tool that provides detailed, actionable insights into the performance of Go tests.&lt;/p>
&lt;p>For example, running the &lt;code>gotestsum tool slowest&lt;/code> command from the
&lt;a class="link" href="https://github.com/gotestyourself/gotestsum" target="_blank" rel="noopener"
>gotestsum&lt;/a> tool gave us the following output for our test suite:&lt;/p>
&lt;pre tabindex="0">&lt;code>github.com/fleetdm/fleet/v4/server/datastore/mysql TestMDMApple 6m9.65s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestSoftware 4m8.9s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestPolicies 3m31s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestActivity 2m16.67s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestMDMWindows 2m14.85s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestMDMShared 2m10.27s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestVulnerabilities 2m7.98s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestPacks 1m59.2s
github.com/fleetdm/fleet/v4/server/worker TestAppleMDM 1m55.11s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestTeams 1m47.82s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestAppConfig 1m42.81s
github.com/fleetdm/fleet/v4/server/datastore/mysql TestHosts 1m41.79s
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709183940 1m36.43s
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709132642 1m36.34s
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240725182118 1m35.95s
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240730171504 1m35.73s
github.com/fleetdm/fleet/v4/server/vulnerabilities/nvd TestTranslateCPEToCVE/recent_vulns 1m34.87s
...
&lt;/code>&lt;/pre>&lt;p>The first thing to notice is that the numbers don&amp;rsquo;t add up. Our test suite takes around 14 minutes to run, but the times
in the report add up to more than 14 minutes. This discrepancy makes it hard to identify the slowest tests.&lt;/p>
&lt;p>The second thing to notice is that our tests contain many subtests. The &lt;code>TestMDMApple&lt;/code> test contains over 40 subtests.
We want to know the execution time of each subtest, not just the total time for the test.&lt;/p>
&lt;p>The third thing to notice is that the output does not provide any information regarding parallelism. We want to know if
our tests run in parallel and how many run concurrently. We want to run tests in parallel when possible to speed up the
test suite.&lt;/p>
&lt;h2 id="understanding-parallelism-in-go-tests">&lt;a href="#understanding-parallelism-in-go-tests" class="header-anchor">&lt;/a>Understanding parallelism in Go tests
&lt;/h2>&lt;p>Before measuring the execution time of our tests, we need to understand how Go tests run in parallel.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/go-test-execution-time/go-test-parallelism.svg"
alt="Sequence diagram of a go test run with two packages, two tests, and two subtests.">
&lt;/figure>
&lt;p>When you run &lt;code>go test&lt;/code>, Go compiles each package in your test suite in a separate binary. It then runs each binary in
parallel. The tests in different packages run concurrently. This behavior is controlled by the &lt;code>-p&lt;/code> flag, which defaults
to &lt;code>GOMAXPROCS&lt;/code>, the number of CPUs on your machine.&lt;/p>
&lt;p>Within a package, tests run sequentially by default &amp;ndash; the tests in the same package run one after the other. However,
you can run tests in parallel within a package by calling &lt;code>t.Parallel()&lt;/code> in your test functions. This behavior is
controlled by the &lt;code>-parallel&lt;/code> flag, which also defaults to &lt;code>GOMAXPROCS&lt;/code>. So, in a system with 8 CPUs, running a test
suite with many packages and parallel tests will run 8 packages concurrently and 8 tests within each package
concurrently, for a total of 64 tests running concurrently.&lt;/p>
&lt;p>Each test function may have multiple subtests, which may have their own subtests, and so on. Subtests run sequentially
by default. However, you can also run subtests in parallel by calling &lt;code>t.Parallel()&lt;/code> in your subtest functions.&lt;/p>
&lt;h2 id="accurately-measuring-test-execution-time">&lt;a href="#accurately-measuring-test-execution-time" class="header-anchor">&lt;/a>Accurately measuring test execution time
&lt;/h2>&lt;p>To measure the execution time of your tests, we must use the &lt;code>-json&lt;/code> flag with the &lt;code>go test&lt;/code> command. This flag outputs
test results in JSON format, which we can parse and analyze.&lt;/p>
&lt;p>The &lt;code>Action&lt;/code> field in the JSON output shows the start and end times of each test and subtest.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.969606869Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;run&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.96984165Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;run&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.969928132Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pause&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.969983777Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;run&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.970052987Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pause&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.970090377Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cont&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:51.973464469Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;cont&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:52.015505184Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pass&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Elapsed&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0.04&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:52.015523238Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pass&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB/test2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Elapsed&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0.04&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:22:52.015527907Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;pass&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/cpe&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestCPEDB&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Elapsed&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>While parsing the JSON output, we can track how many tests are running in parallel. We can then adjust the execution
time of each test by dividing the total time by the number of tests running concurrently. Since we don&amp;rsquo;t have access to
the actual CPU time each test used, this is the best approximation we can get.&lt;/p>
&lt;p>When tests run in parallel, we typically see the &lt;code>pause&lt;/code> and &lt;code>cont&lt;/code> actions. If we see these actions, we know that the
test or subtest is running in parallel.&lt;/p>
&lt;p>We created a parser called &lt;a class="link" href="https://github.com/getvictor/goteststats" target="_blank" rel="noopener"
>goteststats&lt;/a> that does these calculations.&lt;/p>
&lt;h2 id="accurate-test-execution-time-measurement-in-practice">&lt;a href="#accurate-test-execution-time-measurement-in-practice" class="header-anchor">&lt;/a>Accurate test execution time measurement in practice
&lt;/h2>&lt;p>By running our &lt;a class="link" href="https://github.com/getvictor/goteststats" target="_blank" rel="noopener"
>goteststats&lt;/a> parser on the JSON output of our test suite, we
gained actionable insights into our tests&amp;rsquo; performance.&lt;/p>
&lt;pre tabindex="0">&lt;code>WARNING: Stopped test not found in running tests: TestGenerateMDMApple/successful_run
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709132642: 8.142s (total: 2m12.806s parallel: 16)
github.com/fleetdm/fleet/v4/server/cron TestCalendarEvents1KHosts: 7.853s (total: 36.158s parallel: 4)
github.com/fleetdm/fleet/v4/server/cron TestEventForDifferentHost: 7.853s (total: 36.158s parallel: 4)
github.com/fleetdm/fleet/v4/cmd/fleet TestCronVulnerabilitiesCreatesDatabasesPath: 6.878s (total: 30.232s parallel: 4)
github.com/fleetdm/fleet/v4/server/vulnerabilities/nvd TestTranslateCPEToCVE/find_vulns_on_cpes: 6.849s (total: 1m34.89s parallel: 13)
github.com/fleetdm/fleet/v4/server/vulnerabilities/nvd TestTranslateCPEToCVE/recent_vulns: 6.849s (total: 1m34.89s parallel: 13)
github.com/fleetdm/fleet/v4/server/vulnerabilities/oval TestOvalAnalyzer/#load/invalid_vuln_path: 5.844s (total: 1m25.152s parallel: 14)
github.com/fleetdm/fleet/v4/server/vulnerabilities/oval TestOvalAnalyzer/analyzing_RHEL_software: 5.844s (total: 1m25.152s parallel: 14)
github.com/fleetdm/fleet/v4/server/vulnerabilities/oval TestOvalAnalyzer/analyzing_Ubuntu_software: 5.844s (total: 1m25.151s parallel: 14)
github.com/fleetdm/fleet/v4/cmd/fleet TestAutomationsSchedule: 5.699s (total: 14.213s parallel: 2)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240725182118: 5.623s (total: 1m37.577s parallel: 17)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709183940: 5.588s (total: 1m36.771s parallel: 17)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240709124958: 5.52s (total: 1m35.622s parallel: 17)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240730171504: 5.517s (total: 1m35.74s parallel: 17)
github.com/fleetdm/fleet/v4/server/datastore/mysql/migrations/tables TestUp_20240726100517: 5.418s (total: 1m33.987s parallel: 17)
...
&lt;/code>&lt;/pre>&lt;p>For a given test, we provide the adjusted time, the total time, and the average number of tests running concurrently
with this test. The adjusted time is the time the test took to execute, which is also the time saved if we removed this
test from the suite.&lt;/p>
&lt;p>The first thing to notice is that the numbers add up. The total time for the test suite is around 14 minutes, and the
times in the report add up to around 14 minutes.&lt;/p>
&lt;p>The second thing to notice is that we now have the execution time of each subtest. This information is crucial for
identifying slow tests and improving their performance.&lt;/p>
&lt;p>The third thing to notice is that we now have information about parallelism. We can see how many tests are running
concurrently and how many tests are running in parallel. If we see a test with a low parallelism number, we know that
this test is a bottleneck and should parallelized.&lt;/p>
&lt;p>The WARNING message indicates that the JSON output did not contain the start time of the test. This issue can happen if
the console output of the code under test does not include a new line and gets mixed with the output of Go&amp;rsquo;s testing
package. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Time&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;2024-08-26T19:23:17.8084601Z&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Action&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;output&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Package&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;github.com/fleetdm/fleet/v4/cmd/fleetctl&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Test&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;TestGenerateMDMApple/CSR_API_call_fails&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;Output&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;requesting APNs CSR: GET /api/latest/fleet/mdm/apple/request_csr received status 502 Bad Gateway: FleetDM CSR request failed: bad request=== RUN TestGenerateMDMApple/successful_run\n&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="goteststats-on-github">&lt;a href="#goteststats-on-github" class="header-anchor">&lt;/a>&lt;code>goteststats&lt;/code> on GitHub
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/getvictor/goteststats" target="_blank" rel="noopener"
>goteststats&lt;/a> is available on GitHub. You can use it to get detailed
performance data for your Go test suite.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>Recently, we wrote about &lt;a class="link" href="../optimizing-performance-of-go-app" >optimizing the performance of Go applications&lt;/a>&lt;/li>
&lt;li>We also explored &lt;a class="link" href="../fuzz-testing-with-go" >fuzz testing with Go&lt;/a>&lt;/li>
&lt;li>In addition, we showed &lt;a class="link" href="../exe-installer" >how to create an EXE installer for a Go program&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="watch-how-to-measure-the-execution-time-of-go-tests-accurately">&lt;a href="#watch-how-to-measure-the-execution-time-of-go-tests-accurately" class="header-anchor">&lt;/a>Watch how to measure the execution time of Go tests accurately
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/caTDvS5vCjA"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item></channel></rss>