<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web Development on Victor on Software</title><link>https://victoronsoftware.com/tags/web-development/</link><description>Recent content in Web Development on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/web-development/index.xml" rel="self" type="application/rss+xml"/><item><title>Message passing in Chrome extension (2024)</title><link>https://victoronsoftware.com/posts/message-passing-in-chrome-extension/</link><pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/message-passing-in-chrome-extension/</guid><description>&lt;img src="https://victoronsoftware.com/posts/message-passing-in-chrome-extension/message-passing-headline.png" alt="Featured image of post Message passing in Chrome extension (2024)" />&lt;p>This article is part of a series on &lt;a class="link" href="../chrome-extension" >building a production-ready Chrome extension&lt;/a>.&lt;/p>
&lt;p>In the previous article, we
&lt;a class="link" href="../add-webpack-and-typescript-to-chrome-extension" >set up our Chrome extension with TypeScript support and the webpack bundler&lt;/a>.
This article will build on that code, dive into the new APIs, and cover message-passing communication between different
parts of our Chrome extension.&lt;/p>
&lt;h2 id="communication-between-parts-of-a-chrome-extension">&lt;a href="#communication-between-parts-of-a-chrome-extension" class="header-anchor">&lt;/a>Communication between parts of a Chrome extension
&lt;/h2>&lt;p>As we covered in &lt;a class="link" href="../create-chrome-extension" >the first article&lt;/a>, a Chrome extension consists of three main parts:&lt;/p>
&lt;ul>
&lt;li>service worker (background script)&lt;/li>
&lt;li>content script&lt;/li>
&lt;li>popup&lt;/li>
&lt;/ul>
&lt;p>These parts need to communicate with each other. For example, a popup needs to send a message to a content script to
change the appearance of a webpage. Or a background script needs to send a message to a popup to update the user
interface based on the page that&amp;rsquo;s being visited.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/message-passing-in-chrome-extension/message-passing.svg"
alt="Communication in a Chrome extension">&lt;figcaption>
&lt;h4>Communication in a Chrome extension&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>One way to communicate between these parts is to use the local storage via the &lt;code>chrome.storage&lt;/code> APIs. We do not
recommend this method because it is slow and can cause performance issues. This method is slow because it is not
synchronous &amp;ndash; the scripts need to check the storage for changes periodically. A better way to communicate between
extension parts is to use message passing.&lt;/p>
&lt;h2 id="what-is-message-passing">&lt;a href="#what-is-message-passing" class="header-anchor">&lt;/a>What is message passing?
&lt;/h2>&lt;p>In computer science, message passing is a method for communicating between different processes or threads. A process or
thread sends a message to another process or thread, which receives the message and acts on it. This method is often
used in distributed systems, where processes run on different machines and need to communicate with each other. The
sender sends a message, and the receiver decodes it and executes the appropriate code.&lt;/p>
&lt;h2 id="message-passing-in-a-chrome-extension">&lt;a href="#message-passing-in-a-chrome-extension" class="header-anchor">&lt;/a>Message passing in a Chrome extension
&lt;/h2>&lt;p>Message passing is a way to communicate between different parts of a Chrome extension. Its main advantage is that it&amp;rsquo;s
fast and efficient. When a message is sent, the receiver gets it immediately and can respond to it right away.&lt;/p>
&lt;p>Message passing is done in Chrome extensions using the &lt;code>chrome.runtime.sendMessage&lt;/code>, &lt;code>chrome.tabs.sendMessage&lt;/code> and
&lt;code>chrome.runtime.onMessage&lt;/code> functions. Here&amp;rsquo;s how it works:&lt;/p>
&lt;ol>
&lt;li>The sender calls &lt;code>chrome.runtime.sendMessage&lt;/code> or &lt;code>chrome.tabs.sendMessage&lt;/code> with the message to send.&lt;/li>
&lt;li>The receiver listens for messages using &lt;code>chrome.runtime.onMessage.addListener&lt;/code>&lt;/li>
&lt;li>The receiver processes the incoming message and, optionally, responds to the message.&lt;/li>
&lt;/ol>
&lt;h2 id="message-passing-from-a-popup-to-a-content-script">&lt;a href="#message-passing-from-a-popup-to-a-content-script" class="header-anchor">&lt;/a>Message passing from a popup to a content script
&lt;/h2>&lt;p>Let&amp;rsquo;s see how we can use message passing to communicate between a popup and a content script. We will send a message
when the user toggles the enable slider in the popup, which will enable or disable the content script&amp;rsquo;s processing. We
will use the &lt;code>chrome.tabs.sendMessage&lt;/code> function to send a message to a specific tab ID.&lt;/p>
&lt;p>In the popup script (&lt;code>popup.ts&lt;/code>), we send a message to all the tabs when we detect a change in the top slider:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Send message to content script in all tabs
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">tabs&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">tabs&lt;/span>.&lt;span style="color:#a6e22e">query&lt;/span>({})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">tab&lt;/span> &lt;span style="color:#66d9ef">of&lt;/span> &lt;span style="color:#a6e22e">tabs&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Note: sensitive tab properties such as tab.title or tab.url can only be accessed for
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#75715e">// URLs in the host_permissions section of manifest.json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">tabs&lt;/span>.&lt;span style="color:#a6e22e">sendMessage&lt;/span>(&lt;span style="color:#a6e22e">tab&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">!&lt;/span>, {&lt;span style="color:#a6e22e">enabled&lt;/span>: &lt;span style="color:#66d9ef">event.target.checked&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">then&lt;/span>((&lt;span style="color:#a6e22e">response&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Popup received response from tab with title &amp;#39;%s&amp;#39; and url %s&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">title&lt;/span>, &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">url&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#66d9ef">catch&lt;/span>((&lt;span style="color:#a6e22e">error&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">warn&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Popup could not send message to tab %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">tab&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>, &lt;span style="color:#a6e22e">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the content script (&lt;code>content.ts&lt;/code>), we listen for the message and process it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Listen for messages from popup.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">onMessage&lt;/span>.&lt;span style="color:#a6e22e">addListener&lt;/span>((&lt;span style="color:#a6e22e">request&lt;/span>, &lt;span style="color:#a6e22e">sender&lt;/span>, &lt;span style="color:#a6e22e">sendResponse&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">request&lt;/span>.&lt;span style="color:#a6e22e">enabled&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Received message from sender %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">sender&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>, &lt;span style="color:#a6e22e">request&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">enabled&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">request&lt;/span>.&lt;span style="color:#a6e22e">enabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">enabled&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">observe&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">observer&lt;/span>.&lt;span style="color:#a6e22e">disconnect&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sendResponse&lt;/span>({&lt;span style="color:#a6e22e">title&lt;/span>: &lt;span style="color:#66d9ef">document.title&lt;/span>, &lt;span style="color:#a6e22e">url&lt;/span>: &lt;span style="color:#66d9ef">window.location.href&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When the user toggles the slider in the popup, the popup sends a message to all tabs. The receiving tab will print this
message to the Chrome Developer Tools console.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/message-passing-in-chrome-extension/content-script-received.png"
alt="Content script received message">&lt;figcaption>
&lt;h4>Content script received message&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Then, the popup will receive a response from the content script with the tab&amp;rsquo;s title and URL. This response prints to
the &lt;code>Inspect Popup&lt;/code> console. System tabs like &lt;code>chrome://extensions/&lt;/code> will not respond to messages.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/message-passing-in-chrome-extension/popup-response.png"
alt="Popup received response">&lt;figcaption>
&lt;h4>Popup received response&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="message-passing-from-a-popup-to-the-service-worker-background-script">&lt;a href="#message-passing-from-a-popup-to-the-service-worker-background-script" class="header-anchor">&lt;/a>Message passing from a popup to the service worker (background script)
&lt;/h2>&lt;p>To send a message to the service worker, we must use the &lt;code>chrome.runtime.sendMessage&lt;/code> function instead of
&lt;code>chrome.tabs.sendMessage&lt;/code>. The service worker does not have a tab ID, so we cannot use &lt;code>chrome.tabs.sendMessage&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">sendMessage&lt;/span>({&lt;span style="color:#a6e22e">enabled&lt;/span>: &lt;span style="color:#66d9ef">event.target.checked&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#a6e22e">then&lt;/span>((&lt;span style="color:#a6e22e">response&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Popup received response&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">response&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> .&lt;span style="color:#66d9ef">catch&lt;/span>((&lt;span style="color:#a6e22e">error&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">warn&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Popup could not send message&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">error&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the service worker script (&lt;code>background.ts&lt;/code>), we listen for the message and process it:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">onMessage&lt;/span>.&lt;span style="color:#a6e22e">addListener&lt;/span>((&lt;span style="color:#a6e22e">request&lt;/span>, &lt;span style="color:#a6e22e">sender&lt;/span>, &lt;span style="color:#a6e22e">sendResponse&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">request&lt;/span>.&lt;span style="color:#a6e22e">enabled&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Service worker received message from sender %s&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">sender&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span>, &lt;span style="color:#a6e22e">request&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">sendResponse&lt;/span>({&lt;span style="color:#a6e22e">message&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;Service worker processed the message&amp;#34;&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="message-passing-from-a-content-script-to-the-popup-and-service-worker">&lt;a href="#message-passing-from-a-content-script-to-the-popup-and-service-worker" class="header-anchor">&lt;/a>Message passing from a content script to the popup and service worker
&lt;/h2>&lt;p>To send a message from the content script, use the &lt;code>chrome.runtime.sendMessage&lt;/code> function. The popup and service worker
can listen and receive this message.&lt;/p>
&lt;h2 id="message-passing-from-the-service-worker-background-script-to-a-content-script-and-the-popup">&lt;a href="#message-passing-from-the-service-worker-background-script-to-a-content-script-and-the-popup" class="header-anchor">&lt;/a>Message passing from the service worker (background script) to a content script and the popup
&lt;/h2>&lt;p>Use the &lt;code>chrome.tabs.sendMessage&lt;/code> function to send a message to the content script. Use the &lt;code>chrome.runtime.sendMessage&lt;/code>
function to send a message to the popup.&lt;/p>
&lt;p>The code for sending a message from the service worker is the same as the code for sending a message from the popup. The
receiving code in the content and popup scripts is also the same.&lt;/p>
&lt;h2 id="next-steps">&lt;a href="#next-steps" class="header-anchor">&lt;/a>Next steps
&lt;/h2>&lt;p>In the next part of this series, we will
&lt;a class="link" href="../linting-and-formatting-typescript/" >add linting and formatting tools to our Chrome extension&lt;/a>. These tools increase
the quality of our code and increase engineering velocity for projects with multiple developers.&lt;/p>
&lt;h2 id="chrome-extension-with-webpack-and-typescript-code-on-github">&lt;a href="#chrome-extension-with-webpack-and-typescript-code-on-github" class="header-anchor">&lt;/a>Chrome extension with webpack and TypeScript code on GitHub
&lt;/h2>&lt;p>The complete code is available on GitHub at:
&lt;a class="link" href="https://github.com/getvictor/create-chrome-extension/tree/main/3-message-passing" target="_blank" rel="noopener"
>https://github.com/getvictor/create-chrome-extension/tree/main/3-message-passing&lt;/a>&lt;/p>
&lt;h2 id="message-passing-in-a-chrome-extension-video">&lt;a href="#message-passing-in-a-chrome-extension-video" class="header-anchor">&lt;/a>Message passing in a Chrome extension video
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/qANlZ5kzxcg"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>Build a production-ready Chrome extension</title><link>https://victoronsoftware.com/posts/chrome-extension/</link><pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/chrome-extension/</guid><description>&lt;img src="https://victoronsoftware.com/posts/chrome-extension/chrome-extension-headline.png" alt="Featured image of post Build a production-ready Chrome extension" />&lt;p>We are creating a series of articles on building a production-ready Chrome extension. In this series, we cover the
basics of building a Chrome extension, how to set up industry leading development tooling, and how to test and deploy
your extension. Our goal is to show you how to build a Chrome extension that is easy to maintain, test, and deploy for a
software development team.&lt;/p>
&lt;h3 id="create-a-chrome-extension-from-scratchcreate-chrome-extension">&lt;a href="#create-a-chrome-extension-from-scratchcreate-chrome-extension" class="header-anchor">&lt;/a>&lt;a class="link" href="../create-chrome-extension" >Create a Chrome extension from scratch&lt;/a>
&lt;/h3>&lt;p>Create a basic Chrome extension without any development tools. We cover the basics such as the major parts of the
extension, &lt;code>manifest.json&lt;/code>, and manually testing the extension in the Chrome browser.&lt;/p>
&lt;h3 id="add-webpack-and-typescript-to-a-chrome-extensionadd-webpack-and-typescript-to-chrome-extension">&lt;a href="#add-webpack-and-typescript-to-a-chrome-extensionadd-webpack-and-typescript-to-chrome-extension" class="header-anchor">&lt;/a>&lt;a class="link" href="../add-webpack-and-typescript-to-chrome-extension" >Add webpack and TypeScript to a Chrome extension&lt;/a>
&lt;/h3>&lt;p>We add support for TypeScript (which replaces JavaScript) and webpack (which bundles the extension) to our Chrome
extension.&lt;/p>
&lt;h3 id="message-passing-in-a-chrome-extensionmessage-passing-in-chrome-extension">&lt;a href="#message-passing-in-a-chrome-extensionmessage-passing-in-chrome-extension" class="header-anchor">&lt;/a>&lt;a class="link" href="../message-passing-in-chrome-extension" >Message passing in a Chrome extension&lt;/a>
&lt;/h3>&lt;p>We cover message passing communication between different parts of a Chrome extension. We dive into the code and show how
to communicate between the service worker (background script), content scripts, and the popup.&lt;/p>
&lt;h3 id="linting-and-formatting-typescript-in-a-chrome-extensionlinting-and-formatting-typescript">&lt;a href="#linting-and-formatting-typescript-in-a-chrome-extensionlinting-and-formatting-typescript" class="header-anchor">&lt;/a>&lt;a class="link" href="../linting-and-formatting-typescript" >Linting and formatting TypeScript in a Chrome extension&lt;/a>
&lt;/h3>&lt;p>We set up ESLint and Prettier to lint and format our TypeScript code. This ensures our code is consistent and follows
best practices.&lt;/p>
&lt;h3 id="adding-options-page-to-chrome-extensionadd-options-to-chrome-extension">&lt;a href="#adding-options-page-to-chrome-extensionadd-options-to-chrome-extension" class="header-anchor">&lt;/a>&lt;a class="link" href="../add-options-to-chrome-extension" >Adding options page to Chrome extension&lt;/a>
&lt;/h3>&lt;p>We add an advanced options page to our Chrome extension. This page allows users to configure the extension&amp;rsquo;s behavior
and settings.&lt;/p>
&lt;h3 id="build-a-production-ready-chrome-extension-video-playlist">&lt;a href="#build-a-production-ready-chrome-extension-video-playlist" class="header-anchor">&lt;/a>Build a production-ready Chrome extension video playlist
&lt;/h3>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/videoseries?list=PLr-TrdMhEklS2CS7jEA_W6U5e96dN2kWa" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div></description></item><item><title>Create a Chrome extension from scratch step-by-step (2024)</title><link>https://victoronsoftware.com/posts/create-chrome-extension/</link><pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/create-chrome-extension/</guid><description>&lt;img src="https://victoronsoftware.com/posts/create-chrome-extension/chrome-extension-headline.png" alt="Featured image of post Create a Chrome extension from scratch step-by-step (2024)" />&lt;p>In this series, we will be building a production-ready Chrome extension. We will start with a basic extension and then
add more features.&lt;/p>
&lt;h2 id="what-is-a-chrome-extension">&lt;a href="#what-is-a-chrome-extension" class="header-anchor">&lt;/a>What is a Chrome extension?
&lt;/h2>&lt;p>A Chrome extension is a small software program that customizes the browsing experience. It can modify and enhance the
functionality of the Chrome browser. Extensions are written using web technologies such as HTML, CSS, and JavaScript.&lt;/p>
&lt;h2 id="why-build-a-chrome-extension">&lt;a href="#why-build-a-chrome-extension" class="header-anchor">&lt;/a>Why build a Chrome extension?
&lt;/h2>&lt;p>Users can utilize Chrome extensions to:&lt;/p>
&lt;ul>
&lt;li>Modify web pages&lt;/li>
&lt;li>Automate tasks&lt;/li>
&lt;li>Integrate with third-party services&lt;/li>
&lt;li>Add new features to the browser&lt;/li>
&lt;li>And much more&lt;/li>
&lt;/ul>
&lt;h2 id="prerequisites">&lt;a href="#prerequisites" class="header-anchor">&lt;/a>Prerequisites
&lt;/h2>&lt;p>For this tutorial, no additional tools are required. We will create the extension using a text editor and the Chrome
browser.&lt;/p>
&lt;h2 id="parts-of-chrome-extension">&lt;a href="#parts-of-chrome-extension" class="header-anchor">&lt;/a>Three parts of a Chrome extension
&lt;/h2>&lt;p>The three main parts of a Chrome extension are the background script, content script(s), and popup. All these parts are
optional.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/create-chrome-extension/chrome-extension-parts.svg"
alt="Parts of a Chrome extension">&lt;figcaption>
&lt;h4>Parts of a Chrome extension&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;ol>
&lt;li>&lt;a class="link" href="#create-background-script" >background script&lt;/a>: Also known as a &lt;strong>service worker&lt;/strong>, this is a long-running script
that runs in the background. It can listen for events and perform tasks.&lt;/li>
&lt;li>&lt;a class="link" href="#create-content-script" >content script(s)&lt;/a>: This script runs in the context of a web page. It can interact with the
DOM and modify the page, including adding UI elements. The extension can statically inject this script or dynamically
inject it by the background script or the popup.&lt;/li>
&lt;li>&lt;a class="link" href="#create-popup" >popup&lt;/a>: This small HTML page appears when a user clicks the extension icon. It can contain buttons,
forms, and other UI elements. This is the extension&amp;rsquo;s user interface.&lt;/li>
&lt;/ol>
&lt;p>These three parts of the extension run independently but can communicate with each other using message passing, events,
and storage.&lt;/p>
&lt;p>Our first extension will have a popup with a turn-on/off switch and an input field. The extension will blur the page
elements containing the text in the input field.&lt;/p>
&lt;h2 id="manifestjson-configuration-file">&lt;a href="#manifestjson-configuration-file" class="header-anchor">&lt;/a>&lt;code>manifest.json&lt;/code> configuration file
&lt;/h2>&lt;p>Create a &lt;code>src&lt;/code> directory for the extension. This directory will contain all the extension files.&lt;/p>
&lt;p>The &lt;code>manifest.json&lt;/code> file is the configuration file of a Chrome extension. It contains metadata about the extension, such
as its name, version, permissions, and scripts.&lt;/p>
&lt;h2 id="create-popup">&lt;a href="#create-popup" class="header-anchor">&lt;/a>Creating the popup
&lt;/h2>&lt;p>Add a &lt;code>manifest.json&lt;/code> file with the following content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;manifest_version&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;My Chrome Extension&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.1.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;My first Chrome extension.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;action&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;default_popup&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;popup.html&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;permissions&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;storage&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>permissions&lt;/code> specify the permissions required by the extension. In this case, we need the &lt;code>storage&lt;/code> permission to
store data in the Chrome storage so that the extension can remember the state of its configuration.&lt;/p>
&lt;p>Create &lt;code>popup.html&lt;/code> with the content below.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-html" data-lang="html">&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">html&lt;/span> &lt;span style="color:#a6e22e">lang&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;en&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">title&lt;/span>&amp;gt;My popup&amp;lt;/&lt;span style="color:#f92672">title&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">link&lt;/span> &lt;span style="color:#a6e22e">rel&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;stylesheet&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text/css&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">href&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;popup.css&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">head&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">label&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;switch&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;enabled&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;checkbox&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;lt;&lt;span style="color:#f92672">span&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;slider round&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">span&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">label&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">input&lt;/span> &lt;span style="color:#a6e22e">class&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;secret&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">id&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;item&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;text&amp;#34;&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;&lt;span style="color:#f92672">script&lt;/span> &lt;span style="color:#a6e22e">src&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;popup.js&amp;#34;&lt;/span>&amp;gt;&amp;lt;/&lt;span style="color:#f92672">script&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">body&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&amp;lt;/&lt;span style="color:#f92672">html&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Our &lt;code>popup.html&lt;/code> includes a CSS file and a script. Create &lt;code>popup.js&lt;/code> with the following content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;use strict&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Hello, world from popup!&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">setBadgeText&lt;/span>(&lt;span style="color:#a6e22e">enabled&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">text&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">enabled&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ON&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;OFF&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">action&lt;/span>.&lt;span style="color:#a6e22e">setBadgeText&lt;/span>({&lt;span style="color:#a6e22e">text&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">text&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Handle the ON/OFF switch
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">checkbox&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;enabled&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;enabled&amp;#34;&lt;/span>, (&lt;span style="color:#a6e22e">data&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">checkbox&lt;/span>.&lt;span style="color:#a6e22e">checked&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">!!&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">enabled&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setBadgeText&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">enabled&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">checkbox&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;change&amp;#34;&lt;/span>, (&lt;span style="color:#a6e22e">event&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span> &lt;span style="color:#66d9ef">instanceof&lt;/span> &lt;span style="color:#a6e22e">HTMLInputElement&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">set&lt;/span>({&lt;span style="color:#e6db74">&amp;#34;enabled&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">checked&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">setBadgeText&lt;/span>(&lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">checked&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Handle the input field
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">input&lt;/span> &lt;span style="color:#f92672">=&lt;/span> document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;item&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;item&amp;#34;&lt;/span>, (&lt;span style="color:#a6e22e">data&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">input&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>});
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">input&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;change&amp;#34;&lt;/span>, (&lt;span style="color:#a6e22e">event&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span> &lt;span style="color:#66d9ef">instanceof&lt;/span> &lt;span style="color:#a6e22e">HTMLInputElement&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">set&lt;/span>({&lt;span style="color:#e6db74">&amp;#34;item&amp;#34;&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">event&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The script listens for changes in the switch and the input field. It saves the switch&amp;rsquo;s state and the input field&amp;rsquo;s
value in Chrome storage.&lt;/p>
&lt;p>Create &lt;code>popup.css&lt;/code> with the following content to style the switch and the input field:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-css" data-lang="css">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* The switch - the box around the slider */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">switch&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin-left&lt;/span>: &lt;span style="color:#ae81ff">30&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>; &lt;span style="color:#75715e">/* Center the switch */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">position&lt;/span>: &lt;span style="color:#66d9ef">relative&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">display&lt;/span>: &lt;span style="color:#66d9ef">inline-block&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">60&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">34&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Hide default HTML checkbox */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">switch&lt;/span> &lt;span style="color:#f92672">input&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">opacity&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* The slider */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">slider&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">position&lt;/span>: &lt;span style="color:#66d9ef">absolute&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">cursor&lt;/span>: &lt;span style="color:#66d9ef">pointer&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">top&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">left&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">right&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bottom&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#ccc&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">slider&lt;/span>::&lt;span style="color:#a6e22e">before&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">position&lt;/span>: &lt;span style="color:#66d9ef">absolute&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">content&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">height&lt;/span>: &lt;span style="color:#ae81ff">26&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">width&lt;/span>: &lt;span style="color:#ae81ff">26&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">left&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">bottom&lt;/span>: &lt;span style="color:#ae81ff">4&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#66d9ef">white&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">input&lt;/span>:&lt;span style="color:#a6e22e">checked&lt;/span> &lt;span style="color:#f92672">+&lt;/span> .&lt;span style="color:#a6e22e">slider&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">background-color&lt;/span>: &lt;span style="color:#ae81ff">#2196F3&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">input&lt;/span>:&lt;span style="color:#a6e22e">checked&lt;/span> &lt;span style="color:#f92672">+&lt;/span> .&lt;span style="color:#a6e22e">slider&lt;/span>:&lt;span style="color:#a6e22e">before&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">transform&lt;/span>: translateX(&lt;span style="color:#ae81ff">26&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>); &lt;span style="color:#75715e">/* Move the slider to the right when checked */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">/* Rounded sliders */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">slider&lt;/span>.&lt;span style="color:#a6e22e">round&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">34&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">slider&lt;/span>.&lt;span style="color:#a6e22e">round&lt;/span>::&lt;span style="color:#a6e22e">before&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">border-radius&lt;/span>: &lt;span style="color:#ae81ff">50&lt;/span>&lt;span style="color:#66d9ef">%&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>.&lt;span style="color:#a6e22e">secret&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">margin&lt;/span>: &lt;span style="color:#ae81ff">5&lt;/span>&lt;span style="color:#66d9ef">px&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="loading-and-testing-the-extension-in-chrome">&lt;a href="#loading-and-testing-the-extension-in-chrome" class="header-anchor">&lt;/a>Loading and testing the extension in Chrome
&lt;/h2>&lt;p>Even though we have not added the background script and content script, we can load the extension in Chrome.&lt;/p>
&lt;ol>
&lt;li>Open the Chrome browser.&lt;/li>
&lt;li>Go to &lt;code>chrome://extensions/&lt;/code>.&lt;/li>
&lt;li>Enable the &lt;strong>Developer mode&lt;/strong>.&lt;/li>
&lt;li>Click on &lt;strong>Load unpacked&lt;/strong>.&lt;/li>
&lt;li>Select the &lt;code>src&lt;/code> directory containing the extension files.&lt;/li>
&lt;li>Click &lt;strong>Select Folder&lt;/strong>.&lt;/li>
&lt;li>The extension will be loaded.&lt;/li>
&lt;li>Pin the extension to the toolbar by clicking the pin button in the extension dropdown. This pin will make it easier
to test the extension.&lt;/li>
&lt;li>The popup page will appear when you click the &lt;code>M&lt;/code> extension icon.&lt;/li>
&lt;/ol>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/create-chrome-extension/chrome-extension-popup.png"
alt="Chrome extension popup">&lt;figcaption>
&lt;h4>Chrome extension popup&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>We can now do some basic testing:&lt;/p>
&lt;ol>
&lt;li>Test the switch and the input field. The state of the switch and the value of the input field should be saved in the
Chrome storage. The values should persist even after restarting the browser.&lt;/li>
&lt;li>The badge text of the extension icon should change to &amp;ldquo;ON&amp;rdquo; or &amp;ldquo;OFF&amp;rdquo; based on the state of the switch.&lt;/li>
&lt;li>To inspect the extension, right-click the extension icon and select &lt;strong>Inspect popup&lt;/strong>. You should see a &amp;ldquo;Hello,
world&amp;rdquo; message in the &lt;strong>Console&lt;/strong> tab.&lt;/li>
&lt;/ol>
&lt;h2 id="create-content-script">&lt;a href="#create-content-script" class="header-anchor">&lt;/a>Creating the content script
&lt;/h2>&lt;p>Update the &lt;code>manifest.json&lt;/code> file to include the &lt;code>content_scripts&lt;/code> section. The entire file should look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;manifest_version&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;My Chrome Extension&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.1.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;My first Chrome extension.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;action&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;default_popup&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;popup.html&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;permissions&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;storage&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;content_scripts&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;matches&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;&amp;lt;all_urls&amp;gt;&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;js&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;content.js&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create the new file &lt;code>content.js&lt;/code> with the following content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;use strict&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">blurFilter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;blur(6px)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">textToBlur&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Search this DOM node for text to blur and blur the parent element if found.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">processNode&lt;/span>(&lt;span style="color:#a6e22e">node&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">childNodes&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Array.&lt;span style="color:#a6e22e">from&lt;/span>(&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">childNodes&lt;/span>).&lt;span style="color:#a6e22e">forEach&lt;/span>(&lt;span style="color:#a6e22e">processNode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">nodeType&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">Node&lt;/span>.&lt;span style="color:#a6e22e">TEXT_NODE&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span>.&lt;span style="color:#a6e22e">trim&lt;/span>().&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">parent&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">parentElement&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">parent&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#66d9ef">null&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#a6e22e">parent&lt;/span>.&lt;span style="color:#a6e22e">tagName&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;SCRIPT&amp;#39;&lt;/span> &lt;span style="color:#f92672">||&lt;/span> &lt;span style="color:#a6e22e">parent&lt;/span>.&lt;span style="color:#a6e22e">style&lt;/span>.&lt;span style="color:#a6e22e">filter&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#a6e22e">blurFilter&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Already blurred
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">node&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span>.&lt;span style="color:#a6e22e">includes&lt;/span>(&lt;span style="color:#a6e22e">textToBlur&lt;/span>)) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">blurElement&lt;/span>(&lt;span style="color:#a6e22e">parent&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">blurElement&lt;/span>(&lt;span style="color:#a6e22e">elem&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">style&lt;/span>.&lt;span style="color:#a6e22e">filter&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">blurFilter&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">debug&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;blurred id:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">id&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; class:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">className&lt;/span> &lt;span style="color:#f92672">+&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34; tag:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">tagName&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34; text:&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">elem&lt;/span>.&lt;span style="color:#a6e22e">textContent&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Create a MutationObserver to watch for changes to the DOM.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">observer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">MutationObserver&lt;/span>((&lt;span style="color:#a6e22e">mutations&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mutations&lt;/span>.&lt;span style="color:#a6e22e">forEach&lt;/span>((&lt;span style="color:#a6e22e">mutation&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">mutation&lt;/span>.&lt;span style="color:#a6e22e">addedNodes&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">mutation&lt;/span>.&lt;span style="color:#a6e22e">addedNodes&lt;/span>.&lt;span style="color:#a6e22e">forEach&lt;/span>(&lt;span style="color:#a6e22e">processNode&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">processNode&lt;/span>(&lt;span style="color:#a6e22e">mutation&lt;/span>.&lt;span style="color:#a6e22e">target&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Enable the content script by default.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">enabled&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">keys&lt;/span> &lt;span style="color:#f92672">=&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;enabled&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;item&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#a6e22e">keys&lt;/span>, (&lt;span style="color:#a6e22e">data&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">enabled&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">enabled&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">item&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">textToBlur&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">item&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Only start observing the DOM if the extension is enabled and there is text to blur.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">enabled&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">textToBlur&lt;/span>.&lt;span style="color:#a6e22e">trim&lt;/span>().&lt;span style="color:#a6e22e">length&lt;/span> &lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">observer&lt;/span>.&lt;span style="color:#a6e22e">observe&lt;/span>(document, {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">attributes&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">characterData&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">childList&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">subtree&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Loop through all elements on the page for initial processing.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">processNode&lt;/span>(document)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>})
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The script listens for changes in the DOM and blurs elements that contain the text specified in the input field of the
popup.&lt;/p>
&lt;p>At this point, we can test the extension by entering text in the input field and enabling it. After reloading the page,
the extension should blur elements that contain the text.&lt;/p>
&lt;h2 id="create-background-script">&lt;a href="#create-background-script" class="header-anchor">&lt;/a>Creating the background script
&lt;/h2>&lt;p>Our background script will update the badge text of the extension icon on startup.&lt;/p>
&lt;p>Update the &lt;code>manifest.json&lt;/code> file to include the &lt;code>background&lt;/code> section. The complete file should look like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;manifest_version&amp;#34;&lt;/span>: &lt;span style="color:#ae81ff">3&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;My Chrome Extension&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;0.1.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;My first Chrome extension.&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;action&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;default_popup&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;popup.html&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;permissions&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;storage&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;content_scripts&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;matches&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;&amp;lt;all_urls&amp;gt;&amp;#34;&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;js&amp;#34;&lt;/span>: [&lt;span style="color:#e6db74">&amp;#34;content.js&amp;#34;&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;background&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;service_worker&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;background.js&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Create a new file &lt;code>background.js&lt;/code> with the following content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">&amp;#34;use strict&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">setBadgeText&lt;/span>(&lt;span style="color:#a6e22e">enabled&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">text&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">enabled&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ON&amp;#34;&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;OFF&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">void&lt;/span> &lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">action&lt;/span>.&lt;span style="color:#a6e22e">setBadgeText&lt;/span>({&lt;span style="color:#a6e22e">text&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">text&lt;/span>})
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">startUp&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">sync&lt;/span>.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;enabled&amp;#34;&lt;/span>, (&lt;span style="color:#a6e22e">data&lt;/span>) =&amp;gt; {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">setBadgeText&lt;/span>(&lt;span style="color:#f92672">!!&lt;/span>&lt;span style="color:#a6e22e">data&lt;/span>.&lt;span style="color:#a6e22e">enabled&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Ensure the background script always runs.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">onStartup&lt;/span>.&lt;span style="color:#a6e22e">addListener&lt;/span>(&lt;span style="color:#a6e22e">startUp&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">chrome&lt;/span>.&lt;span style="color:#a6e22e">runtime&lt;/span>.&lt;span style="color:#a6e22e">onInstalled&lt;/span>.&lt;span style="color:#a6e22e">addListener&lt;/span>(&lt;span style="color:#a6e22e">startUp&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The script listens for the startup and installation events and sets the badge text based on the extension&amp;rsquo;s saved state.&lt;/p>
&lt;p>At this point, our basic extension is complete. We can test the extension.&lt;/p>
&lt;h2 id="next-steps">&lt;a href="#next-steps" class="header-anchor">&lt;/a>Next steps
&lt;/h2>&lt;p>In the next part of this series, we will
&lt;a class="link" href="../add-webpack-and-typescript-to-chrome-extension" >add development tooling to the Chrome extension, such as TypeScript support, a bundling tool called webpack, and a development mode that will reload the extension automatically when changes are made&lt;/a>.&lt;/p>
&lt;p>For a list of all articles in the series, see the
&lt;a class="link" href="../chrome-extension" >production-ready Chrome extension series overview&lt;/a>.&lt;/p>
&lt;h2 id="other-getting-started-guides">&lt;a href="#other-getting-started-guides" class="header-anchor">&lt;/a>Other getting started guides
&lt;/h2>&lt;ul>
&lt;li>Recently, we wrote about
&lt;a class="link" href="../react-hello-world" >creating a React application from scratch while minimizing the amount of tools used&lt;/a>.&lt;/li>
&lt;li>We also have a guide on &lt;a class="link" href="../using-c-and-go-with-cgo-is-tricky" >getting started with CGO in Go&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="basic-extension-code-on-github">&lt;a href="#basic-extension-code-on-github" class="header-anchor">&lt;/a>Basic extension code on GitHub
&lt;/h2>&lt;p>The complete code is available on GitHub at:
&lt;a class="link" href="https://github.com/getvictor/create-chrome-extension/tree/main/1-basic-extension" target="_blank" rel="noopener"
>https://github.com/getvictor/create-chrome-extension/tree/main/1-basic-extension&lt;/a>&lt;/p>
&lt;h2 id="create-a-chrome-extension-from-scratch-step-by-step-video">&lt;a href="#create-a-chrome-extension-from-scratch-step-by-step-video" class="header-anchor">&lt;/a>Create a Chrome extension from scratch step-by-step video
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/2dQJYDAAU4I"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>Build a React app from scratch: getting started (2024)</title><link>https://victoronsoftware.com/posts/react-hello-world/</link><pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/react-hello-world/</guid><description>&lt;img src="https://victoronsoftware.com/posts/react-hello-world/react-hello-world.png" alt="Featured image of post Build a React app from scratch: getting started (2024)" />&lt;h2 id="introduction">&lt;a href="#introduction" class="header-anchor">&lt;/a>Introduction
&lt;/h2>&lt;p>In this article, we will create a simple React app from scratch. We will not use any templates or helper scripts. We aim
to reduce tool usage and fully understand each step of the process.&lt;/p>
&lt;h2 id="what-is-react">&lt;a href="#what-is-react" class="header-anchor">&lt;/a>What is React?
&lt;/h2>&lt;p>React is a popular JavaScript library for building user interfaces. It was created by Meta (Facebook) and is maintained
by Meta and a community of developers. React is used to build single-page applications (SPAs) and dynamic web
applications.&lt;/p>
&lt;h2 id="prerequisites----nodejs-and-npm">&lt;a href="#prerequisites----nodejs-and-npm" class="header-anchor">&lt;/a>Prerequisites &amp;ndash; Node.js and npm
&lt;/h2>&lt;p>&lt;a class="link" href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm" target="_blank" rel="noopener"
>Node.js and npm&lt;/a> are the most popular tools for
working with React. Node.js is a JavaScript runtime. npm is a package manager for Node.js. These two tools are essential
for modern web development.&lt;/p>
&lt;h2 id="packagejson">&lt;a href="#packagejson" class="header-anchor">&lt;/a>package.json
&lt;/h2>&lt;p>We will start by creating a &lt;code>package.json&lt;/code> file. This file contains metadata about the project and its dependencies. You
can use the &lt;code>npm init&lt;/code> command to create the &lt;code>package.json&lt;/code> file. Or create one yourself containing something like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;react-hello-world&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.0.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello world app using React&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;repository&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://github.com/getvictor/react&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;author&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;getvictor&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;license&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;MIT&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="typescript">&lt;a href="#typescript" class="header-anchor">&lt;/a>TypeScript
&lt;/h2>&lt;p>Next, we will add &lt;a class="link" href="https://www.typescriptlang.org/" target="_blank" rel="noopener"
>TypeScript&lt;/a> to our project. TypeScript is a superset of JavaScript
that adds static types to the language. It helps catch errors early in the development process and improves code
quality.&lt;/p>
&lt;p>Although TypeScript is not required to build a React app, it is strongly recommended. TypeScript is widely used in the
React community and provides many benefits. Modern IDEs, such as Visual Studio Code and WebStorm, support TypeScript,
making development and learning easier.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm install --save-dev typescript
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command updates the &lt;code>package.json&lt;/code> file with the TypeScript dependency.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;react-hello-world&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.0.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello world app using React&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;repository&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://github.com/getvictor/react&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;author&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;getvictor&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;license&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;MIT&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;devDependencies&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;typescript&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^5.4.5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It also creates a &lt;code>node_modules&lt;/code> directory. This directory contains the packages installed by npm.&lt;/p>
&lt;p>Finally, the command creates a &lt;code>package-lock.json&lt;/code> file. This file locks the dependencies to specific versions, ensuring
that the project is built with the same versions of the dependencies across different machines.&lt;/p>
&lt;p>The &lt;code>--save-dev&lt;/code> flag tells npm to save the package as a development dependency. Development dependencies are not
required for the production build of the app.&lt;/p>
&lt;h3 id="tsconfigjson">&lt;a href="#tsconfigjson" class="header-anchor">&lt;/a>tsconfig.json
&lt;/h3>&lt;p>We need to create a &lt;code>tsconfig.json&lt;/code> file to
&lt;a class="link" href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html" target="_blank" rel="noopener"
>configure TypeScript&lt;/a>. This file specifies the root
files and compiler options for the TypeScript compiler. We will extend the recommended base configuration.&lt;/p>
&lt;p>Install the recommended configuration with the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm install --save-dev @tsconfig/recommended
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, create a &lt;code>tsconfig.json&lt;/code> file with the following content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;extends&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;@tsconfig/recommended/tsconfig.json&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;compilerOptions&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;jsx&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;react-jsx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="what-is-jsx">&lt;a href="#what-is-jsx" class="header-anchor">&lt;/a>What is JSX?
&lt;/h2>&lt;p>In our &lt;code>tsconfig.json&lt;/code> file, we set the &lt;code>jsx&lt;/code> option to &lt;code>react-jsx&lt;/code>. This option tells TypeScript to treat JSX as React
JSX.&lt;/p>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/JSX_%28JavaScript%29" target="_blank" rel="noopener"
>JSX&lt;/a> is a syntax extension for JavaScript. It allows you to write
HTML-like code in JavaScript. JSX is used in React. It is syntactic sugar that is generally transpiled into JavaScript
by the build tool.&lt;/p>
&lt;h2 id="react-and-reactdom">&lt;a href="#react-and-reactdom" class="header-anchor">&lt;/a>React and ReactDOM
&lt;/h2>&lt;p>Next, we will add &lt;a class="link" href="https://react.dev/" target="_blank" rel="noopener"
>React&lt;/a> and &lt;a class="link" href="https://react.dev/reference/react-dom" target="_blank" rel="noopener"
>ReactDOM&lt;/a> to our project.
React is the base library. ReactDOM is the package that provides DOM-specific methods for React.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm install react react-dom
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Since we are using TypeScript, we must also install
&lt;a class="link" href="https://www.typescriptlang.org/docs/handbook/2/type-declarations.html" target="_blank" rel="noopener"
>type definitions&lt;/a> for React and ReactDOM. The
TypeScript compiler uses these definitions for type checking.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm install --save-dev @types/react @types/react-dom
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="what-is-webpack">&lt;a href="#what-is-webpack" class="header-anchor">&lt;/a>What is Webpack?
&lt;/h2>&lt;p>&lt;a class="link" href="https://webpack.js.org/" target="_blank" rel="noopener"
>Webpack&lt;/a> is a module bundler for JavaScript. It takes modules with dependencies and generates
static assets representing those modules. We will use Webpack as the build tool for our React app.&lt;/p>
&lt;p>We will install the Webpack packages:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm install --save-dev webpack webpack-cli webpack-dev-server html-webpack-plugin ts-loader
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>webpack&lt;/code> is the core package&lt;/li>
&lt;li>&lt;code>webpack-cli&lt;/code> provides the command-line interface, which we will use to run Webpack commands&lt;/li>
&lt;li>&lt;code>webpack-dev-server&lt;/code> is a development server that serves the app&lt;/li>
&lt;li>&lt;code>html-webpack-plugin&lt;/code> will generate the index.html file to serve our app&lt;/li>
&lt;li>&lt;code>ts-loader&lt;/code> is a TypeScript loader for Webpack. It allows Webpack to compile TypeScript files.&lt;/li>
&lt;/ul>
&lt;h3 id="webpackconfigts">&lt;a href="#webpackconfigts" class="header-anchor">&lt;/a>webpack.config.ts
&lt;/h3>&lt;p>By default, Webpack does not need a configuration file. However, since we use TypeScript, we must create a
&lt;code>webpack.config.ts&lt;/code> file to configure Webpack.&lt;/p>
&lt;p>Note that we use the &lt;code>.ts&lt;/code> extension for the configuration file. The TypeScript compiler will compile this file. Using a
&lt;code>.js&lt;/code> file is also possible, but we prefer TypeScript for type safety.&lt;/p>
&lt;p>No additional type definitions are required for our Webpack configuration at this time.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">HtmlWebpackPlugin&lt;/span> &lt;span style="color:#a6e22e">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;html-webpack-plugin&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">module&lt;/span>.&lt;span style="color:#a6e22e">exports&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">entry&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./src/index.tsx&amp;#39;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">module&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">rules&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">test&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">/\.(ts|tsx)$/&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">loader&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#34;ts-loader&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">exclude&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">/node_modules/&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">plugins&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [&lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">HtmlWebpackPlugin&lt;/span>()],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We specify &lt;code>src/index.tsx&lt;/code> as our app&amp;rsquo;s top-level file. By default, the build&amp;rsquo;s output will go to the &lt;code>dist&lt;/code> directory.&lt;/p>
&lt;p>We configure the TypeScript loader to compile &lt;code>.ts&lt;/code> and &lt;code>.tsx&lt;/code> files.&lt;/p>
&lt;p>We also use the &lt;code>html-webpack-plugin&lt;/code> to generate an &lt;code>index.html&lt;/code> file. This file will load the Webpack bundle.&lt;/p>
&lt;p>We need to add a TypeScript execution engine to the Node.js runtime so that it can understand the above TypeScript
configuration file. We will use &lt;code>ts-node&lt;/code> for this purpose.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm install --save-dev ts-node
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="final-packagejson">&lt;a href="#final-packagejson" class="header-anchor">&lt;/a>Final package.json
&lt;/h2>&lt;p>After all the installations, our &lt;code>package.json&lt;/code> file should look similar to this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;react-hello-world&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;version&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;1.0.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;description&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;Hello world app using React&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;repository&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;https://github.com/getvictor/react&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;author&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;getvictor&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;license&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;MIT&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;devDependencies&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@tsconfig/recommended&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^1.0.6&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@types/react&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^18.2.79&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;@types/react-dom&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^18.2.25&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;html-webpack-plugin&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^5.6.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ts-loader&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^9.5.1&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;ts-node&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^10.9.2&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;typescript&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^5.4.5&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;webpack&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^5.91.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;webpack-cli&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^5.1.4&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;webpack-dev-server&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^5.0.4&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;react&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^18.2.0&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;react-dom&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;^18.2.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="srcindextsx">&lt;a href="#srcindextsx" class="header-anchor">&lt;/a>src/index.tsx
&lt;/h2>&lt;p>We are finally ready to write some React code. TSX files are TypeScript files that contain JSX.&lt;/p>
&lt;p>We will create the &lt;code>src/index.tsx&lt;/code> file. It will render a simple React component. React components are the reusable
building blocks of React apps.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-tsx" data-lang="tsx">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> {&lt;span style="color:#a6e22e">createRoot&lt;/span>} &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#34;react-dom/client&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// A simple Class component
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">HelloWorld&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">React&lt;/span>.&lt;span style="color:#a6e22e">Component&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">render() {&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &amp;lt;&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;&lt;span style="color:#a6e22e">Hello&lt;/span> &lt;span style="color:#a6e22e">world&lt;/span>&lt;span style="color:#f92672">!&lt;/span>&amp;lt;/&lt;span style="color:#f92672">h1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Use traditional DOM manipulation to create a root element for React
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>document.&lt;span style="color:#a6e22e">body&lt;/span>.&lt;span style="color:#a6e22e">innerHTML&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Create a root element for React
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">app&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">createRoot&lt;/span>(document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;app&amp;#34;&lt;/span>)&lt;span style="color:#f92672">!&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Render our HelloWorld component
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#a6e22e">app&lt;/span>.&lt;span style="color:#a6e22e">render&lt;/span>(&amp;lt;&lt;span style="color:#f92672">HelloWorld&lt;/span>/&amp;gt;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="running-the-app-on-the-webpack-development-server">&lt;a href="#running-the-app-on-the-webpack-development-server" class="header-anchor">&lt;/a>Running the app on the Webpack development server
&lt;/h2>&lt;p>Now, we can run the app on the Webpack development server. This server will serve the app and automatically reload the
page when the code changes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>node_modules/.bin/webpack serve --mode development --open
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>--mode development&lt;/code> flag tells Webpack to build the app in development mode. The &lt;code>--open&lt;/code> flag tells Webpack to
open the app in the default browser.&lt;/p>
&lt;p>The browser should show the following:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/react-hello-world/hello-world.png"
alt="React app served by Webpack dev server">&lt;figcaption>
&lt;h4>React app served by Webpack dev server&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="packagejson-scripts">&lt;a href="#packagejson-scripts" class="header-anchor">&lt;/a>package.json scripts
&lt;/h3>&lt;p>Instead of remembering the above &lt;code>webpack&lt;/code> command, we can add a script to the &lt;code>package.json&lt;/code> file to run the Webpack
development server.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;scripts&amp;#34;&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">&amp;#34;start&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;webpack serve --mode development --open&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>start&lt;/code> is a special script name that maps to the &lt;code>npm start&lt;/code> command. Now, we can run the development server with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>or&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>npm run start
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="building-the-app-for-production">&lt;a href="#building-the-app-for-production" class="header-anchor">&lt;/a>Building the app for production
&lt;/h2>&lt;p>To build the app for production, we can run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>node_modules/.bin/webpack --mode production
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This command will create a &lt;code>dist&lt;/code> directory with the app&amp;rsquo;s production build. The directory will contain the &lt;code>index.html&lt;/code>
file and the &lt;code>main.js&lt;/code> JavaScript bundle. The production files are optimized for performance, and they are minified and
compressed to reduce their size.&lt;/p>
&lt;p>It is possible to host these production files on a local HTTP server like Apache or Nginx, or deploy the app to cloud
providers such as AWS, Cloudflare Pages, Netlify, Render, or Vercel.&lt;/p>
&lt;h2 id="other-getting-started-guides">&lt;a href="#other-getting-started-guides" class="header-anchor">&lt;/a>Other getting started guides
&lt;/h2>&lt;ul>
&lt;li>Recently, we wrote about
&lt;a class="link" href="../create-chrome-extension" >creating a Chrome extension from scratch &lt;strong>without&lt;/strong> any additional tooling&lt;/a>.
&lt;ul>
&lt;li>As part of that series, we covered
&lt;a class="link" href="../linting-and-formatting-typescript" >adding linting and formatting tooling for TypeScript&lt;/a>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>We also have a guide on &lt;a class="link" href="../using-c-and-go-with-cgo-is-tricky" >using CGO in Go programming language&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="example-code-on-github">&lt;a href="#example-code-on-github" class="header-anchor">&lt;/a>Example code on GitHub
&lt;/h2>&lt;p>The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/react/tree/main/1-hello-world" target="_blank" rel="noopener"
>https://github.com/getvictor/react/tree/main/1-hello-world&lt;/a>&lt;/p>
&lt;h2 id="react-hello-world-video">&lt;a href="#react-hello-world-video" class="header-anchor">&lt;/a>React Hello World video
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/BSjmsUpdSYE"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item></channel></rss>