<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Webhook on Victor on Software</title><link>https://victoronsoftware.com/tags/webhook/</link><description>Recent content in Webhook on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 05 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/webhook/index.xml" rel="self" type="application/rss+xml"/><item><title>Building a webhook flow with Tines</title><link>https://victoronsoftware.com/posts/webhook-flow-with-tines/</link><pubDate>Wed, 05 Jun 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/webhook-flow-with-tines/</guid><description>&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/tines-fleet-webhook-workflow.png" alt="Featured image of post Building a webhook flow with Tines" /&gt;&lt;h2 id="what-is-a-webhook"&gt;&lt;a href="#what-is-a-webhook" class="header-anchor"&gt;&lt;/a&gt;What is a webhook?
&lt;/h2&gt;&lt;p&gt;A webhook is a way for one application to send data to another application in real time. It is a simple way to trigger
an action based on an event. In other words, a webhook is a custom HTTP callback.&lt;/p&gt;
&lt;h2 id="what-is-tines"&gt;&lt;a href="#what-is-tines" class="header-anchor"&gt;&lt;/a&gt;What is Tines?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://www.tines.io/" target="_blank" rel="noopener"
&gt;Tines&lt;/a&gt; is a no-code automation platform that allows you to automate repetitive tasks. It is a
powerful tool that can be used to automate workflows, such as sending emails, creating tickets, and updating databases.&lt;/p&gt;
&lt;h2 id="what-is-fleet"&gt;&lt;a href="#what-is-fleet" class="header-anchor"&gt;&lt;/a&gt;What is Fleet?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://fleetdm.com/" target="_blank" rel="noopener"
&gt;Fleet&lt;/a&gt; is an open-source platform for managing and gathering telemetry from devices such as
laptops, desktops, VMs, etc. &lt;a class="link" href="https://www.osquery.io/" target="_blank" rel="noopener"
&gt;Osquery&lt;/a&gt; agents run on these devices and report to the Fleet
server.&lt;/p&gt;
&lt;h2 id="our-example-it-workflow"&gt;&lt;a href="#our-example-it-workflow" class="header-anchor"&gt;&lt;/a&gt;Our example IT workflow
&lt;/h2&gt;&lt;p&gt;In this article, we will build a webhook flow with Tines. When a device has an outdated OS version, Tines will receive a
webhook callback from Fleet. Tines will then send an MDM (Mobile Device Management) command to the device to update the
device&amp;rsquo;s OS version.&lt;/p&gt;
&lt;p&gt;Fleet will send a callback via its calendar integration feature. Fleet can put a &amp;ldquo;System Maintenance&amp;rdquo; event on the
device user&amp;rsquo;s calendar. This event warns the device owner that their computer will be restarted to remediate one or more
failing policies. During the calendar event time, Fleet sends a webhook. The IT admin must set up a flow to remediate
the failing policy. This article is an example of one such flow.&lt;/p&gt;
&lt;h2 id="getting-started--webhook-action"&gt;&lt;a href="#getting-started--webhook-action" class="header-anchor"&gt;&lt;/a&gt;Getting started &amp;ndash; webhook action
&lt;/h2&gt;&lt;p&gt;First, we create a new Tines story. A story is a sequence of actions that are executed in order. Next, we add a webhook
action to the story. The webhook action listens for incoming webhooks. The webhook will contain a JSON body.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/1-tines-webhook.png"
alt="Tines webhook action"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines webhook action&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="handling-errors"&gt;&lt;a href="#handling-errors" class="header-anchor"&gt;&lt;/a&gt;Handling errors
&lt;/h2&gt;&lt;p&gt;Often, webhooks may contain error messages if there is an issue with the configuration, flow, etc. In this example, we
add a trigger action that checks whether the webhook body contains an error. Specifically, our action checks whether the
webhook body contains a non-empty &amp;ldquo;error&amp;rdquo; field.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/2-tines-error-handling.png"
alt="Tines trigger action checking for an error"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines trigger action checking for an error&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We leave this error-handling portion of the story as a stub. In the future, we can expand it by sending an email or
triggering other actions.&lt;/p&gt;
&lt;h2 id="checking-whether-webhook-indicates-an-outdated-os"&gt;&lt;a href="#checking-whether-webhook-indicates-an-outdated-os" class="header-anchor"&gt;&lt;/a&gt;Checking whether webhook indicates an outdated OS
&lt;/h2&gt;&lt;p&gt;At the same time, we also check whether the webhook was triggered by a policy indicating an outdated OS. From previous
testing, we know that the webhook payload will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2024-03-28T13:57:31.668954-05:00&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;host_id&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;11058&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;host_display_name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Victor&amp;#39;s Virtual Machine (2)&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;host_serial_number&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Z5C4L7GKY0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;failing_policies&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;479&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;macOS - OS version up to date&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The payload contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The device&amp;rsquo;s ID (host ID).&lt;/li&gt;
&lt;li&gt;Display name.&lt;/li&gt;
&lt;li&gt;Serial number.&lt;/li&gt;
&lt;li&gt;A list of failing policies.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are interested in the failing policies. When one of the failing policies contains a policy named &amp;ldquo;macOS - OS version
up to date,&amp;rdquo; we know that the device&amp;rsquo;s OS is outdated. Hence, we create a trigger that looks for this policy.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/3-tines-os-version-trigger.png"
alt="Tines trigger action checking for an outdated OS"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines trigger action checking for an outdated OS&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We use the following formula, which loops over all policies and will only allow the workflow to proceed if true:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;IF(FIND(calendar_webhook.body.failing_policies, LAMBDA(item, item.name = &amp;#34;macOS - OS version up to date&amp;#34;)).id &amp;gt; 0, TRUE)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="getting-device-details-from-fleet"&gt;&lt;a href="#getting-device-details-from-fleet" class="header-anchor"&gt;&lt;/a&gt;Getting device details from Fleet
&lt;/h2&gt;&lt;p&gt;Next, we need to get more details about the device from Fleet. Devices are called hosts in Fleet. We add an &amp;ldquo;HTTP
Request&amp;rdquo; action to the story. The action makes a GET request to the Fleet API to get the device details. We use the host
ID from the webhook payload. We are looking for the device&amp;rsquo;s UUID, which we need to send the OS update MDM command.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/4-tines-get-host-request.png"
alt="Tines HTTP Request action to get Fleet device details"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines HTTP Request action to get Fleet device details&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;To access Fleet&amp;rsquo;s API, we need to provide an API key. We store the API key as a CREDENTIAL in the current story. The API
key should belong to an API-only user in Fleet so that the key does not reset when the user logs out.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/5-tines-credential.png"
alt="Add credential to Tines story"&gt;&lt;figcaption&gt;
&lt;h4&gt;Add credential to Tines story&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="creating-mdm-command-payload-to-update-os-version"&gt;&lt;a href="#creating-mdm-command-payload-to-update-os-version" class="header-anchor"&gt;&lt;/a&gt;Creating MDM command payload to update OS version
&lt;/h2&gt;&lt;p&gt;We can create the MDM payload now that we have the device&amp;rsquo;s UUID. The payload contains the command to update the OS
version. We use the
&lt;a class="link" href="https://developer.apple.com/documentation/devicemanagement/schedule_an_os_update?language=objc" target="_blank" rel="noopener"
&gt;ScheduleOSUpdate&lt;/a&gt;
command from Apple&amp;rsquo;s MDM protocol.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;#34;-//Apple//DTD PLIST 1.0//EN&amp;#34; &amp;#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;#34;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;plist&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;version=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Command&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RequestType&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;ScheduleOSUpdate&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Updates&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;InstallAction&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;InstallASAP&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProductVersion&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;14.4.1&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;key&amp;gt;&lt;/span&gt;CommandUUID&lt;span style="color:#f92672"&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;lt;string&amp;gt;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;&amp;lt;&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;UUID&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;()&lt;/span&gt;&lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt;&amp;gt;&lt;span style="color:#f92672"&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will download macOS 14.4.1, install it, and pop up a 60-second countdown dialog box before restarting the
device. Note that the &lt;code&gt;&amp;lt;&amp;lt;UUID()&amp;gt;&amp;gt;&lt;/code&gt; Tines function creates a unique UUID for this MDM command.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/6-tines-create-mdm-command.png"
alt="Tines event to create ScheduleOSUpdate MDM command"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines event to create ScheduleOSUpdate MDM command&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The Fleet API requires the command to be sent as a base64-encoded string. We add a &amp;ldquo;Base64 Encode&amp;rdquo; action to the story
to encode the XML payload. It uses the Tines &lt;code&gt;BASE64_ENCODE&lt;/code&gt; function.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/7-tines-base64-encode.png"
alt="Tines Base64 Encode event"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines Base64 Encode event&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="run-mdm-command-on-device"&gt;&lt;a href="#run-mdm-command-on-device" class="header-anchor"&gt;&lt;/a&gt;Run MDM command on device
&lt;/h2&gt;&lt;p&gt;Finally, we send the MDM command to the device. We add another &amp;ldquo;HTTP Request&amp;rdquo; action to the story. The action makes a
POST request to the Fleet API to send the MDM command to the device.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/8-tines-run-mdm-command.png"
alt="Tines HTTP Request action to run MDM command on device"&gt;&lt;figcaption&gt;
&lt;h4&gt;Tines HTTP Request action to run MDM command on device&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The MDM command will run on the device, downloading and installing the OS update.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/webhook-flow-with-tines/9-macos-device-restart.png"
alt="macOS restart notification after OS update"&gt;&lt;figcaption&gt;
&lt;h4&gt;macOS restart notification after OS update&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="conclusion"&gt;&lt;a href="#conclusion" class="header-anchor"&gt;&lt;/a&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;In this article we built a webhook flow with Tines. We received a webhook callback from Fleet when a device had an
outdated OS version. We then sent an MDM command to the device to update the OS version. This example demonstrates how
Tines can automate workflows and tasks in IT environments.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we explained
&lt;a class="link" href="../google-sheets-api/" &gt;how to quickly get started with Google Sheets API for your development scripts&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="building-a-webhook-flow-with-tines-video"&gt;&lt;a href="#building-a-webhook-flow-with-tines-video" class="header-anchor"&gt;&lt;/a&gt;Building a webhook flow with Tines video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/GFqmvv4nHqk"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This article originally appeared in
&lt;a class="link" href="https://fleetdm.com/guides/building-webhook-flows-with-fleet-and-tines" target="_blank" rel="noopener"
&gt;Fleet&amp;rsquo;s blog&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</description></item></channel></rss>