<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Performance on Victor on Software</title><link>https://victoronsoftware.com/tags/performance/</link><description>Recent content in Performance on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 15 Jan 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>Top 5 metrics for software load testing performance</title><link>https://victoronsoftware.com/posts/software-load-testing/</link><pubDate>Wed, 15 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/software-load-testing/</guid><description>&lt;img src="https://victoronsoftware.com/posts/software-load-testing/loadtest-fail.png" alt="Featured image of post Top 5 metrics for software load testing performance" />&lt;ol>
&lt;li>&lt;a class="link" href="#server-cpu-and-memory-utilization" >Server CPU and memory utilization&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#server-errors" >Server errors&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#server-api-latency-response-time" >Server API latency (response time)&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#database-slow-queries" >Database slow queries&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#database-performance-metrics" >Database performance metrics&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="what-is-software-load-testing">&lt;a href="#what-is-software-load-testing" class="header-anchor">&lt;/a>What is software load testing?
&lt;/h2>&lt;p>Software load testing is a type of performance testing that simulates real-world user load on a software application.
Load tests usually run in a test environment identical to the production environment.&lt;/p>
&lt;p>The goals of load testing may include:&lt;/p>
&lt;ul>
&lt;li>Ensure the application meets the required performance criteria&lt;/li>
&lt;li>Ensure the application performance did not degrade after changes&lt;/li>
&lt;li>Test a new feature&amp;rsquo;s performance before releasing it to production&lt;/li>
&lt;li>Identify bottlenecks in the application to reduce compute costs and/or risks&lt;/li>
&lt;li>Run &lt;a class="link" href="https://en.wikipedia.org/wiki/Chaos_engineering" target="_blank" rel="noopener"
>chaos engineering&lt;/a> performance experiments&lt;/li>
&lt;/ul>
&lt;p>Load testing can be done manually or automatically. Many open-source and commercial tools are available to help you run
load tests. Some features of load testing tools include:&lt;/p>
&lt;ul>
&lt;li>Record and replay user interactions, including simulating unique users&lt;/li>
&lt;li>Simulate different user loads&lt;/li>
&lt;li>Monitor the application&amp;rsquo;s performance during the test&lt;/li>
&lt;li>Generate reports with performance metrics&lt;/li>
&lt;/ul>
&lt;p>This article lists the key metrics you should gather during a software load test of your web application.&lt;/p>
&lt;h2 id="server-cpu-and-memory-utilization">&lt;a href="#server-cpu-and-memory-utilization" class="header-anchor">&lt;/a>Server CPU and memory utilization
&lt;/h2>&lt;p>CPU utilization is the percentage of time the CPU is busy processing instructions, and memory utilization is the
percentage of memory used by the server. Companies deploy multiple instances of the same application web server, and the
load balancer distributes the user requests among them. These metrics are averages across all instances.&lt;/p>
&lt;p>High CPU or memory utilization can indicate a bottleneck in the application or server. It may also signal that the
application needs to be scaled horizontally (add more instances) or vertically (increase the server&amp;rsquo;s resources).&lt;/p>
&lt;p>Low CPU or memory utilization may indicate that the application is over-provisioned, and infrastructure engineers could
reduce resources to save costs.&lt;/p>
&lt;p>Typical expectations for CPU and memory utilization are:&lt;/p>
&lt;ul>
&lt;li>CPU utilization should be below 80% on average&lt;/li>
&lt;li>Memory utilization should be below 80% on average&lt;/li>
&lt;/ul>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/software-load-testing/cpu-utilization.png">&lt;figcaption>
&lt;h4>High CPU utilization during load test&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="server-errors">&lt;a href="#server-errors" class="header-anchor">&lt;/a>Server errors
&lt;/h2>&lt;p>Server errors are error messages in the application logs or 5XX HTTP status codes. They can indicate that the
application is not handling the load well, has a bug, or is misconfigured.&lt;/p>
&lt;p>Error logs are a key debugging tool for developers. They can help identify the root cause of a functional or performance
error and fix it. As such, developers must use error logs to report actual server errors and not just informational
messages. For example, a 404 error is typically not a server error but a client error. A website user requesting a
resource that does not exist is a common scenario. Client errors should be logged as informational messages or tagged
appropriately to be excluded from the server error metric.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/software-load-testing/server-errors.png">&lt;figcaption>
&lt;h4>AWS Logs Insights JSON error filter and sample error patterns&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The ideal number of server errors is zero. However, in practice, some errors are expected. For example, some startup or
shutdown-related errors may occur if application servers are scaling up or down due to load. Note the expected errors in
the test plan and adjust the error filter accordingly.&lt;/p>
&lt;h2 id="server-api-latency-response-time">&lt;a href="#server-api-latency-response-time" class="header-anchor">&lt;/a>Server API latency (response time)
&lt;/h2>&lt;p>API latency is the time it takes for the server to respond to a request, measured in milliseconds. Typically, the
business cares about user-facing API endpoints, such as the login, checkout, or search endpoints.&lt;/p>
&lt;p>API latency is a critical metric for user experience. High latency can lead to user frustration and abandonment.&lt;/p>
&lt;p>One standard metric is the 95th percentile latency. This metric indicates the latency that 95% of the requests are
faster than. It is a good indicator of the user experience because it filters out outliers.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/software-load-testing/api-latency.png">&lt;figcaption>
&lt;h4>Example spike in latency during a load test experiment&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Telemetry tools such as &lt;a class="link" href="https://opentelemetry.io/" target="_blank" rel="noopener"
>OpenTelemetry&lt;/a> can help you gather API latency metrics and correlate
them with other metrics, such as server errors or CPU utilization.&lt;/p>
&lt;h2 id="database-slow-queries">&lt;a href="#database-slow-queries" class="header-anchor">&lt;/a>Database slow queries
&lt;/h2>&lt;p>Query response time is the time it takes for the database to respond to a query. Slow queries can indicate that the
query is not optimized or that the table needs an index.&lt;/p>
&lt;p>Slow queries can lead to high API latency and server errors. They can also lead to high CPU and memory utilization on
the database server.&lt;/p>
&lt;p>Typically, we want to look at the average query response time multiplied by the number of queries per second for each
query signature. This will identify the queries that have the most impact on database performance.&lt;/p>
&lt;p>The list of slow queries should remain stable during a load test. If it changes, it may indicate a new unoptimized query
or a new bug in the application.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/software-load-testing/db-slow-queries.png">&lt;figcaption>
&lt;h4>AWS RDS Performance Insights uses Average Active Sessions (AAS) as its slow query metric&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="database-performance-metrics">&lt;a href="#database-performance-metrics" class="header-anchor">&lt;/a>Database performance metrics
&lt;/h2>&lt;p>Along with slow queries, we always gather the following database performance metrics:&lt;/p>
&lt;h3 id="database-cpu-utilization">&lt;a href="#database-cpu-utilization" class="header-anchor">&lt;/a>Database CPU utilization
&lt;/h3>&lt;p>Just like the server, we monitor the database&amp;rsquo;s CPU utilization. The typical expectation is that CPU utilization should
be below 80% on average.&lt;/p>
&lt;p>Memory utilization may not be as critical for the database as for the server. We expect the database to use as much
memory as possible to cache data and speed up queries.&lt;/p>
&lt;h3 id="database-threads-running-sessions">&lt;a href="#database-threads-running-sessions" class="header-anchor">&lt;/a>Database threads running (sessions)
&lt;/h3>&lt;p>Database threads running is the number of database connections actively processing queries. High thread counts can
indicate that the database is under heavy load.&lt;/p>
&lt;p>The number of threads should be at or below the number of CPUs on the database server.&lt;/p>
&lt;h3 id="database-io-operations-per-second-iops">&lt;a href="#database-io-operations-per-second-iops" class="header-anchor">&lt;/a>Database IO operations per second (IOPS)
&lt;/h3>&lt;p>Database IOPS is the number of disk read and write operations the database performs per second. High IOPS can indicate
that the database is not effectively caching data or that too many writes are occurring.&lt;/p>
&lt;p>IOPS should be in line with the database&amp;rsquo;s provisioned IOPS. If IOPS are consistently higher than provisioned, the
database may need to be scaled up.&lt;/p>
&lt;h2 id="additional-metrics">&lt;a href="#additional-metrics" class="header-anchor">&lt;/a>Additional metrics
&lt;/h2>&lt;p>The following metrics may also be necessary. However, these additional metrics may be more situational than the above
top 5 metrics.&lt;/p>
&lt;h3 id="network-traffic">&lt;a href="#network-traffic" class="header-anchor">&lt;/a>Network traffic
&lt;/h3>&lt;p>Network traffic includes the number of bytes sent and received by the server. Typically, the data received by the server
is the user&amp;rsquo;s request, and the data sent by the server is the response.&lt;/p>
&lt;p>However, in microservices architectures and servers with 3rd party integrations, our server may also make requests to
other web servers.&lt;/p>
&lt;p>User traffic is typically consistent from load test to load test. Traffic to other servers may change as engineers add
new features. If the network traffic changes significantly, it may indicate a new bug in the application, such as
application servers making too many requests to a 3rd party service.&lt;/p>
&lt;h3 id="performance-profile">&lt;a href="#performance-profile" class="header-anchor">&lt;/a>Performance profile
&lt;/h3>&lt;p>Many performance tools and modern programming languages can generate a performance profile. A performance profile is a
breakdown of the time spent in each function of the application. It can help identify bottlenecks in the application
code.&lt;/p>
&lt;p>If code performance is a significant concern, take a performance profile during the load test and compare it to a
baseline or the previous load test profile. If the profile changes significantly, it may indicate a new bug in the
application or a new performance bottleneck.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/software-load-testing/performance-profile.png">&lt;figcaption>
&lt;h4>Example performance profile from Go pprof&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="database-replication-lag">&lt;a href="#database-replication-lag" class="header-anchor">&lt;/a>Database replication lag
&lt;/h3>&lt;p>If the database is replicated, the replication lag is the time it takes for changes to be sent from the primary database
and applied to the replica database. High replication lag can indicate that the replica is not keeping up with the
primary database.&lt;/p>
&lt;p>High replication lag can lead to a bad user experience &amp;ndash; for example, if the user saves data, then immediately
retrieves it and receives stale data.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>Recently, we examined
&lt;a class="link" href="../opentelemetry-with-jaeger/" >whether OpenTelemetry is useful for the average software engineer&lt;/a>.&lt;/li>
&lt;li>We also looked at &lt;a class="link" href="../optimizing-performance-of-go-app/" >benchmarking performance of different Go serializers&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-us-discuss-the-software-load-testing-performance-metrics">&lt;a href="#watch-us-discuss-the-software-load-testing-performance-metrics" class="header-anchor">&lt;/a>Watch us discuss the software load testing performance metrics
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/KHS4D2QfsFk"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>Is OpenTelemetry useful for the average software developer?</title><link>https://victoronsoftware.com/posts/opentelemetry-with-jaeger/</link><pubDate>Wed, 30 Oct 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/opentelemetry-with-jaeger/</guid><description>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-with-jaeger/opentelemetry-with-jaeger-headline.png" alt="Featured image of post Is OpenTelemetry useful for the average software developer?" />&lt;p>This article discusses our first impressions of using OpenTelemetry with Jaeger.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="#use-cases-for-opentelemetry-and-jaeger" >Use cases for OpenTelemetry and Jaeger&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#problems-with-opentelemetry-and-jaeger" >Problems with OpenTelemetry and Jaeger&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-opentelemetry">&lt;a href="#what-is-opentelemetry" class="header-anchor">&lt;/a>What is OpenTelemetry?
&lt;/h2>&lt;p>&lt;a class="link" href="https://opentelemetry.io/" target="_blank" rel="noopener"
>OpenTelemetry&lt;/a> is a set of APIs, libraries, agents, and instrumentation for collecting
distributed traces and metrics from your applications. It provides a standardized way to instrument your code and
collect telemetry data. OpenTelemetry supports programming languages like Java, Python, Go, JavaScript, etc.&lt;/p>
&lt;p>Tracing is a method of monitoring and profiling your application to understand how requests flow through your system.
For example, you can view the associated database calls and requests to other services for a single API request. Tracing
allows you to identify bottlenecks, latency issues, and other performance problems.&lt;/p>
&lt;h2 id="what-is-jaeger">&lt;a href="#what-is-jaeger" class="header-anchor">&lt;/a>What is Jaeger?
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.jaegertracing.io/" target="_blank" rel="noopener"
>Jaeger&lt;/a> is an open-source, end-to-end distributed tracing system. Jaeger is popular for
tracing applications because of its scalability, ease of use, and integration with other tools. Jaeger provides a
web-based UI for viewing traces and analyzing performance data.&lt;/p>
&lt;h2 id="add-opentelemetry-instrumentation-to-your-application">&lt;a href="#add-opentelemetry-instrumentation-to-your-application" class="header-anchor">&lt;/a>Add OpenTelemetry instrumentation to your application
&lt;/h2>&lt;p>To start with OpenTelemetry and Jaeger, you must instrument your application with OpenTelemetry libraries.&lt;/p>
&lt;p>In our case, we used the OpenTelemetry Go SDK to instrument our Go application. We added the necessary dependencies to
our project.&lt;/p>
&lt;pre tabindex="0">&lt;code>go get go.opentelemetry.io/otel@v1.31.0
go get go.opentelemetry.io/otel/exporters/otlp/otlptrace@v1.31.0
go get go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc@v1.31.0
go get go.opentelemetry.io/otel/sdk@v1.31.0
go get go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux@v0.56.0
go get github.com/XSAM/otelsql@v0.35.0
&lt;/code>&lt;/pre>&lt;p>The &lt;code>go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux&lt;/code> package is needed to instrument our
&lt;code>gorilla/mux&lt;/code> HTTP router.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">NewRouter&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Use&lt;/span>(&lt;span style="color:#a6e22e">otelmux&lt;/span>.&lt;span style="color:#a6e22e">Middleware&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;fleet&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>github.com/XSAM/otelsql&lt;/code> package is needed to instrument our SQL database queries.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/XSAM/otelsql&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#a6e22e">semconv&lt;/span> &lt;span style="color:#e6db74">&amp;#34;go.opentelemetry.io/otel/semconv/v1.26.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">otelTracedDriverName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otelTracedDriverName&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">otelsql&lt;/span>.&lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;mysql&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otelsql&lt;/span>.&lt;span style="color:#a6e22e">WithAttributes&lt;/span>(&lt;span style="color:#a6e22e">semconv&lt;/span>.&lt;span style="color:#a6e22e">DBSystemMySQL&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otelsql&lt;/span>.&lt;span style="color:#a6e22e">WithSpanOptions&lt;/span>(&lt;span style="color:#a6e22e">otelsql&lt;/span>.&lt;span style="color:#a6e22e">SpanOptions&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// DisableErrSkip ignores driver.ErrSkip errors, which are frequently returned by the MySQL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// driver when certain optional methods or paths are not implemented/taken.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// For example, interpolateParams=false (the secure default) will not do a parametrized&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// sql.conn.query directly without preparing it first, causing driver.ErrSkip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DisableErrSkip&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Omitting span for sql.conn.reset_session since it takes ~1us and doesn&amp;#39;t provide useful&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// information&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">OmitConnResetSession&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Omitting span for sql.rows since it is very quick and typically doesn&amp;#39;t provide useful&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// information beyond what&amp;#39;s already reported by prepare/exec/query&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">OmitRows&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// WithSpanNameFormatter allows us to customize the span name, which is especially useful for SQL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// queries run outside an HTTPS transaction, which do not belong to a parent span, show up as their&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// own trace, and would otherwise be named &amp;#34;sql.conn.query&amp;#34; or &amp;#34;sql.conn.exec&amp;#34;.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otelsql&lt;/span>.&lt;span style="color:#a6e22e">WithSpanNameFormatter&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">method&lt;/span> &lt;span style="color:#a6e22e">otelsql&lt;/span>.&lt;span style="color:#a6e22e">Method&lt;/span>, &lt;span style="color:#a6e22e">query&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> string(&lt;span style="color:#a6e22e">method&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Append query with extra whitespaces removed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">query&lt;/span> = &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Fields&lt;/span>(&lt;span style="color:#a6e22e">query&lt;/span>), &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">query&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">100&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">query&lt;/span> = &lt;span style="color:#a6e22e">query&lt;/span>[:&lt;span style="color:#ae81ff">100&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> string(&lt;span style="color:#a6e22e">method&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, use &lt;code>otelTracedDriverName&lt;/code> to open a connection to your database.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">db&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">otelTracedDriverName&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;user:password@tcp(localhost:3306)/database&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When starting your application, you must create an OpenTelemetry exporter and a trace provider.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">otlptracegrpc&lt;/span>.&lt;span style="color:#a6e22e">NewClient&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otlpTraceExporter&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">otlptrace&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">client&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;Failed to initialize tracing&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">batchSpanProcessor&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">NewBatchSpanProcessor&lt;/span>(&lt;span style="color:#a6e22e">otlpTraceExporter&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tracerProvider&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">NewTracerProvider&lt;/span>(&lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">WithSpanProcessor&lt;/span>(&lt;span style="color:#a6e22e">batchSpanProcessor&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otel&lt;/span>.&lt;span style="color:#a6e22e">SetTracerProvider&lt;/span>(&lt;span style="color:#a6e22e">tracerProvider&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="launch-jaeger">&lt;a href="#launch-jaeger" class="header-anchor">&lt;/a>Launch Jaeger
&lt;/h2>&lt;p>To view traces, you need to launch Jaeger. You can run Jaeger locally using Docker. Based on the
&lt;a class="link" href="https://www.jaegertracing.io/docs/1.62/getting-started/" target="_blank" rel="noopener"
>Jaeger 1.62 Getting Started guide&lt;/a>, you can run the following
command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --rm --name jaeger &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -p 16686:16686 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -p 4317:4317 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>jaegertracing/all-in-one:1.62.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In our example, we are only exposing two ports:&lt;/p>
&lt;ul>
&lt;li>&lt;code>4317&lt;/code> for the Jaeger collector, which receives trace data using OpenTelemetry Protocol (OTLP) over gRPC&lt;/li>
&lt;li>&lt;code>16686&lt;/code> for the Jaeger UI&lt;/li>
&lt;/ul>
&lt;h2 id="launch-your-application">&lt;a href="#launch-your-application" class="header-anchor">&lt;/a>Launch your application
&lt;/h2>&lt;p>Before starting your application, you must set the OpenTelemetry endpoint to send traces to Jaeger. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export OTEL_SERVICE_NAME&lt;span style="color:#f92672">=&lt;/span>fleet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export OTEL_EXPORTER_OTLP_ENDPOINT&lt;span style="color:#f92672">=&lt;/span>http://localhost:4317
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, you can start your application.&lt;/p>
&lt;h2 id="view-traces-in-jaeger">&lt;a href="#view-traces-in-jaeger" class="header-anchor">&lt;/a>View traces in Jaeger
&lt;/h2>&lt;p>Open your browser and navigate to &lt;a class="link" href="http://localhost:16686" target="_blank" rel="noopener"
>http://localhost:16686&lt;/a> to view traces in the Jaeger UI.
Select your &lt;strong>Service&lt;/strong> name and click &lt;strong>Find Traces&lt;/strong>.&lt;/p>
&lt;p>You can click into a trace to view the details of each span. You can see the duration, logs, and tags for each span. The
example below shows the HTTP request details and multiple SQL queries.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-with-jaeger/example-jaeger-trace.png"
alt="Fleet hosts request with SQL queries to sessions, users, user_teams, and host tables.">
&lt;/figure>
&lt;h2 id="use-cases-for-opentelemetry-and-jaeger">&lt;a href="#use-cases-for-opentelemetry-and-jaeger" class="header-anchor">&lt;/a>Use cases for OpenTelemetry and Jaeger
&lt;/h2>&lt;p>In a local software development environment, OpenTelemetry and Jaeger can be used to:&lt;/p>
&lt;ul>
&lt;li>Fix bottlenecks and latency issues&lt;/li>
&lt;li>Understand how requests flow through your system&lt;/li>
&lt;/ul>
&lt;p>If a bottleneck is known or suspected, Jaeger can help you identify the root cause. For example, you can see which
database queries are taking the most time and optimize them.&lt;/p>
&lt;p>When developing new features, Jaeger can help you understand how requests flow through your system. This telemetry data
provides a quick check to ensure your new feature works as expected.&lt;/p>
&lt;p>In a production environment, OpenTelemetry and Jaeger can be used to:&lt;/p>
&lt;ul>
&lt;li>Monitor and profile your applications&lt;/li>
&lt;li>Troubleshoot performance issues&lt;/li>
&lt;li>Optimize your applications and improve user experience&lt;/li>
&lt;li>Ensure your applications meet service level objectives (SLOs)&lt;/li>
&lt;/ul>
&lt;h2 id="problems-with-opentelemetry-and-jaeger">&lt;a href="#problems-with-opentelemetry-and-jaeger" class="header-anchor">&lt;/a>Problems with OpenTelemetry and Jaeger
&lt;/h2>&lt;p>OpenTelemetry and Jaeger are powerful tools, yet their development use seems limited to fixing performance bottlenecks.
They cannot be used for general debugging out of the box since they don&amp;rsquo;t provide enough detail for each specific
request, such as the request body.&lt;/p>
&lt;p>In addition, missing spans can be a problem. If your application is not instrumented correctly, you may not see all the
spans you expect or know about in Jaeger. Our application lacks spans for some API endpoints, Redis transactions,
outbound HTTP requests, and asynchronous processes. Adding all of these spans requires additional development and QA
efforts.&lt;/p>
&lt;p>The Jaeger UI itself is basic and lacks some features. For example, regex search is missing out of the box, unless
Elasticsearch/OpenSearch storage is added.&lt;/p>
&lt;p>Our chosen SQL instrumentation library, &lt;a class="link" href="https://github.com/XSAM/otelsql" target="_blank" rel="noopener"
>github.com/XSAM/otelsql&lt;/a>, could be better. It
does not provide a way to trace the transaction lifecycle, and it creates many spans at the root level, clogging the
Jaeger UI.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>Recently, we listed &lt;a class="link" href="../software-load-testing/" >the key metrics to gather during software load testing&lt;/a>.&lt;/li>
&lt;li>Previously, we wrote about &lt;a class="link" href="../optimizing-performance-of-go-app/" >benchmarking the performance of your Go code&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="example-code-on-github">&lt;a href="#example-code-on-github" class="header-anchor">&lt;/a>Example code on GitHub
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/fleetdm/fleet/tree/6bc0b5dcd9214c6e3ff94fe657947aeccbdad352" target="_blank" rel="noopener"
>Fleet Device Management repo with OpenTelemetry instrumentation (as of this writing)&lt;/a>&lt;/p>
&lt;h2 id="watch-opentelemetry-with-jaeger-video">&lt;a href="#watch-opentelemetry-with-jaeger-video" class="header-anchor">&lt;/a>Watch OpenTelemetry with Jaeger video
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/eQhdvU2gsmQ"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to benchmark performance of Go serializers</title><link>https://victoronsoftware.com/posts/optimizing-performance-of-go-app/</link><pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/optimizing-performance-of-go-app/</guid><description>&lt;img src="https://victoronsoftware.com/posts/optimizing-performance-of-go-app/race-cars-headline.png" alt="Featured image of post How to benchmark performance of Go serializers" />&lt;ul>
&lt;li>&lt;a class="link" href="#creating-go-benchmark" >Creating a Go benchmark&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#running-go-benchmarks" >Running Go benchmarks&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-benchmarking">&lt;a href="#what-is-benchmarking" class="header-anchor">&lt;/a>What is benchmarking?
&lt;/h2>&lt;p>Performance optimization is a critical part of software development. Once your application has been released and is
being used by real users, you may need to optimize its performance. One way to do this is to benchmark your code to
identify bottlenecks and improve its performance. Benchmarking provides you with data to make informed decisions about
what parts of your code can be sped up and by how much.&lt;/p>
&lt;p>Benchmarking is the process of measuring your code&amp;rsquo;s performance. It involves running your code multiple times and
measuring how long it takes to execute. By running your code multiple times, you can get an average execution time,
which is more reliable than a one-off report.&lt;/p>
&lt;h2 id="identifying-the-bottlenecks">&lt;a href="#identifying-the-bottlenecks" class="header-anchor">&lt;/a>Identifying the bottlenecks
&lt;/h2>&lt;p>In our application, we deserialize and process large amounts of JSON data once every hour. We noticed that this process
was taking a long time for some of our users. First, we used
&lt;a class="link" href="https://github.com/google/pprof/blob/main/doc/README.md" target="_blank" rel="noopener"
>Go pprof&lt;/a> to enable profiling and generated a flame graph to
identify the bottlenecks in our code.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/optimizing-performance-of-go-app/go-pprof-flame-graph.png"
alt="Flame graph showing the execution time of different parts of the Go app">&lt;figcaption>
&lt;h4>Go pprof flame graph&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The flame graph showed us that the JSON decoding process took the most time. We benchmarked different serialization
libraries to find the fastest one for our use case.&lt;/p>
&lt;h2 id="creating-go-benchmark">&lt;a href="#creating-go-benchmark" class="header-anchor">&lt;/a>Creating a Go benchmark
&lt;/h2>&lt;p>In Go, you can write benchmarks using the built-in testing package. Benchmarks are written similarly to unit tests but
with the &lt;strong>Benchmark&lt;/strong> prefix instead of the &lt;strong>Test&lt;/strong> prefix.&lt;/p>
&lt;p>Before creating and running the benchmark, we generated 1000 test JSON files in the &lt;code>testdata&lt;/code> directory.&lt;/p>
&lt;p>To benchmark JSON decoding, we created the following benchmark.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;encoding/json&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;os&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;testing&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">files&lt;/span> = &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">itemsPerFile&lt;/span> = &lt;span style="color:#ae81ff">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BenchmarkJSONImport&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">N&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read in the file (do not time)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">StopTimer&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fileNumber&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#a6e22e">files&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">ReadFile&lt;/span>(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;testdata/sample_%d.json&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fileNumber&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">StartTimer&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">samples&lt;/span> []&lt;span style="color:#a6e22e">Sample&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dec&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">json&lt;/span>.&lt;span style="color:#a6e22e">NewDecoder&lt;/span>(&lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dec&lt;/span>.&lt;span style="color:#a6e22e">Decode&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">samples&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">samples&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">itemsPerFile&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;expected %d samples, got %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">itemsPerFile&lt;/span>, len(&lt;span style="color:#a6e22e">samples&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Starting the function name with &lt;code>Benchmark&lt;/code> indicates to &lt;code>go test&lt;/code> that this is a benchmark.&lt;/p>
&lt;p>The testing package adjusts the number of iterations through the &lt;code>for i := 0; i &amp;lt; b.N; i++&lt;/code> loop until the function
lasts long enough to be timed reliably.&lt;/p>
&lt;p>The &lt;code>b.StopTimer()&lt;/code> and &lt;code>b.StartTimer()&lt;/code> calls exclude part of the code from the benchmark.&lt;/p>
&lt;h2 id="running-go-benchmarks">&lt;a href="#running-go-benchmarks" class="header-anchor">&lt;/a>Running Go benchmarks
&lt;/h2>&lt;p>To run all benchmarks, add &lt;code>-bench=.&lt;/code> flag to &lt;code>go test&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go test -bench&lt;span style="color:#f92672">=&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result will look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>goos: darwin
goarch: arm64
pkg: serializer
cpu: Apple M2 Pro
BenchmarkJSONImport-12 357 3324997 ns/op
PASS
ok serializer 1.868s
&lt;/code>&lt;/pre>&lt;p>It tells us that unmarshalling a single file with &lt;code>json.Decode&lt;/code> takes an average of 3.3 milliseconds. The benchmark ran
the loop 357 times.&lt;/p>
&lt;h2 id="benchmarking-encodinggob">&lt;a href="#benchmarking-encodinggob" class="header-anchor">&lt;/a>Benchmarking encoding/gob
&lt;/h2>&lt;p>Next, we will benchmark the built-in &lt;a class="link" href="https://pkg.go.dev/encoding/gob" target="_blank" rel="noopener"
>encoding/gob&lt;/a> library.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">BenchmarkGobImport&lt;/span>(&lt;span style="color:#a6e22e">b&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">testing&lt;/span>.&lt;span style="color:#a6e22e">B&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &amp;lt; &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">N&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Read in the file (do not time)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">StopTimer&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fileNumber&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">%&lt;/span> &lt;span style="color:#a6e22e">files&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">ReadFile&lt;/span>(&lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Sprintf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;testdata/sample_%d.bin&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">fileNumber&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">StartTimer&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// decode gob&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">samples&lt;/span> []&lt;span style="color:#a6e22e">Sample&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">dec&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">gob&lt;/span>.&lt;span style="color:#a6e22e">NewDecoder&lt;/span>(&lt;span style="color:#a6e22e">bytes&lt;/span>.&lt;span style="color:#a6e22e">NewReader&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">dec&lt;/span>.&lt;span style="color:#a6e22e">Decode&lt;/span>(&lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">samples&lt;/span>); &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">Fatal&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">samples&lt;/span>) &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#a6e22e">itemsPerFile&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">b&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;expected %d samples, got %d&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">itemsPerFile&lt;/span>, len(&lt;span style="color:#a6e22e">samples&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Running the two benchmarks gives us:&lt;/p>
&lt;pre tabindex="0">&lt;code>BenchmarkJSONImport-12 360 3279579 ns/op
BenchmarkGobImport-12 2262 475469 ns/op
&lt;/code>&lt;/pre>&lt;p>The benchmark data shows that decoding with &lt;code>encoding/gob&lt;/code> takes almost 7 times faster than using &lt;code>encoding/json&lt;/code>. This
gives sufficient data to present to our management and argue for switching from JSON. In addition, we can benchmark
other serialization libraries to see if any of them are even faster.&lt;/p>
&lt;p>For additional data, we included reading the file in our benchmark numbers for a complete picture of the expected
speedup:&lt;/p>
&lt;pre tabindex="0">&lt;code>BenchmarkJSONImport-12 360 3374064 ns/op
BenchmarkGobImport-12 2710 481935 ns/op
BenchmarkJSONImportFile-12 306 3746758 ns/op
BenchmarkGobImportFile-12 2176 554254 ns/op
&lt;/code>&lt;/pre>&lt;h2 id="go-benchmark-code-on-github">&lt;a href="#go-benchmark-code-on-github" class="header-anchor">&lt;/a>Go benchmark code on GitHub
&lt;/h2>&lt;p>The complete code is available on GitHub at: &lt;a class="link" href="https://github.com/getvictor/go-benchmark-serializers" target="_blank" rel="noopener"
>https://github.com/getvictor/go-benchmark-serializers&lt;/a>&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;p>Beyond benchmarking, you can step up your performance game with
&lt;a class="link" href="../opentelemetry-with-jaeger/" >OpenTelemetry and Jaeger&lt;/a>.&lt;/p>
&lt;p>In addition:&lt;/p>
&lt;ul>
&lt;li>Recently, we &lt;a class="link" href="../software-load-testing/" >listed the top metrics to gather during software load testing&lt;/a>.&lt;/li>
&lt;li>We also wrote about &lt;a class="link" href="../go-test-execution-time/" >accurately measuring Go test execution time&lt;/a>.&lt;/li>
&lt;li>We discussed how to
&lt;a class="link" href="../go-json-unmarshal/" >use Go to accurately unmashal JSON payloads with null, set, and missing fields&lt;/a>.&lt;/li>
&lt;li>Also, see our previous article on &lt;a class="link" href="../fuzz-testing-with-go/" >creating fuzz tests in Go&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-how-to-benchmark-go-serializers">&lt;a href="#watch-how-to-benchmark-go-serializers" class="header-anchor">&lt;/a>Watch how to benchmark Go serializers
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/c0drQ2JUYmo"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item></channel></rss>