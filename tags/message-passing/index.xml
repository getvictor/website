<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Message passing on Victor on Software</title><link>https://victoronsoftware.com/tags/message-passing/</link><description>Recent content in Message passing on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 12 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/message-passing/index.xml" rel="self" type="application/rss+xml"/><item><title>Message passing in Chrome extension (2024)</title><link>https://victoronsoftware.com/posts/message-passing-in-chrome-extension/</link><pubDate>Wed, 12 Jun 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/message-passing-in-chrome-extension/</guid><description>&lt;img src="https://victoronsoftware.com/posts/message-passing-in-chrome-extension/message-passing-headline.png" alt="Featured image of post Message passing in Chrome extension (2024)" /&gt;&lt;p&gt;This article is part of a series on &lt;a class="link" href="../chrome-extension" &gt;building a production-ready Chrome extension&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the previous article, we
&lt;a class="link" href="../add-webpack-and-typescript-to-chrome-extension" &gt;set up our Chrome extension with TypeScript support and the webpack bundler&lt;/a&gt;.
This article will build on that code, dive into the new APIs, and cover message-passing communication between different
parts of our Chrome extension.&lt;/p&gt;
&lt;h2 id="communication-between-parts-of-a-chrome-extension"&gt;&lt;a href="#communication-between-parts-of-a-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;Communication between parts of a Chrome extension
&lt;/h2&gt;&lt;p&gt;As we covered in &lt;a class="link" href="../create-chrome-extension" &gt;the first article&lt;/a&gt;, a Chrome extension consists of three main parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;service worker (background script)&lt;/li&gt;
&lt;li&gt;content script&lt;/li&gt;
&lt;li&gt;popup&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These parts need to communicate with each other. For example, a popup needs to send a message to a content script to
change the appearance of a webpage. Or a background script needs to send a message to a popup to update the user
interface based on the page that&amp;rsquo;s being visited.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/message-passing-in-chrome-extension/message-passing.svg"
alt="Communication in a Chrome extension"&gt;&lt;figcaption&gt;
&lt;h4&gt;Communication in a Chrome extension&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;One way to communicate between these parts is to use the local storage via the &lt;code&gt;chrome.storage&lt;/code&gt; APIs. We do not
recommend this method because it is slow and can cause performance issues. This method is slow because it is not
synchronous &amp;ndash; the scripts need to check the storage for changes periodically. A better way to communicate between
extension parts is to use message passing.&lt;/p&gt;
&lt;h2 id="what-is-message-passing"&gt;&lt;a href="#what-is-message-passing" class="header-anchor"&gt;&lt;/a&gt;What is message passing?
&lt;/h2&gt;&lt;p&gt;In computer science, message passing is a method for communicating between different processes or threads. A process or
thread sends a message to another process or thread, which receives the message and acts on it. This method is often
used in distributed systems, where processes run on different machines and need to communicate with each other. The
sender sends a message, and the receiver decodes it and executes the appropriate code.&lt;/p&gt;
&lt;h2 id="message-passing-in-a-chrome-extension"&gt;&lt;a href="#message-passing-in-a-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;Message passing in a Chrome extension
&lt;/h2&gt;&lt;p&gt;Message passing is a way to communicate between different parts of a Chrome extension. Its main advantage is that it&amp;rsquo;s
fast and efficient. When a message is sent, the receiver gets it immediately and can respond to it right away.&lt;/p&gt;
&lt;p&gt;Message passing is done in Chrome extensions using the &lt;code&gt;chrome.runtime.sendMessage&lt;/code&gt;, &lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt; and
&lt;code&gt;chrome.runtime.onMessage&lt;/code&gt; functions. Here&amp;rsquo;s how it works:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The sender calls &lt;code&gt;chrome.runtime.sendMessage&lt;/code&gt; or &lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt; with the message to send.&lt;/li&gt;
&lt;li&gt;The receiver listens for messages using &lt;code&gt;chrome.runtime.onMessage.addListener&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The receiver processes the incoming message and, optionally, responds to the message.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="message-passing-from-a-popup-to-a-content-script"&gt;&lt;a href="#message-passing-from-a-popup-to-a-content-script" class="header-anchor"&gt;&lt;/a&gt;Message passing from a popup to a content script
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s see how we can use message passing to communicate between a popup and a content script. We will send a message
when the user toggles the enable slider in the popup, which will enable or disable the content script&amp;rsquo;s processing. We
will use the &lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt; function to send a message to a specific tab ID.&lt;/p&gt;
&lt;p&gt;In the popup script (&lt;code&gt;popup.ts&lt;/code&gt;), we send a message to all the tabs when we detect a change in the top slider:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Send message to content script in all tabs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tabs&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;await&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;tabs&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;({})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;for&lt;/span&gt; (&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tab&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;of&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;tabs&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Note: sensitive tab properties such as tab.title or tab.url can only be accessed for
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#75715e"&gt;// URLs in the host_permissions section of manifest.json
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;tabs&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sendMessage&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;tab&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;!&lt;/span&gt;, {&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;event.target.checked&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;response&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;info&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Popup received response from tab with title &amp;#39;%s&amp;#39; and url %s&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;response&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;title&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;response&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;url&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;warn&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Popup could not send message to tab %d&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;tab&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the content script (&lt;code&gt;content.ts&lt;/code&gt;), we listen for the message and process it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Listen for messages from popup.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;onMessage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addListener&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sender&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sendResponse&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;undefined&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Received message from sender %s&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sender&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;observe&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;observer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;disconnect&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sendResponse&lt;/span&gt;({&lt;span style="color:#a6e22e"&gt;title&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;document.title&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;url&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;window.location.href&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the user toggles the slider in the popup, the popup sends a message to all tabs. The receiving tab will print this
message to the Chrome Developer Tools console.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/message-passing-in-chrome-extension/content-script-received.png"
alt="Content script received message"&gt;&lt;figcaption&gt;
&lt;h4&gt;Content script received message&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Then, the popup will receive a response from the content script with the tab&amp;rsquo;s title and URL. This response prints to
the &lt;code&gt;Inspect Popup&lt;/code&gt; console. System tabs like &lt;code&gt;chrome://extensions/&lt;/code&gt; will not respond to messages.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/message-passing-in-chrome-extension/popup-response.png"
alt="Popup received response"&gt;&lt;figcaption&gt;
&lt;h4&gt;Popup received response&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id="message-passing-from-a-popup-to-the-service-worker-background-script"&gt;&lt;a href="#message-passing-from-a-popup-to-the-service-worker-background-script" class="header-anchor"&gt;&lt;/a&gt;Message passing from a popup to the service worker (background script)
&lt;/h2&gt;&lt;p&gt;To send a message to the service worker, we must use the &lt;code&gt;chrome.runtime.sendMessage&lt;/code&gt; function instead of
&lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt;. The service worker does not have a tab ID, so we cannot use &lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sendMessage&lt;/span&gt;({&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;event.target.checked&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#a6e22e"&gt;then&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;response&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;info&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Popup received response&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;response&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; .&lt;span style="color:#66d9ef"&gt;catch&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;warn&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Popup could not send message&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the service worker script (&lt;code&gt;background.ts&lt;/code&gt;), we listen for the message and process it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-typescript" data-lang="typescript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;onMessage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addListener&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sender&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sendResponse&lt;/span&gt;) &lt;span style="color:#f92672"&gt;=&amp;gt;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;undefined&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Service worker received message from sender %s&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;sender&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;request&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;sendResponse&lt;/span&gt;({&lt;span style="color:#a6e22e"&gt;message&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;Service worker processed the message&amp;#34;&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="message-passing-from-a-content-script-to-the-popup-and-service-worker"&gt;&lt;a href="#message-passing-from-a-content-script-to-the-popup-and-service-worker" class="header-anchor"&gt;&lt;/a&gt;Message passing from a content script to the popup and service worker
&lt;/h2&gt;&lt;p&gt;To send a message from the content script, use the &lt;code&gt;chrome.runtime.sendMessage&lt;/code&gt; function. The popup and service worker
can listen and receive this message.&lt;/p&gt;
&lt;h2 id="message-passing-from-the-service-worker-background-script-to-a-content-script-and-the-popup"&gt;&lt;a href="#message-passing-from-the-service-worker-background-script-to-a-content-script-and-the-popup" class="header-anchor"&gt;&lt;/a&gt;Message passing from the service worker (background script) to a content script and the popup
&lt;/h2&gt;&lt;p&gt;Use the &lt;code&gt;chrome.tabs.sendMessage&lt;/code&gt; function to send a message to the content script. Use the &lt;code&gt;chrome.runtime.sendMessage&lt;/code&gt;
function to send a message to the popup.&lt;/p&gt;
&lt;p&gt;The code for sending a message from the service worker is the same as the code for sending a message from the popup. The
receiving code in the content and popup scripts is also the same.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;&lt;a href="#next-steps" class="header-anchor"&gt;&lt;/a&gt;Next steps
&lt;/h2&gt;&lt;p&gt;In the next part of this series, we will
&lt;a class="link" href="../linting-and-formatting-typescript/" &gt;add linting and formatting tools to our Chrome extension&lt;/a&gt;. These tools increase
the quality of our code and increase engineering velocity for projects with multiple developers.&lt;/p&gt;
&lt;h2 id="chrome-extension-with-webpack-and-typescript-code-on-github"&gt;&lt;a href="#chrome-extension-with-webpack-and-typescript-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Chrome extension with webpack and TypeScript code on GitHub
&lt;/h2&gt;&lt;p&gt;The complete code is available on GitHub at:
&lt;a class="link" href="https://github.com/getvictor/create-chrome-extension/tree/main/3-message-passing" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/create-chrome-extension/tree/main/3-message-passing&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="message-passing-in-a-chrome-extension-video"&gt;&lt;a href="#message-passing-in-a-chrome-extension-video" class="header-anchor"&gt;&lt;/a&gt;Message passing in a Chrome extension video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/qANlZ5kzxcg"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item></channel></rss>