<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Software Architecture on Victor on Software</title><link>https://victoronsoftware.com/tags/software-architecture/</link><description>Recent content in Software Architecture on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 26 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/software-architecture/index.xml" rel="self" type="application/rss+xml"/><item><title>4 key Mermaid diagrams for software developers</title><link>https://victoronsoftware.com/posts/mermaid-intro/</link><pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mermaid-intro/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mermaid-intro/mermaid-intro-headline.png" alt="Featured image of post 4 key Mermaid diagrams for software developers" />&lt;h2 id="importance-of-technical-diagrams">&lt;a href="#importance-of-technical-diagrams" class="header-anchor">&lt;/a>Importance of technical diagrams
&lt;/h2>&lt;p>Diagrams are an effective way to communicate technical concepts to other engineers or business stakeholders. They even
help us better understand technical concepts while creating the diagrams. Effective senior engineers frequently use
diagrams in their documentation and presentations. The top Mermaid diagrams are:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="#sequence-diagrams" >Sequence diagrams&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#flowcharts" >Flowcharts&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#class-diagrams" >Class diagrams&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#entity-relationship-diagrams-erds" >Entity relationship diagrams (ERDs)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-mermaid">&lt;a href="#what-is-mermaid" class="header-anchor">&lt;/a>What is Mermaid
&lt;/h2>&lt;p>Mermaid is a popular JavaScript-based diagramming tool that allows anyone to create diagrams using a simple text-based
syntax. Some key reasons for its popularity include:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Text-based syntax&lt;/strong>: Mermaid is easy to write and version control, fitting seamlessly into code reviews and
collaborative workflows.&lt;/li>
&lt;li>&lt;strong>Integration with Markdown&lt;/strong>: Mermaid works well with Markdown, which is widely used in documentation and static site
generators.&lt;/li>
&lt;li>&lt;strong>Integration with GitHub and GitLab&lt;/strong>: These top Git hosting platforms allow you to put Mermaid diagrams almost
anywhere on their site.&lt;/li>
&lt;li>&lt;strong>Versatility&lt;/strong>: Mermaid supports various diagram types, from flowcharts and sequence diagrams to ERDs.&lt;/li>
&lt;li>&lt;strong>Automation-friendly&lt;/strong>: Diagrams can be generated programmatically, enabling dynamic updates and integration with
CI/CD pipelines.&lt;/li>
&lt;li>&lt;strong>Accessibility&lt;/strong>: Mermaid does not need specialized software; diagrams can be created and rendered within code
editors or browsers.&lt;/li>
&lt;/ul>
&lt;p>In our experience, Mermaid&amp;rsquo;s text-based syntax is simple enough to be used for ad hoc diagramming, as opposed to the
proverbial &amp;ldquo;back of the napkin&amp;rdquo; drawing.&lt;/p>
&lt;p>The above features make Mermaid an invaluable tool for creating maintainable technical diagrams. We recommend creating
your first diagram on &lt;a class="link" href="https://www.mermaidchart.com/play" target="_blank" rel="noopener"
>Mermaid Playground&lt;/a> to get started.&lt;/p>
&lt;h2 id="sequence-diagrams">&lt;a href="#sequence-diagrams" class="header-anchor">&lt;/a>Sequence diagrams
&lt;/h2>&lt;p>Sequence diagrams depict how users and entities interact with each other over time. They are handy for modeling the flow
of messages, events, or data and are great for visualizing customer use cases, API interactions, or the behavior of
distributed systems.&lt;/p>
&lt;p>We love sequence diagrams because they are clear and consistent. Mermaid displays sequence diagrams consistently, which
greatly speeds up understanding.&lt;/p>
&lt;p>Below is a basic sequence diagram, which starts with the keyword &lt;code>sequenceDiagram&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>sequenceDiagram
UI-&amp;gt;&amp;gt;MDM Server: Upload profile
MDM Server-&amp;gt;&amp;gt;Apple: Request push notification
Apple-&amp;gt;&amp;gt;macOS: Push notification
macOS-&amp;gt;&amp;gt;MDM Server: Request command
MDM Server-&amp;gt;&amp;gt;macOS: InstallProfile command
&lt;/code>&lt;/pre>&lt;p>The above Mermaid diagram is rendered as follows:&lt;/p>
&lt;pre class="mermaid">
sequenceDiagram
UI-&amp;gt;&amp;gt;MDM server: Upload profile
MDM server-&amp;gt;&amp;gt;Apple: Request push notification
Apple-&amp;gt;&amp;gt;macOS: Push notification
macOS-&amp;gt;&amp;gt;MDM server: Request command
MDM server-&amp;gt;&amp;gt;macOS: InstallProfile command
&lt;/pre>
&lt;p>The above syntax consists of &lt;code>&amp;lt;entity&amp;gt;-&amp;gt;&amp;gt;&amp;lt;entity&amp;gt;: &amp;lt;description&amp;gt;&lt;/code>. In many cases, that&amp;rsquo;s all that&amp;rsquo;s necessary. We can
quickly create a simple sequence diagram to explain a flow during a meeting.&lt;/p>
&lt;p>To add a title to your diagram, add the following at the top:&lt;/p>
&lt;pre tabindex="0">&lt;code>---
title: My diagram
---
&lt;/code>&lt;/pre>&lt;p>To go beyond the basics, we recommend learning some additional syntax from
&lt;a class="link" href="https://mermaid.js.org/syntax/sequenceDiagram.html" target="_blank" rel="noopener"
>sequence diagram docs&lt;/a>:&lt;/p>
&lt;ul>
&lt;li>&lt;code>actor&lt;/code>: Actors (aka people)&lt;/li>
&lt;li>Aliases&lt;/li>
&lt;li>&lt;code>--&amp;gt;&amp;gt;&lt;/code>: Dotted line with arrow for responses&lt;/li>
&lt;li>&lt;code>--)&lt;/code>: Dotted line with empty arrow for async messages&lt;/li>
&lt;li>&lt;code>activate &amp;lt;entity&amp;gt;&lt;/code> and &lt;code>deactivate &amp;lt;entity&amp;gt;&lt;/code>: Activations of actors&lt;/li>
&lt;li>Loops(&lt;code>loop&lt;/code>), alternative paths(&lt;code>alt&lt;/code> and &lt;code>else&lt;/code>), and parallel actions(&lt;code>par&lt;/code>)&lt;/li>
&lt;li>&lt;code>autonumber&lt;/code>: Sequence numbers&lt;/li>
&lt;li>Notes&lt;/li>
&lt;/ul>
&lt;p>Here is the updated diagram with additional syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>---
title: Upload macOS configuration profile flow
---
sequenceDiagram
autonumber
actor Admin
participant mdm as MDM server
Admin-&amp;gt;&amp;gt;mdm: Upload profile
activate mdm
mdm--&amp;gt;&amp;gt;Admin: OK
deactivate mdm
Note right of mdm: After 30 seconds max
mdm-&amp;gt;&amp;gt;Apple: Request push notification
activate mdm
activate Apple
Apple--&amp;gt;&amp;gt;mdm: OK
deactivate mdm
Apple--)macOS: Push notification
deactivate Apple
activate macOS
macOS-&amp;gt;&amp;gt;mdm: Request command (Idle)
activate mdm
mdm--&amp;gt;&amp;gt;macOS: InstallProfile command
deactivate mdm
macOS-&amp;gt;&amp;gt;macOS: Install profile
macOS-&amp;gt;&amp;gt;mdm: Acknowledge
activate mdm
mdm--&amp;gt;&amp;gt;macOS: No more commands
deactivate mdm
deactivate macOS
&lt;/code>&lt;/pre>&lt;pre class="mermaid">
---
title: Upload macOS configuration profile flow
---
sequenceDiagram
autonumber
actor Admin
participant mdm as MDM server
Admin-&amp;gt;&amp;gt;mdm: Upload profile
activate mdm
mdm--&amp;gt;&amp;gt;Admin: OK
deactivate mdm
Note right of mdm: After 30 seconds max
mdm-&amp;gt;&amp;gt;Apple: Request push notification
activate mdm
activate Apple
Apple--&amp;gt;&amp;gt;mdm: OK
deactivate mdm
Apple--)macOS: Push notification
deactivate Apple
activate macOS
macOS-&amp;gt;&amp;gt;mdm: Request command (Idle)
activate mdm
mdm--&amp;gt;&amp;gt;macOS: InstallProfile command
deactivate mdm
macOS-&amp;gt;&amp;gt;macOS: Install profile
macOS-&amp;gt;&amp;gt;mdm: Acknowledge
activate mdm
mdm--&amp;gt;&amp;gt;macOS: No more commands
deactivate mdm
deactivate macOS
&lt;/pre>
&lt;h2 id="flowcharts">&lt;a href="#flowcharts" class="header-anchor">&lt;/a>Flowcharts
&lt;/h2>&lt;p>Flowcharts are graphical representations of processes, workflows, or decision logic. They use standardized symbols, such
as rectangles, diamonds, and arrows, to illustrate the flow of steps or tasks visually. Flowcharts are generic diagrams
that can be adapted to any purpose. They are often used to explain concepts to non-technical stakeholders.&lt;/p>
&lt;p>Below is a basic flowchart diagram:&lt;/p>
&lt;pre tabindex="0">&lt;code>flowchart
Admin-- &amp;#34;Uses&amp;#34; ---&amp;gt;Server
agent-- &amp;#34;Checks in&amp;#34; ---&amp;gt;Server
Server-- &amp;#34;Accesses&amp;#34; ---&amp;gt;MySQL
Server-- &amp;#34;Accesses&amp;#34; ---&amp;gt;Redis
Server-- &amp;#34;Upload analytics&amp;#34; ---&amp;gt;fleetdm.com
&lt;/code>&lt;/pre>&lt;p>Which renders as follows:&lt;/p>
&lt;pre class="mermaid">
flowchart
Admin-- &amp;#34;Uses&amp;#34; ---&amp;gt;Server
agent-- &amp;#34;Checks in&amp;#34; ---&amp;gt;Server
Server-- &amp;#34;Accesses&amp;#34; ---&amp;gt;MySQL
Server-- &amp;#34;Accesses&amp;#34; ---&amp;gt;Redis
Server-- &amp;#34;Upload analytics&amp;#34; ---&amp;gt;fleetdm.com
&lt;/pre>
&lt;p>The above example is a simple block diagram that can quickly demonstrate the basic parts of your
system/container/component. Explore additional syntax at &lt;a class="link" href="https://mermaid.js.org/syntax/flowchart.html" target="_blank" rel="noopener"
>flowchart docs&lt;/a>.&lt;/p>
&lt;p>Here is another flowchart example:&lt;/p>
&lt;pre tabindex="0">&lt;code>flowchart LR
S([Start])
PD[Process
data]
E([End])
S --&amp;gt; PD
PD --&amp;gt; V{Valid data?}
V -- &amp;#34;No&amp;#34; ---&amp;gt; E
V -- &amp;#34;Yes&amp;#34; ---&amp;gt; W[Send webhook]
W --&amp;gt; E
&lt;/code>&lt;/pre>&lt;p>Which renders as follows:&lt;/p>
&lt;pre class="mermaid">
flowchart LR
S([Start])
PD[Process
data]
E([End])
S --&amp;gt; PD
PD --&amp;gt; V{Valid data?}
V -- &amp;#34;No&amp;#34; ---&amp;gt; E
V -- &amp;#34;Yes&amp;#34; ---&amp;gt; W[Send webhook]
W --&amp;gt; E
&lt;/pre>
&lt;p>We defined some of the elements up front. The &lt;code>Process data&lt;/code> rectangle contains multi-line text.&lt;/p>
&lt;p>Note the direction of the flowchart is left-to-right, as specified by &lt;code>LR&lt;/code> after &lt;code>flowchart&lt;/code>. The direction options are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>TB&lt;/code>: Top-to-bottom&lt;/li>
&lt;li>&lt;code>BT&lt;/code>: Bottom-to-top&lt;/li>
&lt;li>&lt;code>RL&lt;/code>: Right-to-left&lt;/li>
&lt;li>&lt;code>LR&lt;/code>: Left-to-right&lt;/li>
&lt;/ul>
&lt;h3 id="standard-symbols-used-in-flowcharts">&lt;a href="#standard-symbols-used-in-flowcharts" class="header-anchor">&lt;/a>Standard symbols used in flowcharts
&lt;/h3>&lt;p>Flowcharts use a variety of standardized symbols to represent different types of actions, processes, and decisions.
Below are some of the most commonly used symbols:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Terminator (Oval)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Represents the start or end of a process.&lt;/li>
&lt;li>Example: &lt;code>([Start])&lt;/code> or &lt;code>([End])&lt;/code>.&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>&lt;strong>Process (Rectangle)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Represents a step or task in the process.&lt;/li>
&lt;li>Example: &lt;code>[Calculate sum]&lt;/code>.&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>&lt;strong>Decision (Diamond)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Represents a decision point with two or more possible outcomes.&lt;/li>
&lt;li>Example: &lt;code>{Is user authenticated?}&lt;/code>.&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>&lt;strong>Arrow (Line)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Represents the flow or direction of the process.&lt;/li>
&lt;li>Example: Connects steps in a process.&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>&lt;strong>Input/Output (Parallelogram)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Represents input to or output from a process.&lt;/li>
&lt;li>Example: &lt;code>[/User enters credentials/]&lt;/code>.&lt;/li>
&lt;/ul>
&lt;ol start="6">
&lt;li>&lt;strong>Database (Cylinder)&lt;/strong>&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Represents a data store&lt;/li>
&lt;li>Example: &lt;code>[(MySQL)]&lt;/code>.&lt;/li>
&lt;/ul>
&lt;p>Additional symbols may be used for specialized diagrams or contexts, depending on the needs of the specific workflow.&lt;/p>
&lt;h2 id="class-diagrams">&lt;a href="#class-diagrams" class="header-anchor">&lt;/a>Class diagrams
&lt;/h2>&lt;p>A &lt;strong>class diagram&lt;/strong> is one of the core components of the Unified Modeling Language (UML) and is used to visually
represent the static structure of a system. Traditionally, it models classes, their attributes, operations (methods),
and the relationships among the classes in the system.&lt;/p>
&lt;p>However, we found that the most helpful use of class diagrams is to model relationships between higher-level entities.
We can also model higher-level entities with a flowchart, but the benefit of using a class diagram is the ability to use
standard relationships.&lt;/p>
&lt;p>Below is an example diagram modeling some domain concepts:&lt;/p>
&lt;pre tabindex="0">&lt;code>---
config:
class:
hideEmptyMembersBox: true
---
classDiagram
Fleet o-- Host: &amp;#34;manages&amp;#34;
Fleet o-- Policy: &amp;#34;checks (may enforce)&amp;#34;
Host o-- IdPUser: &amp;#34;assigned to&amp;#34;
Host &amp;lt;|-- MacOS
Host &amp;lt;|-- Windows
Host &amp;lt;|-- Linux
Fleet --&amp;gt; Apple: communicates with
&lt;/code>&lt;/pre>&lt;p>It renders as follows:&lt;/p>
&lt;pre class="mermaid">
---
config:
class:
hideEmptyMembersBox: true
---
classDiagram
Fleet o-- Host: &amp;#34;manages&amp;#34;
Fleet o-- Policy: &amp;#34;checks (may enforce)&amp;#34;
Host o-- IdPUser: &amp;#34;assigned to&amp;#34;
Host &amp;lt;|-- MacOS
Host &amp;lt;|-- Windows
Host &amp;lt;|-- Linux
Fleet --&amp;gt; Apple: communicates with
&lt;/pre>
&lt;p>The syntax is straightforward, as in the basic examples of previous diagrams, and we can quickly throw together this
type of diagram during a meeting.&lt;/p>
&lt;p>Six standard types of relationships can be modeled in a class diagram:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Association&lt;/strong>: A &amp;ldquo;uses-a&amp;rdquo; relationship.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Example: &lt;code>User --&amp;gt; Order : &amp;quot;places&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol start="2">
&lt;li>&lt;strong>Inheritance (Generalization)&lt;/strong>: An &amp;ldquo;is-a&amp;rdquo; relationship.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Example: &lt;code>Vehicle &amp;lt;|-- Car&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol start="3">
&lt;li>&lt;strong>Aggregation&lt;/strong>: A &amp;ldquo;has-a&amp;rdquo; relationship (whole-part with shared ownership).&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Example: &lt;code>School o-- Student : &amp;quot;contains&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol start="4">
&lt;li>&lt;strong>Composition&lt;/strong>: A stronger form of aggregation (whole-part with exclusive ownership).&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Example: &lt;code>Car *-- Engine: &amp;quot;includes&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol start="5">
&lt;li>&lt;strong>Dependency&lt;/strong>: Shows that a class depends on another class.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Example: &lt;code>Payment &amp;lt;.. Invoice : &amp;quot;depends on&amp;quot;&lt;/code>&lt;/li>
&lt;/ul>
&lt;ol start="6">
&lt;li>&lt;strong>Realization&lt;/strong>: Represents an &amp;ldquo;implements&amp;rdquo; relationship.&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Example: &lt;code>Interface &amp;lt;|.. Class&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Class diagrams can also include data members and methods. This amount of detail is generally too much to maintain in a
diagram. We recommend only adding this detail when presenting a snapshot or a one-time proposal.&lt;/p>
&lt;p>Here is an example of a class diagram which includes data members and methods:&lt;/p>
&lt;pre tabindex="0">&lt;code>classDiagram
class Person {
- name: String
- age: Integer
+ getName(): String
+ setName(name: String): void
}
class Student {
- studentId: Integer
+ enroll(course: Course): void
}
class Course {
- courseName: String
- courseCode: String
+ getDetails(): String
}
Person &amp;lt;|-- Student
Student *-- Course
&lt;/code>&lt;/pre>&lt;p>The diagram is rendered as follows:&lt;/p>
&lt;pre class="mermaid">
classDiagram
class Person {
- name: String
- age: Integer
+ getName(): String
+ setName(name: String): void
}
class Student {
- studentId: Integer
+ enroll(course: Course): void
}
class Course {
- courseName: String
- courseCode: String
+ getDetails(): String
}
Person &amp;lt;|-- Student
Student *-- Course
&lt;/pre>
&lt;h2 id="entity-relationship-diagrams-erds">&lt;a href="#entity-relationship-diagrams-erds" class="header-anchor">&lt;/a>Entity relationship diagrams (ERDs)
&lt;/h2>&lt;p>An &lt;strong>Entity-Relationship Diagram (ERD)&lt;/strong> is a type of diagram used for visualizing the structure of a database. There
are tools for automatically creating Mermaid ERD diagrams from database schemas. In our experience, ER diagrams are
helpful in proposing changes or examining a snapshot in time. You should not actively maintain ERDs to always match the
current database schema.&lt;/p>
&lt;p>Below is an example schema change proposal:&lt;/p>
&lt;pre tabindex="0">&lt;code>erDiagram
HOST_SCIM {
host_id uint PK
scim_user_id uint FK
}
SCIM_USERS {
id string PK
user_name string
first_name string
middle_name string
family_name string
active bool
}
SCIM_USER_EMAILS {
scim_user_id string PK
email string PK
primary bool
type string
}
SCIM_USER_GROUPS {
scim_user_id string PK &amp;#34;FK&amp;#34;
group_id uint PK &amp;#34;FK&amp;#34;
}
SCIM_GROUPS {
id uint PK
name string &amp;#34;Unique&amp;#34;
}
HOST_SCIM }|--|| SCIM_USERS : &amp;#34;multiple hosts can have the same SCIM user&amp;#34;
SCIM_USERS ||--o{ SCIM_USER_GROUPS: &amp;#34;zero-to-many&amp;#34;
SCIM_USER_GROUPS }|--|| SCIM_GROUPS: &amp;#34;one-to-many&amp;#34;
SCIM_USERS ||--o{ SCIM_USER_EMAILS: &amp;#34;zero-to-many&amp;#34;
&lt;/code>&lt;/pre>&lt;p>It renders as follows:&lt;/p>
&lt;pre class="mermaid">
erDiagram
HOST_SCIM {
host_id uint PK
scim_user_id uint FK
}
SCIM_USERS {
id string PK
user_name string
first_name string
middle_name string
family_name string
active bool
}
SCIM_USER_EMAILS {
scim_user_id string PK
email string PK
primary bool
type string
}
SCIM_USER_GROUPS {
scim_user_id string PK &amp;#34;FK&amp;#34;
group_id uint PK &amp;#34;FK&amp;#34;
}
SCIM_GROUPS {
id uint PK
name string &amp;#34;Unique&amp;#34;
}
HOST_SCIM }|--|| SCIM_USERS : &amp;#34;multiple hosts can have the same SCIM user&amp;#34;
SCIM_USERS ||--o{ SCIM_USER_GROUPS: &amp;#34;zero-to-many&amp;#34;
SCIM_USER_GROUPS }|--|| SCIM_GROUPS: &amp;#34;one-to-many&amp;#34;
SCIM_USERS ||--o{ SCIM_USER_EMAILS: &amp;#34;zero-to-many&amp;#34;
&lt;/pre>
&lt;p>In Mermaid diagrams, cardinality defines the numerical relationship between entities. It specifies how many instances of
one entity can be related to instances of another. Commonly used cardinality syntax in ER diagrams is:&lt;/p>
&lt;ul>
&lt;li>&lt;code>||--||&lt;/code> means &amp;ldquo;one-to-one&amp;rdquo;&lt;/li>
&lt;li>&lt;code>||--o{&lt;/code> means &amp;ldquo;zero-to-many&amp;rdquo;&lt;/li>
&lt;li>&lt;code>||--|{&lt;/code> means &amp;ldquo;one-to-many&amp;rdquo;&lt;/li>
&lt;li>&lt;code>}|--|{&lt;/code> means &amp;ldquo;many-to-many&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;p>The left and right parts of the above cardinality examples can be flipped as needed.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>Recently, we explained &lt;a class="link" href="../software-modularity/" >the business benefits of software modularity and cohesion&lt;/a>.&lt;/li>
&lt;li>We also discussed
&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" >how to scale your codebase with evolutionary architecture&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-us">&lt;a href="#watch-us" class="header-anchor">&lt;/a>Watch us
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/aMMDMQvSzmc"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>6 business benefits of software modularity and cohesion</title><link>https://victoronsoftware.com/posts/software-modularity/</link><pubDate>Wed, 19 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/software-modularity/</guid><description>&lt;img src="https://victoronsoftware.com/posts/software-modularity/software-modularity-headline.png" alt="Featured image of post 6 business benefits of software modularity and cohesion" />&lt;p>&lt;em>This article is part of a series on &lt;strong>technical debt&lt;/strong>. Check out the previous articles:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="../readable-code/" >Why readable code is essential&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" >Incrementally scaling a codebase with evolutionary architecture&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../code-complexity-metrics/" >Top software code complexity metrics&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="introduction">&lt;a href="#introduction" class="header-anchor">&lt;/a>Introduction
&lt;/h2>&lt;p>Modularity and cohesion are key software engineering concepts that software engineers frequently misunderstand.
Frequently, software developers know that modularity is good in some vague general sense, but they can&amp;rsquo;t quantify the
benefits. This lack of understanding leads to poor decisions when adding new functionality or fixing system bugs, often
leading to the proverbial big ball of mud codebase. Sometimes, engineers feel like it is their manager or software
architect&amp;rsquo;s job to define the modules of a system, and they are simply responsible for implementing the details in the
quickest way they know how.&lt;/p>
&lt;p>This article provides
&lt;a class="link" href="#business-benefits-of-a-modular-codebase" >specific reasons why using or adding modularity to your existing growing codebase is a good business decision&lt;/a>.
Sometimes, engineers intuitively know how to do a good job, but they can&amp;rsquo;t explain it to business stakeholders. We try
to explain.&lt;/p>
&lt;h2 id="its-all-about-complexity">&lt;a href="#its-all-about-complexity" class="header-anchor">&lt;/a>It&amp;rsquo;s all about complexity
&lt;/h2>&lt;p>One of the challenging problems in software engineering is managing complexity. Modularity is a tool for managing
complexity. When we speak of complexity, we are referring to a mature, growing codebase with 10 or more software
developers. A young codebase with a couple of developers will benefit from modularity but not as much as a bigger, more
complex codebase.&lt;/p>
&lt;p>Bigger organizations must manage the complexity of both people and systems. People must be able to work independently at
maximum velocity without being slowed down by others. Systems must be simple enough to think about without being
overwhelmed. Complexity increases the cost of ownership of software because:&lt;/p>
&lt;ul>
&lt;li>engineers cannot move at maximum velocity due to coupling to other teams or parts of the codebase&lt;/li>
&lt;li>engineers cannot understand the code, leading to slow development and more bugs&lt;/li>
&lt;/ul>
&lt;h3 id="the-hero-engineer-anti-pattern">&lt;a href="#the-hero-engineer-anti-pattern" class="header-anchor">&lt;/a>The &amp;ldquo;hero engineer&amp;rdquo; anti-pattern
&lt;/h3>&lt;p>Complex codebases often have &amp;ldquo;hero developers&amp;rdquo; who know the codebase and become the go-to people for solving critical
issues or implementing complex features. The prevalence of such heroes may be a sign that your codebase is too complex
and that you must change things to scale your business.&lt;/p>
&lt;p>The &amp;ldquo;hero engineer&amp;rdquo; may be contributing to the complexity issue by:&lt;/p>
&lt;ul>
&lt;li>focusing on quick fixes rather than long-term solutions&lt;/li>
&lt;li>insisting that the current codebase is just fine because &amp;ldquo;that&amp;rsquo;s how we&amp;rsquo;ve always done it&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-modularity-and-cohesion">&lt;a href="#what-is-modularity-and-cohesion" class="header-anchor">&lt;/a>What is modularity and cohesion
&lt;/h2>&lt;p>Modularity is the process of breaking up a complex system into smaller, independent, and interchangeable modules. Small
means small enough to easily understand. Independent means that we can compile and test the module independently of all
the other modules. Interchangeable means that we can substitute other implementations of modules in our system, which
often happens during testing.&lt;/p>
&lt;p>Cohesion refers to the degree to which the functionality inside a module belongs together. It is the metric we use for
creating modules. A good module has high cohesion. Logical changes in that module should generally not leak to other
modules. This metric means that a module comprising random functions is not a good one.&lt;/p>
&lt;h2 id="business-benefits-of-a-modular-codebase">&lt;a href="#business-benefits-of-a-modular-codebase" class="header-anchor">&lt;/a>Business benefits of a modular codebase
&lt;/h2>&lt;h3 id="1-faster-development-and-easier-maintenance">&lt;a href="#1-faster-development-and-easier-maintenance" class="header-anchor">&lt;/a>1. Faster development and easier maintenance
&lt;/h3>&lt;p>Modularity increases engineering velocity, which in turn lowers labor costs and reduces time to market. Since modules
are cohesive and easy to understand, engineers focus their changes on a limited set of modules without wading through
the whole codebase.&lt;/p>
&lt;p>Since modules are independent and interchangeable, they are easier to test. Writing tests becomes faster and easier.&lt;/p>
&lt;h3 id="2-risk-reduction">&lt;a href="#2-risk-reduction" class="header-anchor">&lt;/a>2. Risk reduction
&lt;/h3>&lt;p>A frequent occurrence in a complex codebase is that a change in one place introduces a bug in another seemingly
unrelated functionality. Because modules are cohesive and independent, a bug in one module is less likely to bring down
the entire system. Also, since modules are more straightforward to test, they are less likely to have bugs in the first
place.&lt;/p>
&lt;h3 id="3-organizational-scalability">&lt;a href="#3-organizational-scalability" class="header-anchor">&lt;/a>3. Organizational scalability
&lt;/h3>&lt;p>Management expects the software output to scale proportionally as the engineering organization scales. However, this is
not always the case. Adding more people to a codebase causes merge conflicts, ownership confusion, duplicated effort,
and communication overheads.&lt;/p>
&lt;p>Modularity allows engineers to work in parallel. Each person or team can work in parallel on their modules, minimizing
organizational coupling.&lt;/p>
&lt;p>The main reason microservices have become so popular is that engineers can work on them in parallel. The organizational
scalability benefits outweigh the added complexity of microservices.&lt;/p>
&lt;h3 id="4-faster-onboarding">&lt;a href="#4-faster-onboarding" class="header-anchor">&lt;/a>4. Faster onboarding
&lt;/h3>&lt;p>When new developers join the team, the engineering velocity often dips as senior developers help with onboarding.&lt;/p>
&lt;p>Since modules are small, they can &amp;ldquo;fit in your head&amp;rdquo; without having to understand all other parts of the system. New
developers can contribute more quickly by focusing their initial contributions on a limited set of modules. This
&amp;ldquo;simplicity&amp;rdquo; of the codebase means fewer distractions and less hand-holding for senior staff.&lt;/p>
&lt;h3 id="5-flexibility">&lt;a href="#5-flexibility" class="header-anchor">&lt;/a>5. Flexibility
&lt;/h3>&lt;p>Modularity gives the business more options for the product&amp;rsquo;s future direction since small modules are more
straightforward to modify or replace with new functionality.&lt;/p>
&lt;p>Modularity also allows engineers to experiment with newer and potentially better approaches. For example, an engineer
can try a different JSON library on one module. Engineering management would not consider such a library change in a
monolithic codebase since it would pose too much risk to existing functionality.&lt;/p>
&lt;h3 id="6-professional-growth-for-software-engineers">&lt;a href="#6-professional-growth-for-software-engineers" class="header-anchor">&lt;/a>6. Professional growth for software engineers
&lt;/h3>&lt;p>What about the engineers who have been with the company for years and are comfortable with (or used to) the current
monolithic approach?&lt;/p>
&lt;p>Modular software architectures are becoming the norm in the software industry. Building and maintaining a genuinely
modular codebase provides a valuable experience that engineers can carry to future projects within and beyond the
current company. If we interviewed a candidate whose preferred working style was to minimize the number of modules in
the codebase, that would be a serious red flag.&lt;/p>
&lt;h2 id="downsides-of-a-modular-codebase">&lt;a href="#downsides-of-a-modular-codebase" class="header-anchor">&lt;/a>Downsides of a modular codebase
&lt;/h2>&lt;h3 id="1-initial-module-creation-overhead">&lt;a href="#1-initial-module-creation-overhead" class="header-anchor">&lt;/a>1. Initial module creation overhead
&lt;/h3>&lt;p>Creating a new module requires defining its interface and directory structure and writing a new test harness. These
steps require more up-front work than simply dumping the code into an existing package.&lt;/p>
&lt;h3 id="2-ci-complexity">&lt;a href="#2-ci-complexity" class="header-anchor">&lt;/a>2. CI complexity
&lt;/h3>&lt;p>We can compile and test modules independently. To maximize the development speed of modules, each one can have its own
CI run. However, as the number of modules grows, this process can become complicated over time.&lt;/p>
&lt;h3 id="3-cross-cutting-features-can-become-trickier">&lt;a href="#3-cross-cutting-features-can-become-trickier" class="header-anchor">&lt;/a>3. Cross-cutting features can become trickier
&lt;/h3>&lt;p>Some features, such as security and auditing, affect multiple modules. Ensuring consistency while keeping modules
independent can require extra thought and coordination.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>Check out our other articles in the &lt;strong>technical debt&lt;/strong> series. Links are at the top of this article.&lt;/li>
&lt;li>Recently, examined &lt;a class="link" href="../mermaid-intro/" >the 4 key Mermaid diagrams for software developers&lt;/a>.&lt;/li>
&lt;li>Previously, we &lt;a class="link" href="../go-modules-and-packages/" >explained the difference between Go modules and Go packages&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-us-explain-the-business-benefits-of-software-modularity">&lt;a href="#watch-us-explain-the-business-benefits-of-software-modularity" class="header-anchor">&lt;/a>Watch us explain the business benefits of software modularity
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/UmSsmGFufTg"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to find package dependencies of a Go package</title><link>https://victoronsoftware.com/posts/go-package-dependencies/</link><pubDate>Wed, 05 Feb 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/go-package-dependencies/</guid><description>&lt;img src="https://victoronsoftware.com/posts/go-package-dependencies/go-dependencies-headline.png" alt="Featured image of post How to find package dependencies of a Go package" />&lt;ul>
&lt;li>&lt;a class="link" href="#find-package-dependencies-using-go-list" >Find package dependencies using &lt;code>go list&lt;/code>&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#find-package-dependencies-using-go-code" >Find package dependencies using Go code&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-are-package-dependencies-and-module-dependencies">&lt;a href="#what-are-package-dependencies-and-module-dependencies" class="header-anchor">&lt;/a>What are package dependencies and module dependencies?
&lt;/h2>&lt;p>A package dependency is another package that your Go package imports. When you import a package in Go, you create a dependency on that package. The Go compiler will not compile your package if it cannot find and compile the package you depend on.&lt;/p>
&lt;p>On the other hand, a module dependency is a dependency on a module. A module is a collection of related Go packages that are versioned together. You declare your module dependencies in your &lt;code>go.mod&lt;/code> file. Your code may use one or more packages from your module dependencies.&lt;/p>
&lt;h2 id="why-are-package-dependencies-important">&lt;a href="#why-are-package-dependencies-important" class="header-anchor">&lt;/a>Why are package dependencies important?
&lt;/h2>&lt;p>Understanding your package dependencies is essential because they:&lt;/p>
&lt;ul>
&lt;li>indicate the amount of internal coupling in your codebase&lt;/li>
&lt;li>help you understand the structure of your codebase&lt;/li>
&lt;li>help you avoid too many dependencies&lt;/li>
&lt;li>help you avoid circular dependencies&lt;/li>
&lt;li>help you optimize your build times&lt;/li>
&lt;/ul>
&lt;p>As your codebase grows, keeping track of package dependencies is vital to ensure that the codebase remains maintainable. Many developers import dependencies without considering the consequences. In modern IDE tools, they quickly click &lt;code>Import&lt;/code> in a pop-up to make the squiggly lines go away. In some cases, IDEs add imports without even asking the developer. However, code with many dependencies becomes coupled to other potentially unrelated code. This entanglement makes the codebase harder to understand, test, and maintain. For additional details, see &lt;a class="link" href="../scaling-codebase-evolutionary-architecture/#problems-with-the-current-architecture" >the list of problems with a coupled architecture&lt;/a> from our previous article.&lt;/p>
&lt;h3 id="what-is-an-architectural-test">&lt;a href="#what-is-an-architectural-test" class="header-anchor">&lt;/a>What is an architectural test?
&lt;/h3>&lt;p>An architectural test is a test that makes sure your code follows the architectural rules that you have defined. Codebases tend to devolve into a Big Ball of Mud as time passes. Architectural tests are one way to keep your codebase clean.&lt;/p>
&lt;p>In our example below, we will check to ensure that our Go package is NOT dependent on another package in our codebase. This is a common scenario when you want to refactor your codebase and remove a dependency or add a new package and want to ensure that it is not dependent on other parts of the codebase.&lt;/p>
&lt;h2 id="find-package-dependencies-using-go-list">&lt;a href="#find-package-dependencies-using-go-list" class="header-anchor">&lt;/a>Find package dependencies using &lt;code>go list&lt;/code>
&lt;/h2>&lt;p>&lt;code>go list&lt;/code> is a powerful tool that you can use to list information about Go packages. You can use the &lt;code>-deps&lt;/code> flag with &lt;code>go list&lt;/code> to find package dependencies. Here is an example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go list -deps ./server/android...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The result is a list of all the direct and indirect package dependencies of the &lt;code>./server/android&lt;/code> and its subpackages. To filter out standard library packages and sort the list, you can use the following command on macOS:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go list -deps ./server/android... | grep -E &lt;span style="color:#e6db74">&amp;#39;^[^\/]*\.[^\/]*\/&amp;#39;&lt;/span> | sort
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above regular expression looks for packages with a &lt;code>.&lt;/code> before the first &lt;code>/&lt;/code> in the package path. This regex filters out standard library packages. The &lt;code>sort&lt;/code> command sorts the list alphabetically.&lt;/p>
&lt;p>To check if a package is dependent on another package, you can use the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>! &lt;span style="color:#f92672">(&lt;/span>go list -deps ./server/android... | grep -q &lt;span style="color:#e6db74">&amp;#39;github.com/fleetdm/fleet/v4/server/mdm/nanomdm/mdm&amp;#39;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The leading &lt;code>!&lt;/code> inverts the command&amp;rsquo;s exit status. If the package is dependent on the specified package, the command will return &lt;code>1&lt;/code>; if it is not, the command will return &lt;code>0&lt;/code>. You can use this command in your CI/CD pipelines to ensure that your package is not dependent on a specific package.&lt;/p>
&lt;h2 id="find-package-dependencies-using-go-code">&lt;a href="#find-package-dependencies-using-go-code" class="header-anchor">&lt;/a>Find package dependencies using Go code
&lt;/h2>&lt;p>&lt;a class="link" href="https://pkg.go.dev/golang.org/x/tools/go/packages" target="_blank" rel="noopener"
>packages&lt;/a> is a Go package that allows one to load, parse, type-check, and import Go packages. We will use the &lt;code>Load&lt;/code> function to get a list of &lt;code>Package&lt;/code> values. In addition, we will use &lt;a class="link" href="https://pkg.go.dev/go/build#Context.Import" target="_blank" rel="noopener"
>Context.Import method from build package&lt;/a> to recursively find dependencies.&lt;/p>
&lt;p>Below is an example architecture test you can add to your test suite.&lt;/p>
&lt;script src="https://gist.github.com/getvictor/17f495021211dcca087b16cd2d4b24d1.js">&lt;/script>
&lt;p>The above example is based on &lt;a class="link" href="https://github.com/matthewmcnew/archtest" target="_blank" rel="noopener"
>https://github.com/matthewmcnew/archtest&lt;/a>. You can &lt;a class="link" href="https://youtu.be/yIZcbTQvpCE?t=440&amp;amp;si=T2AqNGc9_YMjbCTx" target="_blank" rel="noopener"
>jump to the code example section&lt;/a> of the video below for a full explanation.&lt;/p>
&lt;p>A failing run of our architecture test will look like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>=== RUN TestPackageDependencies
arch_test.go:41: Error: package dependency not allowed. Dependency chain:
github.com/fleetdm/fleet/v4/server/android/service
github.com/fleetdm/fleet/v4/server/fleet
github.com/fleetdm/fleet/v4/server/mdm/nanomdm/mdm
--- FAIL: TestPackageDependencies (14.66s)
&lt;/code>&lt;/pre>&lt;h2 id="find-how-a-dependency-is-included-in-the-build">&lt;a href="#find-how-a-dependency-is-included-in-the-build" class="header-anchor">&lt;/a>Find how a dependency is included in the build
&lt;/h2>&lt;p>In our article on &lt;a class="link" href="../analyze-go-build" >analyzing Go build times&lt;/a>, we show how to use the &lt;code>-debug-actiongraph&lt;/code> flag to find &lt;a class="link" href="../analyze-go-build#find-why-dependencies" >why a dependency is included in the build&lt;/a>.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>In the previous article, we discussed &lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" >how to scale your codebase with evolutionary architecture&lt;/a>.&lt;/li>
&lt;li>Before that, we &lt;a class="link" href="../go-modules-and-packages/" >explained the difference between Go modules and Go packages&lt;/a>.&lt;/li>
&lt;li>We also covered &lt;a class="link" href="../common-refactorings/" >common code refactorings in Go for readability and maintainability&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-how-to-find-package-dependencies-of-a-go-package">&lt;a href="#watch-how-to-find-package-dependencies-of-a-go-package" class="header-anchor">&lt;/a>Watch how to find package dependencies of a Go package
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/yIZcbTQvpCE"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to scale your codebase with evolutionary architecture</title><link>https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/</link><pubDate>Wed, 29 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/</guid><description>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/evolutionary-architecture-headline.png" alt="Featured image of post How to scale your codebase with evolutionary architecture" />&lt;p>&lt;em>This article is part of a series on &lt;strong>technical debt&lt;/strong>. Check out the previous article:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="../readable-code/" >Why readable code is important and how to refactor code for readability&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="intro-to-evolutionary-architecture">&lt;a href="#intro-to-evolutionary-architecture" class="header-anchor">&lt;/a>Intro to evolutionary architecture
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="#current-architecture" >Current architecture&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#problems-with-the-current-architecture" >Problems with the current architecture&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#good-architecture" >Good architecture&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#evolutionary-architecture" >Evolutionary architecture&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Evolutionary architecture refers to a software design approach that embraces change as a fundamental aspect of system
development. Instead of aiming to create a fixed and perfect architecture upfront, it allows the system to evolve in
response to new requirements, technologies, and insights. Evolutionary architecture is a critical tool for reducing
technical debt.&lt;/p>
&lt;p>Evolutionary design, or incremental design, is another term for this approach. Generally, evolutionary design refers to
changes on a smaller scale, such as refactoring code or adding new features. On the other hand, evolutionary
architecture refers to changes on a larger scale, such as reorganizing the codebase or splitting a monolithic
application into microservices. That said, there is no strict boundary between the two terms. We will use the term
evolutionary architecture.&lt;/p>
&lt;p>In this article, we provide an example of scaling your codebase to accommodate a growing number of features and
developers.&lt;/p>
&lt;h2 id="current-architecture">&lt;a href="#current-architecture" class="header-anchor">&lt;/a>Current architecture
&lt;/h2>&lt;p>We base our example on a theoretical codebase, but real-world experiences inspire it. The problems and solutions we
discuss are common in software development, especially in startups and small companies.&lt;/p>
&lt;p>The initial state of our example codebase is a web application developed in a mono-repository. The application was built
from the ground up with a simple architecture, focusing on adding new features and finding product-market fit.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/current-design.png">&lt;figcaption>
&lt;h4>Current design with a few large modules.&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The current design divides the codebase into a few large modules. We use the term &lt;em>module&lt;/em> to mean a logical grouping of
code in the same files and directories.&lt;/p>
&lt;p>However, after a couple of years, the application has grown significantly in features, complexity, and team size. The
organization now has three product teams working on different functional areas of the application. No one has updated
the initial architecture, which is insufficient to support the growing codebase and development team.&lt;/p>
&lt;h2 id="problems-with-the-current-architecture">&lt;a href="#problems-with-the-current-architecture" class="header-anchor">&lt;/a>Problems with the current architecture
&lt;/h2>&lt;p>A significant problem that the engineering team has been facing is &lt;strong>an increase in bugs and a longer time to fix
them&lt;/strong>. The code for each feature is sprinkled throughout the codebase and tightly coupled to other seemingly unrelated
features. This complexity makes it difficult to understand, test, and keep existing features working as new ones are
added.&lt;/p>
&lt;p>Speaking of new features, the team has been struggling to add them on time. The codebase has become a tangled web of
dependencies, and any change in one part of the codebase can have unintended consequences in other parts. Adding a
feature requires modifying many parts of the codebase, which requires understanding the entire codebase, which many
developers lack. The lack of knowledge and the changes to many parts of the codebase have led to &lt;strong>features taking
significantly longer to implement&lt;/strong> than initially estimated.&lt;/p>
&lt;p>&lt;strong>Maintaining feature branches&lt;/strong> for over a few days and making patch fixes to existing releases has become impossible.
The codebase is so intertwined that any changes may cause merge conflicts. The increased likelihood of merge conflicts
has discouraged developers from refactoring and cleaning up the code base. This tendency to leave the code as-is has
perpetuated the slide in code quality.&lt;/p>
&lt;p>Tests have also become a problem. The &lt;strong>test suite has been in a frequent state of disrepair&lt;/strong>. There is no clear
ownership of tests, so engineers have been reluctant to fix them. Some engineers have stopped paying attention to
failing CI alerts, figuring that the problems are caused by one of the other two teams.&lt;/p>
&lt;p>&lt;strong>Tests have also become slower&lt;/strong> and slower, especially the integration tests that test the API and include the service
layer, the datastore layer, and an actual database. These tests do not run in parallel; every additional feature slows
down the compile and increases test time. Test files have become bloated with tests for multiple features, making them
slow to load in the editor, difficult to navigate, and impossible to diff for PR reviews.&lt;/p>
&lt;p>Finally, the &lt;strong>onboarding time for new developers has been growing&lt;/strong>. It takes weeks for new developers to understand
the codebase and start contributing.&lt;/p>
&lt;h2 id="good-architecture">&lt;a href="#good-architecture" class="header-anchor">&lt;/a>Good architecture
&lt;/h2>&lt;p>At this point in the company&amp;rsquo;s life, an exemplary architecture would be separate groups of modules corresponding to the
three product teams.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/ideal-design.png">&lt;figcaption>
&lt;h4>Good design with dedicated modules for each product team.&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Each team would be responsible for its own set of modules, which aligns with Agile principles. The modules would be
loosely coupled, and the teams would be able to work independently on their features without affecting other teams. The
amount of code that each engineer has to understand and change would be drastically reduced.&lt;/p>
&lt;p>This architecture would have eliminated or significantly reduced the problems that the engineering team has been facing.&lt;/p>
&lt;ul>
&lt;li>The reduced complexity and increased understanding of the codebase would lead to fewer and faster to fix bugs&lt;/li>
&lt;li>Faster feature development due to cleaner code and fewer dependencies&lt;/li>
&lt;li>Reduced merge conflicts for PRs, especially for database migrations and schema changes&lt;/li>
&lt;li>Rarely failing test suite due to clear ownership of tests&lt;/li>
&lt;li>Faster tests due to each team focusing on testing their slice of the product. Limited complete product integration
tests would still be present.&lt;/li>
&lt;li>Faster onboarding time for new developers&lt;/li>
&lt;/ul>
&lt;p>However, the company does not have this architecture. Building this architecture upfront would have been foolish since
it would have consumed critical engineering time. Yes, there was value in creating this structure upfront because it
would have saved time in the long run, but this value was insufficient for a young company that may not be around in a
few months.&lt;/p>
&lt;h2 id="evolutionary-architecture">&lt;a href="#evolutionary-architecture" class="header-anchor">&lt;/a>Evolutionary architecture
&lt;/h2>&lt;p>Many companies and engineers find themselves in this situation. They have a codebase with poor architecture for today&amp;rsquo;s
reality, blame the organization for not thinking about these problems earlier, and feel like they can&amp;rsquo;t improve the
situation.&lt;/p>
&lt;p>Evolutionary architecture is a way to incrementally improve the architecture of a codebase without having to do a big
rewrite. It is a way to make the codebase better today than it was yesterday and better tomorrow than it is today.&lt;/p>
&lt;p>This situation is not unique to this company. It is the norm. Most companies start with a simple architecture and
codebase that is good enough for the first few features. As the company grows, the architecture becomes a bottleneck.
Instead of worrying about not making the right decisions in the past, consider where the architecture needs to be a year
or two from now and start moving towards that.&lt;/p>
&lt;p>For example, when adding a new prominent feature to the product, decouple it from the rest of the codebase.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/scaling-codebase-evolutionary-architecture/evolutionary-design.png">&lt;figcaption>
&lt;h4>Evolutionary design with big features going into dedicated modules.&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Our example shows all the modules decoupled, but it may be OK to decouple one or two.&lt;/p>
&lt;p>Decoupling a feature from the rest of the codebase has many benefits similar to those we listed above for &amp;ldquo;good
architecture.&amp;rdquo; Additional benefits include:&lt;/p>
&lt;ul>
&lt;li>Most of the feature can be tested by itself, reducing test time.&lt;/li>
&lt;li>The business gets the option to create a new team dedicated to the feature quickly &amp;ndash; the code is already
separate/independent&lt;/li>
&lt;li>Engineering can scale the feature separately from the rest of the product. For example, assign a dedicated database or
split the feature into a microservice.&lt;/li>
&lt;/ul>
&lt;h2 id="code-example-of-splitting-the-database-schema">&lt;a href="#code-example-of-splitting-the-database-schema" class="header-anchor">&lt;/a>Code example of splitting the database schema
&lt;/h2>&lt;p>It is nice to read about a theoretical example, but seeing an actual code example is even better. In this code example,
we begin with a monolithic application that has a single database schema. We then split the schema into two separate
schemas. It is the starting point and a reference for decoupling a new feature from the rest of the codebase. Since this
code example is a bit long and requires some context regarding the current implementation, we will not cover it in this
article. Instead, &lt;a class="link" href="https://www.youtube.com/watch?v=Li1GZzQVXWw&amp;amp;t=1070s" target="_blank" rel="noopener"
>jump to the code example section&lt;/a> of the video
below.&lt;/p>
&lt;p>Link to the
&lt;a class="link" href="https://github.com/fleetdm/fleet/compare/main...victor/feature-set-up" target="_blank" rel="noopener"
>source code example decoupling a new backend feature from the rest of the codebase&lt;/a>.&lt;/p>
&lt;h2 id="track-code-complexity-metrics">&lt;a href="#track-code-complexity-metrics" class="header-anchor">&lt;/a>Track code complexity metrics
&lt;/h2>&lt;p>In the next article of this &lt;strong>technical debt&lt;/strong> series, we
&lt;a class="link" href="../code-complexity-metrics/" >go over the top code complexity metrics every software engineer should know&lt;/a>.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>Recently, we covered &lt;a class="link" href="../track-engineering-metrics/" >how to easily track engineering metrics&lt;/a>.&lt;/li>
&lt;li>Previously, we demonstrated
&lt;a class="link" href="../github-code-review-issues/" >the most significant issues with GitHub&amp;rsquo;s code review process&lt;/a>.&lt;/li>
&lt;li>We also showed &lt;a class="link" href="../go-package-dependencies/" >how to create an architectural test that finds Go package dependencies&lt;/a>.&lt;/li>
&lt;li>We also published an article on &lt;a class="link" href="../common-refactorings/" >the common code refactorings to improve code readability&lt;/a>.&lt;/li>
&lt;li>In addition, we summarized &lt;a class="link" href="../ai-for-software-developers/" >what every software engineer should know about AI&lt;/a>.&lt;/li>
&lt;li>Lastly, we &lt;a class="link" href="../mermaid-intro/" >introduced the top Mermaid diagrams for software developers&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="watch-how-to-scale-your-codebase-with-evolutionary-architecture">&lt;a href="#watch-how-to-scale-your-codebase-with-evolutionary-architecture" class="header-anchor">&lt;/a>Watch how to scale your codebase with evolutionary architecture
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Li1GZzQVXWw"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item></channel></rss>