<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Telemetry on Victor on Software</title><link>https://victoronsoftware.com/tags/telemetry/</link><description>Recent content in Telemetry on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 05 Aug 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/telemetry/index.xml" rel="self" type="application/rss+xml"/><item><title>Why developers should use OpenTelemetry in dev</title><link>https://victoronsoftware.com/posts/opentelemetry-for-devs/</link><pubDate>Tue, 05 Aug 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/opentelemetry-for-devs/</guid><description>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/opentelemetry-for-devs-headline.png" alt="Featured image of post Why developers should use OpenTelemetry in dev" />&lt;p>We&amp;rsquo;ve changed our tune on OpenTelemetry.&lt;/p>
&lt;p>In our &lt;a class="link" href="../opentelemetry-with-jaeger/" >previous article on OpenTelemetry with Jaeger&lt;/a>, we were skeptical about its value
for the average developer. The tooling seemed more suited for production monitoring than day-to-day development work.
However, recent production issues have made us reconsider.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="#feature-1-api-request-and-response-bodies" >Feature 1: API request and response bodies&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#feature-2-database-query-instrumentation" >Feature 2: Database query instrumentation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#feature-3-outgoing-http-requests" >Feature 3: Outgoing HTTP requests&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#feature-4-trace-log-correlation" >Feature 4: Trace-log correlation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#feature-5-comprehensive-error-handling" >Feature 5: Comprehensive error handling&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="the-wake-up-call">&lt;a href="#the-wake-up-call" class="header-anchor">&lt;/a>The wake-up call
&lt;/h2>&lt;p>We discovered a critical gap in our production telemetry: several key API endpoints weren&amp;rsquo;t instrumented. When issues
arose, we were flying blind. No traces. No visibility. Just frustrated customers and scrambling engineers.&lt;/p>
&lt;p>This experience taught us an important lesson: &lt;strong>telemetry isn&amp;rsquo;t just an operations concern, it&amp;rsquo;s a development
concern&lt;/strong>. If developers don&amp;rsquo;t use and understand telemetry during development, we end up with half-baked
instrumentation in production.&lt;/p>
&lt;p>The solution? Developers must dogfood their own telemetry.&lt;/p>
&lt;h2 id="setting-up-opentelemetry-for-development">&lt;a href="#setting-up-opentelemetry-for-development" class="header-anchor">&lt;/a>Setting up OpenTelemetry for development
&lt;/h2>&lt;p>Using OpenTelemetry during development provides immediate benefits:&lt;/p>
&lt;ul>
&lt;li>Complete instrumentation coverage before production&lt;/li>
&lt;li>Faster debugging with familiar tooling (same tooling in dev and production)&lt;/li>
&lt;li>Better understanding of code behavior&lt;/li>
&lt;li>Early detection of performance issues&lt;/li>
&lt;/ul>
&lt;p>We built a TODO application to demonstrate key OpenTelemetry features for developers. The examples use
&lt;a class="link" href="https://signoz.io/docs/install/docker/" target="_blank" rel="noopener"
>SigNoz&lt;/a> as the backend, but any OpenTelemetry-compatible system works (Jaeger,
Grafana, Datadog, etc.).&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Note&lt;/strong>: In development, we often want more detailed telemetry than in production. Production may limit telemetry due
to performance or security reasons. Many of the features we&amp;rsquo;ll demonstrate should have environment-specific toggles.&lt;/p>&lt;/blockquote>
&lt;h2 id="feature-1-api-request-and-response-bodies">&lt;a href="#feature-1-api-request-and-response-bodies" class="header-anchor">&lt;/a>Feature 1: API request and response bodies
&lt;/h2>&lt;p>Seeing actual request and response bodies is invaluable during development. While you&amp;rsquo;d avoid this in production for
security reasons, it&amp;rsquo;s essential for debugging locally.&lt;/p>
&lt;h3 id="key-opentelemetry-concepts-attributes-vs-events">&lt;a href="#key-opentelemetry-concepts-attributes-vs-events" class="header-anchor">&lt;/a>Key OpenTelemetry concepts: attributes vs events
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>Attributes&lt;/strong>: Key-value pairs attached to spans that provide metadata. They&amp;rsquo;re indexed and searchable (e.g.,
&lt;code>http.method&lt;/code>, &lt;code>http.status_code&lt;/code>, &lt;code>user.id&lt;/code>). Use attributes for the data you need to query or filter.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Events&lt;/strong>: Timestamped records within a span that capture what happened at a specific moment. They&amp;rsquo;re perfect for
logging request/response bodies, error messages, or any detailed information that doesn&amp;rsquo;t need to be searchable but
provides context when debugging.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>In our TODO app, we recorded request and response bodies as events:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">AddEvent&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http.request.body&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">WithAttributes&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">attribute&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;body&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">requestBody&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">AddEvent&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http.response.body&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">WithAttributes&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">attribute&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;body&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">responseBody&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This approach provides full API context without bloating searchable attributes.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/api-request-response.png"
alt="SigNoz showing API request and response bodies as events in a trace span">
&lt;/figure>
&lt;h2 id="feature-2-database-query-instrumentation">&lt;a href="#feature-2-database-query-instrumentation" class="header-anchor">&lt;/a>Feature 2: Database query instrumentation
&lt;/h2>&lt;p>Database queries often cause performance bottlenecks. OpenTelemetry captures both query timing and the actual SQL
executed.&lt;/p>
&lt;p>Standard instrumentation shows parameterized queries:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> todos &lt;span style="color:#66d9ef">WHERE&lt;/span> user_id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> status &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">?&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For debugging, we need the actual values. Our enhanced instrumentation includes both:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/database-query-instrumentation.png"
alt="SigNoz showing database queries with both parameterized and populated SQL statements">
&lt;/figure>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">SetAttributes&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">attribute&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;db.statement&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;SELECT * FROM todos WHERE user_id = ? AND status = ?&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">attribute&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;db.statement.formatted&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;SELECT * FROM todos WHERE user_id = 123 AND status = &amp;#39;active&amp;#39;&amp;#34;&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This dual approach maintains security (prepared statements against SQL injection) while providing debugging context. Use
populated queries to:&lt;/p>
&lt;ul>
&lt;li>Reproduce issues by running the exact query&lt;/li>
&lt;li>Understand why a query returned unexpected results&lt;/li>
&lt;li>Debug complex queries with multiple parameters&lt;/li>
&lt;/ul>
&lt;p>Alternatively, you could log the populated query statements instead of adding them as span attributes. Putting them in
the logs gives you more flexibility in controlling data retention policies, as logs and traces often have different
storage durations and access controls in production environments.&lt;/p>
&lt;h2 id="feature-3-outgoing-http-requests">&lt;a href="#feature-3-outgoing-http-requests" class="header-anchor">&lt;/a>Feature 3: Outgoing HTTP requests
&lt;/h2>&lt;p>Modern applications integrate with external APIs and microservices. Outgoing HTTP calls need the same visibility as
incoming requests.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/outgoing-http-requests.png"
alt="SigNoz displaying outgoing HTTP request details">
&lt;/figure>
&lt;p>Our TODO app instruments outgoing HTTP requests, capturing:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Before making the request&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">AddEvent&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http.request.body&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">WithAttributes&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">attribute&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;body&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">requestBody&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">attribute&lt;/span>.&lt;span style="color:#a6e22e">Int&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;size&amp;#34;&lt;/span>, len(&lt;span style="color:#a6e22e">requestBody&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// After receiving the response&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">AddEvent&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;http.response.body&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">WithAttributes&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">attribute&lt;/span>.&lt;span style="color:#a6e22e">String&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;body&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">responseBody&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">attribute&lt;/span>.&lt;span style="color:#a6e22e">Int&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;size&amp;#34;&lt;/span>, len(&lt;span style="color:#a6e22e">responseBody&lt;/span>)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">attribute&lt;/span>.&lt;span style="color:#a6e22e">Int&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;status_code&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">StatusCode&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This visibility is crucial when:&lt;/p>
&lt;ul>
&lt;li>Third-party APIs return unexpected results&lt;/li>
&lt;li>You need to debug authentication or request formatting issues&lt;/li>
&lt;li>Performance bottlenecks come from external dependencies&lt;/li>
&lt;li>You&amp;rsquo;re troubleshooting integration problems&lt;/li>
&lt;/ul>
&lt;p>External calls receive the same instrumentation as internal operations, eliminating black boxes during development.&lt;/p>
&lt;h2 id="feature-4-trace-log-correlation">&lt;a href="#feature-4-trace-log-correlation" class="header-anchor">&lt;/a>Feature 4: Trace-log correlation
&lt;/h2>&lt;p>OpenTelemetry connects traces with logs, enabling seamless navigation between high-level trace data and detailed log
output.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/trace-log-correlation.png"
alt="SigNoz showing correlated logs for a specific trace with direct navigation links">
&lt;/figure>
&lt;h3 id="key-opentelemetry-concepts-spans-vs-traces">&lt;a href="#key-opentelemetry-concepts-spans-vs-traces" class="header-anchor">&lt;/a>Key OpenTelemetry concepts: spans vs traces
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>&lt;strong>Span&lt;/strong>: A single unit of work within a trace. It represents an operation like a database query, HTTP request, or
function call. Each span has a unique &lt;code>span_id&lt;/code> and may have a &lt;code>parent_span_id&lt;/code> to form a tree. Spans are connected
through these relationships to reflect the call hierarchy.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Trace&lt;/strong>: The complete journey of a request through your system, composed of multiple spans that all share the same
&lt;code>trace_id&lt;/code>. The root span has no parent and marks the start of the trace. Think of a trace as the tree, and spans as
the branches and leaves.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>In our TODO app, we inject trace context into all log entries:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">logger&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">With&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;trace_id&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">SpanContext&lt;/span>().&lt;span style="color:#a6e22e">TraceID&lt;/span>().&lt;span style="color:#a6e22e">String&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;span_id&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">SpanContext&lt;/span>().&lt;span style="color:#a6e22e">SpanID&lt;/span>().&lt;span style="color:#a6e22e">String&lt;/span>(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">logger&lt;/span>.&lt;span style="color:#a6e22e">Info&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Creating new TODO item&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;user_id&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">userID&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;title&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">todo&lt;/span>.&lt;span style="color:#a6e22e">Title&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This correlation enables:&lt;/p>
&lt;ul>
&lt;li>Quick navigation from a slow span to its detailed logs&lt;/li>
&lt;li>Understanding the sequence of operations within a request&lt;/li>
&lt;li>Debugging complex flows across multiple services&lt;/li>
&lt;li>Maintaining context when troubleshooting issues&lt;/li>
&lt;/ul>
&lt;p>Viewing traces and logs together reduces debugging time significantly.&lt;/p>
&lt;h2 id="feature-5-comprehensive-error-handling">&lt;a href="#feature-5-comprehensive-error-handling" class="header-anchor">&lt;/a>Feature 5: Comprehensive error handling
&lt;/h2>&lt;p>OpenTelemetry captures complete error context and propagation paths throughout your system.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-for-devs/error-handling.png"
alt="SigNoz showing errors">
&lt;/figure>
&lt;p>Error counts may appear inflated because they&amp;rsquo;re counted at each span level:&lt;/p>
&lt;ol>
&lt;li>Database layer throws an error (count: 1)&lt;/li>
&lt;li>Service layer catches and returns error response (count: 2)&lt;/li>
&lt;/ol>
&lt;p>This propagation helps identify error origins and their path through application layers.&lt;/p>
&lt;p>Example error instrumentation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// Simple error recording&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">RecordError&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">SetStatus&lt;/span>(&lt;span style="color:#a6e22e">codes&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// With stack trace&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">span&lt;/span>.&lt;span style="color:#a6e22e">RecordError&lt;/span>(&lt;span style="color:#a6e22e">err&lt;/span>, &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">WithStackTrace&lt;/span>(&lt;span style="color:#66d9ef">true&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>With proper error instrumentation, you get:&lt;/p>
&lt;ul>
&lt;li>Complete stack traces for debugging&lt;/li>
&lt;li>Error propagation paths through your system&lt;/li>
&lt;li>Direct links to the failing trace&lt;/li>
&lt;li>Associated logs with full context&lt;/li>
&lt;li>Performance impact of error handling&lt;/li>
&lt;/ul>
&lt;p>All debugging information exists in one place, reducing troubleshooting from hours to minutes.&lt;/p>
&lt;h2 id="moving-forward">&lt;a href="#moving-forward" class="header-anchor">&lt;/a>Moving forward
&lt;/h2>&lt;p>Our next step is implementing this approach in our production application. The benefits are clear:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Complete visibility&lt;/strong>: No more blind spots in our API endpoints&lt;/li>
&lt;li>&lt;strong>Faster debugging&lt;/strong>: All context in one place&lt;/li>
&lt;li>&lt;strong>Better habits&lt;/strong>: Developers who use telemetry build better instrumented code&lt;/li>
&lt;li>&lt;strong>Proactive monitoring&lt;/strong>: Issues are caught before they impact users&lt;/li>
&lt;/ul>
&lt;p>Telemetry isn&amp;rsquo;t an afterthought. It&amp;rsquo;s a development tool that we can use from day one.&lt;/p>
&lt;h2 id="try-it-yourself">&lt;a href="#try-it-yourself" class="header-anchor">&lt;/a>Try it yourself
&lt;/h2>&lt;p>See these concepts in action with our &lt;a class="link" href="https://github.com/getvictor/todo-app" target="_blank" rel="noopener"
>instrumented TODO application on GitHub&lt;/a>.
The AI-generated code has readability issues, but effectively demonstrates all telemetry concepts.&lt;/p>
&lt;p>To get started with your own setup:&lt;/p>
&lt;ol>
&lt;li>Install &lt;a class="link" href="https://signoz.io/docs/install/docker/" target="_blank" rel="noopener"
>SigNoz using Docker&lt;/a>&lt;/li>
&lt;li>Clone the TODO app repository&lt;/li>
&lt;li>Run the app with OpenTelemetry enabled&lt;/li>
&lt;li>Start exploring your traces!&lt;/li>
&lt;/ol>
&lt;p>The goal isn&amp;rsquo;t perfect code. It&amp;rsquo;s perfect visibility into code behavior.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../software-load-testing/" >Top 5 metrics for software load testing performance&lt;/a>&lt;/strong>&lt;br>
Learn which telemetry metrics matter most when load testing your applications.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../optimizing-performance-of-go-app/" >How to benchmark performance of Go serializers&lt;/a>&lt;/strong>&lt;br>
Discover performance optimization techniques using Go&amp;rsquo;s built-in profiling tools.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../opentelemetry-with-jaeger/" >Is OpenTelemetry useful for the average software developer?&lt;/a>&lt;/strong>&lt;br>
Our initial skeptical take on OpenTelemetry and its challenges for development use.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Note:&lt;/em> What&amp;rsquo;s your experience with OpenTelemetry? Have you found other creative ways to use telemetry during
development?&lt;/p>
&lt;h2 id="watch-us-demonstrate-opentelemetry-features-useful-for-developers">&lt;a href="#watch-us-demonstrate-opentelemetry-features-useful-for-developers" class="header-anchor">&lt;/a>Watch us demonstrate OpenTelemetry features useful for developers
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/1a8f8FWRWS0"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>Is OpenTelemetry useful for the average software developer?</title><link>https://victoronsoftware.com/posts/opentelemetry-with-jaeger/</link><pubDate>Wed, 30 Oct 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/opentelemetry-with-jaeger/</guid><description>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-with-jaeger/opentelemetry-with-jaeger-headline.png" alt="Featured image of post Is OpenTelemetry useful for the average software developer?" />&lt;p>This article discusses our first impressions of using OpenTelemetry with Jaeger.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="#use-cases-for-opentelemetry-and-jaeger" >Use cases for OpenTelemetry and Jaeger&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#problems-with-opentelemetry-and-jaeger" >Problems with OpenTelemetry and Jaeger&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-opentelemetry">&lt;a href="#what-is-opentelemetry" class="header-anchor">&lt;/a>What is OpenTelemetry?
&lt;/h2>&lt;p>&lt;a class="link" href="https://opentelemetry.io/" target="_blank" rel="noopener"
>OpenTelemetry&lt;/a> is a set of APIs, libraries, agents, and instrumentation for collecting
distributed traces and metrics from your applications. It provides a standardized way to instrument your code and
collect telemetry data. OpenTelemetry supports programming languages like Java, Python, Go, JavaScript, etc.&lt;/p>
&lt;p>Tracing is a method of monitoring and profiling your application to understand how requests flow through your system.
For example, you can view the associated database calls and requests to other services for a single API request. Tracing
allows you to identify bottlenecks, latency issues, and other performance problems.&lt;/p>
&lt;h2 id="what-is-jaeger">&lt;a href="#what-is-jaeger" class="header-anchor">&lt;/a>What is Jaeger?
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.jaegertracing.io/" target="_blank" rel="noopener"
>Jaeger&lt;/a> is an open-source, end-to-end distributed tracing system. Jaeger is popular for
tracing applications because of its scalability, ease of use, and integration with other tools. Jaeger provides a
web-based UI for viewing traces and analyzing performance data.&lt;/p>
&lt;h2 id="add-opentelemetry-instrumentation-to-your-application">&lt;a href="#add-opentelemetry-instrumentation-to-your-application" class="header-anchor">&lt;/a>Add OpenTelemetry instrumentation to your application
&lt;/h2>&lt;p>To start with OpenTelemetry and Jaeger, you must instrument your application with OpenTelemetry libraries.&lt;/p>
&lt;p>In our case, we used the OpenTelemetry Go SDK to instrument our Go application. We added the necessary dependencies to
our project.&lt;/p>
&lt;pre tabindex="0">&lt;code>go get go.opentelemetry.io/otel@v1.31.0
go get go.opentelemetry.io/otel/exporters/otlp/otlptrace@v1.31.0
go get go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc@v1.31.0
go get go.opentelemetry.io/otel/sdk@v1.31.0
go get go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux@v0.56.0
go get github.com/XSAM/otelsql@v0.35.0
&lt;/code>&lt;/pre>&lt;p>The &lt;code>go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux&lt;/code> package is needed to instrument our
&lt;code>gorilla/mux&lt;/code> HTTP router.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">mux&lt;/span>.&lt;span style="color:#a6e22e">NewRouter&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">r&lt;/span>.&lt;span style="color:#a6e22e">Use&lt;/span>(&lt;span style="color:#a6e22e">otelmux&lt;/span>.&lt;span style="color:#a6e22e">Middleware&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;fleet&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>github.com/XSAM/otelsql&lt;/code> package is needed to instrument our SQL database queries.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#e6db74">&amp;#34;github.com/XSAM/otelsql&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#a6e22e">semconv&lt;/span> &lt;span style="color:#e6db74">&amp;#34;go.opentelemetry.io/otel/semconv/v1.26.0&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">otelTracedDriverName&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">init&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otelTracedDriverName&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">otelsql&lt;/span>.&lt;span style="color:#a6e22e">Register&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;mysql&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otelsql&lt;/span>.&lt;span style="color:#a6e22e">WithAttributes&lt;/span>(&lt;span style="color:#a6e22e">semconv&lt;/span>.&lt;span style="color:#a6e22e">DBSystemMySQL&lt;/span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otelsql&lt;/span>.&lt;span style="color:#a6e22e">WithSpanOptions&lt;/span>(&lt;span style="color:#a6e22e">otelsql&lt;/span>.&lt;span style="color:#a6e22e">SpanOptions&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// DisableErrSkip ignores driver.ErrSkip errors, which are frequently returned by the MySQL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// driver when certain optional methods or paths are not implemented/taken.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// For example, interpolateParams=false (the secure default) will not do a parametrized&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// sql.conn.query directly without preparing it first, causing driver.ErrSkip&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">DisableErrSkip&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Omitting span for sql.conn.reset_session since it takes ~1us and doesn&amp;#39;t provide useful&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// information&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">OmitConnResetSession&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Omitting span for sql.rows since it is very quick and typically doesn&amp;#39;t provide useful&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// information beyond what&amp;#39;s already reported by prepare/exec/query&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">OmitRows&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// WithSpanNameFormatter allows us to customize the span name, which is especially useful for SQL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// queries run outside an HTTPS transaction, which do not belong to a parent span, show up as their&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// own trace, and would otherwise be named &amp;#34;sql.conn.query&amp;#34; or &amp;#34;sql.conn.exec&amp;#34;.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otelsql&lt;/span>.&lt;span style="color:#a6e22e">WithSpanNameFormatter&lt;/span>(&lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>, &lt;span style="color:#a6e22e">method&lt;/span> &lt;span style="color:#a6e22e">otelsql&lt;/span>.&lt;span style="color:#a6e22e">Method&lt;/span>, &lt;span style="color:#a6e22e">query&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> string(&lt;span style="color:#a6e22e">method&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Append query with extra whitespaces removed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">query&lt;/span> = &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Fields&lt;/span>(&lt;span style="color:#a6e22e">query&lt;/span>), &lt;span style="color:#e6db74">&amp;#34; &amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> len(&lt;span style="color:#a6e22e">query&lt;/span>) &amp;gt; &lt;span style="color:#ae81ff">100&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">query&lt;/span> = &lt;span style="color:#a6e22e">query&lt;/span>[:&lt;span style="color:#ae81ff">100&lt;/span>] &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> string(&lt;span style="color:#a6e22e">method&lt;/span>) &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#e6db74">&amp;#34;: &amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">query&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, use &lt;code>otelTracedDriverName&lt;/code> to open a connection to your database.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">db&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">sql&lt;/span>.&lt;span style="color:#a6e22e">Open&lt;/span>(&lt;span style="color:#a6e22e">otelTracedDriverName&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;user:password@tcp(localhost:3306)/database&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>When starting your application, you must create an OpenTelemetry exporter and a trace provider.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">otlptracegrpc&lt;/span>.&lt;span style="color:#a6e22e">NewClient&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otlpTraceExporter&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">otlptrace&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#a6e22e">client&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> panic(&lt;span style="color:#e6db74">&amp;#34;Failed to initialize tracing&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">batchSpanProcessor&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">NewBatchSpanProcessor&lt;/span>(&lt;span style="color:#a6e22e">otlpTraceExporter&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">tracerProvider&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">NewTracerProvider&lt;/span>(&lt;span style="color:#a6e22e">trace&lt;/span>.&lt;span style="color:#a6e22e">WithSpanProcessor&lt;/span>(&lt;span style="color:#a6e22e">batchSpanProcessor&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">otel&lt;/span>.&lt;span style="color:#a6e22e">SetTracerProvider&lt;/span>(&lt;span style="color:#a6e22e">tracerProvider&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="launch-jaeger">&lt;a href="#launch-jaeger" class="header-anchor">&lt;/a>Launch Jaeger
&lt;/h2>&lt;p>To view traces, you need to launch Jaeger. You can run Jaeger locally using Docker. Based on the
&lt;a class="link" href="https://www.jaegertracing.io/docs/1.62/getting-started/" target="_blank" rel="noopener"
>Jaeger 1.62 Getting Started guide&lt;/a>, you can run the following
command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker run --rm --name jaeger &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -p 16686:16686 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span> -p 4317:4317 &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>jaegertracing/all-in-one:1.62.0
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In our example, we are only exposing two ports:&lt;/p>
&lt;ul>
&lt;li>&lt;code>4317&lt;/code> for the Jaeger collector, which receives trace data using OpenTelemetry Protocol (OTLP) over gRPC&lt;/li>
&lt;li>&lt;code>16686&lt;/code> for the Jaeger UI&lt;/li>
&lt;/ul>
&lt;h2 id="launch-your-application">&lt;a href="#launch-your-application" class="header-anchor">&lt;/a>Launch your application
&lt;/h2>&lt;p>Before starting your application, you must set the OpenTelemetry endpoint to send traces to Jaeger. For example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>export OTEL_SERVICE_NAME&lt;span style="color:#f92672">=&lt;/span>fleet
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>export OTEL_EXPORTER_OTLP_ENDPOINT&lt;span style="color:#f92672">=&lt;/span>http://localhost:4317
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Now, you can start your application.&lt;/p>
&lt;h2 id="view-traces-in-jaeger">&lt;a href="#view-traces-in-jaeger" class="header-anchor">&lt;/a>View traces in Jaeger
&lt;/h2>&lt;p>Open your browser and navigate to &lt;a class="link" href="http://localhost:16686" target="_blank" rel="noopener"
>http://localhost:16686&lt;/a> to view traces in the Jaeger UI.
Select your &lt;strong>Service&lt;/strong> name and click &lt;strong>Find Traces&lt;/strong>.&lt;/p>
&lt;p>You can click into a trace to view the details of each span. You can see the duration, logs, and tags for each span. The
example below shows the HTTP request details and multiple SQL queries.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/opentelemetry-with-jaeger/example-jaeger-trace.png"
alt="Fleet hosts request with SQL queries to sessions, users, user_teams, and host tables.">
&lt;/figure>
&lt;h2 id="use-cases-for-opentelemetry-and-jaeger">&lt;a href="#use-cases-for-opentelemetry-and-jaeger" class="header-anchor">&lt;/a>Use cases for OpenTelemetry and Jaeger
&lt;/h2>&lt;p>In a local software development environment, OpenTelemetry and Jaeger can be used to:&lt;/p>
&lt;ul>
&lt;li>Fix bottlenecks and latency issues&lt;/li>
&lt;li>Understand how requests flow through your system&lt;/li>
&lt;/ul>
&lt;p>If a bottleneck is known or suspected, Jaeger can help you identify the root cause. For example, you can see which
database queries are taking the most time and optimize them.&lt;/p>
&lt;p>When developing new features, Jaeger can help you understand how requests flow through your system. This telemetry data
provides a quick check to ensure your new feature works as expected.&lt;/p>
&lt;p>In a production environment, OpenTelemetry and Jaeger can be used to:&lt;/p>
&lt;ul>
&lt;li>Monitor and profile your applications&lt;/li>
&lt;li>Troubleshoot performance issues&lt;/li>
&lt;li>Optimize your applications and improve user experience&lt;/li>
&lt;li>Ensure your applications meet service level objectives (SLOs)&lt;/li>
&lt;/ul>
&lt;h2 id="problems-with-opentelemetry-and-jaeger">&lt;a href="#problems-with-opentelemetry-and-jaeger" class="header-anchor">&lt;/a>Problems with OpenTelemetry and Jaeger
&lt;/h2>&lt;p>OpenTelemetry and Jaeger are powerful tools, yet their development use seems limited to fixing performance bottlenecks.
They cannot be used for general debugging out of the box since they don&amp;rsquo;t provide enough detail for each specific
request, such as the request body.&lt;/p>
&lt;p>In addition, missing spans can be a problem. If your application is not instrumented correctly, you may not see all the
spans you expect or know about in Jaeger. Our application lacks spans for some API endpoints, Redis transactions,
outbound HTTP requests, and asynchronous processes. Adding all of these spans requires additional development and QA
efforts.&lt;/p>
&lt;p>The Jaeger UI itself is basic and lacks some features. For example, regex search is missing out of the box, unless
Elasticsearch/OpenSearch storage is added.&lt;/p>
&lt;p>Our chosen SQL instrumentation library, &lt;a class="link" href="https://github.com/XSAM/otelsql" target="_blank" rel="noopener"
>github.com/XSAM/otelsql&lt;/a>, could be better. It
does not provide a way to trace the transaction lifecycle, and it creates many spans at the root level, clogging the
Jaeger UI.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../opentelemetry-for-devs/" >OpenTelemetry: A developer&amp;rsquo;s best friend for production-ready code&lt;/a>&lt;/strong>&lt;br>
How we changed our minds about OpenTelemetry and now advocate for developers to use it during development.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../software-load-testing/" >Top 5 metrics for software load testing performance&lt;/a>&lt;/strong>&lt;br>
Essential metrics to track when evaluating your application&amp;rsquo;s performance under load.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../optimizing-performance-of-go-app/" >How to benchmark performance of Go serializers&lt;/a>&lt;/strong>&lt;br>
Learn effective techniques for measuring and optimizing Go code performance.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="example-code-on-github">&lt;a href="#example-code-on-github" class="header-anchor">&lt;/a>Example code on GitHub
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/fleetdm/fleet/tree/6bc0b5dcd9214c6e3ff94fe657947aeccbdad352" target="_blank" rel="noopener"
>Fleet Device Management repo with OpenTelemetry instrumentation (as of this writing)&lt;/a>&lt;/p>
&lt;h2 id="watch-opentelemetry-with-jaeger-video">&lt;a href="#watch-opentelemetry-with-jaeger-video" class="header-anchor">&lt;/a>Watch OpenTelemetry with Jaeger video
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/eQhdvU2gsmQ"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item></channel></rss>