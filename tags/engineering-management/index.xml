<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Engineering Management on Victor on Software</title><link>https://victoronsoftware.com/tags/engineering-management/</link><description>Recent content in Engineering Management on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 16 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/engineering-management/index.xml" rel="self" type="application/rss+xml"/><item><title>Will AI agents replace software developers?</title><link>https://victoronsoftware.com/posts/will-ai-agents-replace-developers/</link><pubDate>Wed, 16 Jul 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/will-ai-agents-replace-developers/</guid><description>&lt;img src="https://victoronsoftware.com/posts/will-ai-agents-replace-developers/ai-agents-replace-developers-headline.png" alt="Featured image of post Will AI agents replace software developers?" />&lt;p>&lt;strong>TL;DR:&lt;/strong> AI coding agents are becoming mainstream, but their impact is focused mainly on implementation and automated
testing. Productivity gains are real but capped, and engineers must still actively guide and supervise these tools.
Complete developer replacement is unlikely anytime soon.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="#requirements-gathering" >Requirements gathering&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#design" >Design&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#implementation" >Implementation&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#testing" >Testing&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#deployment" >Deployment&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#maintenance" >Maintenance&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#ai-coding-agent-impact-across-the-sdlc" >AI coding agent impact across the SDLC&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#will-ai-coding-agents-replace-software-developers" >Will AI coding agents replace software developers?&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="introduction">&lt;a href="#introduction" class="header-anchor">&lt;/a>Introduction
&lt;/h2>&lt;p>AI is no longer just autocomplete. With AI coding agents, it is becoming a collaborator. But what happens when that
collaborator starts writing and testing entire chunks of your codebase? Will software engineers become managers of
fleets of AI agents, or will their jobs evolve in less dramatic ways?&lt;/p>
&lt;p>Our previous article covered the &lt;a class="link" href="../ai-for-software-developers/" >AI trends in the first half of 2025&lt;/a>. Using AI for
code completion and code generation was becoming mainstream. Today, in the second half of 2025, we can expect most
software developers to be using AI, off and on, for these tasks. But what about using AI coding agents to make
significant changes to the codebase, including automatically running and fixing tests? Recent surveys show that most
software engineers are NOT using AI agents. With AI code completion tools like GitHub Copilot being widely adopted
within about one year, we can reasonably assume that AI agents will likewise be widely adopted by the second half
of 2026. With that in mind, what will a typical engineer&amp;rsquo;s day look like in 2026?&lt;/p>
&lt;h3 id="ai-tools-adoption-timeline-in-software-development">&lt;a href="#ai-tools-adoption-timeline-in-software-development" class="header-anchor">&lt;/a>AI tools adoption timeline in software development
&lt;/h3>&lt;pre class="mermaid">
timeline
2022-2023 : GitHub Copilot Launch
: Early AI code completion
: Developer experimentation
2024 : Code completion mainstream
: ChatGPT for development
: Basic code generation
2025 : Advanced code generation
: AI debugging tools
: Early AI agents (experimental)
2026 : AI agents widely adopted
: Automated testing with AI
: AI code review assistants
2027+ : AI-native development workflows
: Advanced agent orchestration
: Full SDLC integration
&lt;/pre>
&lt;p>Let&amp;rsquo;s walk through the software development lifecycle (SDLC) and understand where these new AI coding agents can be
used. We will focus specifically on the new capabilities that AI coding agents bring, and not on the existing and
largely mainstream capabilities of AI code completion and chatbots.&lt;/p>
&lt;pre class="mermaid">
---
title: SDLC
---
graph LR
Requirements[Requirements gathering] --&amp;gt; Design[Design]
Design --&amp;gt; Implementation[Implementation]
Implementation --&amp;gt; Testing[Testing]
Testing --&amp;gt; Deployment[Deployment]
Deployment --&amp;gt; Maintenance[Maintenance]
%% Color coding based on AI agent impact level
%% Low impact - light blue
%% Medium impact - yellow/orange
%% High impact - green
classDef lowImpact fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000
classDef mediumImpact fill:#fff3e0,stroke:#f57c00,stroke-width:2px,color:#000
classDef highImpact fill:#e8f5e8,stroke:#388e3c,stroke-width:2px,color:#000
class Requirements,Deployment lowImpact
class Design,Maintenance mediumImpact
class Implementation,Testing highImpact
&lt;/pre>
&lt;h2 id="requirements-gathering">&lt;a href="#requirements-gathering" class="header-anchor">&lt;/a>Requirements gathering
&lt;/h2>&lt;p>In requirements gathering, we need to figure out why we are adding a feature and what the feature is, at a high level.
We have two major sources of product features. The first one is a strategic feature that will open up new sources of
revenue for us. The second is a customer request, which we must build to keep our customers happy. A single feature
could be both of these.&lt;/p>
&lt;p>To understand the customer, we actually need to talk to the customer. Barring that, we could do market analysis to see
what similar features our competition has. ChatGPT can speed up this process by aggregating and explaining the
information. In this case, ChatGPT makes research more efficient, much like Google made research more efficient than
going to the library. But this is not a new AI use case. Product managers have been using AI to speed up their work for
years now.&lt;/p>
&lt;p>As far as figuring out what we&amp;rsquo;re building and why, AI coding agents may have little to add. That said, they may have
some use cases, such as writing a script to fetch and analyze data from a public API.&lt;/p>
&lt;p>&lt;em>Note:&lt;/em> Requirements gathering combines the planning and requirements analysis phases, assuming we use a fast-paced
Agile iterative process.&lt;/p>
&lt;h2 id="design">&lt;a href="#design" class="header-anchor">&lt;/a>Design
&lt;/h2>&lt;p>In the design phase, we get into the details of what we&amp;rsquo;re building. We specify the UI requirements, API changes,
integrations with other services, and other technical requirements.&lt;/p>
&lt;h3 id="spike-stories-and-proof-of-concepts-pocs">&lt;a href="#spike-stories-and-proof-of-concepts-pocs" class="header-anchor">&lt;/a>Spike stories and proof of concepts (POCs)
&lt;/h3>&lt;p>Often, there are enough uncertainties in the feature that software engineers must do a spike story or build a POC. A
spike story is an Agile user story to research a technical question. Spike stories uncover things like:&lt;/p>
&lt;ul>
&lt;li>Technical feasibility (e.g., can we use TPM to sign HTTP messages?)&lt;/li>
&lt;li>Implementation approach (e.g., should we use webhooks or polling?)&lt;/li>
&lt;li>Integration behavior (e.g., how does this 3rd party API handle pagination and errors?)&lt;/li>
&lt;li>Tool or library evaluation (e.g., does this 3rd party library provide all the features we need?)&lt;/li>
&lt;li>Unknown complexities or risk (e.g., will this actually work?)&lt;/li>
&lt;/ul>
&lt;p>In a spike story or POC, we often write quick throwaway code without other architectural considerations, such as
maintainability. And this is where AI coding agents can help. Theoretically, an AI coding agent can create a whole POC
with only a cursory review from the software developer. But this is an extreme case. In most cases, the work will be a
mix of coding, reviewing technical documentation, searching the web, and talking with ChatGPT.&lt;/p>
&lt;p>So, with the help of an AI coding agent, we could finish our spike story faster. If the work was timeboxed, the end
result should be higher quality.&lt;/p>
&lt;h3 id="final-design">&lt;a href="#final-design" class="header-anchor">&lt;/a>Final design
&lt;/h3>&lt;p>After the spike story, we still need to finish the design, providing all the technical specifications required for
estimation and implementation. These details include an understanding of how this feature interacts with all the other
parts of our application, such as:&lt;/p>
&lt;ul>
&lt;li>UI&lt;/li>
&lt;li>configuration&lt;/li>
&lt;li>authentication&lt;/li>
&lt;li>monitoring and logging&lt;/li>
&lt;li>error handling&lt;/li>
&lt;li>scalability and performance&lt;/li>
&lt;li>internationalization&lt;/li>
&lt;/ul>
&lt;p>Although some of these aspects are shared between features, we, as software developers, still need to consider and
investigate the new feature&amp;rsquo;s implications. AI coding agents are of little help here, besides providing boilerplate
requirements.&lt;/p>
&lt;h2 id="implementation">&lt;a href="#implementation" class="header-anchor">&lt;/a>Implementation
&lt;/h2>&lt;p>After the feature has been designed and estimated, it is time to get down to the work of coding. Can an AI agent do all
of this? Well, we may not be able to take the design and feed it to our agent. A product manager or another engineer may
have done the design, and this design may lack enough details for implementation. So we have to add details, like:&lt;/p>
&lt;ul>
&lt;li>Function names (e.g., &lt;code>sendEmailNotification&lt;/code>)&lt;/li>
&lt;li>Constant and enum names (e.g., &lt;code>RoleAdmin&lt;/code>)&lt;/li>
&lt;li>File and package structure (e.g., &lt;code>handlers/user.go&lt;/code>)&lt;/li>
&lt;li>Error handling strategy (e.g., wrap errors and add context)&lt;/li>
&lt;li>Interface design (e.g., create a new interface to simplify testing)&lt;/li>
&lt;li>Security considerations (e.g., validate inputs)&lt;/li>
&lt;/ul>
&lt;p>Yes, an AI coding agent may indeed come up with some of these on its own. However, we must consciously consider these to
ensure our codebase is maintainable, testable, scalable, and handles corner cases.&lt;/p>
&lt;p>So, once we know what we need to code, we can write a prompt to the AI coding agent and let it do its work. Today&amp;rsquo;s AI
coding agents are not very fast. In our experience, we ask an AI agent to do a chunk of work, and it completes it in
several minutes. Then we do a brief review of what it did and come back to it with corrections. Corrections often
include things like:&lt;/p>
&lt;ul>
&lt;li>Using the correct coding standards for our codebase&lt;/li>
&lt;li>Removing unneeded code (e.g., handling cases that we know cannot happen)&lt;/li>
&lt;li>Removing/merging duplicate code&lt;/li>
&lt;li>Using better names for functions/variables (e.g., don&amp;rsquo;t use &lt;code>err2&lt;/code>)&lt;/li>
&lt;/ul>
&lt;p>If we let the AI agent do a bigger chunk of work (30+ minutes), there is a greater chance that it will go off the rails,
and all the work must be redone. For example, an AI agent could decide to implement a third-party library itself because
it couldn&amp;rsquo;t figure out how to use the existing one.&lt;/p>
&lt;pre class="mermaid">
---
title: AI agent development workflow
---
flowchart TD
A[Developer writes prompt] --&amp;gt; B[AI agent codes&amp;lt;br/&amp;gt;3-5 minutes]
B --&amp;gt; C[Human reviews code]
C --&amp;gt; D{Code acceptable?}
D --&amp;gt;|No| E[Developer provides&amp;lt;br/&amp;gt;corrections]
E --&amp;gt; B
D --&amp;gt;|Yes| F[Final code review]
F --&amp;gt; G[Ask AI agent to review code]
G --&amp;gt; H[Human peer review]
H --&amp;gt; I[Ready for QA]
%% Styling
classDef humanTask fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#000
classDef aiTask fill:#fff3e0,stroke:#f57c00,stroke-width:2px,color:#000
classDef reviewTask fill:#e8f5e8,stroke:#388e3c,stroke-width:2px,color:#000
class A,C,E,F,H humanTask
class B,G aiTask
class D,I reviewTask
&lt;/pre>
&lt;p>Once we reach a good stopping point, we need to review all the code changes that we and our AI agent have made. Since
much of the code was autogenerated, we must take extra care to do a thorough review. The goal is to fully understand the
implementation so that we can speak about it as if we coded all of it ourselves.&lt;/p>
&lt;p>Once we have checked in the code or opened a PR, we can ask another AI agent to review it. With multiple LLMs and coding
agents out there, it is good practice to have one AI agent check the work of another AI agent for anything that we may
have missed. Unfortunately, this means wading through a few false positives. However, the end result is higher-quality
code that is ready for one of our peers to review.&lt;/p>
&lt;h3 id="multitasking-with-multiple-ai-agents">&lt;a href="#multitasking-with-multiple-ai-agents" class="header-anchor">&lt;/a>Multitasking with multiple AI agents
&lt;/h3>&lt;p>Some developers report using multiple AI agents to work on numerous projects simultaneously. In our workflow, this
approach is not practical. We know from behavioral science research that it takes a human up to 15 minutes to entirely
switch between different tasks because they must reload and recall all of the context associated with the new task into
their brain. So, if we switch between tasks every 5-10 minutes, the result is that we&amp;rsquo;re never deeply engaged with any
of these tasks, likely leading to lower quality software.&lt;/p>
&lt;p>Perhaps two AI coding agents can work on two tasks for the same feature. However, in this case, the two tasks must be
independent, which is more of an exception than the norm.&lt;/p>
&lt;p>Even if we decide to save some time by switching from AI agent coding to a longer task, such as a code review for one of
our peers, when we return to the agent, we will need to recall what we told the agent to do and what our expectations
were.&lt;/p>
&lt;h3 id="integration-with-the-rest-of-the-codebase">&lt;a href="#integration-with-the-rest-of-the-codebase" class="header-anchor">&lt;/a>Integration with the rest of the codebase
&lt;/h3>&lt;p>A lot of software development work involves hooking up the feature into the existing codebase. For example, we need to
create the new object and properly do dependency injection. These things often only take a few lines of code. Although
AI coding agents can do these integrations, it is often just as fast and more reliable to manually code these smaller
snippets.&lt;/p>
&lt;h3 id="full-stack-development">&lt;a href="#full-stack-development" class="header-anchor">&lt;/a>Full stack development
&lt;/h3>&lt;p>AI coding agents can help you write in a programming language you&amp;rsquo;re unfamiliar with. The agent will do the brunt work,
getting the syntax (mostly) right, and you can review the code to make sure it looks reasonable. This means software
developers can easily expand beyond their functional specialty into other languages and parts of the codebase.&lt;/p>
&lt;p>From an SDLC perspective, a single feature is now more likely to be assigned to a single developer instead of being
partitioned across backend/frontend or server/client boundaries. In this case, a single developer should be able to
finish a feature faster, without the handoffs and the issues they entail.&lt;/p>
&lt;p>Overall, AI coding agents can significantly help speed up the implementation phase. However, we must note that AI agent
effectiveness varies by task. Specifically, agents struggle with complex/niche designs and unfamiliar contexts.&lt;/p>
&lt;h2 id="testing">&lt;a href="#testing" class="header-anchor">&lt;/a>Testing
&lt;/h2>&lt;p>The two main testing areas are automated tests, including unit and integration tests, and manual tests.&lt;/p>
&lt;h3 id="automated-unit-tests">&lt;a href="#automated-unit-tests" class="header-anchor">&lt;/a>Automated (unit) tests
&lt;/h3>&lt;p>Writing tests has been a primary use case for generative AI over the past few years. So, given detailed instructions
regarding the scenarios to test, an AI coding agent should be able to write the test, run the test, and fix any issues.
The software developer will still need to review and adjust the tests. Some common problems with agent-generated tests
include:&lt;/p>
&lt;ul>
&lt;li>Not following project standards regarding the test helper methods being used (e.g., wrong HTTP client, wrong assert
method)&lt;/li>
&lt;li>Wordy and hard to maintain tests (e.g., not following a table test approach, not using subtests)&lt;/li>
&lt;li>Duplicated tests (e.g., testing a case that was covered elsewhere in the test suite)&lt;/li>
&lt;li>Using numbers in test variables instead of descriptive names (e.g., rsp1, err2)&lt;/li>
&lt;li>Not actually testing anything (e.g., hard-coding test expectations in the source implementation)&lt;/li>
&lt;/ul>
&lt;p>The AI agent may come up with some corner cases to test, but it cannot be relied on for full functional correctness.
Since the AI agent can see the implementation, it often bases its tests on what has been implemented. It lacks an
understanding of the intended requirements and, hence, what should be tested.&lt;/p>
&lt;h3 id="manual-tests">&lt;a href="#manual-tests" class="header-anchor">&lt;/a>Manual tests
&lt;/h3>&lt;p>Before handing over the implementation to the QA team, the software developer should review the test plan themselves and
perform all the manual tests. Any issues found can be candidates for additional automated tests.&lt;/p>
&lt;p>There is no AI agent today that can replace manual testers, but engineers can try to take advantage of AI to help in
some areas:&lt;/p>
&lt;ul>
&lt;li>Convert natural language to test steps&lt;/li>
&lt;li>Identify visual (UI) regressions&lt;/li>
&lt;li>Accessibility testing&lt;/li>
&lt;li>Auto-healing tests: updating tests when UI changes&lt;/li>
&lt;/ul>
&lt;p>So, for the testing phase, AI coding agents provide much help with creating and fixing automated tests, but not so much
with manual testing.&lt;/p>
&lt;h2 id="deployment">&lt;a href="#deployment" class="header-anchor">&lt;/a>Deployment
&lt;/h2>&lt;p>Before deploying the app to customers, engineers should do a release readiness check covering items like:&lt;/p>
&lt;ul>
&lt;li>All committed features implemented&lt;/li>
&lt;li>Testing and QA complete&lt;/li>
&lt;li>Security checks passed&lt;/li>
&lt;li>Load testing complete&lt;/li>
&lt;/ul>
&lt;p>After deployment, engineers should conduct smoke tests and health checks to ensure the app is working.&lt;/p>
&lt;p>In addition, deployment involves communication tasks, such as:&lt;/p>
&lt;ul>
&lt;li>demos, guides, FAQs&lt;/li>
&lt;li>release notes and changelogs&lt;/li>
&lt;/ul>
&lt;p>Generative AI is being used to generate some communication content. AI coding agents can provide little additional value
in the deployment phase.&lt;/p>
&lt;h2 id="maintenance">&lt;a href="#maintenance" class="header-anchor">&lt;/a>Maintenance
&lt;/h2>&lt;p>The maintenance phase of the software development lifecycle includes:&lt;/p>
&lt;ul>
&lt;li>Answering customer and internal questions&lt;/li>
&lt;li>Responding to alerts and incidents (e.g., investigating high CPU usage, resolving a failed background job)&lt;/li>
&lt;li>Reproducing and fixing customer-reported bugs&lt;/li>
&lt;/ul>
&lt;p>AI search tools have been helpful with searching the codebase and documentation to answer questions. Some upcoming tools
are trying to close the loop between production monitoring and source code fixes, and this is a great area to watch.
Reproducing bugs is still very much a manual process.&lt;/p>
&lt;p>Fixing bugs is an implementation task, so AI coding agents can help create the fix and a unit test. However, bug fixes
tend to be small in nature, with most of the software engineer&amp;rsquo;s time spent figuring out where the bug is and how best
to fix it.&lt;/p>
&lt;h2 id="ai-coding-agent-impact-across-the-sdlc">&lt;a href="#ai-coding-agent-impact-across-the-sdlc" class="header-anchor">&lt;/a>AI coding agent impact across the SDLC
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>SDLC Phase&lt;/th>
&lt;th>AI Agent Impact&lt;/th>
&lt;th>🔍 Notes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>📝 Requirements&lt;/td>
&lt;td>❌ Low&lt;/td>
&lt;td>Some research support, but little for strategic/product thinking&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>🧠 Design&lt;/td>
&lt;td>⚠️ Low–Medium&lt;/td>
&lt;td>Help limited to spike stories and boilerplate&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>💻 Implementation&lt;/td>
&lt;td>✅ High&lt;/td>
&lt;td>Most benefit seen here (code gen, agent pair programming)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>🧪 Automated Testing&lt;/td>
&lt;td>✅ High&lt;/td>
&lt;td>Strong at generating/fixing tests, needs human oversight&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>🧍 Manual Testing&lt;/td>
&lt;td>❌ Low&lt;/td>
&lt;td>Still mostly a human-driven process&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>🚀 Deployment&lt;/td>
&lt;td>❌ Low&lt;/td>
&lt;td>Some help with writing release notes, limited technical role&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>🔧 Maintenance&lt;/td>
&lt;td>⚠️ Medium&lt;/td>
&lt;td>Good at fixes; weak at reproducing or analyzing issues&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="risk-and-tradeoffs">&lt;a href="#risk-and-tradeoffs" class="header-anchor">&lt;/a>Risk and tradeoffs
&lt;/h2>&lt;p>While AI coding agents offer clear benefits, they also introduce new risks and tradeoffs that teams must actively
manage:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Shallow code understanding&lt;/strong>: Engineers may be tempted to rely on agents without fully understanding the generated
code. This erodes accountability and leads to slower debugging when issues arise.&lt;/li>
&lt;li>&lt;strong>Inconsistent quality&lt;/strong>: Agent-generated code can be verbose, redundant, or subtly incorrect. Without careful review,
these issues can slip into production.&lt;/li>
&lt;li>&lt;strong>Developer deskilling&lt;/strong>: Over-reliance on agents may reduce hands-on practice with fundamentals, particularly for
junior engineers who are still developing intuition.&lt;/li>
&lt;li>&lt;strong>Security and compliance&lt;/strong>: Agents can unknowingly introduce vulnerabilities or use unsafe patterns, especially when
integrating with third-party APIs or handling sensitive data.&lt;/li>
&lt;/ul>
&lt;p>In short, AI agents amplify output, but without discipline and oversight, they can amplify problems too. Teams must
treat agent-generated code with &lt;strong>greater&lt;/strong> rigor than human-written code.&lt;/p>
&lt;h2 id="will-ai-coding-agents-replace-software-developers">&lt;a href="#will-ai-coding-agents-replace-software-developers" class="header-anchor">&lt;/a>Will AI coding agents replace software developers?
&lt;/h2>&lt;p>Recent studies suggest that current AI tools improve productivity by 10% to 20%.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://arxiv.org/abs/2410.12944" target="_blank" rel="noopener"
>AI speeds up Google engineers by 21%&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://nypost.com/2025/03/14/business/jpmorgan-credits-coding-assistant-tool-for-boosting-engineers-efficiency/" target="_blank" rel="noopener"
>JPMorgan claims AI boosts efficiency by up to 20%&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.itpro.com/software/development/atlassian-says-ai-has-created-an-unexpected-paradox-for-software-developers-theyre-saving-over-10-hours-a-week-but-theyre-still-overworked-and-losing-an-equal-amount-of-time-due-to-organizational-inefficiencies" target="_blank" rel="noopener"
>Atlassian says AI is saving over 10 hours per week&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.reuters.com/business/ai-slows-down-some-experienced-software-developers-study-finds-2025-07-10" target="_blank" rel="noopener"
>AI slows down some developers&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>So, will the productivity improvements jump with AI coding agents becoming mainstream? Will one engineer be able to do
the work of a whole team?&lt;/p>
&lt;p>Looking at the whole software development process, we see that the most significant gains from AI coding agents are in
the implementation and automated testing phases. The consensus from studies and industry reports is that software
engineers spend only about 30% of their time writing code. The rest of the time is spent in the other phases of the
SDLC, as well as on other tasks such as:&lt;/p>
&lt;ul>
&lt;li>attending and preparing for meetings (e.g., planning, retros, 1:1s)&lt;/li>
&lt;li>mentoring, teaching, and continuous learning&lt;/li>
&lt;li>context switching and task juggling&lt;/li>
&lt;li>recruiting, interviewing, and candidate evaluation&lt;/li>
&lt;li>writing or reviewing internal documentation, ADRs, and RFCs&lt;/li>
&lt;li>developer advocacy, blogging, and community engagement&lt;/li>
&lt;li>travel for conferences, offsites, or customer visits&lt;/li>
&lt;li>improving tooling, automation, and developer environments&lt;/li>
&lt;/ul>
&lt;p>Even assuming AI agents completely automate coding tasks (30% of work), the maximum productivity gain would be 43%: if
70% of work remains unchanged, then 30% time savings translates to doing 1.43x the work. In other words, 7 people can
now do the work of 10 people. This is far from the popular claims that AI will replace all software engineers.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/will-ai-agents-replace-developers/productivity-gain.svg">
&lt;/figure>
&lt;p>In summary, AI in general and AI coding agents in particular should continue to have a noticeable impact on software
developer productivity. However, developers&amp;rsquo; work is complex and varied, and AI can only provide efficiency improvements
and not wholesale replacement. AI coding agents won&amp;rsquo;t replace developers, but developers who know how to use them will
replace those who don&amp;rsquo;t.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../ai-for-software-developers/" >How to use AI for software development (2025)&lt;/a>&lt;/strong>&lt;br>
&lt;em>What every software engineer needs to know about AI right now: code completion, generation, and AI agents.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;a class="link" href="../introducing-mcp/" >Introducing MCP: Lessons from building an AI-driven server&lt;/a>&lt;/strong>&lt;br>
&lt;em>How we taught an AI agent to use our product with MCP.&lt;/em>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="watch-us-discuss-whether-ai-agents-can-replace-software-developers">&lt;a href="#watch-us-discuss-whether-ai-agents-can-replace-software-developers" class="header-anchor">&lt;/a>Watch us discuss whether AI agents can replace software developers
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/fdBxpWXajSE"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>Full-featured engineering metrics—for free</title><link>https://victoronsoftware.com/posts/engineering-metrics-no-cost/</link><pubDate>Fri, 16 May 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/engineering-metrics-no-cost/</guid><description>&lt;img src="https://victoronsoftware.com/posts/engineering-metrics-no-cost/engineering-metrics-headline.png" alt="Featured image of post Full-featured engineering metrics—for free" />&lt;p>Tracking engineering metrics doesn&amp;rsquo;t have to mean signing up for another expensive SaaS tool. This guide will show you
how to build a flexible, powerful, and completely free metrics dashboard using open-source tools like Grafana and a fast
analytical database. Whether you&amp;rsquo;re monitoring cycle time, bug fix velocity, or pull request activity, this setup gives
you deep visibility that your team will actually want to look at.&lt;/p>
&lt;p>In our previous &lt;a class="link" href="../track-engineering-metrics/" >engineering metrics guide&lt;/a>, we showed a basic way to track metrics using
GitHub Actions and the Google Sheets API. The data in Google Sheets can be visualized using a tool like
&lt;a class="link" href="https://lookerstudio.google.com/" target="_blank" rel="noopener"
>Google&amp;rsquo;s Looker Studio&lt;/a>. However, we wanted more powerful visualizations that could
be dynamically sliced, diced, and drilled down into. Also, we wanted the tools to be free so we wouldn&amp;rsquo;t need to justify
the costs to our management.&lt;/p>
&lt;h2 id="the-free-engineering-benchmarks-stack">&lt;a href="#the-free-engineering-benchmarks-stack" class="header-anchor">&lt;/a>The free engineering benchmarks stack
&lt;/h2>&lt;p>As in our previous example, we used &lt;a class="link" href="https://github.com/features/actions" target="_blank" rel="noopener"
>GitHub Actions&lt;/a> to schedule our metrics
collection and compute the data we wanted to track.&lt;/p>
&lt;p>For visualizations, we decided on &lt;a class="link" href="https://grafana.com/oss/grafana/" target="_blank" rel="noopener"
>Grafana&lt;/a>. Grafana is a leader in visualizing data,
is open source, and can be self-hosted. We used Grafana&amp;rsquo;s free cloud tier for this example since we didn&amp;rsquo;t want to spin
up any infrastructure ourselves.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/engineering-metrics-no-cost/grafana-cloud-free.png"
alt="Free observability plan with generous limits: 10k metrics, 50GB logs, 50GB traces, 50GB profiles, 500 VUh of k6 testing, 50k frontend sessions, 2,232 app observability host hours, 2,232 Kubernetes monitoring host hours, 37,944 container hours, 14-day data retention, and support for 3 active users.">
&lt;/figure>
&lt;p>However, the problem with Grafana Cloud&amp;rsquo;s free tier is that data is retained for only 14 days. We wanted to keep and
compare our engineering metrics year over year. Due to its generous free tier, we decided to use
&lt;a class="link" href="https://cloud.google.com/bigquery?hl=en" target="_blank" rel="noopener"
>Google&amp;rsquo;s BigQuery&lt;/a> analytics database.&lt;/p>
&lt;ul>
&lt;li>Storage: The first 10 GiB per month is free.&lt;/li>
&lt;li>Queries: The first 1 TiB of query data processed per month is free.&lt;/li>
&lt;/ul>
&lt;p>We created a project in Google Cloud Console, created a dataset (github_metrics), made a service account with BigQuery
roles, and created a JWT key for the service account to use with our app.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/engineering-metrics-no-cost/bigquery-service-account.png"
alt="Roles for the BigQuery service account.">
&lt;/figure>
&lt;p>&lt;em>Note:&lt;/em> BigQuery has a sandbox mode that does not require a credit card. However, it has some API limitations. We
recommend enabling billing on the account and monitoring your usage to ensure you stay within the free limits.&lt;/p>
&lt;h2 id="picking-the-metric-to-track-pickup-time">&lt;a href="#picking-the-metric-to-track-pickup-time" class="header-anchor">&lt;/a>Picking the metric to track: pickup time
&lt;/h2>&lt;p>There are many engineering benchmark metrics we could have started with, but we decided to start with one that we&amp;rsquo;ve
been keenly aware of at many points in our development life. When developers finish implementing and testing their
feature and put it up for review, sometimes the PR sits there for days at a time. This waiting time is a frustrating
experience for developers, especially if they or others depend on those changes to make progress in their work. This
time to review has a direct impact on engineering velocity.&lt;/p>
&lt;p>We define pickup time as the time from when the PR is marked as ready for review until the code review is done. The
reviewer does not need to approve the change; they can also reject or simply comment on it. We are measuring the time
from when the developer finishes their work until they get feedback on their work.&lt;/p>
&lt;h2 id="implementing-metrics-gathering">&lt;a href="#implementing-metrics-gathering" class="header-anchor">&lt;/a>Implementing metrics gathering
&lt;/h2>&lt;p>Since we knew our code would run in a GitHub Actions workflow, we implemented it as a
&lt;a class="link" href="../github-reusable-workflows-and-steps/#reusable-steps-composite-action" >reusable GitHub action&lt;/a>. We decided to use
JavaScript (not TypeScript) to simplify the action.&lt;/p>
&lt;p>We used the &lt;a class="link" href="https://github.com/octokit/octokit.js" target="_blank" rel="noopener"
>octokit.js GitHub API client&lt;/a> to fetch the pull requests from our
repo, extract the timeline events and review events from the PRs, and calculate the pickup time.&lt;/p>
&lt;p>In our initial review of the data, we noticed occasional spikes in pickup time on Mondays. That&amp;rsquo;s because pull requests
created on Friday were sitting around over the weekend until being reviewed on Monday. Since we don&amp;rsquo;t expect our
software developers to work weekends, we removed weekends from our calculations. Removing weekends was one of the most
time-consuming implementation details. We created a unit test to make sure we got the details right.&lt;/p>
&lt;p>We added a &lt;code>--print-only&lt;/code> option to our program to manually examine the data before we uploaded it to the analytical
database.&lt;/p>
&lt;p>To interface with BigQuery, we used &lt;a class="link" href="https://github.com/googleapis/nodejs-bigquery" target="_blank" rel="noopener"
>Google&amp;rsquo;s BigQuery Node.js client&lt;/a>.
Our table schema was:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">fields&lt;/span>&lt;span style="color:#f92672">:&lt;/span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;review_date&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;DATE&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">mode&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;REQUIRED&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;pr_creator&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;STRING&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">mode&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;REQUIRED&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;pr_url&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;STRING&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">mode&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;REQUIRED&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;pickup_time_seconds&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;INTEGER&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">mode&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;REQUIRED&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;repository&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;STRING&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">mode&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;REQUIRED&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;pr_number&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;INTEGER&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">mode&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;REQUIRED&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;target_branch&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;STRING&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">mode&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;REQUIRED&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;ready_time&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;TIMESTAMP&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">mode&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;REQUIRED&amp;#39;&lt;/span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> { &lt;span style="color:#a6e22e">name&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;first_review_time&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">type&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;TIMESTAMP&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">mode&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;REQUIRED&amp;#39;&lt;/span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>pr_number&lt;/code> was the primary key. Once we calculate and save the pickup time for a PR, we do not update it on future
runs.&lt;/p>
&lt;h2 id="creating-grafana-chart">&lt;a href="#creating-grafana-chart" class="header-anchor">&lt;/a>Creating Grafana chart
&lt;/h2>&lt;p>In Grafana, we created a data source connected to our BigQuery database. Then, we created a new dashboard with a new
pickup time chart. We had to decide how to visualize the data. We decided on:&lt;/p>
&lt;ul>
&lt;li>7-day moving average&lt;/li>
&lt;li>filter by time range&lt;/li>
&lt;li>filter by GitHub username&lt;/li>
&lt;li>filter by user group (e.g., engineering)&lt;/li>
&lt;li>include the PR numbers for each data point for drill down&lt;/li>
&lt;/ul>
&lt;p>We created Grafana variables to filter by username/group.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/engineering-metrics-no-cost/grafana-variables.png"
alt="List of Grafana dashboard variables, including user and user_group.">
&lt;/figure>
&lt;p>Creating the correct SQL query that gathered all the data and integrated with Grafana&amp;rsquo;s features took considerable time.
Below is the query we came up with:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">WITH&lt;/span> daily &lt;span style="color:#66d9ef">AS&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SELECT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DATE(first_review_time, &lt;span style="color:#e6db74">&amp;#34;America/Chicago&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">AS&lt;/span> &lt;span style="color:#66d9ef">day&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">COUNT&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#66d9ef">AS&lt;/span> pr_count,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SUM&lt;/span>(pickup_time_seconds) &lt;span style="color:#66d9ef">AS&lt;/span> total_seconds
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">FROM&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>engineering&lt;span style="color:#f92672">-&lt;/span>metrics&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">123456&lt;/span>.github_metrics.pr_pickup_time&lt;span style="color:#f92672">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">WHERE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> first_review_time &lt;span style="color:#66d9ef">BETWEEN&lt;/span> TIMESTAMP_SUB(TIMESTAMP_MILLIS(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>__from), INTERVAL &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#66d9ef">DAY&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> TIMESTAMP_MILLIS(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>__to)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- No filters selected: show all
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">OR&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">OR&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">OR&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- Only user filter applied
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">OR&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> pr_creator &lt;span style="color:#66d9ef">IN&lt;/span> &lt;span style="color:#66d9ef">UNNEST&lt;/span>(SPLIT(&lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">OR&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- Only user_group filter applied
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">OR&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> pr_creator &lt;span style="color:#66d9ef">IN&lt;/span> &lt;span style="color:#66d9ef">UNNEST&lt;/span>(SPLIT(&lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">OR&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- Both filters applied → take intersection
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> pr_creator &lt;span style="color:#66d9ef">IN&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SELECT&lt;/span> val &lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#66d9ef">UNNEST&lt;/span>(SPLIT(&lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)) val
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">INTERSECT&lt;/span> &lt;span style="color:#66d9ef">DISTINCT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SELECT&lt;/span> val &lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#66d9ef">UNNEST&lt;/span>(SPLIT(&lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>)) val
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">GROUP&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">day&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>calendar &lt;span style="color:#66d9ef">AS&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- Build list of days in the visible Grafana range
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">SELECT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">day&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">FROM&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">UNNEST&lt;/span>(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> GENERATE_DATE_ARRAY(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DATE(TIMESTAMP_MILLIS(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>__from)),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DATE(TIMESTAMP_MILLIS(&lt;span style="color:#960050;background-color:#1e0010">$&lt;/span>__to))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#66d9ef">AS&lt;/span> &lt;span style="color:#66d9ef">day&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>rolling_avg &lt;span style="color:#66d9ef">AS&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SELECT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">c&lt;/span>.&lt;span style="color:#66d9ef">day&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">TIMESTAMP&lt;/span>(CONCAT(&lt;span style="color:#66d9ef">CAST&lt;/span>(&lt;span style="color:#66d9ef">c&lt;/span>.&lt;span style="color:#66d9ef">day&lt;/span> &lt;span style="color:#66d9ef">AS&lt;/span> STRING), &lt;span style="color:#e6db74">&amp;#39; 12:00:00&amp;#39;&lt;/span>)) &lt;span style="color:#66d9ef">AS&lt;/span> time,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- True 7-day weighted average
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SELECT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SUM&lt;/span>(d.total_seconds)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">FROM&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> daily d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">WHERE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d.&lt;span style="color:#66d9ef">day&lt;/span> &lt;span style="color:#66d9ef">BETWEEN&lt;/span> DATE_SUB(&lt;span style="color:#66d9ef">c&lt;/span>.&lt;span style="color:#66d9ef">day&lt;/span>, INTERVAL &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#66d9ef">DAY&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> &lt;span style="color:#66d9ef">c&lt;/span>.&lt;span style="color:#66d9ef">day&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#f92672">/&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SELECT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SUM&lt;/span>(d.pr_count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">FROM&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> daily d
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">WHERE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> d.&lt;span style="color:#66d9ef">day&lt;/span> &lt;span style="color:#66d9ef">BETWEEN&lt;/span> DATE_SUB(&lt;span style="color:#66d9ef">c&lt;/span>.&lt;span style="color:#66d9ef">day&lt;/span>, INTERVAL &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#66d9ef">DAY&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> &lt;span style="color:#66d9ef">c&lt;/span>.&lt;span style="color:#66d9ef">day&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#f92672">/&lt;/span> &lt;span style="color:#ae81ff">3600&lt;/span> &lt;span style="color:#66d9ef">AS&lt;/span> moving_avg_hours
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">FROM&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> calendar &lt;span style="color:#66d9ef">c&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r.time,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r.moving_avg_hours,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- Optional: attach PR numbers per window
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">SELECT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ARRAY_AGG(&lt;span style="color:#66d9ef">DISTINCT&lt;/span> pr_number)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">FROM&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>engineering&lt;span style="color:#f92672">-&lt;/span>metrics&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">459517&lt;/span>.github_metrics.pr_pickup_time&lt;span style="color:#f92672">`&lt;/span> p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">WHERE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> DATE(p.first_review_time, &lt;span style="color:#e6db74">&amp;#34;America/Chicago&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">BETWEEN&lt;/span> DATE(DATE_SUB(r.time, INTERVAL &lt;span style="color:#ae81ff">6&lt;/span> &lt;span style="color:#66d9ef">DAY&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> DATE(r.time)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- No filters selected: show all
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (&lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">OR&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">OR&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">OR&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- Only user filter applied
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">OR&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> pr_creator &lt;span style="color:#66d9ef">IN&lt;/span> &lt;span style="color:#66d9ef">UNNEST&lt;/span>(SPLIT(&lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">OR&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- Only user_group filter applied
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">OR&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> pr_creator &lt;span style="color:#66d9ef">IN&lt;/span> &lt;span style="color:#66d9ef">UNNEST&lt;/span>(SPLIT(&lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">OR&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">-- Both filters applied → take intersection
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> (&lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;__all&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> &lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">AND&lt;/span> pr_creator &lt;span style="color:#66d9ef">IN&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SELECT&lt;/span> val &lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#66d9ef">UNNEST&lt;/span>(SPLIT(&lt;span style="color:#e6db74">&amp;#39;${user:csv}&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;,&amp;#39;&lt;/span>)) val
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">INTERSECT&lt;/span> &lt;span style="color:#66d9ef">DISTINCT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SELECT&lt;/span> val &lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#66d9ef">UNNEST&lt;/span>(SPLIT(&lt;span style="color:#e6db74">&amp;#39;${user_group:csv}&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;;&amp;#39;&lt;/span>)) val
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> )
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#66d9ef">AS&lt;/span> pr_numbers_window
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rolling_avg r
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ORDER&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> r.time
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In the above query, we used Grafana-specific variables such as &lt;code>$__from&lt;/code>, &lt;code>$__to&lt;/code>, &lt;code>${user:csv}&lt;/code>, etc.&lt;/p>
&lt;p>We also had to deal with the timestamp shift problem, where the chart data was off by 1 day, since we were stripping the
time from &lt;code>first_review_time&lt;/code> but displaying the data in local time (the day before UTC midnight). This statement
attempts to fix the problem by changing the time to noon: &lt;code>TIMESTAMP(CONCAT(CAST(c.day AS STRING), '12:00:00')) AS time&lt;/code>&lt;/p>
&lt;p>The final chart looked like this:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/engineering-metrics-no-cost/grafana-chart.png"
alt="7-day moving average of pickup time for Fleet&amp;#39;s engineering team.">
&lt;/figure>
&lt;p>We can inspect the data to drill down into the PR numbers for each data point:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/engineering-metrics-no-cost/grafana-inspect-data.png"
alt="Raw data from the database query, including PR numbers.">
&lt;/figure>
&lt;p>With the PR numbers, we can explore our data using the following query:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- Sample query to dig into the details. Replace the PR numbers list.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#f92672">`&lt;/span>engineering&lt;span style="color:#f92672">-&lt;/span>metrics&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">123456&lt;/span>.github_metrics.pr_pickup_time&lt;span style="color:#f92672">`&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">WHERE&lt;/span> pr_number &lt;span style="color:#66d9ef">IN&lt;/span> (&lt;span style="color:#ae81ff">28625&lt;/span>,&lt;span style="color:#ae81ff">28570&lt;/span>,&lt;span style="color:#ae81ff">28417&lt;/span>,&lt;span style="color:#ae81ff">28658&lt;/span>,&lt;span style="color:#ae81ff">28382&lt;/span>,&lt;span style="color:#ae81ff">28538&lt;/span>,&lt;span style="color:#ae81ff">28608&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ORDER&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> pickup_time_seconds &lt;span style="color:#66d9ef">DESC&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="creating-the-github-actions-workflow">&lt;a href="#creating-the-github-actions-workflow" class="header-anchor">&lt;/a>Creating the GitHub Actions workflow
&lt;/h2>&lt;p>Once everything worked, we set up a GitHub workflow to run daily and automatically update the metrics.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Collect PR Pickup Time Metrics&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schedule&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">cron&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;0 9 * * *&amp;#39;&lt;/span> &lt;span style="color:#75715e"># Run at 4am CDT (9am UTC)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">workflow_dispatch&lt;/span>: &lt;span style="color:#75715e"># Allow manual triggering&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">collect-metrics&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@v4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Set up Node.js&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-node@v4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">node-version&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;16&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">cache&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;npm&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Install dependencies&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">npm ci&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Create service account key file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#39;${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}&amp;#39; &amp;gt; service-account-key.json
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> # Verify the file is valid JSON
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> cat service-account-key.json | jq . &amp;gt; /dev/null&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Collect and upload metrics&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">./&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">github-token&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">config-path&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;./config.json&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">bigquery-project&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.BIGQUERY_PROJECT_ID }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">bigquery-dataset&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;github_metrics&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">bigquery-table&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;pr_pickup_time&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">target-branch&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;main&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">lookback-days&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;30&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">print-only&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;false&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GITHUB_TOKEN&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">BIGQUERY_PROJECT_ID&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.BIGQUERY_PROJECT_ID }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">SERVICE_ACCOUNT_KEY_PATH&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;./service-account-key.json&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="code-on-github">&lt;a href="#code-on-github" class="header-anchor">&lt;/a>Code on GitHub
&lt;/h2>&lt;p>Our code is available on GitHub at: &lt;a class="link" href="https://github.com/getvictor/pickup-time" target="_blank" rel="noopener"
>https://github.com/getvictor/pickup-time&lt;/a>&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="../code-complexity-metrics/" >How to spot and reduce code complexity&lt;/a>&lt;br>
A practical guide to the most useful metrics for understanding and improving code structure and maintainability.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="../readable-code/" >Turning messy code into clean, readable systems&lt;/a>&lt;br>
Why code readability matters—and how to measure and improve it for long-term productivity.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="watch-how-to-set-up-free-engineering-metrics">&lt;a href="#watch-how-to-set-up-free-engineering-metrics" class="header-anchor">&lt;/a>Watch how to set up free engineering metrics
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/okYOm8IPeKM"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>Top code complexity metrics every software dev should know</title><link>https://victoronsoftware.com/posts/code-complexity-metrics/</link><pubDate>Wed, 05 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/code-complexity-metrics/</guid><description>&lt;img src="https://victoronsoftware.com/posts/code-complexity-metrics/code-complexity-headline.png" alt="Featured image of post Top code complexity metrics every software dev should know" />&lt;p>&lt;em>This article is part of a series on &lt;strong>technical debt&lt;/strong>. Check out the previous articles:&lt;/em>&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="../readable-code/" >Ways to improve your code for readability&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" >How to scale a codebase with evolutionary architecture&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="intro-to-code-complexity-metrics">&lt;a href="#intro-to-code-complexity-metrics" class="header-anchor">&lt;/a>Intro to code complexity metrics
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="#code-style" >Code style&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#code-size" >Code size&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#cyclomatic-complexity" >Cyclomatic complexity&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#cognitive-complexity" >Cognitive complexity&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In the previous article on &lt;a class="link" href="../readable-code/" >readable code&lt;/a>, we discussed a few metrics for measuring unreadable code.
In this article, we will expand on some of those ideas and specifically focus on code complexity.&lt;/p>
&lt;p>Code complexity primarily refers to the difficulty of understanding a piece of code or a piece of the codebase, such as
a module. Complex code is difficult to modify because engineers must spend considerable mental energy to understand it.
Frequently, engineers will not understand the code well enough, so they&amp;rsquo;ll make a change to fix a bug, and the change
will introduce a new bug somewhere else. Lack of understanding also leads to
&lt;a class="link" href="https://victoronsoftware.com/posts/common-refactorings/#why-are-engineers-afraid-of-refactoring" target="_blank" rel="noopener"
>a fear of refactoring&lt;/a>,
because engineers don&amp;rsquo;t want to break the codebase.&lt;/p>
&lt;h2 id="code-complexity-metrics">&lt;a href="#code-complexity-metrics" class="header-anchor">&lt;/a>Code complexity metrics
&lt;/h2>&lt;p>Many code complexity measures overlap since they all try to measure the same thing.&lt;/p>
&lt;h3 id="code-style">&lt;a href="#code-style" class="header-anchor">&lt;/a>Code style
&lt;/h3>&lt;p>A standard code style is helpful for readability. For example, if I opened a file and saw that it had no indentation,
the max line length was 20, and somebody named all the variables with a leading &lt;code>iwuzhere&lt;/code>, I would be confused. I would
have to stop and carefully process the file. I would not have to slow down if the code style were consistent.&lt;/p>
&lt;p>The metric to track is the number of code style violations or the number of files violating the code style. Most
companies enforce a code style with their CI pipeline. Modern tooling can automatically reformat code to match the
agreed-upon code style, so code style should no longer be a complexity or readability issue.&lt;/p>
&lt;h3 id="code-size">&lt;a href="#code-size" class="header-anchor">&lt;/a>Code size
&lt;/h3>&lt;p>How much code is there? The more code there is, the longer it takes to read and understand it. The common metrics are:&lt;/p>
&lt;ul>
&lt;li>program size or lines of code (LOC)
&lt;ul>
&lt;li>in a function&lt;/li>
&lt;li>in a file&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>number of functions/classes/modules/files&lt;/li>
&lt;/ul>
&lt;p>The motivation for tracking these metrics is to help engineers split their functions/files/projects into smaller, more
manageable pieces. James Lewis from ThoughtWorks said that &amp;ldquo;a microservice should be as big as my head.&amp;rdquo; His idea is
that one person should be able to understand the entire codebase. The smaller the piece of code, the easier it is to
understand.&lt;/p>
&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Halstead_complexity_measures" target="_blank" rel="noopener"
>Halstead introduced a set of software complexity measures&lt;/a>
in 1977, and one of his metrics was the Halstead volume, which is directly related to code size. We can approximate the
Halstead volume by ignoring all comments and whitespace, then multiplying the average code line length by the number of
lines of code. This approximation is a good enough metric for our purposes.&lt;/p>
&lt;h3 id="cyclomatic-complexity">&lt;a href="#cyclomatic-complexity" class="header-anchor">&lt;/a>Cyclomatic complexity
&lt;/h3>&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Cyclomatic_complexity" target="_blank" rel="noopener"
>Cyclomatic complexity&lt;/a> measures the number of linearly independent
paths through a program&amp;rsquo;s source code. It is often used as the master metric for code complexity, uncovering
maintainability and hard-to-test parts of the codebase.&lt;/p>
&lt;p>A typical calculation of cyclomatic complexity is as follows:&lt;/p>
&lt;ul>
&lt;li>1 is the base complexity for a function&lt;/li>
&lt;li>for each &lt;code>if&lt;/code>, &lt;code>case&lt;/code>, &lt;code>while&lt;/code>, &lt;code>for&lt;/code>, or other branching statement, add 1&lt;/li>
&lt;/ul>
&lt;p>A good cyclomatic complexity is 10 or less. A score of 20 or more is generally considered difficult to understand. This
metric encourages us to write smaller functions.&lt;/p>
&lt;h3 id="cognitive-complexity">&lt;a href="#cognitive-complexity" class="header-anchor">&lt;/a>Cognitive complexity
&lt;/h3>&lt;p>An alternative to cyclomatic complexity is
&lt;a class="link" href="https://www.sonarsource.com/docs/CognitiveComplexity.pdf" target="_blank" rel="noopener"
>cognitive complexity&lt;/a>. This metric tries to adjust the
cyclomatic complexity metric to focus on the human reader&amp;rsquo;s mental load &amp;ndash; on the maintainability, and not on the
testability, of the code.&lt;/p>
&lt;p>The key differences in the calculation are:&lt;/p>
&lt;ul>
&lt;li>for nested structures, extra incremental penalties are added&lt;/li>
&lt;li>recursion is penalized&lt;/li>
&lt;li>jumps to labels, such as &lt;code>goto LABEL&lt;/code>, are penalized&lt;/li>
&lt;li>&lt;code>switch&lt;/code> is preferred over nested &lt;code>if&lt;/code>&lt;/li>
&lt;li>groups of similar logical operators are NOT penalized
&lt;ul>
&lt;li>for example, &lt;code>a &amp;amp;&amp;amp; b &amp;amp;&amp;amp; c &amp;amp;&amp;amp; d&lt;/code> is easier to understand than &lt;code>a &amp;amp;&amp;amp; b || c &amp;amp;&amp;amp; d&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>This metric is more difficult to calculate than cyclomatic complexity, but it is generally considered a better
approximation of code complexity. Many companies are adopting this metric.&lt;/p>
&lt;h2 id="tool-and-language-specific-considerations">&lt;a href="#tool-and-language-specific-considerations" class="header-anchor">&lt;/a>Tool and language-specific considerations
&lt;/h2>&lt;p>Modern tools can help with code maintainability issues. For example, AI tools that index the codebase can help explain
how a piece of code (or a feature) works. IDEs can also help by collapsing boilerplate code or improving readability in
other ways.&lt;/p>
&lt;p>In the Go programming language, the idiomatic way to check for errors is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above code is repeated everywhere and is typically collapsed by modern IDEs. However, cyclomatic complexity and
cognitive complexity metrics penalize it.&lt;/p>
&lt;p>We need a complexity tool where the user can adjust the penalties. This way, an engineering team can agree on what is
considered complex code based on their experience, language, and code style.&lt;/p>
&lt;h3 id="go-complexity-metrics">&lt;a href="#go-complexity-metrics" class="header-anchor">&lt;/a>Go complexity metrics
&lt;/h3>&lt;p>For measuring cyclomatic complexity, Go has &lt;a class="link" href="https://github.com/fzipp/gocyclo" target="_blank" rel="noopener"
>gocyclo&lt;/a>. For measuring cognitive
complexity, there is &lt;a class="link" href="https://github.com/uudashr/gocognit" target="_blank" rel="noopener"
>gocognit&lt;/a>.&lt;/p>
&lt;h3 id="what-is-modularity-and-why-is-it-important">&lt;a href="#what-is-modularity-and-why-is-it-important" class="header-anchor">&lt;/a>What is modularity and why is it important
&lt;/h3>&lt;p>In the next article of this &lt;strong>technical debt&lt;/strong> series, we
&lt;a class="link" href="../software-modularity/" >explain what is modularity and why it is important for modern scalable software systems&lt;/a>.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="../engineering-metrics-no-cost/" >Track your team’s engineering performance with open-source tools&lt;/a>&lt;br>
A step-by-step guide to setting up meaningful metrics using free-tier infrastructure—no SaaS subscriptions required.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Recently, we &lt;a class="link" href="../literate-programming-lessons/" >showed an example and key takeaways from literate programming&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We also wrote &lt;a class="link" href="../ai-for-software-developers/" >an overview of using AI in software development&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="watch-us-discuss-and-show-examples-of-code-complexity-metrics">&lt;a href="#watch-us-discuss-and-show-examples-of-code-complexity-metrics" class="header-anchor">&lt;/a>Watch us discuss and show examples of code complexity metrics
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/HzZQqrhX3cg"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>What is readable code and why is it important?</title><link>https://victoronsoftware.com/posts/readable-code/</link><pubDate>Wed, 22 Jan 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/readable-code/</guid><description>&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-headline.png" alt="Featured image of post What is readable code and why is it important?" />&lt;ul>
&lt;li>&lt;a class="link" href="#metrics-for-unreadable-code" >Metrics for unreadable code&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#how-to-make-your-codebase-more-readable" >How to make your codebase more readable&lt;/a>
&lt;ul>
&lt;li>&lt;a class="link" href="#fix-poor-software-structure" >Fix poor software structure&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#refactor-local-code-for-understanding" >Refactor local code for understanding&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#use-unit-and-integration-tests" >Use unit and integration tests&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#useful-comments" >Useful comments&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>Readable code is software code that is easy to understand and easy to change.&lt;/p>
&lt;p>Unreadable code is a common complaint among software developers and one of the main contributors to technical debt.
Abandoning unreadable code is one of the reasons engineers love to work on greenfield projects—there is no legacy code
to deal with.&lt;/p>
&lt;p>You&amp;rsquo;ve probably heard comments like, &amp;ldquo;It would take me longer to understand this code than to rewrite it from scratch.&amp;rdquo;
This sentiment illustrates the problem with unreadable code: it slows down the development process.&lt;/p>
&lt;p>Some engineers refer to readable code as &amp;ldquo;clean code.&amp;rdquo; In our opinion, &amp;ldquo;readable code&amp;rdquo; and &amp;ldquo;clean code&amp;rdquo; are synonymous,
and the term &amp;ldquo;readable code&amp;rdquo; is easier to understand and, therefore, more &amp;ldquo;readable.&amp;rdquo;&lt;/p>
&lt;h2 id="why-is-unreadable-code-a-problem">&lt;a href="#why-is-unreadable-code-a-problem" class="header-anchor">&lt;/a>Why is unreadable code a problem?
&lt;/h2>&lt;p>Although the &amp;ldquo;unreadable code&amp;rdquo; claim feels like a subjective opinion, it has a concrete business impact on software
projects.&lt;/p>
&lt;p>We want our code to be readable to speed up adding new features and bug fixes.&lt;/p>
&lt;p>For example, we recently spent three hours figuring out how a feature worked, only to realize there was a documentation
bug. Unfortunately, we made no improvements to make the code more readable, and the next developer will likely have the
same problem. This next developer may be ourselves one year from now when we will have forgotten everything we learned
about the feature.&lt;/p>
&lt;h3 id="metrics-for-unreadable-code">&lt;a href="#metrics-for-unreadable-code" class="header-anchor">&lt;/a>Metrics for unreadable code
&lt;/h3>&lt;p>You can use several metrics to measure your code&amp;rsquo;s readability. The ideal metric would be the time it takes to
understand the code, but this isn&amp;rsquo;t easy to measure. Instead, you can use the following proxies:&lt;/p>
&lt;p>&lt;strong>Time to fix a bug&lt;/strong>—Measure the time from when a developer starts working on a bug until the bug fix is ready for code
review. Alternatively, measure the time from when a developer starts working on a bug until their first commit. A first
commit is a good proxy for understanding the bug and starting to fix it.&lt;/p>
&lt;p>&lt;strong>Time to add a new feature&lt;/strong>—Measure the time from when a developer starts working on a new feature until it is ready
for code review.&lt;/p>
&lt;p>&lt;strong>Time to onboard a new team member&lt;/strong>—Measure the time it takes for a new team member to make their first commit.&lt;/p>
&lt;p>&lt;strong>Code style violations&lt;/strong>—Measure the codebase&amp;rsquo;s number of code style violations. Code style violations can be measured
using linters or static analysis tools. Some examples of code style violations relevant to readability are:&lt;/p>
&lt;ul>
&lt;li>Long functions&lt;/li>
&lt;li>Long files&lt;/li>
&lt;li>Deeply nested control structures&lt;/li>
&lt;li>Poorly named variables, such as 1-character variable names&lt;/li>
&lt;/ul>
&lt;p>Instead of measuring these style code violations, you can also enforce them in your CI pipeline. Most languages have
linters that update your code to match a standard style. For example, Go has &lt;a class="link" href="https://pkg.go.dev/cmd/gofmt" target="_blank" rel="noopener"
>&lt;code>gofmt&lt;/code>&lt;/a>.&lt;/p>
&lt;h2 id="how-to-make-your-codebase-more-readable">&lt;a href="#how-to-make-your-codebase-more-readable" class="header-anchor">&lt;/a>How to make your codebase more readable
&lt;/h2>&lt;p>Readability is not a goal but a process. You can&amp;rsquo;t make your codebase readable overnight, but you can start making
incremental improvements. Whenever you touch a piece of code, try to make it more readable.&lt;/p>
&lt;h3 id="fix-poor-software-structure">&lt;a href="#fix-poor-software-structure" class="header-anchor">&lt;/a>Fix poor software structure
&lt;/h3>&lt;p>One pattern we see frequently is that the functionality of a core feature is spread across multiple software modules.
The first problem this creates is that the software developer trying to understand the feature has to discover all the
modules that implement the feature. Often, this requires grepping the codebase for key names &amp;ndash; a tedious and
error-prone process. The second problem is that the developer has to jump between files and directories to understand
how the feature works, files that often have tons of other unrelated and distracting code.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-before.png">&lt;figcaption>
&lt;h4>Hard to understand feature due to poor software design&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Poor software structure often arises when we hurry to implement a feature and don&amp;rsquo;t consider future developers needing
to make changes. This behavior is reactive software design—one developer reacts to the immediate need to implement a
feature. Later, when implementing new features becomes almost impossible due to unreadable code, they react again by
restructuring the code or rewriting old functionality from scratch. This process makes sense for prototypes or early
products looking for product-market fit, but it is not sustainable for mature long-term software projects.&lt;/p>
&lt;p>Often, developers may not be able to create a good software design when they start working on a new feature because they
don&amp;rsquo;t understand all its ramifications. However, they should restructure their work before moving on to the next
task—the best time to improve code is when you have all the context in your head.&lt;/p>
&lt;p>We can restructure the above code example to move all the feature&amp;rsquo;s functionality into one or two modules. This
reorganization makes it easier to understand the feature because we have to look at a much smaller number of files and
are not distracted by unrelated code.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/readable-code/readable-code-after.png">&lt;figcaption>
&lt;h4>Easier to understand feature encapsulated in separate modules&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="refactor-local-code-for-understanding">&lt;a href="#refactor-local-code-for-understanding" class="header-anchor">&lt;/a>Refactor local code for understanding
&lt;/h3>&lt;p>When entering a function, you should quickly understand what it does. The function code should be readable. If an
engineer who first sees the function can&amp;rsquo;t understand it, it is too complex and should be refactored.&lt;/p>
&lt;p>Long functions are difficult to understand because they require the developer to simultaneously keep a lot of
information in their head. Oftentimes, the function presents implementation details to the developer before they can
grasp the big picture. This process is cognitively demanding and error-prone.&lt;/p>
&lt;p>Instead, we can refactor extended functions into smaller functions that each do one thing. This refactoring makes the
code easier to understand because we can understand each small function in isolation. Hide complex logic in functions
with descriptive names.&lt;/p>
&lt;p>In addition, use descriptive names for variables. Good names make the code self-documenting and reduce the need for
comments.&lt;/p>
&lt;p>As an example of a function before and after refactoring, see this
&lt;a class="link" href="https://gist.github.com/getvictor/740c940ec06735ee02bc652f1093e0b8" target="_blank" rel="noopener"
>refactoring example gist&lt;/a>. For a full explanation,
you can &lt;a class="link" href="https://www.youtube.com/watch?v=HCGyWuE9zbY&amp;amp;t=720s" target="_blank" rel="noopener"
>jump to the refactoring section&lt;/a> of the video below.&lt;/p>
&lt;p>For more examples of common refactorings, see our article on
&lt;a class="link" href="../common-refactorings/" >top refactorings every software developer should know&lt;/a>.&lt;/p>
&lt;h3 id="use-unit-and-integration-tests">&lt;a href="#use-unit-and-integration-tests" class="header-anchor">&lt;/a>Use unit and integration tests
&lt;/h3>&lt;p>From a readability perspective, tests are a form of documentation. They show how the code is supposed to work. When
reading a test, you can see how the code is supposed to behave in different scenarios.&lt;/p>
&lt;p>Tests should also be readable. The same restructuring and refactoring principles apply to tests.&lt;/p>
&lt;p>Another essential benefit of tests is that they allow developers to refactor code with confidence. When you refactor
code, you can run the tests to ensure that the code still works as expected. Unfortunately, this means that when you
want to make a change in legacy code without tests, you either have to write tests first or do a lot of manual testing
to ensure that the code still works.&lt;/p>
&lt;h3 id="useful-comments">&lt;a href="#useful-comments" class="header-anchor">&lt;/a>Useful comments
&lt;/h3>&lt;p>Comments should explain why the code is written the way it is, not what the code does. The code should be
self-explanatory with descriptive variable and function names and encapsulated implementation details.&lt;/p>
&lt;p>Sometimes, it is hard to tell the difference between &amp;ldquo;why&amp;rdquo; and &amp;ldquo;what,&amp;rdquo; so feel free to err on the side of commenting.&lt;/p>
&lt;p>You can remove the comment if you renamed a variable or a function, and now the comment duplicates the code. One problem
with comments is that they can get out of date, which is worse than no comments.&lt;/p>
&lt;p>For example, before refactoring, you had this code:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// figure out which declarations we should not delete, and put those into keepNames list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">keepNames&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make([]&lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, len(&lt;span style="color:#a6e22e">existingDecls&lt;/span>)&lt;span style="color:#f92672">+&lt;/span>len(&lt;span style="color:#a6e22e">fleetmdm&lt;/span>.&lt;span style="color:#a6e22e">ListFleetReservedMacOSDeclarationNames&lt;/span>()))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">existingDecls&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">newP&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">incomingDecls&lt;/span>[&lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>]; &lt;span style="color:#a6e22e">newP&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">keepNames&lt;/span> = append(&lt;span style="color:#a6e22e">keepNames&lt;/span>, &lt;span style="color:#a6e22e">p&lt;/span>.&lt;span style="color:#a6e22e">Name&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">keepNames&lt;/span> = append(&lt;span style="color:#a6e22e">keepNames&lt;/span>, &lt;span style="color:#a6e22e">fleetmdm&lt;/span>.&lt;span style="color:#a6e22e">ListFleetReservedMacOSDeclarationNames&lt;/span>()&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After refactoring, the comment is a duplicate and no longer needed. It is even worse in this case because we renamed the
variable, but the comment still refers to the old name. The comment is not only a duplicate but also misleading:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// figure out which declarations we should not delete, and put those into keepNames list&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">namesToKeep&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">namesOfDeclarationsToNotDelete&lt;/span>(&lt;span style="color:#a6e22e">existingDecls&lt;/span>, &lt;span style="color:#a6e22e">enrichedDeclarations&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="language-features-that-make-the-code-less-readable">&lt;a href="#language-features-that-make-the-code-less-readable" class="header-anchor">&lt;/a>Language features that make the code less readable
&lt;/h2>&lt;p>Some language features can make the code less readable. We will give an example from Go because we are familiar with Go,
but the same principles apply to other languages.&lt;/p>
&lt;h3 id="go-nested-functions">&lt;a href="#go-nested-functions" class="header-anchor">&lt;/a>Go nested functions
&lt;/h3>&lt;p>Go supports nested functions like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">outer&lt;/span>(&lt;span style="color:#a6e22e">foo&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span>, &lt;span style="color:#a6e22e">bar&lt;/span> &lt;span style="color:#a6e22e">Bar&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inner&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// many lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// of implementation details&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// many lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// of additional code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">something&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inner&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// more code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Upon entering the function as a reader, the first thing you see is the &lt;code>inner&lt;/code> function. The reader is presented with
specific implementation details before understanding the big picture. Instead, the reader should know where the nested
function is used before reading these implementation details.&lt;/p>
&lt;p>One way to solve this issue is to forbid nested functions in your style guide. Always extract nested functions to the
struct level or file level. However, this approach loses the benefits of closures and increases the number of functions
at the struct/file level.&lt;/p>
&lt;p>We hope that the Go team will improve the readability of nested functions in the future. For example, they could allow
nested functions to be defined at the end of the function after the primary implementation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">outer&lt;/span>(&lt;span style="color:#a6e22e">foo&lt;/span> &lt;span style="color:#a6e22e">Foo&lt;/span>, &lt;span style="color:#a6e22e">bar&lt;/span> &lt;span style="color:#a6e22e">Bar&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// many lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// of additional code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">something&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">inner&lt;/span>(&lt;span style="color:#a6e22e">i&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// more code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// nested functions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">inner&lt;/span>(&lt;span style="color:#a6e22e">item&lt;/span> &lt;span style="color:#a6e22e">Item&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// many lines&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// of implementation details&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Alternatively, IDE vendors can improve readability by entirely hiding nested functions by default.&lt;/p>
&lt;h2 id="additional-benefits-of-readable-code">&lt;a href="#additional-benefits-of-readable-code" class="header-anchor">&lt;/a>Additional benefits of readable code
&lt;/h2>&lt;p>As you improve the readability of your code, you will notice several side effects:&lt;/p>
&lt;ul>
&lt;li>Many bugs will be easier to spot&lt;/li>
&lt;li>Other developers will be less likely to interrupt you with questions about your code&lt;/li>
&lt;li>If your code is open source, you may get more contributions&lt;/li>
&lt;/ul>
&lt;h2 id="make-bigger-improvements-to-your-codebase-with-evolutionary-architecture">&lt;a href="#make-bigger-improvements-to-your-codebase-with-evolutionary-architecture" class="header-anchor">&lt;/a>Make bigger improvements to your codebase with evolutionary architecture
&lt;/h2>&lt;p>In the following article, we
&lt;a class="link" href="../scaling-codebase-evolutionary-architecture" >discuss how to make bigger improvements to your codebase with evolutionary architecture&lt;/a>.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>I gave my first conference talk on this topic. &lt;a class="link" href="../first-conference-talk/" >My first conference talk experience&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a class="link" href="../engineering-metrics-no-cost/" >Build beautiful engineering dashboards—without paying a dime&lt;/a>&lt;br>
Learn how to use GitHub, Grafana, and SQL to create powerful, drill-down metrics using only free tools.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Recently, we &lt;a class="link" href="../literate-programming-lessons/" >discussed the key takeaways from literate programming&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Before that, we
&lt;a class="link" href="../track-engineering-metrics/" >showed how to easily track engineering metrics with GitHub Actions and Google APIs&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We also wrote about &lt;a class="link" href="../go-test-execution-time/" >measuring and improving the execution time of Go tests&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>In addition, we &lt;a class="link" href="../github-code-review-issues/" >pointed out the issues with GitHub&amp;rsquo;s code review process&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We also covered &lt;a class="link" href="../ai-for-software-developers/" >the common use cases of AI for today&amp;rsquo;s software developers&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="watch">&lt;a href="#watch" class="header-anchor">&lt;/a>Watch
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/HCGyWuE9zbY"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to easily track engineering metrics</title><link>https://victoronsoftware.com/posts/track-engineering-metrics/</link><pubDate>Thu, 26 Dec 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/track-engineering-metrics/</guid><description>&lt;img src="https://victoronsoftware.com/posts/track-engineering-metrics/engineering-metrics.png" alt="Featured image of post How to easily track engineering metrics" />&lt;p>Engineering metrics are essential for tracking your team&amp;rsquo;s progress and productivity and identifying areas for
improvement. However, manually collecting and updating these metrics can be time-consuming and error-prone. In this
article, we will show you how to automate the tracking of engineering metrics and visualize them in the Google Office
suite.&lt;/p>
&lt;p>Some standard engineering metrics include:&lt;/p>
&lt;ul>
&lt;li>Number of bugs&lt;/li>
&lt;li>Lead time for changes (or bug fixes)&lt;/li>
&lt;li>Code coverage&lt;/li>
&lt;li>Build/test success rate&lt;/li>
&lt;li>Deployment frequency&lt;/li>
&lt;li>Number of incidents&lt;/li>
&lt;li>Mean time to recovery&lt;/li>
&lt;li>Delivered story points&lt;/li>
&lt;li>and many more&lt;/li>
&lt;/ul>
&lt;p>Engineering metrics can be further sliced and diced in various ways. For example, you can track bugs by severity or on a
per-team basis.&lt;/p>
&lt;h2 id="building-an-engineering-metrics-tracker">&lt;a href="#building-an-engineering-metrics-tracker" class="header-anchor">&lt;/a>Building an engineering metrics tracker
&lt;/h2>&lt;p>For our example metrics tracker, we will gather the number of GitHub open bugs for a team, update the numbers in a
Google Sheet, automate the process with GitHub Actions, and display the data in Google Docs.&lt;/p>
&lt;p>All the tools for this flow are freely available, and this process does not rely on costly third-party metrics-gathering
services. We will use the Go programming language in our example.&lt;/p>
&lt;h2 id="gathering-the-number-of-open-bugs">&lt;a href="#gathering-the-number-of-open-bugs" class="header-anchor">&lt;/a>Gathering the number of open bugs
&lt;/h2>&lt;p>The &lt;a class="link" href="https://docs.github.com/en/rest" target="_blank" rel="noopener"
>GitHub API&lt;/a> is a well-documented way to query issues in a repository.&lt;/p>
&lt;p>There are also many quality client libraries for the API. We will use the
&lt;a class="link" href="https://github.com/google/go-github" target="_blank" rel="noopener"
>go-github&lt;/a> client.&lt;/p>
&lt;p>Create a git repository and set up a new Go module. Here is our code snippet to get the number of open bugs:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/google/go-github/v67/github&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">getGitHubIssues&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Context&lt;/span>) ([]&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">github&lt;/span>.&lt;span style="color:#a6e22e">Issue&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">githubToken&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">Getenv&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;GITHUB_TOKEN&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">client&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">github&lt;/span>.&lt;span style="color:#a6e22e">NewClient&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>).&lt;span style="color:#a6e22e">WithAuthToken&lt;/span>(&lt;span style="color:#a6e22e">githubToken&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Get issues.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">allIssues&lt;/span> []&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">github&lt;/span>.&lt;span style="color:#a6e22e">Issue&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">opts&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;amp;&lt;/span>&lt;span style="color:#a6e22e">github&lt;/span>.&lt;span style="color:#a6e22e">IssueListByRepoOptions&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">State&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;open&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Labels&lt;/span>: []&lt;span style="color:#66d9ef">string&lt;/span>{&lt;span style="color:#e6db74">&amp;#34;#g-mdm&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;:release&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;bug&amp;#34;&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">issues&lt;/span>, &lt;span style="color:#a6e22e">resp&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">client&lt;/span>.&lt;span style="color:#a6e22e">Issues&lt;/span>.&lt;span style="color:#a6e22e">ListByRepo&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;fleetdm&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;fleet&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">opts&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">allIssues&lt;/span> = append(&lt;span style="color:#a6e22e">allIssues&lt;/span>, &lt;span style="color:#a6e22e">issues&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">NextPage&lt;/span> &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">break&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">opts&lt;/span>.&lt;span style="color:#a6e22e">Page&lt;/span> = &lt;span style="color:#a6e22e">resp&lt;/span>.&lt;span style="color:#a6e22e">NextPage&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">allIssues&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above code snippet uses a &lt;code>GITHUB_TOKEN&lt;/code> environment variable to authenticate with the GitHub API. You can create a
personal access token in your GitHub account settings. Later, we will show how to set this token in GitHub Actions
automatically. The token is optional for public repositories but required for private repositories.&lt;/p>
&lt;p>The code snippet queries the open issues in the public &lt;code>fleetdm/fleet&lt;/code> repository with the labels &lt;code>#g-mdm&lt;/code>, &lt;code>:release&lt;/code>,
and &lt;code>bug&lt;/code>. Fleet&amp;rsquo;s MDM product team currently uses these labels for bugs in progress or ready to be worked on.&lt;/p>
&lt;h2 id="updating-the-google-sheets-spreadsheet">&lt;a href="#updating-the-google-sheets-spreadsheet" class="header-anchor">&lt;/a>Updating the Google Sheets spreadsheet
&lt;/h2>&lt;p>To update the Google Sheets spreadsheet, we will use the &lt;a class="link" href="https://developers.google.com/sheets/api" target="_blank" rel="noopener"
>Google Sheets API&lt;/a>
with the &lt;a class="link" href="https://pkg.go.dev/google.golang.org/api@v0.214.0/sheets/v4" target="_blank" rel="noopener"
>Google&amp;rsquo;s Go client library&lt;/a>.&lt;/p>
&lt;p>For instructions on getting a Google Sheets API key, sharing the spreadsheet with a service account, and editing the
spreadsheet using the API, see our previous article:
&lt;a class="link" href="../google-sheets-api/" >How to quickly edit Google Sheets spreadsheet using the API&lt;/a>.&lt;/p>
&lt;p>See our integrated
&lt;a class="link" href="https://github.com/getvictor/github-metrics/blob/34abb1071a300659ab1ae534759bc4d47728e343/main.go#L55" target="_blank" rel="noopener"
>function to update the Google Sheets spreadsheet with the number of open bugs&lt;/a>
on GitHub.&lt;/p>
&lt;p>In our example, we get the spreadsheet ID and the service account key from environment variables. When running locally,
you must set the &lt;code>SPREADSHEET_ID&lt;/code> and &lt;code>GOOGLE_SERVICE_ACCOUNT_KEY&lt;/code> environment variables.&lt;/p>
&lt;pre tabindex="0">&lt;code>spreadsheetId := os.Getenv(&amp;#34;SPREADSHEET_ID&amp;#34;)
serviceAccountKey = []byte(os.Getenv(&amp;#34;GOOGLE_SERVICE_ACCOUNT_KEY&amp;#34;))
&lt;/code>&lt;/pre>&lt;p>The glue code combining the above two functions is straightforward.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ctx&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">context&lt;/span>.&lt;span style="color:#a6e22e">Background&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">allIssues&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">getGitHubIssues&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Unable to get GitHub issues: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Total issues: %d\n&amp;#34;&lt;/span>, len(&lt;span style="color:#a6e22e">allIssues&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">err&lt;/span> = &lt;span style="color:#a6e22e">updateSpreadsheet&lt;/span>(len(&lt;span style="color:#a6e22e">allIssues&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">log&lt;/span>.&lt;span style="color:#a6e22e">Fatalf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Unable to update spreadsheet: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can manually run our script to gather the metrics and update the Google Sheets spreadsheet. However, we want to
automate this process so that the metrics are always up to date and we have a consistent historical record.&lt;/p>
&lt;h2 id="automating-the-metric-gathering-process-with-github-actions">&lt;a href="#automating-the-metric-gathering-process-with-github-actions" class="header-anchor">&lt;/a>Automating the metric-gathering process with GitHub Actions
&lt;/h2>&lt;p>GitHub Actions allows you to automate, customize, and execute your software development workflows in your GitHub
repository. We will use GitHub Actions to run our script on a schedule and update the Google Sheets spreadsheet with the
latest metrics.&lt;/p>
&lt;p>Create a &lt;code>.github/workflows/update-spreadsheet.yml&lt;/code> file in your repository with the following content:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Update spreadsheet with latest metrics&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">workflow_dispatch&lt;/span>: &lt;span style="color:#75715e"># Manual&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">schedule&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">cron&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;0 */12 * * *&amp;#39;&lt;/span> &lt;span style="color:#75715e"># At 00:00 and 12:00 UTC&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GITHUB_TOKEN&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}&lt;/span> &lt;span style="color:#75715e"># automatically generated&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">GOOGLE_SERVICE_ACCOUNT_KEY&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">SPREADSHEET_ID&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.SPREADSHEET_ID }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">update-spreadsheet&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-latest&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Checkout code&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683&lt;/span> &lt;span style="color:#75715e"># v4.2.2&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">fetch-depth&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Setup Go&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/setup-go@3041bf56c941b39c61721a86cd11f3bb1338122a&lt;/span> &lt;span style="color:#75715e"># v5.2.0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">go-version-file&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;go.mod&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Run&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: &lt;span style="color:#ae81ff">go run main.go&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The above GitHub Actions workflow runs the &lt;code>main.go&lt;/code> script every 12 hours. GitHub automatically generates the
&lt;code>GITHUB_TOKEN&lt;/code> secret. The &lt;code>GOOGLE_SERVICE_ACCOUNT_KEY&lt;/code> and &lt;code>SPREADSHEET_ID&lt;/code> secrets must be set up manually in the
repository settings.&lt;/p>
&lt;p>The workflow checks out the code, sets up Go, and runs the script. After pushing the workflow file to GitHub, you can
manually run the workflow to test it.&lt;/p>
&lt;h2 id="display-the-metrics-in-google-docs">&lt;a href="#display-the-metrics-in-google-docs" class="header-anchor">&lt;/a>Display the metrics in Google Docs
&lt;/h2>&lt;p>To see the metrics in Google Docs or Google Slides, you can
&lt;a class="link" href="https://support.google.com/docs/answer/7009814" target="_blank" rel="noopener"
>copy and paste the relevant cells&lt;/a> from the Google Sheets spreadsheet.
This operation will create a one-way link from Google Sheets to the document. You can refresh the data by clicking
&lt;strong>Tools &amp;gt; Linked objects &amp;gt; Update All&lt;/strong>.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/track-engineering-metrics/google-sheets-linked-to-google-docs.png"
alt="Google Docs showing an embedded 4x4 table from Google Sheets. The title is: Our open bugs">
&lt;/figure>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>&lt;a class="link" href="../engineering-metrics-no-cost/" >Free, flexible, and insightful: engineering metrics done right&lt;/a>&lt;br>
Discover how to monitor and visualize your dev team&amp;rsquo;s performance with Grafana and an analytical database.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Recently, we explained &lt;a class="link" href="../readable-code/" >how to measure unreadable code and turn it into clean code&lt;/a>, as well as
&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" >how to make incremental improvements to your codebase with evolutionary architecture&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Previously, we showed &lt;a class="link" href="../github-reusable-workflows-and-steps/" >how to reuse workflows and steps in GitHub Actions&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We also covered &lt;a class="link" href="../go-test-execution-time/" >measuring the execution time of Go tests&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>We also described &lt;a class="link" href="../github-code-review-issues/" >inefficiencies in the GitHub code review process&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="code-on-github">&lt;a href="#code-on-github" class="header-anchor">&lt;/a>Code on GitHub
&lt;/h2>&lt;p>For the complete code, see the GitHub repository: &lt;a class="link" href="https://github.com/getvictor/github-metrics" target="_blank" rel="noopener"
>github-metrics&lt;/a>.&lt;/p>
&lt;h2 id="watch">&lt;a href="#watch" class="header-anchor">&lt;/a>Watch
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/yzT-1nuKvNI"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item></channel></rss>