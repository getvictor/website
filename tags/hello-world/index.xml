<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Hello World on Victor on Software</title><link>https://victoronsoftware.com/tags/hello-world/</link><description>Recent content in Hello World on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 26 Mar 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/hello-world/index.xml" rel="self" type="application/rss+xml"/><item><title>4 key Mermaid diagrams for software developers</title><link>https://victoronsoftware.com/posts/mermaid-intro/</link><pubDate>Wed, 26 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mermaid-intro/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mermaid-intro/mermaid-intro-headline.png" alt="Featured image of post 4 key Mermaid diagrams for software developers" /&gt;&lt;h2 id="importance-of-technical-diagrams"&gt;&lt;a href="#importance-of-technical-diagrams" class="header-anchor"&gt;&lt;/a&gt;Importance of technical diagrams
&lt;/h2&gt;&lt;p&gt;Diagrams are an effective way to communicate technical concepts to other engineers or business stakeholders. They even
help us better understand technical concepts while creating the diagrams. Effective senior engineers frequently use
diagrams in their documentation and presentations. The top Mermaid diagrams are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#sequence-diagrams" &gt;Sequence diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#flowcharts" &gt;Flowcharts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#class-diagrams" &gt;Class diagrams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#entity-relationship-diagrams-erds" &gt;Entity relationship diagrams (ERDs)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-mermaid"&gt;&lt;a href="#what-is-mermaid" class="header-anchor"&gt;&lt;/a&gt;What is Mermaid
&lt;/h2&gt;&lt;p&gt;Mermaid is a popular JavaScript-based diagramming tool that allows anyone to create diagrams using a simple text-based
syntax. Some key reasons for its popularity include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Text-based syntax&lt;/strong&gt;: Mermaid is easy to write and version control, fitting seamlessly into code reviews and
collaborative workflows.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integration with Markdown&lt;/strong&gt;: Mermaid works well with Markdown, which is widely used in documentation and static site
generators.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integration with GitHub and GitLab&lt;/strong&gt;: These top Git hosting platforms allow you to put Mermaid diagrams almost
anywhere on their site.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Versatility&lt;/strong&gt;: Mermaid supports various diagram types, from flowcharts and sequence diagrams to ERDs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Automation-friendly&lt;/strong&gt;: Diagrams can be generated programmatically, enabling dynamic updates and integration with
CI/CD pipelines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accessibility&lt;/strong&gt;: Mermaid does not need specialized software; diagrams can be created and rendered within code
editors or browsers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our experience, Mermaid&amp;rsquo;s text-based syntax is simple enough to be used for ad hoc diagramming, as opposed to the
proverbial &amp;ldquo;back of the napkin&amp;rdquo; drawing.&lt;/p&gt;
&lt;p&gt;The above features make Mermaid an invaluable tool for creating maintainable technical diagrams. We recommend creating
your first diagram on &lt;a class="link" href="https://www.mermaidchart.com/play" target="_blank" rel="noopener"
&gt;Mermaid Playground&lt;/a&gt; to get started.&lt;/p&gt;
&lt;h2 id="sequence-diagrams"&gt;&lt;a href="#sequence-diagrams" class="header-anchor"&gt;&lt;/a&gt;Sequence diagrams
&lt;/h2&gt;&lt;p&gt;Sequence diagrams depict how users and entities interact with each other over time. They are handy for modeling the flow
of messages, events, or data and are great for visualizing customer use cases, API interactions, or the behavior of
distributed systems.&lt;/p&gt;
&lt;p&gt;We love sequence diagrams because they are clear and consistent. Mermaid displays sequence diagrams consistently, which
greatly speeds up understanding.&lt;/p&gt;
&lt;p&gt;Below is a basic sequence diagram, which starts with the keyword &lt;code&gt;sequenceDiagram&lt;/code&gt;.&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;sequenceDiagram
UI-&amp;gt;&amp;gt;MDM Server: Upload profile
MDM Server-&amp;gt;&amp;gt;Apple: Request push notification
Apple-&amp;gt;&amp;gt;macOS: Push notification
macOS-&amp;gt;&amp;gt;MDM Server: Request command
MDM Server-&amp;gt;&amp;gt;macOS: InstallProfile command
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above Mermaid diagram is rendered as follows:&lt;/p&gt;
&lt;pre class="mermaid"&gt;
sequenceDiagram
UI-&amp;gt;&amp;gt;MDM server: Upload profile
MDM server-&amp;gt;&amp;gt;Apple: Request push notification
Apple-&amp;gt;&amp;gt;macOS: Push notification
macOS-&amp;gt;&amp;gt;MDM server: Request command
MDM server-&amp;gt;&amp;gt;macOS: InstallProfile command
&lt;/pre&gt;
&lt;p&gt;The above syntax consists of &lt;code&gt;&amp;lt;entity&amp;gt;-&amp;gt;&amp;gt;&amp;lt;entity&amp;gt;: &amp;lt;description&amp;gt;&lt;/code&gt;. In many cases, that&amp;rsquo;s all that&amp;rsquo;s necessary. We can
quickly create a simple sequence diagram to explain a flow during a meeting.&lt;/p&gt;
&lt;p&gt;To add a title to your diagram, add the following at the top:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;---
title: My diagram
---
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To go beyond the basics, we recommend learning some additional syntax from
&lt;a class="link" href="https://mermaid.js.org/syntax/sequenceDiagram.html" target="_blank" rel="noopener"
&gt;sequence diagram docs&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;actor&lt;/code&gt;: Actors (aka people)&lt;/li&gt;
&lt;li&gt;Aliases&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--&amp;gt;&amp;gt;&lt;/code&gt;: Dotted line with arrow for responses&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--)&lt;/code&gt;: Dotted line with empty arrow for async messages&lt;/li&gt;
&lt;li&gt;&lt;code&gt;activate &amp;lt;entity&amp;gt;&lt;/code&gt; and &lt;code&gt;deactivate &amp;lt;entity&amp;gt;&lt;/code&gt;: Activations of actors&lt;/li&gt;
&lt;li&gt;Loops(&lt;code&gt;loop&lt;/code&gt;), alternative paths(&lt;code&gt;alt&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt;), and parallel actions(&lt;code&gt;par&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;autonumber&lt;/code&gt;: Sequence numbers&lt;/li&gt;
&lt;li&gt;Notes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the updated diagram with additional syntax:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;---
title: Upload macOS configuration profile flow
---
sequenceDiagram
autonumber
actor Admin
participant mdm as MDM server
Admin-&amp;gt;&amp;gt;mdm: Upload profile
activate mdm
mdm--&amp;gt;&amp;gt;Admin: OK
deactivate mdm
Note right of mdm: After 30 seconds max
mdm-&amp;gt;&amp;gt;Apple: Request push notification
activate mdm
activate Apple
Apple--&amp;gt;&amp;gt;mdm: OK
deactivate mdm
Apple--)macOS: Push notification
deactivate Apple
activate macOS
macOS-&amp;gt;&amp;gt;mdm: Request command (Idle)
activate mdm
mdm--&amp;gt;&amp;gt;macOS: InstallProfile command
deactivate mdm
macOS-&amp;gt;&amp;gt;macOS: Install profile
macOS-&amp;gt;&amp;gt;mdm: Acknowledge
activate mdm
mdm--&amp;gt;&amp;gt;macOS: No more commands
deactivate mdm
deactivate macOS
&lt;/code&gt;&lt;/pre&gt;&lt;pre class="mermaid"&gt;
---
title: Upload macOS configuration profile flow
---
sequenceDiagram
autonumber
actor Admin
participant mdm as MDM server
Admin-&amp;gt;&amp;gt;mdm: Upload profile
activate mdm
mdm--&amp;gt;&amp;gt;Admin: OK
deactivate mdm
Note right of mdm: After 30 seconds max
mdm-&amp;gt;&amp;gt;Apple: Request push notification
activate mdm
activate Apple
Apple--&amp;gt;&amp;gt;mdm: OK
deactivate mdm
Apple--)macOS: Push notification
deactivate Apple
activate macOS
macOS-&amp;gt;&amp;gt;mdm: Request command (Idle)
activate mdm
mdm--&amp;gt;&amp;gt;macOS: InstallProfile command
deactivate mdm
macOS-&amp;gt;&amp;gt;macOS: Install profile
macOS-&amp;gt;&amp;gt;mdm: Acknowledge
activate mdm
mdm--&amp;gt;&amp;gt;macOS: No more commands
deactivate mdm
deactivate macOS
&lt;/pre&gt;
&lt;h2 id="flowcharts"&gt;&lt;a href="#flowcharts" class="header-anchor"&gt;&lt;/a&gt;Flowcharts
&lt;/h2&gt;&lt;p&gt;Flowcharts are graphical representations of processes, workflows, or decision logic. They use standardized symbols, such
as rectangles, diamonds, and arrows, to illustrate the flow of steps or tasks visually. Flowcharts are generic diagrams
that can be adapted to any purpose. They are often used to explain concepts to non-technical stakeholders.&lt;/p&gt;
&lt;p&gt;Below is a basic flowchart diagram:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;flowchart
Admin-- &amp;#34;Uses&amp;#34; ---&amp;gt;Server
agent-- &amp;#34;Checks in&amp;#34; ---&amp;gt;Server
Server-- &amp;#34;Accesses&amp;#34; ---&amp;gt;MySQL
Server-- &amp;#34;Accesses&amp;#34; ---&amp;gt;Redis
Server-- &amp;#34;Upload analytics&amp;#34; ---&amp;gt;fleetdm.com
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which renders as follows:&lt;/p&gt;
&lt;pre class="mermaid"&gt;
flowchart
Admin-- &amp;#34;Uses&amp;#34; ---&amp;gt;Server
agent-- &amp;#34;Checks in&amp;#34; ---&amp;gt;Server
Server-- &amp;#34;Accesses&amp;#34; ---&amp;gt;MySQL
Server-- &amp;#34;Accesses&amp;#34; ---&amp;gt;Redis
Server-- &amp;#34;Upload analytics&amp;#34; ---&amp;gt;fleetdm.com
&lt;/pre&gt;
&lt;p&gt;The above example is a simple block diagram that can quickly demonstrate the basic parts of your
system/container/component. Explore additional syntax at &lt;a class="link" href="https://mermaid.js.org/syntax/flowchart.html" target="_blank" rel="noopener"
&gt;flowchart docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is another flowchart example:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;flowchart LR
S([Start])
PD[Process
data]
E([End])
S --&amp;gt; PD
PD --&amp;gt; V{Valid data?}
V -- &amp;#34;No&amp;#34; ---&amp;gt; E
V -- &amp;#34;Yes&amp;#34; ---&amp;gt; W[Send webhook]
W --&amp;gt; E
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Which renders as follows:&lt;/p&gt;
&lt;pre class="mermaid"&gt;
flowchart LR
S([Start])
PD[Process
data]
E([End])
S --&amp;gt; PD
PD --&amp;gt; V{Valid data?}
V -- &amp;#34;No&amp;#34; ---&amp;gt; E
V -- &amp;#34;Yes&amp;#34; ---&amp;gt; W[Send webhook]
W --&amp;gt; E
&lt;/pre&gt;
&lt;p&gt;We defined some of the elements up front. The &lt;code&gt;Process data&lt;/code&gt; rectangle contains multi-line text.&lt;/p&gt;
&lt;p&gt;Note the direction of the flowchart is left-to-right, as specified by &lt;code&gt;LR&lt;/code&gt; after &lt;code&gt;flowchart&lt;/code&gt;. The direction options are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TB&lt;/code&gt;: Top-to-bottom&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BT&lt;/code&gt;: Bottom-to-top&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RL&lt;/code&gt;: Right-to-left&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LR&lt;/code&gt;: Left-to-right&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="standard-symbols-used-in-flowcharts"&gt;&lt;a href="#standard-symbols-used-in-flowcharts" class="header-anchor"&gt;&lt;/a&gt;Standard symbols used in flowcharts
&lt;/h3&gt;&lt;p&gt;Flowcharts use a variety of standardized symbols to represent different types of actions, processes, and decisions.
Below are some of the most commonly used symbols:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Terminator (Oval)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Represents the start or end of a process.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;([Start])&lt;/code&gt; or &lt;code&gt;([End])&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;&lt;strong&gt;Process (Rectangle)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Represents a step or task in the process.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;[Calculate sum]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;strong&gt;Decision (Diamond)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Represents a decision point with two or more possible outcomes.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;{Is user authenticated?}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="4"&gt;
&lt;li&gt;&lt;strong&gt;Arrow (Line)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Represents the flow or direction of the process.&lt;/li&gt;
&lt;li&gt;Example: Connects steps in a process.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="5"&gt;
&lt;li&gt;&lt;strong&gt;Input/Output (Parallelogram)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Represents input to or output from a process.&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;[/User enters credentials/]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="6"&gt;
&lt;li&gt;&lt;strong&gt;Database (Cylinder)&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Represents a data store&lt;/li&gt;
&lt;li&gt;Example: &lt;code&gt;[(MySQL)]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional symbols may be used for specialized diagrams or contexts, depending on the needs of the specific workflow.&lt;/p&gt;
&lt;h2 id="class-diagrams"&gt;&lt;a href="#class-diagrams" class="header-anchor"&gt;&lt;/a&gt;Class diagrams
&lt;/h2&gt;&lt;p&gt;A &lt;strong&gt;class diagram&lt;/strong&gt; is one of the core components of the Unified Modeling Language (UML) and is used to visually
represent the static structure of a system. Traditionally, it models classes, their attributes, operations (methods),
and the relationships among the classes in the system.&lt;/p&gt;
&lt;p&gt;However, we found that the most helpful use of class diagrams is to model relationships between higher-level entities.
We can also model higher-level entities with a flowchart, but the benefit of using a class diagram is the ability to use
standard relationships.&lt;/p&gt;
&lt;p&gt;Below is an example diagram modeling some domain concepts:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;---
config:
class:
hideEmptyMembersBox: true
---
classDiagram
Fleet o-- Host: &amp;#34;manages&amp;#34;
Fleet o-- Policy: &amp;#34;checks (may enforce)&amp;#34;
Host o-- IdPUser: &amp;#34;assigned to&amp;#34;
Host &amp;lt;|-- MacOS
Host &amp;lt;|-- Windows
Host &amp;lt;|-- Linux
Fleet --&amp;gt; Apple: communicates with
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It renders as follows:&lt;/p&gt;
&lt;pre class="mermaid"&gt;
---
config:
class:
hideEmptyMembersBox: true
---
classDiagram
Fleet o-- Host: &amp;#34;manages&amp;#34;
Fleet o-- Policy: &amp;#34;checks (may enforce)&amp;#34;
Host o-- IdPUser: &amp;#34;assigned to&amp;#34;
Host &amp;lt;|-- MacOS
Host &amp;lt;|-- Windows
Host &amp;lt;|-- Linux
Fleet --&amp;gt; Apple: communicates with
&lt;/pre&gt;
&lt;p&gt;The syntax is straightforward, as in the basic examples of previous diagrams, and we can quickly throw together this
type of diagram during a meeting.&lt;/p&gt;
&lt;p&gt;Six standard types of relationships can be modeled in a class diagram:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Association&lt;/strong&gt;: A &amp;ldquo;uses-a&amp;rdquo; relationship.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;User --&amp;gt; Order : &amp;quot;places&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="2"&gt;
&lt;li&gt;&lt;strong&gt;Inheritance (Generalization)&lt;/strong&gt;: An &amp;ldquo;is-a&amp;rdquo; relationship.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;Vehicle &amp;lt;|-- Car&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="3"&gt;
&lt;li&gt;&lt;strong&gt;Aggregation&lt;/strong&gt;: A &amp;ldquo;has-a&amp;rdquo; relationship (whole-part with shared ownership).&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;School o-- Student : &amp;quot;contains&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="4"&gt;
&lt;li&gt;&lt;strong&gt;Composition&lt;/strong&gt;: A stronger form of aggregation (whole-part with exclusive ownership).&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;Car *-- Engine: &amp;quot;includes&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="5"&gt;
&lt;li&gt;&lt;strong&gt;Dependency&lt;/strong&gt;: Shows that a class depends on another class.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;Payment &amp;lt;.. Invoice : &amp;quot;depends on&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start="6"&gt;
&lt;li&gt;&lt;strong&gt;Realization&lt;/strong&gt;: Represents an &amp;ldquo;implements&amp;rdquo; relationship.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Example: &lt;code&gt;Interface &amp;lt;|.. Class&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Class diagrams can also include data members and methods. This amount of detail is generally too much to maintain in a
diagram. We recommend only adding this detail when presenting a snapshot or a one-time proposal.&lt;/p&gt;
&lt;p&gt;Here is an example of a class diagram which includes data members and methods:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;classDiagram
class Person {
- name: String
- age: Integer
+ getName(): String
+ setName(name: String): void
}
class Student {
- studentId: Integer
+ enroll(course: Course): void
}
class Course {
- courseName: String
- courseCode: String
+ getDetails(): String
}
Person &amp;lt;|-- Student
Student *-- Course
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The diagram is rendered as follows:&lt;/p&gt;
&lt;pre class="mermaid"&gt;
classDiagram
class Person {
- name: String
- age: Integer
+ getName(): String
+ setName(name: String): void
}
class Student {
- studentId: Integer
+ enroll(course: Course): void
}
class Course {
- courseName: String
- courseCode: String
+ getDetails(): String
}
Person &amp;lt;|-- Student
Student *-- Course
&lt;/pre&gt;
&lt;h2 id="entity-relationship-diagrams-erds"&gt;&lt;a href="#entity-relationship-diagrams-erds" class="header-anchor"&gt;&lt;/a&gt;Entity relationship diagrams (ERDs)
&lt;/h2&gt;&lt;p&gt;An &lt;strong&gt;Entity-Relationship Diagram (ERD)&lt;/strong&gt; is a type of diagram used for visualizing the structure of a database. There
are tools for automatically creating Mermaid ERD diagrams from database schemas. In our experience, ER diagrams are
helpful in proposing changes or examining a snapshot in time. You should not actively maintain ERDs to always match the
current database schema.&lt;/p&gt;
&lt;p&gt;Below is an example schema change proposal:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;erDiagram
HOST_SCIM {
host_id uint PK
scim_user_id uint FK
}
SCIM_USERS {
id string PK
user_name string
first_name string
middle_name string
family_name string
active bool
}
SCIM_USER_EMAILS {
scim_user_id string PK
email string PK
primary bool
type string
}
SCIM_USER_GROUPS {
scim_user_id string PK &amp;#34;FK&amp;#34;
group_id uint PK &amp;#34;FK&amp;#34;
}
SCIM_GROUPS {
id uint PK
name string &amp;#34;Unique&amp;#34;
}
HOST_SCIM }|--|| SCIM_USERS : &amp;#34;multiple hosts can have the same SCIM user&amp;#34;
SCIM_USERS ||--o{ SCIM_USER_GROUPS: &amp;#34;zero-to-many&amp;#34;
SCIM_USER_GROUPS }|--|| SCIM_GROUPS: &amp;#34;one-to-many&amp;#34;
SCIM_USERS ||--o{ SCIM_USER_EMAILS: &amp;#34;zero-to-many&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It renders as follows:&lt;/p&gt;
&lt;pre class="mermaid"&gt;
erDiagram
HOST_SCIM {
host_id uint PK
scim_user_id uint FK
}
SCIM_USERS {
id string PK
user_name string
first_name string
middle_name string
family_name string
active bool
}
SCIM_USER_EMAILS {
scim_user_id string PK
email string PK
primary bool
type string
}
SCIM_USER_GROUPS {
scim_user_id string PK &amp;#34;FK&amp;#34;
group_id uint PK &amp;#34;FK&amp;#34;
}
SCIM_GROUPS {
id uint PK
name string &amp;#34;Unique&amp;#34;
}
HOST_SCIM }|--|| SCIM_USERS : &amp;#34;multiple hosts can have the same SCIM user&amp;#34;
SCIM_USERS ||--o{ SCIM_USER_GROUPS: &amp;#34;zero-to-many&amp;#34;
SCIM_USER_GROUPS }|--|| SCIM_GROUPS: &amp;#34;one-to-many&amp;#34;
SCIM_USERS ||--o{ SCIM_USER_EMAILS: &amp;#34;zero-to-many&amp;#34;
&lt;/pre&gt;
&lt;p&gt;In Mermaid diagrams, cardinality defines the numerical relationship between entities. It specifies how many instances of
one entity can be related to instances of another. Commonly used cardinality syntax in ER diagrams is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;||--||&lt;/code&gt; means &amp;ldquo;one-to-one&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||--o{&lt;/code&gt; means &amp;ldquo;zero-to-many&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;||--|{&lt;/code&gt; means &amp;ldquo;one-to-many&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;}|--|{&lt;/code&gt; means &amp;ldquo;many-to-many&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The left and right parts of the above cardinality examples can be flipped as needed.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we explained &lt;a class="link" href="../software-modularity/" &gt;the business benefits of software modularity and cohesion&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also discussed
&lt;a class="link" href="../scaling-codebase-evolutionary-architecture/" &gt;how to scale your codebase with evolutionary architecture&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-the-intro-to-the-key-mermaid-diagrams"&gt;&lt;a href="#watch-the-intro-to-the-key-mermaid-diagrams" class="header-anchor"&gt;&lt;/a&gt;Watch the intro to the key Mermaid diagrams
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/aMMDMQvSzmc"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>6 lessons from literate programming</title><link>https://victoronsoftware.com/posts/literate-programming-lessons/</link><pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/literate-programming-lessons/</guid><description>&lt;img src="https://victoronsoftware.com/posts/literate-programming-lessons/literate-programming-headline.png" alt="Featured image of post 6 lessons from literate programming" /&gt;&lt;p&gt;This article examines the literate programming paradigm introduced in 1984 by
&lt;a class="link" href="https://en.wikipedia.org/wiki/Donald_Knuth" target="_blank" rel="noopener"
&gt;Donald Knuth&lt;/a&gt;. We go through a &amp;ldquo;Hello World&amp;rdquo; example and extract the key
lessons relevant to making today&amp;rsquo;s software more readable and maintainable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="#literate-programming-hello-world-example" &gt;Literate programming example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#key-takeaways-from-literate-programming" &gt;Key takeaways from literate programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="what-is-literate-programming"&gt;&lt;a href="#what-is-literate-programming" class="header-anchor"&gt;&lt;/a&gt;What is literate programming
&lt;/h2&gt;&lt;p&gt;Literate programming is a paradigm in which a computer program is written in a natural language, such as English. The
programming language source code is embedded into the program&amp;rsquo;s description. The aim was to create an artifact that a
human can easily read without jumping back and forth between different sections of the code file. The writer completely
controls the flow of the document, which can be reorganized in any fashion.&lt;/p&gt;
&lt;p&gt;Knuth called his implementation of literate programming &lt;a class="link" href="https://en.wikipedia.org/wiki/Web_%28programming_system%29" target="_blank" rel="noopener"
&gt;WEB&lt;/a&gt;
to emphasize that a computer program is built from many different pieces. He picked the name before the World Wide Web
was prominent. To produce source code, the user runs the &lt;strong&gt;tangle&lt;/strong&gt; command. To create documentation, the user runs the
&lt;strong&gt;weave&lt;/strong&gt; command.&lt;/p&gt;
&lt;h2 id="literate-programming-hello-world-example"&gt;&lt;a href="#literate-programming-hello-world-example" class="header-anchor"&gt;&lt;/a&gt;Literate programming &amp;ldquo;Hello World&amp;rdquo; example
&lt;/h2&gt;&lt;h3 id="writing-a-literate-program"&gt;&lt;a href="#writing-a-literate-program" class="header-anchor"&gt;&lt;/a&gt;Writing a literate program
&lt;/h3&gt;&lt;p&gt;To demonstrate literate programming, we will use the &lt;a class="link" href="https://github.com/nrnrnr/noweb" target="_blank" rel="noopener"
&gt;noweb&lt;/a&gt; literate programming tool
to write a simple program in Go.&lt;/p&gt;
&lt;p&gt;We create a &lt;code&gt;hello.nw&lt;/code&gt; file and start it with:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;This program teaches us how to print to the screen using:
&amp;lt;&amp;lt;print&amp;gt;&amp;gt;=
fmt.Println(message)
@
To print &amp;#34;Hello World&amp;#34;, pass a literal string to the function:
&amp;lt;&amp;lt;message&amp;gt;&amp;gt;=
&amp;#34;Hello World&amp;#34;
@
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We wrote the program in text with embedded code starting with &lt;code&gt;&amp;lt;&amp;lt;name&amp;gt;&amp;gt;=&lt;/code&gt; and ending with &lt;code&gt;@&lt;/code&gt;. The &lt;code&gt;&amp;lt;&amp;lt;name&amp;gt;&amp;gt;&lt;/code&gt; sections
are macros that we can reuse in other sections of the document, such as:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;Now, we can create a function that prints a message:
&amp;lt;&amp;lt;mypackage_print&amp;gt;&amp;gt;=
func Print(message string) {
&amp;lt;&amp;lt;print&amp;gt;&amp;gt;
}
@
Finally, we can call this function from the main function:
&amp;lt;&amp;lt;main_call&amp;gt;&amp;gt;=
mypackage.Print(&amp;lt;&amp;lt;message&amp;gt;&amp;gt;)
@
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;See &lt;a class="link" href="https://github.com/getvictor/noweb_example/blob/main/hello.nw" target="_blank" rel="noopener"
&gt;the complete literate program&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;h3 id="generating-code-and-documentation-from-the-literate-program"&gt;&lt;a href="#generating-code-and-documentation-from-the-literate-program" class="header-anchor"&gt;&lt;/a&gt;Generating code and documentation from the literate program
&lt;/h3&gt;&lt;p&gt;To install the noweb tool with &lt;code&gt;brew&lt;/code&gt; on macOS, run the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install noweb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To generate the Go source code (tangle):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;notangle -Rgo.mod hello.nw &amp;gt; go.mod
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p mypackage
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;notangle -R&lt;span style="color:#e6db74"&gt;&amp;#39;mypackage/mypackage.go&amp;#39;&lt;/span&gt; hello.nw &amp;gt; mypackage/mypackage.go
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;notangle -Rmain.go hello.nw &amp;gt; main.go
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can run the program: &lt;code&gt;go run main.go&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To generate the HTML documentation (weave):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;noweave -html hello.nw &amp;gt; hello.html
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can open the &lt;code&gt;hello.html&lt;/code&gt; documentation in our web browser.&lt;/p&gt;
&lt;h2 id="key-takeaways-from-literate-programming"&gt;&lt;a href="#key-takeaways-from-literate-programming" class="header-anchor"&gt;&lt;/a&gt;Key takeaways from literate programming
&lt;/h2&gt;&lt;h3 id="1-the-developer-orders-the-code-for-maximum-readability"&gt;&lt;a href="#1-the-developer-orders-the-code-for-maximum-readability" class="header-anchor"&gt;&lt;/a&gt;1. The developer orders the code for maximum readability
&lt;/h3&gt;&lt;p&gt;Most of today&amp;rsquo;s programming languages were not designed with readability as their top guiding principle. They often
require the developer to put code in specific file sections, distracting the reader trying to understand the code. Some
examples include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;imports&lt;/li&gt;
&lt;li&gt;function and variable declarations, including nested functions&lt;/li&gt;
&lt;li&gt;error handling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Today&amp;rsquo;s IDEs (Integrated Development Environments) have tried to help with the situation by automatically collapsing
boilerplate sections. However, we have not seen them take the next step of entirely hiding or virtually relocating
distracting code. This area is where today&amp;rsquo;s programming languages and IDEs need to improve.&lt;/p&gt;
&lt;h3 id="2-comments-are-first-class-citizens"&gt;&lt;a href="#2-comments-are-first-class-citizens" class="header-anchor"&gt;&lt;/a&gt;2. Comments are first-class citizens
&lt;/h3&gt;&lt;p&gt;In literate programming, comments (natural language) are the main body of the program. Source code, on the other hand,
is delegated to macros. Comments are easy to write and can be enhanced with additional processing, such as Markdown,
Mermaid diagrams, etc.&lt;/p&gt;
&lt;p&gt;Many of today&amp;rsquo;s language toolchains also have processors that generate HTML documentation from the comments. However,
none can mix arbitrary pieces of code with their documentation.&lt;/p&gt;
&lt;p&gt;Linting requirements to include comments often lead to meaningless comments that make the code less readable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// This is a class.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Today, the closest mainstream approaches to literate programming are computational notebooks such as
&lt;a class="link" href="https://jupyter.org/" target="_blank" rel="noopener"
&gt;Jupyter&lt;/a&gt; and various online tutorials. These are great for sharing examples and small programs
with others but not sufficient for larger software projects.&lt;/p&gt;
&lt;p&gt;Some IDEs support rendering comments in a different style than the rest of the code, including rendering diagrams.
However, no standard works across IDEs and version control hosting systems like GitHub.&lt;/p&gt;
&lt;h3 id="3-code-from-multiple-source-files-can-be-present-in-one-place"&gt;&lt;a href="#3-code-from-multiple-source-files-can-be-present-in-one-place" class="header-anchor"&gt;&lt;/a&gt;3. Code from multiple source files can be present in one place
&lt;/h3&gt;&lt;p&gt;Literate programming allows us to include arbitrary source files in one program file. This behavior is helpful when you
want to keep related code in one place, such as an interface (abstract class) and its implementation.&lt;/p&gt;
&lt;p&gt;Modern IDEs can find all the implementations of an interface and often have a quick shortcut, allowing the developer to
jump between the two.&lt;/p&gt;
&lt;p&gt;Developers may also write their own preprocessors that split a single file into several modules or compile units.&lt;/p&gt;
&lt;p&gt;Although having more code in one file is sometimes useful, today&amp;rsquo;s developers typically have issues with splitting and
decoupling code files that have become too large and are no longer scalable.&lt;/p&gt;
&lt;h3 id="4-writing-code-is-more-difficult"&gt;&lt;a href="#4-writing-code-is-more-difficult" class="header-anchor"&gt;&lt;/a&gt;4. Writing code is more difficult
&lt;/h3&gt;&lt;p&gt;The main issue with literate programming is that it makes writing code much more difficult for the developer. It
introduces another level of abstraction and another set of tools and concepts that the software developer must be
familiar with.&lt;/p&gt;
&lt;p&gt;This general lesson applies to any system that tries to enhance the coding experience by adding another layer between
the user and the code. The new system must provide overwhelming benefits for software developers to switch to it.
TypeScript is an example of a successful layer over JavaScript.&lt;/p&gt;
&lt;h3 id="5-macros-make-reading-code-more-difficult"&gt;&lt;a href="#5-macros-make-reading-code-more-difficult" class="header-anchor"&gt;&lt;/a&gt;5. Macros make reading code more difficult
&lt;/h3&gt;&lt;p&gt;The literate program contains macros with their own names, adding to the namespace of functions and variables already
present in the computer program. These additional names increase the cognitive load of both reading and creating
literate programs.&lt;/p&gt;
&lt;p&gt;Today&amp;rsquo;s standard guidance is to make your variable and function names descriptive so the reader knows what they do
without additional comments. We can effectively replicate much of literate programming by replacing the literate
programming macros with our own well-named functions and ordering these functions in a file for maximum comprehension.&lt;/p&gt;
&lt;h3 id="6-no-tooling-support"&gt;&lt;a href="#6-no-tooling-support" class="header-anchor"&gt;&lt;/a&gt;6. No tooling support
&lt;/h3&gt;&lt;p&gt;Since literate programming is not widely used, it has little to no tooling support, syntax highlighting, or IDE support.
There is also no standard build system. Instead, the literate programming user must maintain their own custom build
system for the &amp;ldquo;tangle&amp;rdquo; and &amp;ldquo;weave&amp;rdquo; flows.&lt;/p&gt;
&lt;h2 id="see-literate-programming-example-code-on-github"&gt;&lt;a href="#see-literate-programming-example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;See literate programming example code on GitHub
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class="link" href="https://github.com/getvictor/noweb_example" target="_blank" rel="noopener"
&gt;Literate programming example using noweb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Previously, we explained &lt;a class="link" href="../readable-code/" &gt;what readable code is and why it is important&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also reviewed &lt;a class="link" href="../code-complexity-metrics/" &gt;the top code complexity metrics&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="watch-the-literate-programming-example-and-takeaways"&gt;&lt;a href="#watch-the-literate-programming-example-and-takeaways" class="header-anchor"&gt;&lt;/a&gt;Watch the literate programming example and takeaways
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/8cwxxioVbfA"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Create a Chrome extension from scratch step-by-step (2024)</title><link>https://victoronsoftware.com/posts/create-chrome-extension/</link><pubDate>Wed, 15 May 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/create-chrome-extension/</guid><description>&lt;img src="https://victoronsoftware.com/posts/create-chrome-extension/chrome-extension-headline.png" alt="Featured image of post Create a Chrome extension from scratch step-by-step (2024)" /&gt;&lt;p&gt;In this series, we will be building a production-ready Chrome extension. We will start with a basic extension and then
add more features.&lt;/p&gt;
&lt;h2 id="what-is-a-chrome-extension"&gt;&lt;a href="#what-is-a-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;What is a Chrome extension?
&lt;/h2&gt;&lt;p&gt;A Chrome extension is a small software program that customizes the browsing experience. It can modify and enhance the
functionality of the Chrome browser. Extensions are written using web technologies such as HTML, CSS, and JavaScript.&lt;/p&gt;
&lt;h2 id="why-build-a-chrome-extension"&gt;&lt;a href="#why-build-a-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;Why build a Chrome extension?
&lt;/h2&gt;&lt;p&gt;Users can utilize Chrome extensions to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modify web pages&lt;/li&gt;
&lt;li&gt;Automate tasks&lt;/li&gt;
&lt;li&gt;Integrate with third-party services&lt;/li&gt;
&lt;li&gt;Add new features to the browser&lt;/li&gt;
&lt;li&gt;And much more&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="prerequisites"&gt;&lt;a href="#prerequisites" class="header-anchor"&gt;&lt;/a&gt;Prerequisites
&lt;/h2&gt;&lt;p&gt;For this tutorial, no additional tools are required. We will create the extension using a text editor and the Chrome
browser.&lt;/p&gt;
&lt;h2 id="parts-of-chrome-extension"&gt;&lt;a href="#parts-of-chrome-extension" class="header-anchor"&gt;&lt;/a&gt;Three parts of a Chrome extension
&lt;/h2&gt;&lt;p&gt;The three main parts of a Chrome extension are the background script, content script(s), and popup. All these parts are
optional.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/create-chrome-extension/chrome-extension-parts.svg"
alt="Parts of a Chrome extension"&gt;&lt;figcaption&gt;
&lt;h4&gt;Parts of a Chrome extension&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class="link" href="#create-background-script" &gt;background script&lt;/a&gt;: Also known as a &lt;strong&gt;service worker&lt;/strong&gt;, this is a long-running script
that runs in the background. It can listen for events and perform tasks.&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#create-content-script" &gt;content script(s)&lt;/a&gt;: This script runs in the context of a web page. It can interact with the
DOM and modify the page, including adding UI elements. The extension can statically inject this script or dynamically
inject it by the background script or the popup.&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#create-popup" &gt;popup&lt;/a&gt;: This small HTML page appears when a user clicks the extension icon. It can contain buttons,
forms, and other UI elements. This is the extension&amp;rsquo;s user interface.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These three parts of the extension run independently but can communicate with each other using message passing, events,
and storage.&lt;/p&gt;
&lt;p&gt;Our first extension will have a popup with a turn-on/off switch and an input field. The extension will blur the page
elements containing the text in the input field.&lt;/p&gt;
&lt;h2 id="manifestjson-configuration-file"&gt;&lt;a href="#manifestjson-configuration-file" class="header-anchor"&gt;&lt;/a&gt;&lt;code&gt;manifest.json&lt;/code&gt; configuration file
&lt;/h2&gt;&lt;p&gt;Create a &lt;code&gt;src&lt;/code&gt; directory for the extension. This directory will contain all the extension files.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;manifest.json&lt;/code&gt; file is the configuration file of a Chrome extension. It contains metadata about the extension, such
as its name, version, permissions, and scripts.&lt;/p&gt;
&lt;h2 id="create-popup"&gt;&lt;a href="#create-popup" class="header-anchor"&gt;&lt;/a&gt;Creating the popup
&lt;/h2&gt;&lt;p&gt;Add a &lt;code&gt;manifest.json&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;manifest_version&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;My Chrome Extension&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;My first Chrome extension.&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;default_popup&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;popup.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;permissions&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;storage&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;permissions&lt;/code&gt; specify the permissions required by the extension. In this case, we need the &lt;code&gt;storage&lt;/code&gt; permission to
store data in the Chrome storage so that the extension can remember the state of its configuration.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;popup.html&lt;/code&gt; with the content below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-html" data-lang="html"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;html&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;lang&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;My popup&amp;lt;/&lt;span style="color:#f92672"&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;link&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;rel&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;href&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;popup.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;label&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;switch&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;checkbox&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;span&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;slider round&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;class&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;secret&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;id&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;type&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;&lt;span style="color:#f92672"&gt;script&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;src&lt;/span&gt;&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;popup.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style="color:#f92672"&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our &lt;code&gt;popup.html&lt;/code&gt; includes a CSS file and a script. Create &lt;code&gt;popup.js&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;use strict&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;log&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello, world from popup!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;text&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ON&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;OFF&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;action&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;({&lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Handle the ON/OFF switch
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;checkbox&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;checkbox&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;checked&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#f92672"&gt;!!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;checkbox&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addEventListener&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;change&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;instanceof&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HTMLInputElement&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;set&lt;/span&gt;({&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;checked&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;checked&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Handle the input field
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;input&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;input&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;input&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addEventListener&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;change&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;instanceof&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HTMLInputElement&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;set&lt;/span&gt;({&lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;event&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;value&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script listens for changes in the switch and the input field. It saves the switch&amp;rsquo;s state and the input field&amp;rsquo;s
value in Chrome storage.&lt;/p&gt;
&lt;p&gt;Create &lt;code&gt;popup.css&lt;/code&gt; with the following content to style the switch and the input field:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-css" data-lang="css"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/* The switch - the box around the slider */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;switch&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;margin-left&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;30&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;%&lt;/span&gt;; &lt;span style="color:#75715e"&gt;/* Center the switch */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;position&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;relative&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;display&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;inline-block&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;width&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;60&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;height&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;34&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/* Hide default HTML checkbox */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;switch&lt;/span&gt; &lt;span style="color:#f92672"&gt;input&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;opacity&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;width&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;height&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/* The slider */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;slider&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;position&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;absolute&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;cursor&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;pointer&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;top&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;left&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;right&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bottom&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;background-color&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;#ccc&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;slider&lt;/span&gt;::&lt;span style="color:#a6e22e"&gt;before&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;position&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;absolute&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;content&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;height&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;26&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;width&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;26&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;left&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;bottom&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;4&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;background-color&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;white&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt;:&lt;span style="color:#a6e22e"&gt;checked&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;slider&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;background-color&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;#2196F3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;input&lt;/span&gt;:&lt;span style="color:#a6e22e"&gt;checked&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; .&lt;span style="color:#a6e22e"&gt;slider&lt;/span&gt;:&lt;span style="color:#a6e22e"&gt;before&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;transform&lt;/span&gt;: translateX(&lt;span style="color:#ae81ff"&gt;26&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;); &lt;span style="color:#75715e"&gt;/* Move the slider to the right when checked */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/* Rounded sliders */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;slider&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;round&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;border-radius&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;34&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;slider&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;round&lt;/span&gt;::&lt;span style="color:#a6e22e"&gt;before&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;border-radius&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;50&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;.&lt;span style="color:#a6e22e"&gt;secret&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;margin&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;5&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="loading-and-testing-the-extension-in-chrome"&gt;&lt;a href="#loading-and-testing-the-extension-in-chrome" class="header-anchor"&gt;&lt;/a&gt;Loading and testing the extension in Chrome
&lt;/h2&gt;&lt;p&gt;Even though we have not added the background script and content script, we can load the extension in Chrome.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the Chrome browser.&lt;/li&gt;
&lt;li&gt;Go to &lt;code&gt;chrome://extensions/&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Enable the &lt;strong&gt;Developer mode&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Click on &lt;strong&gt;Load unpacked&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Select the &lt;code&gt;src&lt;/code&gt; directory containing the extension files.&lt;/li&gt;
&lt;li&gt;Click &lt;strong&gt;Select Folder&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The extension will be loaded.&lt;/li&gt;
&lt;li&gt;Pin the extension to the toolbar by clicking the pin button in the extension dropdown. This pin will make it easier
to test the extension.&lt;/li&gt;
&lt;li&gt;The popup page will appear when you click the &lt;code&gt;M&lt;/code&gt; extension icon.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/create-chrome-extension/chrome-extension-popup.png"
alt="Chrome extension popup"&gt;&lt;figcaption&gt;
&lt;h4&gt;Chrome extension popup&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We can now do some basic testing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Test the switch and the input field. The state of the switch and the value of the input field should be saved in the
Chrome storage. The values should persist even after restarting the browser.&lt;/li&gt;
&lt;li&gt;The badge text of the extension icon should change to &amp;ldquo;ON&amp;rdquo; or &amp;ldquo;OFF&amp;rdquo; based on the state of the switch.&lt;/li&gt;
&lt;li&gt;To inspect the extension, right-click the extension icon and select &lt;strong&gt;Inspect popup&lt;/strong&gt;. You should see a &amp;ldquo;Hello,
world&amp;rdquo; message in the &lt;strong&gt;Console&lt;/strong&gt; tab.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="create-content-script"&gt;&lt;a href="#create-content-script" class="header-anchor"&gt;&lt;/a&gt;Creating the content script
&lt;/h2&gt;&lt;p&gt;Update the &lt;code&gt;manifest.json&lt;/code&gt; file to include the &lt;code&gt;content_scripts&lt;/code&gt; section. The entire file should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;manifest_version&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;My Chrome Extension&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;My first Chrome extension.&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;default_popup&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;popup.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;permissions&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;storage&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;content_scripts&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;matches&amp;#34;&lt;/span&gt;: [&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;lt;all_urls&amp;gt;&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;js&amp;#34;&lt;/span&gt;: [&lt;span style="color:#e6db74"&gt;&amp;#34;content.js&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create the new file &lt;code&gt;content.js&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;use strict&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;blurFilter&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;blur(6px)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;textToBlur&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Search this DOM node for text to blur and blur the parent element if found.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;childNodes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;length&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; Array.&lt;span style="color:#a6e22e"&gt;from&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;childNodes&lt;/span&gt;).&lt;span style="color:#a6e22e"&gt;forEach&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;nodeType&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;Node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;TEXT_NODE&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;textContent&lt;/span&gt; &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;textContent&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;trim&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;length&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;parentElement&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt; &lt;span style="color:#f92672"&gt;!==&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;null&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;tagName&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;SCRIPT&amp;#39;&lt;/span&gt; &lt;span style="color:#f92672"&gt;||&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;filter&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;blurFilter&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Already blurred
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;node&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;textContent&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;includes&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;textToBlur&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;blurElement&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;parent&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;blurElement&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;style&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;filter&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;blurFilter&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;console&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;debug&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;blurred id:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;id&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34; class:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;className&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34; tag:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;tagName&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34; text:&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;+&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;elem&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;textContent&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create a MutationObserver to watch for changes to the DOM.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;observer&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;MutationObserver&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;mutations&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mutations&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;forEach&lt;/span&gt;((&lt;span style="color:#a6e22e"&gt;mutation&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;mutation&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addedNodes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;length&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;mutation&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addedNodes&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;forEach&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; } &lt;span style="color:#66d9ef"&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;mutation&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;target&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Enable the content script by default.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;let&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;keys&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; [&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;, &lt;span style="color:#e6db74"&gt;&amp;#34;item&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;keys&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;===&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;textToBlur&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;item&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Only start observing the DOM if the extension is enabled and there is text to blur.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; (&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;textToBlur&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;trim&lt;/span&gt;().&lt;span style="color:#a6e22e"&gt;length&lt;/span&gt; &lt;span style="color:#f92672"&gt;&amp;gt;&lt;/span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;observer&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;observe&lt;/span&gt;(document, {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;attributes&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;characterData&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;childList&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;subtree&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#75715e"&gt;// Loop through all elements on the page for initial processing.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;processNode&lt;/span&gt;(document)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script listens for changes in the DOM and blurs elements that contain the text specified in the input field of the
popup.&lt;/p&gt;
&lt;p&gt;At this point, we can test the extension by entering text in the input field and enabling it. After reloading the page,
the extension should blur elements that contain the text.&lt;/p&gt;
&lt;h2 id="create-background-script"&gt;&lt;a href="#create-background-script" class="header-anchor"&gt;&lt;/a&gt;Creating the background script
&lt;/h2&gt;&lt;p&gt;Our background script will update the badge text of the extension icon on startup.&lt;/p&gt;
&lt;p&gt;Update the &lt;code&gt;manifest.json&lt;/code&gt; file to include the &lt;code&gt;background&lt;/code&gt; section. The complete file should look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;manifest_version&amp;#34;&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;3&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;My Chrome Extension&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;0.1.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;My first Chrome extension.&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;action&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;default_popup&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;popup.html&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;permissions&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;storage&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;content_scripts&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;matches&amp;#34;&lt;/span&gt;: [&lt;span style="color:#e6db74"&gt;&amp;#34;&amp;lt;all_urls&amp;gt;&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;js&amp;#34;&lt;/span&gt;: [&lt;span style="color:#e6db74"&gt;&amp;#34;content.js&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;background&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;service_worker&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;background.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Create a new file &lt;code&gt;background.js&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;use strict&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;text&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt; &lt;span style="color:#f92672"&gt;?&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ON&amp;#34;&lt;/span&gt; &lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;OFF&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;void&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;action&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;({&lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;text&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;function&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;startUp&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;storage&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;sync&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;get&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;, (&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;setBadgeText&lt;/span&gt;(&lt;span style="color:#f92672"&gt;!!&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;enabled&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; })
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Ensure the background script always runs.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;onStartup&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addListener&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;startUp&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;chrome&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;runtime&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;onInstalled&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;addListener&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;startUp&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script listens for the startup and installation events and sets the badge text based on the extension&amp;rsquo;s saved state.&lt;/p&gt;
&lt;p&gt;At this point, our basic extension is complete. We can test the extension.&lt;/p&gt;
&lt;h2 id="next-steps"&gt;&lt;a href="#next-steps" class="header-anchor"&gt;&lt;/a&gt;Next steps
&lt;/h2&gt;&lt;p&gt;In the next part of this series, we will
&lt;a class="link" href="../add-webpack-and-typescript-to-chrome-extension" &gt;add development tooling to the Chrome extension, such as TypeScript support, a bundling tool called webpack, and a development mode that will reload the extension automatically when changes are made&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a list of all articles in the series, see the
&lt;a class="link" href="../chrome-extension" &gt;production-ready Chrome extension series overview&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="other-getting-started-guides"&gt;&lt;a href="#other-getting-started-guides" class="header-anchor"&gt;&lt;/a&gt;Other getting started guides
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we wrote about
&lt;a class="link" href="../react-hello-world" &gt;creating a React application from scratch while minimizing the amount of tools used&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We also have a guide on &lt;a class="link" href="../using-c-and-go-with-cgo-is-tricky" &gt;getting started with CGO in Go&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="basic-extension-code-on-github"&gt;&lt;a href="#basic-extension-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Basic extension code on GitHub
&lt;/h2&gt;&lt;p&gt;The complete code is available on GitHub at:
&lt;a class="link" href="https://github.com/getvictor/create-chrome-extension/tree/main/1-basic-extension" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/create-chrome-extension/tree/main/1-basic-extension&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="create-a-chrome-extension-from-scratch-step-by-step-video"&gt;&lt;a href="#create-a-chrome-extension-from-scratch-step-by-step-video" class="header-anchor"&gt;&lt;/a&gt;Create a Chrome extension from scratch step-by-step video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/2dQJYDAAU4I"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Create an IPv6-only Linux server in 3 easy steps</title><link>https://victoronsoftware.com/posts/create-ipv6-only-linux-server/</link><pubDate>Wed, 08 May 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/create-ipv6-only-linux-server/</guid><description>&lt;img src="https://victoronsoftware.com/posts/create-ipv6-only-linux-server/ipv6-only.png" alt="Featured image of post Create an IPv6-only Linux server in 3 easy steps" /&gt;&lt;h2 id="introduction"&gt;&lt;a href="#introduction" class="header-anchor"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;&lt;p&gt;IPv6 is the latest version of the Internet Protocol. It provides a larger address space than IPv4, which is running out
of addresses. IPv6 is essential for the future of the Internet, and many cloud providers support it.&lt;/p&gt;
&lt;p&gt;In addition, IPv6 is more secure than IPv4. It has built-in security features like IPsec, which is optional in IPv4.
IPv6 also has a simplified header, which makes it faster than IPv4.&lt;/p&gt;
&lt;p&gt;Many corporations use IPv6 internally, and some have even disabled IPv4. This tutorial will create a Linux VM using
IPv6, with IPv4 disabled.&lt;/p&gt;
&lt;p&gt;The steps are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a class="link" href="#create-linux-server-with-ipv6-enabled" &gt;Create droplets with IPv6 enabled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#ssh-from-ipv4-client-to-ipv6-only-server" &gt;SSH from IPv4 client to IPv6-only server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="link" href="#disable-ipv4-on-linux-server" &gt;Disable IPv4 on the Linux server&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="prerequisites"&gt;&lt;a href="#prerequisites" class="header-anchor"&gt;&lt;/a&gt;Prerequisites
&lt;/h2&gt;&lt;p&gt;We will use &lt;a class="link" href="https://www.digitalocean.com/" target="_blank" rel="noopener"
&gt;Digital Ocean&lt;/a&gt; as our cloud provider. Their IPv6 documentation is available
at &lt;a class="link" href="https://docs.digitalocean.com/products/networking/ipv6/" target="_blank" rel="noopener"
&gt;https://docs.digitalocean.com/products/networking/ipv6/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Droplets are Digital Ocean&amp;rsquo;s virtual private servers. They run on virtualized hardware and are available in various
sizes. We will create a new droplet with IPv6.&lt;/p&gt;
&lt;h2 id="create-linux-server-with-ipv6-enabled"&gt;&lt;a href="#create-linux-server-with-ipv6-enabled" class="header-anchor"&gt;&lt;/a&gt;Step 1: Create droplets with IPv6 enabled
&lt;/h2&gt;&lt;p&gt;We will create two Digital Ocean droplets. The first droplet will have only IPv6 enabled, and the second droplet will
have both IPv4 and IPv6 enabled. We only need the second droplet to SSH into the first droplet because our client
machine uses IPv4 only.&lt;/p&gt;
&lt;p&gt;Both droplets will use Ubuntu 24.04 (LTS), although any Linux distribution should work. Both droplets should have IPv6
enabled in Advanced Options.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/create-ipv6-only-linux-server/enable-ipv6.png"
alt="Enable IPv6 checkbox"&gt;
&lt;/figure&gt;
&lt;p&gt;The first droplet will use the Password authentication method.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/create-ipv6-only-linux-server/droplet-authentication-method.png"
alt="Choose Droplet authentication method"&gt;
&lt;/figure&gt;
&lt;p&gt;The second droplet can have either Password or SSH authentication.&lt;/p&gt;
&lt;h2 id="ssh-from-ipv4-client-to-ipv6-only-server"&gt;&lt;a href="#ssh-from-ipv4-client-to-ipv6-only-server" class="header-anchor"&gt;&lt;/a&gt;Step 2: SSH from IPv4 client to IPv6-only server
&lt;/h2&gt;&lt;p&gt;You can find the Droplet IPv4 and IPv6 addresses in the Droplet details.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/create-ipv6-only-linux-server/droplet-details.png"
alt="Droplet details"&gt;
&lt;/figure&gt;
&lt;p&gt;Now, we connect to the second droplet using SSH.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ssh root@143.198.235.211
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From there, we can SSH into the first droplet using its IPv6 address.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ssh root@2604:a880:4:1d0::4d3:3000
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Install the &lt;code&gt;net-tools&lt;/code&gt; package to use the &lt;code&gt;ifconfig&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt update
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo apt install net-tools
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="disable-ipv4-on-linux-server"&gt;&lt;a href="#disable-ipv4-on-linux-server" class="header-anchor"&gt;&lt;/a&gt;Step 3: Disable IPv4 on the Linux server
&lt;/h2&gt;&lt;p&gt;To disable IPv4 on the first droplet, edit the &lt;code&gt;/etc/netplan/50-cloud-init.yaml&lt;/code&gt; network configuration file by removing
all the IPv4 addresses and routes, and adding the IPv6 nameservers, as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;network&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;version&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ethernets&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;eth0&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;accept-ra&lt;/span&gt;: &lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;addresses&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;2604&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;a880:4:1d0::4d3:3000/64&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;match&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;macaddress&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;da:a1:07:89:d9:a1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;mtu&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;1500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;nameservers&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;addresses&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;2001&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;4860&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;4860&lt;/span&gt;::&lt;span style="color:#ae81ff"&gt;8844&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;2001&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;4860&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;4860&lt;/span&gt;::&lt;span style="color:#ae81ff"&gt;8888&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;search&lt;/span&gt;: []
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;routes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#f92672"&gt;to&lt;/span&gt;: ::&lt;span style="color:#ae81ff"&gt;/0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;via&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;2604&lt;/span&gt;:&lt;span style="color:#ae81ff"&gt;a880:4:1d0::1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;set-name&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;eth0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apply the changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sudo netplan apply --debug
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, you can view the network configuration using the &lt;code&gt;ifconfig&lt;/code&gt; command. It should look like:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;eth0: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500
inet6 fe80::d8a1:7ff:fe89:d9a1 prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt;
inet6 2604:a880:4:1d0::4d3:3000 prefixlen 64 scopeid 0x0&amp;lt;global&amp;gt;
ether da:a1:07:89:d9:a1 txqueuelen 1000 (Ethernet)
RX packets 5179 bytes 3832240 (3.8 MB)
RX errors 0 dropped 0 overruns 0 frame 0
TX packets 5099 bytes 696019 (696.0 KB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
eth1: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500
inet6 fe80::e826:4cff:feb7:6659 prefixlen 64 scopeid 0x20&amp;lt;link&amp;gt;
ether ea:26:4c:b7:66:59 txqueuelen 1000 (Ethernet)
RX packets 12 bytes 916 (916.0 B)
RX errors 0 dropped 0 overruns 0 frame 0
TX packets 43 bytes 2266 (2.2 KB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
lo: flags=73&amp;lt;UP,LOOPBACK,RUNNING&amp;gt; mtu 65536
inet 127.0.0.1 netmask 255.0.0.0
inet6 ::1 prefixlen 128 scopeid 0x10&amp;lt;host&amp;gt;
loop txqueuelen 1000 (Local Loopback)
RX packets 233 bytes 22136 (22.1 KB)
RX errors 0 dropped 0 overruns 0 frame 0
TX packets 233 bytes 22136 (22.1 KB)
TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can see that the &lt;code&gt;eth0&lt;/code&gt; interface has an IPv6 address but no IPv4 address. The &lt;code&gt;eth1&lt;/code&gt; interface also has an IPv6
address. The &lt;code&gt;lo&lt;/code&gt; interface is the loopback interface and still uses the IPv4 &lt;code&gt;127.0.0.1&lt;/code&gt; address. We will not disable
IPv4 on the loopback interface at this point since many tools may break.&lt;/p&gt;
&lt;h2 id="transfer-files-between-ipv4-and-ipv6-only-servers"&gt;&lt;a href="#transfer-files-between-ipv4-and-ipv6-only-servers" class="header-anchor"&gt;&lt;/a&gt;Transfer files between IPv4 and IPv6-only servers
&lt;/h2&gt;&lt;p&gt;To transfer files between the IPv4 and IPv6-only servers, you can use the &lt;code&gt;scp&lt;/code&gt; command. First, transfer to the droplet
that supports both IPv4 and IPv6, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;scp fleet-osquery_1.24.0_amd64.deb root@143.198.235.211:~
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, SSH into that droplet and transfer the file to the IPv6-only droplet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;scp fleet-osquery_1.24.0_amd64.deb root@&lt;span style="color:#ae81ff"&gt;\[&lt;/span&gt;2604:a880:4:1d0::4d3:3000&lt;span style="color:#ae81ff"&gt;\]&lt;/span&gt;:~
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="conclusion"&gt;&lt;a href="#conclusion" class="header-anchor"&gt;&lt;/a&gt;Conclusion
&lt;/h2&gt;&lt;p&gt;In this tutorial, we created a Linux VM using IPv6, with IPv4 disabled. We also transferred files between an IPv4 and an
IPv6-only server. IPv6 is the future of the Internet, and learning how to use it is essential. You can now create your
own IPv6-only servers and experiment with them.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;p&gt;Recently, we discussed &lt;a class="link" href="../why-you-need-vlan/" &gt;why you need VLANs in your home network&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="create-an-ipv6-only-linux-server-video"&gt;&lt;a href="#create-an-ipv6-only-linux-server-video" class="header-anchor"&gt;&lt;/a&gt;Create an IPv6-only Linux server video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/BjdHmyzfe80"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Build a React app from scratch: getting started (2024)</title><link>https://victoronsoftware.com/posts/react-hello-world/</link><pubDate>Wed, 24 Apr 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/react-hello-world/</guid><description>&lt;img src="https://victoronsoftware.com/posts/react-hello-world/react-hello-world.png" alt="Featured image of post Build a React app from scratch: getting started (2024)" /&gt;&lt;h2 id="introduction"&gt;&lt;a href="#introduction" class="header-anchor"&gt;&lt;/a&gt;Introduction
&lt;/h2&gt;&lt;p&gt;In this article, we will create a simple React app from scratch. We will not use any templates or helper scripts. We aim
to reduce tool usage and fully understand each step of the process.&lt;/p&gt;
&lt;h2 id="what-is-react"&gt;&lt;a href="#what-is-react" class="header-anchor"&gt;&lt;/a&gt;What is React?
&lt;/h2&gt;&lt;p&gt;React is a popular JavaScript library for building user interfaces. It was created by Meta (Facebook) and is maintained
by Meta and a community of developers. React is used to build single-page applications (SPAs) and dynamic web
applications.&lt;/p&gt;
&lt;h2 id="prerequisites--nodejs-and-npm"&gt;&lt;a href="#prerequisites--nodejs-and-npm" class="header-anchor"&gt;&lt;/a&gt;Prerequisites &amp;ndash; Node.js and npm
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://docs.npmjs.com/downloading-and-installing-node-js-and-npm" target="_blank" rel="noopener"
&gt;Node.js and npm&lt;/a&gt; are the most popular tools for
working with React. Node.js is a JavaScript runtime. npm is a package manager for Node.js. These two tools are essential
for modern web development.&lt;/p&gt;
&lt;h2 id="packagejson"&gt;&lt;a href="#packagejson" class="header-anchor"&gt;&lt;/a&gt;package.json
&lt;/h2&gt;&lt;p&gt;We will start by creating a &lt;code&gt;package.json&lt;/code&gt; file. This file contains metadata about the project and its dependencies. You
can use the &lt;code&gt;npm init&lt;/code&gt; command to create the &lt;code&gt;package.json&lt;/code&gt; file. Or create one yourself containing something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;react-hello-world&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Hello world app using React&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;repository&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://github.com/getvictor/react&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;author&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;getvictor&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;license&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;MIT&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="typescript"&gt;&lt;a href="#typescript" class="header-anchor"&gt;&lt;/a&gt;TypeScript
&lt;/h2&gt;&lt;p&gt;Next, we will add &lt;a class="link" href="https://www.typescriptlang.org/" target="_blank" rel="noopener"
&gt;TypeScript&lt;/a&gt; to our project. TypeScript is a superset of JavaScript
that adds static types to the language. It helps catch errors early in the development process and improves code
quality.&lt;/p&gt;
&lt;p&gt;Although TypeScript is not required to build a React app, it is strongly recommended. TypeScript is widely used in the
React community and provides many benefits. Modern IDEs, such as Visual Studio Code and WebStorm, support TypeScript,
making development and learning easier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev typescript
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command updates the &lt;code&gt;package.json&lt;/code&gt; file with the TypeScript dependency.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;react-hello-world&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Hello world app using React&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;repository&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://github.com/getvictor/react&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;author&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;getvictor&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;license&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;MIT&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;devDependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;typescript&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.4.5&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It also creates a &lt;code&gt;node_modules&lt;/code&gt; directory. This directory contains the packages installed by npm.&lt;/p&gt;
&lt;p&gt;Finally, the command creates a &lt;code&gt;package-lock.json&lt;/code&gt; file. This file locks the dependencies to specific versions, ensuring
that the project is built with the same versions of the dependencies across different machines.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;--save-dev&lt;/code&gt; flag tells npm to save the package as a development dependency. Development dependencies are not
required for the production build of the app.&lt;/p&gt;
&lt;h3 id="tsconfigjson"&gt;&lt;a href="#tsconfigjson" class="header-anchor"&gt;&lt;/a&gt;tsconfig.json
&lt;/h3&gt;&lt;p&gt;We need to create a &lt;code&gt;tsconfig.json&lt;/code&gt; file to
&lt;a class="link" href="https://www.typescriptlang.org/docs/handbook/tsconfig-json.html" target="_blank" rel="noopener"
&gt;configure TypeScript&lt;/a&gt;. This file specifies the root
files and compiler options for the TypeScript compiler. We will extend the recommended base configuration.&lt;/p&gt;
&lt;p&gt;Install the recommended configuration with the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev @tsconfig/recommended
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, create a &lt;code&gt;tsconfig.json&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;extends&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;@tsconfig/recommended/tsconfig.json&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;compilerOptions&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;jsx&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;react-jsx&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="what-is-jsx"&gt;&lt;a href="#what-is-jsx" class="header-anchor"&gt;&lt;/a&gt;What is JSX?
&lt;/h2&gt;&lt;p&gt;In our &lt;code&gt;tsconfig.json&lt;/code&gt; file, we set the &lt;code&gt;jsx&lt;/code&gt; option to &lt;code&gt;react-jsx&lt;/code&gt;. This option tells TypeScript to treat JSX as React
JSX.&lt;/p&gt;
&lt;p&gt;&lt;a class="link" href="https://en.wikipedia.org/wiki/JSX_%28JavaScript%29" target="_blank" rel="noopener"
&gt;JSX&lt;/a&gt; is a syntax extension for JavaScript. It allows you to write
HTML-like code in JavaScript. JSX is used in React. It is syntactic sugar that is generally transpiled into JavaScript
by the build tool.&lt;/p&gt;
&lt;h2 id="react-and-reactdom"&gt;&lt;a href="#react-and-reactdom" class="header-anchor"&gt;&lt;/a&gt;React and ReactDOM
&lt;/h2&gt;&lt;p&gt;Next, we will add &lt;a class="link" href="https://react.dev/" target="_blank" rel="noopener"
&gt;React&lt;/a&gt; and &lt;a class="link" href="https://react.dev/reference/react-dom" target="_blank" rel="noopener"
&gt;ReactDOM&lt;/a&gt; to our project.
React is the base library. ReactDOM is the package that provides DOM-specific methods for React.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install react react-dom
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Since we are using TypeScript, we must also install
&lt;a class="link" href="https://www.typescriptlang.org/docs/handbook/2/type-declarations.html" target="_blank" rel="noopener"
&gt;type definitions&lt;/a&gt; for React and ReactDOM. The
TypeScript compiler uses these definitions for type checking.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev @types/react @types/react-dom
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="what-is-webpack"&gt;&lt;a href="#what-is-webpack" class="header-anchor"&gt;&lt;/a&gt;What is Webpack?
&lt;/h2&gt;&lt;p&gt;&lt;a class="link" href="https://webpack.js.org/" target="_blank" rel="noopener"
&gt;Webpack&lt;/a&gt; is a module bundler for JavaScript. It takes modules with dependencies and generates
static assets representing those modules. We will use Webpack as the build tool for our React app.&lt;/p&gt;
&lt;p&gt;We will install the Webpack packages:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev webpack webpack-cli webpack-dev-server html-webpack-plugin ts-loader
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;webpack&lt;/code&gt; is the core package&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack-cli&lt;/code&gt; provides the command-line interface, which we will use to run Webpack commands&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack-dev-server&lt;/code&gt; is a development server that serves the app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html-webpack-plugin&lt;/code&gt; will generate the index.html file to serve our app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ts-loader&lt;/code&gt; is a TypeScript loader for Webpack. It allows Webpack to compile TypeScript files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="webpackconfigts"&gt;&lt;a href="#webpackconfigts" class="header-anchor"&gt;&lt;/a&gt;webpack.config.ts
&lt;/h3&gt;&lt;p&gt;By default, Webpack does not need a configuration file. However, since we use TypeScript, we must create a
&lt;code&gt;webpack.config.ts&lt;/code&gt; file to configure Webpack.&lt;/p&gt;
&lt;p&gt;Note that we use the &lt;code&gt;.ts&lt;/code&gt; extension for the configuration file. The TypeScript compiler will compile this file. Using a
&lt;code&gt;.js&lt;/code&gt; file is also possible, but we prefer TypeScript for type safety.&lt;/p&gt;
&lt;p&gt;No additional type definitions are required for our Webpack configuration at this time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-javascript" data-lang="javascript"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HtmlWebpackPlugin&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;html-webpack-plugin&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;module&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;exports&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;entry&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;./src/index.tsx&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;module&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;rules&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;test&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/\.(ts|tsx)$/&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;loader&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;ts-loader&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;exclude&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; &lt;span style="color:#e6db74"&gt;/node_modules/&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; ],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;plugins&lt;/span&gt;&lt;span style="color:#f92672"&gt;:&lt;/span&gt; [&lt;span style="color:#66d9ef"&gt;new&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HtmlWebpackPlugin&lt;/span&gt;()],
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We specify &lt;code&gt;src/index.tsx&lt;/code&gt; as our app&amp;rsquo;s top-level file. By default, the build&amp;rsquo;s output will go to the &lt;code&gt;dist&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;We configure the TypeScript loader to compile &lt;code&gt;.ts&lt;/code&gt; and &lt;code&gt;.tsx&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;We also use the &lt;code&gt;html-webpack-plugin&lt;/code&gt; to generate an &lt;code&gt;index.html&lt;/code&gt; file. This file will load the Webpack bundle.&lt;/p&gt;
&lt;p&gt;We need to add a TypeScript execution engine to the Node.js runtime so that it can understand the above TypeScript
configuration file. We will use &lt;code&gt;ts-node&lt;/code&gt; for this purpose.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm install --save-dev ts-node
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="final-packagejson"&gt;&lt;a href="#final-packagejson" class="header-anchor"&gt;&lt;/a&gt;Final package.json
&lt;/h2&gt;&lt;p&gt;After all the installations, our &lt;code&gt;package.json&lt;/code&gt; file should look similar to this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;react-hello-world&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;version&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;Hello world app using React&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;repository&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;https://github.com/getvictor/react&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;author&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;getvictor&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;license&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;MIT&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;devDependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;@tsconfig/recommended&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^1.0.6&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;@types/react&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^18.2.79&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;@types/react-dom&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^18.2.25&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;html-webpack-plugin&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.6.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;ts-loader&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^9.5.1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;ts-node&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^10.9.2&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;typescript&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.4.5&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;webpack&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.91.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;webpack-cli&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.1.4&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;webpack-dev-server&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^5.0.4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;dependencies&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;react&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^18.2.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;react-dom&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;^18.2.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="srcindextsx"&gt;&lt;a href="#srcindextsx" class="header-anchor"&gt;&lt;/a&gt;src/index.tsx
&lt;/h2&gt;&lt;p&gt;We are finally ready to write some React code. TSX files are TypeScript files that contain JSX.&lt;/p&gt;
&lt;p&gt;We will create the &lt;code&gt;src/index.tsx&lt;/code&gt; file. It will render a simple React component. React components are the reusable
building blocks of React apps.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-tsx" data-lang="tsx"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;React&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;react&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;import&lt;/span&gt; {&lt;span style="color:#a6e22e"&gt;createRoot&lt;/span&gt;} &lt;span style="color:#66d9ef"&gt;from&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;react-dom/client&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// A simple Class component
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;class&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;HelloWorld&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;extends&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;React&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Component&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;render() {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &amp;lt;&lt;span style="color:#f92672"&gt;h1&lt;/span&gt;&amp;gt;&lt;span style="color:#a6e22e"&gt;Hello&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;world&lt;/span&gt;&lt;span style="color:#f92672"&gt;!&lt;/span&gt;&amp;lt;/&lt;span style="color:#f92672"&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Use traditional DOM manipulation to create a root element for React
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;document.&lt;span style="color:#a6e22e"&gt;body&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;innerHTML&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#39;&amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Create a root element for React
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;app&lt;/span&gt; &lt;span style="color:#f92672"&gt;=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;createRoot&lt;/span&gt;(document.&lt;span style="color:#a6e22e"&gt;getElementById&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;app&amp;#34;&lt;/span&gt;)&lt;span style="color:#f92672"&gt;!&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// Render our HelloWorld component
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;app&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;render&lt;/span&gt;(&amp;lt;&lt;span style="color:#f92672"&gt;HelloWorld&lt;/span&gt;/&amp;gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="running-the-app-on-the-webpack-development-server"&gt;&lt;a href="#running-the-app-on-the-webpack-development-server" class="header-anchor"&gt;&lt;/a&gt;Running the app on the Webpack development server
&lt;/h2&gt;&lt;p&gt;Now, we can run the app on the Webpack development server. This server will serve the app and automatically reload the
page when the code changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;node_modules/.bin/webpack serve --mode development --open
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;--mode development&lt;/code&gt; flag tells Webpack to build the app in development mode. The &lt;code&gt;--open&lt;/code&gt; flag tells Webpack to
open the app in the default browser.&lt;/p&gt;
&lt;p&gt;The browser should show the following:&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/react-hello-world/hello-world.png"
alt="React app served by Webpack dev server"&gt;&lt;figcaption&gt;
&lt;h4&gt;React app served by Webpack dev server&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="packagejson-scripts"&gt;&lt;a href="#packagejson-scripts" class="header-anchor"&gt;&lt;/a&gt;package.json scripts
&lt;/h3&gt;&lt;p&gt;Instead of remembering the above &lt;code&gt;webpack&lt;/code&gt; command, we can add a script to the &lt;code&gt;package.json&lt;/code&gt; file to run the Webpack
development server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-json" data-lang="json"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;scripts&amp;#34;&lt;/span&gt;&lt;span style="color:#960050;background-color:#1e0010"&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;#34;start&amp;#34;&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;webpack serve --mode development --open&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;start&lt;/code&gt; is a special script name that maps to the &lt;code&gt;npm start&lt;/code&gt; command. Now, we can run the development server with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;npm run start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="building-the-app-for-production"&gt;&lt;a href="#building-the-app-for-production" class="header-anchor"&gt;&lt;/a&gt;Building the app for production
&lt;/h2&gt;&lt;p&gt;To build the app for production, we can run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;node_modules/.bin/webpack --mode production
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command will create a &lt;code&gt;dist&lt;/code&gt; directory with the app&amp;rsquo;s production build. The directory will contain the &lt;code&gt;index.html&lt;/code&gt;
file and the &lt;code&gt;main.js&lt;/code&gt; JavaScript bundle. The production files are optimized for performance, and they are minified and
compressed to reduce their size.&lt;/p&gt;
&lt;p&gt;It is possible to host these production files on a local HTTP server like Apache or Nginx, or deploy the app to cloud
providers such as AWS, Cloudflare Pages, Netlify, Render, or Vercel.&lt;/p&gt;
&lt;h2 id="other-getting-started-guides"&gt;&lt;a href="#other-getting-started-guides" class="header-anchor"&gt;&lt;/a&gt;Other getting started guides
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we wrote about
&lt;a class="link" href="../create-chrome-extension" &gt;creating a Chrome extension from scratch &lt;strong&gt;without&lt;/strong&gt; any additional tooling&lt;/a&gt;.
&lt;ul&gt;
&lt;li&gt;As part of that series, we covered
&lt;a class="link" href="../linting-and-formatting-typescript" &gt;adding linting and formatting tooling for TypeScript&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;We also have a guide on &lt;a class="link" href="../using-c-and-go-with-cgo-is-tricky" &gt;using CGO in Go programming language&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/react/tree/main/1-hello-world" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/react/tree/main/1-hello-world&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="react-hello-world-video"&gt;&lt;a href="#react-hello-world-video" class="header-anchor"&gt;&lt;/a&gt;React Hello World video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/BSjmsUpdSYE"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Mutual TLS intro and hands-on example</title><link>https://victoronsoftware.com/posts/mtls-hello-world/</link><pubDate>Wed, 24 Jan 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mtls-hello-world/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mtls-hello-world/mtls-handshake.png" alt="Featured image of post Mutual TLS intro and hands-on example" /&gt;&lt;h2 id="what-is-mtls-mutual-tls"&gt;&lt;a href="#what-is-mtls-mutual-tls" class="header-anchor"&gt;&lt;/a&gt;What is mTLS (mutual TLS)?
&lt;/h2&gt;&lt;p&gt;TLS stands for Transport Layer Security. It is a cryptographic protocol that provides privacy and data integrity between
two communicating applications. It is the successor to SSL (Secure Sockets Layer).&lt;/p&gt;
&lt;p&gt;In ordinary (non-mutual) TLS, the client authenticates the server, but the server does not authenticate the client. Most
websites use regular TLS. The client (web browser) knows it is talking to the correct server (website), but the server
knows very little about the client. Instead, web applications use other client authentication methods, such as
passwords, cookies, and session tokens.&lt;/p&gt;
&lt;p&gt;Mutual TLS (mTLS) is a way to authenticate both the client and the server in a TLS connection. It is also known as
client certificate authentication. In addition to the server authenticating itself to the client, the client also
authenticates itself to the server.&lt;/p&gt;
&lt;p&gt;mTLS is helpful as an additional layer of security. It is used in many applications, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VPNs&lt;/li&gt;
&lt;li&gt;Microservices&lt;/li&gt;
&lt;li&gt;Service mesh&lt;/li&gt;
&lt;li&gt;IoT (Internet of Things)&lt;/li&gt;
&lt;li&gt;Mobile apps&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="how-does-fleet-device-management-use-mtls"&gt;&lt;a href="#how-does-fleet-device-management-use-mtls" class="header-anchor"&gt;&lt;/a&gt;How does &lt;a class="link" href="https://fleetdm.com" target="_blank" rel="noopener"
&gt;Fleet Device Management&lt;/a&gt; use mTLS?
&lt;/h2&gt;&lt;p&gt;Many of Fleet&amp;rsquo;s customers use mTLS as an additional layer of security to authenticate the Fleet server to the Fleet
agent. The Fleet agent is a small program that runs on each host device, such as a corporate laptop. It collects
information about the host and sends it to the Fleet server.&lt;/p&gt;
&lt;h2 id="how-does-mtls-work"&gt;&lt;a href="#how-does-mtls-work" class="header-anchor"&gt;&lt;/a&gt;How does mTLS work?
&lt;/h2&gt;&lt;p&gt;TLS is a complex protocol with multiple versions (1.2, 1.3, etc.). We will only go over the basics to understand how
mTLS works.&lt;/p&gt;
&lt;p&gt;TLS uses a handshake protocol to establish a secure connection. The handshake protocol is a series of messages between
the client and the server.&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://victoronsoftware.com/posts/mtls-hello-world/mtls-handshake.png"
alt="Mutual TLS (mTLS) handshake diagram"&gt;
&lt;/figure&gt;
&lt;p&gt;The client sends a &amp;ldquo;Client Hello&amp;rdquo; message to the server. The server responds with a &amp;ldquo;Server Hello&amp;rdquo; message and sends its
certificate to the client. As an additional step for mTLS, the server requests a certificate from the client.&lt;/p&gt;
&lt;p&gt;The client verifies the server&amp;rsquo;s certificate by checking the certificate&amp;rsquo;s signature and verifying that the certificate
is valid and has not expired. The client also checks that the server&amp;rsquo;s hostname matches the hostname in the certificate.&lt;/p&gt;
&lt;p&gt;The client uses the server&amp;rsquo;s public key to encrypt the messages sent to the server, including the session key and its
certificate. The server decrypts these messages with its private key.&lt;/p&gt;
&lt;p&gt;The client also sends a digital signature, encrypted with its private key, to the server. The server verifies the
signature by decrypting it with the client&amp;rsquo;s public key.&lt;/p&gt;
&lt;p&gt;At this point, both the client and the server have verified each other&amp;rsquo;s identity. They complete the TLS handshake and
can exchange encrypted messages using a symmetric session key.&lt;/p&gt;
&lt;h2 id="generate-certificates-and-keys"&gt;&lt;a href="#generate-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Generate certificates and keys
&lt;/h2&gt;&lt;p&gt;We will use the &lt;a class="link" href="https://www.openssl.org/" target="_blank" rel="noopener"
&gt;OpenSSL&lt;/a&gt; command line tool to generate the certificates. OpenSSL is a popular
open-source library for TLS and SSL protocols.&lt;/p&gt;
&lt;p&gt;The following script generates the certificates and keys for the client and the server. It also creates two certificate
authorities (CAs) and signs the client and server certificates with their respective CA. The same CA may sign the
certificates, but we will use separate CAs for this example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#!/bin/bash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# This script generates files needed for mTLS.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p certs
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Private keys for CAs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/server-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out certs/client-ca.key &lt;span style="color:#ae81ff"&gt;2048&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate CA certificates&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/server-ca.key -out certs/server-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -x509 -nodes -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -key certs/client-ca.key -out certs/client-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Generate a certificate signing request&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa:2048 -nodes -keyout certs/server.key -out certs/server.req
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -newkey rsa:2048 -nodes -keyout certs/client.key -out certs/client.req
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Have the CA sign the certificate requests and output the certificates.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/server.req -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -CA certs/server-ca.crt -CAkey certs/server-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/server.crt -extfile localhost.ext
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -in certs/client.req -days &lt;span style="color:#ae81ff"&gt;1000&lt;/span&gt; -CA certs/client-ca.crt -CAkey certs/client-ca.key -set_serial &lt;span style="color:#ae81ff"&gt;01&lt;/span&gt; -out certs/client.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# Clean up&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm certs/server.req
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;rm certs/client.req
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;localhost.ext&lt;/code&gt; file is used to specify the hostname for the server certificate. In our example, we will use
&lt;code&gt;localhost&lt;/code&gt;. The file contains the following:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;authorityKeyIdentifier=keyid,issuer
basicConstraints=CA:FALSE
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment
subjectAltName = @alt_names
[alt_names]
DNS.1 = localhost
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="run-the-mtls-server"&gt;&lt;a href="#run-the-mtls-server" class="header-anchor"&gt;&lt;/a&gt;Run the mTLS server
&lt;/h2&gt;&lt;p&gt;We will use &lt;a class="link" href="https://www.nginx.com/" target="_blank" rel="noopener"
&gt;nginx&lt;/a&gt; as our mTLS server. nginx is a popular open-source web server.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;docker compose&lt;/code&gt;, we can run two nginx servers. One server will use ordinary TLS, and one will use mutual TLS. We
will use the following &lt;code&gt;docker-compose.yml&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;version&lt;/span&gt;: &lt;span style="color:#e6db74"&gt;&amp;#34;2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;services&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;nginx-tls&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;nginx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/server.crt:/etc/nginx/certificates/server.crt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/server.key:/etc/nginx/certificates/server.key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./nginx-tls/nginx.conf:/etc/nginx/conf.d/default.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./nginx-tls/hello-world.txt:/www/data/hello-world.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#34;8888:8888&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;nginx-mtls&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;image&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;nginx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;volumes&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/server.crt:/etc/nginx/certificates/server.crt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/server.key:/etc/nginx/certificates/server.key&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./certs/client-ca.crt:/etc/nginx/certificates/client-ca.crt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./nginx-mtls/nginx.conf:/etc/nginx/conf.d/default.conf&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#ae81ff"&gt;./nginx-mtls/hello-world.txt:/www/data/hello-world.txt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;ports&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; - &lt;span style="color:#e6db74"&gt;&amp;#34;8889:8889&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;nginx-tls&lt;/code&gt; service uses the &lt;code&gt;nginx-tls/nginx.conf&lt;/code&gt; file, which contains the following:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;server {
listen 8888 ssl;
server_name tls-hello-world;
# Server TLS certificate (client must have the CA cert to connect)
ssl_certificate /etc/nginx/certificates/server.crt;
ssl_certificate_key /etc/nginx/certificates/server.key;
location / {
root /www/data;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;nginx-mtls&lt;/code&gt; service uses the &lt;code&gt;nginx-mtls/nginx.conf&lt;/code&gt; file, which contains the following:&lt;/p&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;server {
listen 8889 ssl;
server_name mtls-hello-world;
# Server TLS certificate (client must have the CA cert to connect)
ssl_certificate /etc/nginx/certificates/server.crt;
ssl_certificate_key /etc/nginx/certificates/server.key;
# Enable mTLS
ssl_client_certificate /etc/nginx/certificates/client-ca.crt;
ssl_verify_client on;
location / {
root /www/data;
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;hello-world.txt&lt;/code&gt; files contain a simple text message.&lt;/p&gt;
&lt;h2 id="connect-to-the-mtls-server-with-curl-client"&gt;&lt;a href="#connect-to-the-mtls-server-with-curl-client" class="header-anchor"&gt;&lt;/a&gt;Connect to the mTLS server with curl client
&lt;/h2&gt;&lt;p&gt;We can connect to the mTLS server with the &lt;code&gt;curl&lt;/code&gt; command line tool. We will use the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl https://localhost:8889/hello-world.txt --cacert ./certs/server-ca.crt --cert ./certs/client.crt --key ./certs/client.key
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;--cacert&lt;/code&gt; option specifies the CA certificate that signed the server certificate. The &lt;code&gt;--cert&lt;/code&gt; and &lt;code&gt;--key&lt;/code&gt; options
select the client certificate and key.&lt;/p&gt;
&lt;p&gt;To connect to the ordinary TLS server, we do not need to specify the client certificate and key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl https://localhost:8888/hello-world.txt --cacert ./certs/server-ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Curl can use &lt;code&gt;--insecure&lt;/code&gt; to ignore the server certificate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl --insecure https://localhost:8888/hello-world.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, it is impossible to ignore the client certificate for mTLS. The server will reject the connection if the client
does not provide a valid certificate.&lt;/p&gt;
&lt;h2 id="example-code-on-github"&gt;&lt;a href="#example-code-on-github" class="header-anchor"&gt;&lt;/a&gt;Example code on GitHub
&lt;/h2&gt;&lt;p&gt;The example code is available on GitHub at &lt;a class="link" href="https://github.com/getvictor/mtls/tree/master/hello-world" target="_blank" rel="noopener"
&gt;https://github.com/getvictor/mtls/tree/master/hello-world&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="securing-mtls-certificates-and-keys"&gt;&lt;a href="#securing-mtls-certificates-and-keys" class="header-anchor"&gt;&lt;/a&gt;Securing mTLS certificates and keys
&lt;/h2&gt;&lt;p&gt;In the next article, we will
&lt;a class="link" href="../mtls-with-apple-keychain" &gt;secure the mTLS certificates and keys with the macOS keychain&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In a later article, we also
&lt;a class="link" href="../mtls-with-windows" &gt;secure the mTLS certificates and keys with the Windows certificate store&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This article is part of a series on &lt;a class="link" href="../mtls" &gt;mTLS&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="further-reading"&gt;&lt;a href="#further-reading" class="header-anchor"&gt;&lt;/a&gt;Further reading
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a class="link" href="../how-to-use-tpm/" &gt;How to Use TPM 2.0 to Secure Private Keys&lt;/a&gt;&lt;/strong&gt; &lt;em&gt;Learn how to create, manage, and use TPM-backed
keys, including parent/child key hierarchies and secure signing.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="mtls-hello-world-video"&gt;&lt;a href="#mtls-hello-world-video" class="header-anchor"&gt;&lt;/a&gt;mTLS Hello World video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/WA_RL_QtIgY"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; If you want to comment on this article, please do so on the YouTube video.&lt;/p&gt;</description></item><item><title>Using C and Go with CGO is tricky</title><link>https://victoronsoftware.com/posts/using-c-and-go-with-cgo-is-tricky/</link><pubDate>Thu, 18 Jan 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/using-c-and-go-with-cgo-is-tricky/</guid><description>&lt;img src="https://victoronsoftware.com/posts/using-c-and-go-with-cgo-is-tricky/cgo-hello-world-fail.png" alt="Featured image of post Using C and Go with CGO is tricky" /&gt;&lt;h2 id="simple-cgo-examples"&gt;&lt;a href="#simple-cgo-examples" class="header-anchor"&gt;&lt;/a&gt;Simple CGO examples
&lt;/h2&gt;&lt;p&gt;CGO is a way to call C code from Go. It helps call existing C libraries or for performance reasons. CGO is enabled by default but can be disabled with the &lt;code&gt;-cgo&lt;/code&gt; build flag.&lt;/p&gt;
&lt;p&gt;Below is a simple example of calling a C function from Go.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;double add(double a, double b) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; return a + b;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The C code is embedded in the Go code as a comment above &lt;code&gt;import &amp;quot;C&amp;quot;&lt;/code&gt;. The comment must start with &lt;code&gt;/*&lt;/code&gt; and end with &lt;code&gt;*/&lt;/code&gt;. The C code must be valid.
The Go compiler compiles the C code and links the resulting object file with the Go code.&lt;/p&gt;
&lt;p&gt;Here is an example of using an existing C library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include &amp;#34;math.h&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;double add(double a, double b) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; return a + b;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Println&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;floor&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;add&lt;/span&gt;(&lt;span style="color:#ae81ff"&gt;1&lt;/span&gt;, &lt;span style="color:#ae81ff"&gt;2.1&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We call the &lt;code&gt;floor&lt;/code&gt; function from the &lt;code&gt;math.h&lt;/code&gt; library. The &lt;code&gt;math.h&lt;/code&gt; library is included with the C compiler, so we don&amp;rsquo;t need to do anything special to use it.&lt;/p&gt;
&lt;h2 id="cgo-hello-world-fail"&gt;&lt;a href="#cgo-hello-world-fail" class="header-anchor"&gt;&lt;/a&gt;CGO Hello World fail
&lt;/h2&gt;&lt;p&gt;Here is another example where we print &amp;ldquo;Hello World&amp;rdquo; from C.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;#include &amp;#34;stdio.h&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CString&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello World\n&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, the above seemingly straightforward example will fail to compile with the following enigmatic error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-shell" data-lang="shell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cgo: ./exmaple.go:9:2: unexpected type: ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is that &lt;code&gt;printf&lt;/code&gt; is a variadic function that can take a variable number of arguments. CGO does not support variadic functions. Even using Go variadic syntax will not work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;args&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; []&lt;span style="color:#66d9ef"&gt;interface&lt;/span&gt;{}{}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;printf&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CString&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello World\n&amp;#34;&lt;/span&gt;), &lt;span style="color:#a6e22e"&gt;args&lt;/span&gt;&lt;span style="color:#f92672"&gt;...&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The workaround for this is to use another non-variadic function, such as &lt;code&gt;vprintf&lt;/code&gt;, or to wrap the variadic C function in a non-variadic C function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #include &amp;#34;stdio.h&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; void wrapPrintf(const char *s) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; printf(&amp;#34;%s&amp;#34;, s);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;wrapPrintf&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CString&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;Hello, World\n&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id="c-hello-world-fail"&gt;&lt;a href="#c-hello-world-fail" class="header-anchor"&gt;&lt;/a&gt;C++ Hello World fail
&lt;/h2&gt;&lt;p&gt;Another issue with CGO is only C code can be called from Go. C++ code cannot be called from Go. The following code will fail to compile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #include &amp;lt;iostream&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; void helloWorld() {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; std::cout &amp;lt;&amp;lt; &amp;#34;Hello, World&amp;#34; &amp;lt;&amp;lt; std::endl;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;helloWorld&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, C++ code can be called from C, so we can write a C wrapper for the C++ code.&lt;/p&gt;
&lt;h2 id="cgo-real-world-example"&gt;&lt;a href="#cgo-real-world-example" class="header-anchor"&gt;&lt;/a&gt;CGO real-world example
&lt;/h2&gt;&lt;p&gt;The following is an example of real-world usage of CGO, which uses Apple&amp;rsquo;s APIs to add a secret to the keychain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;package&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;keystore&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #cgo LDFLAGS: -framework CoreFoundation -framework Security
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #include &amp;lt;CoreFoundation/CoreFoundation.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt; #include &amp;lt;Security/Security.h&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f92672"&gt;import&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#e6db74"&gt;&amp;#34;unsafe&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;const&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;service&lt;/span&gt; = &lt;span style="color:#e6db74"&gt;&amp;#34;com.fleetdm.fleetd.enroll.secret&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;var&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;serviceStringRef&lt;/span&gt; = &lt;span style="color:#a6e22e"&gt;stringToCFString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;service&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// AddSecret will add a secret to the keychain. This application can retrieve this&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// secret without any user authorization.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;AddSecret&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;secret&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#66d9ef"&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;query&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryCreateMutable&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFAllocatorDefault&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFTypeDictionaryKeyCallBacks&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFTypeDictionaryValueCallBacks&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;data&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDataCreate&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFAllocatorDefault&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UInt8&lt;/span&gt;)(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;secret&lt;/span&gt;))),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFIndex&lt;/span&gt;(len(&lt;span style="color:#a6e22e"&gt;secret&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;defer&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFRelease&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFTypeRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecClass&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecClassGenericPassword&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecAttrService&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;serviceStringRef&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryAddValue&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kSecValueData&lt;/span&gt;),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;data&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;SecItemAdd&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFDictionaryRef&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;query&lt;/span&gt;), &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;if&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt; &lt;span style="color:#f92672"&gt;!=&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;errSecSuccess&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;fmt&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Errorf&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;failed to add %v to keychain: %v&amp;#34;&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;service&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;status&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;// stringToCFString will return a CFStringRef&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#66d9ef"&gt;func&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;stringToCFString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt; &lt;span style="color:#66d9ef"&gt;string&lt;/span&gt;) &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFStringRef&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; []byte(&lt;span style="color:#a6e22e"&gt;s&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;ptr&lt;/span&gt; &lt;span style="color:#f92672"&gt;:=&lt;/span&gt; (&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UInt8&lt;/span&gt;)(&lt;span style="color:#f92672"&gt;&amp;amp;&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt;[&lt;span style="color:#ae81ff"&gt;0&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#66d9ef"&gt;return&lt;/span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFStringCreateWithBytes&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFAllocatorDefault&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;ptr&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CFIndex&lt;/span&gt;(len(&lt;span style="color:#a6e22e"&gt;bytes&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;kCFStringEncodingUTF8&lt;/span&gt;, &lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#66d9ef"&gt;false&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The C linker flags are specified with the &lt;code&gt;#cgo LDFLAGS&lt;/code&gt; directive.&lt;/p&gt;
&lt;p&gt;The CGO code uses a lot of casting and data conversion. Let&amp;rsquo;s break down the following segment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UInt8&lt;/span&gt;)(&lt;span style="color:#a6e22e"&gt;unsafe&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Pointer&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;secret&lt;/span&gt;)))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;C.CString&lt;/code&gt; converts a Go string to a C string. It is one of the CGO special functions to convert between Go and C types. See &lt;a class="link" href="https://pkg.go.dev/cmd/cgo" target="_blank" rel="noopener"
&gt;cgo documentation&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;unsafe.Pointer&lt;/code&gt; converts a C pointer to a generic Go pointer. And &lt;code&gt;(*C.UInt8)&lt;/code&gt; casts the Go pointer back to a C pointer.&lt;/p&gt;
&lt;p&gt;Unfortunately, CGO cannot cast a C string to a &lt;code&gt;(*C.UInt8)&lt;/code&gt; directly. The following will fail to compile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;(&lt;span style="color:#f92672"&gt;*&lt;/span&gt;&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;UInt8&lt;/span&gt;)(&lt;span style="color:#a6e22e"&gt;C&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;CString&lt;/span&gt;(&lt;span style="color:#a6e22e"&gt;secret&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We must go through an intermediate cast to &lt;code&gt;unsafe.Pointer&lt;/code&gt;, representing a void C pointer.&lt;/p&gt;
&lt;h2 id="additional-topics"&gt;&lt;a href="#additional-topics" class="header-anchor"&gt;&lt;/a&gt;Additional topics
&lt;/h2&gt;&lt;p&gt;Our custom C and Go code was always in the same file in the above examples. However, the C code can be in a separate file and linked to our Go executable.&lt;/p&gt;
&lt;h2 id="other-getting-started-guides"&gt;&lt;a href="#other-getting-started-guides" class="header-anchor"&gt;&lt;/a&gt;Other getting started guides
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Recently, we explained &lt;a class="link" href="../create-chrome-extension" &gt;how to build a Chrome extension &lt;strong&gt;without&lt;/strong&gt; any additional tools&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Also, we wrote a &lt;a class="link" href="../react-hello-world" &gt;guide to creating a React Hello World app&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="cgo-hello-world-fail-video"&gt;&lt;a href="#cgo-hello-world-fail-video" class="header-anchor"&gt;&lt;/a&gt;CGO Hello World fail video
&lt;/h2&gt;&lt;div class="video-wrapper"&gt;
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/C9h8YO1NwPM"
allowfullscreen
title="YouTube Video"
&gt;
&lt;/iframe&gt;
&lt;/div&gt;</description></item></channel></rss>