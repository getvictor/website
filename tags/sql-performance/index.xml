<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SQL Performance on Victor on Software</title><link>https://victoronsoftware.com/tags/sql-performance/</link><description>Recent content in SQL Performance on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 29 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/sql-performance/index.xml" rel="self" type="application/rss+xml"/><item><title>3 database gotchas when building apps for scale</title><link>https://victoronsoftware.com/posts/database-gotchas-when-scaling-apps/</link><pubDate>Wed, 29 May 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/database-gotchas-when-scaling-apps/</guid><description>&lt;img src="https://victoronsoftware.com/posts/database-gotchas-when-scaling-apps/database-thumbnail.png" alt="Featured image of post 3 database gotchas when building apps for scale" />&lt;ul>
&lt;li>&lt;a class="link" href="#excessive-database-locks" >Excessive database locks&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#read-after-write-consistency" >Read-after-write consistency&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#index-limitations" >Index limitations&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>When building an application, the database is often an afterthought. The database used in a development environment often contains limited data with little traffic. However, when the application is deployed to production, real-world traffic can expose issues that were not caught in development or testing.&lt;/p>
&lt;p>In this article, we cover issues we ran into with our customers. We assume the production application is deployed with one master and one or more read replicas. See this article on &lt;a class="link" href="../mysql-master-slave-replication" >creating a MySQL slave replica in dev environment&lt;/a>.&lt;/p>
&lt;h2 id="excessive-database-locks">&lt;a href="#excessive-database-locks" class="header-anchor">&lt;/a>Excessive database locks
&lt;/h2>&lt;p>One write query can bring your database to its knees if it locks too many rows.&lt;/p>
&lt;p>Consider this simplified INSERT with a subquery transaction:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">INSERT&lt;/span> &lt;span style="color:#66d9ef">INTO&lt;/span> software_counts (host_id, &lt;span style="color:#66d9ef">count&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span> host_id, &lt;span style="color:#66d9ef">COUNT&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>) &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#66d9ef">count&lt;/span> &lt;span style="color:#66d9ef">FROM&lt;/span> host_software
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">GROUP&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> host_software.host_id;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;figure>&lt;img src="https://victoronsoftware.com/posts/database-gotchas-when-scaling-apps/simple-insert-with-subquery.svg"
alt="Simplified INSERT with a subquery">&lt;figcaption>
&lt;h4>Simplified INSERT with a subquery&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The above query scans the entire &lt;code>host_software&lt;/code> table index to create a count. While the database is doing the scan and the INSERT, it locks the &lt;code>host_software&lt;/code> table, preventing other transactions from writing to that table. If the table and insert are large, the query can hold the lock for a long time. In production, we saw a lock time of over 30 seconds, creating a bottleneck and spiking DB resource usage.&lt;/p>
&lt;p>Pay special attention to the following queries, as they can cause performance issues:&lt;/p>
&lt;ul>
&lt;li>&lt;code>COUNT(*)&lt;/code>&lt;/li>
&lt;li>Using a non-indexed column, like &lt;code>WHERE non_indexed_column = value&lt;/code>&lt;/li>
&lt;li>Returning a large number of rows, like &lt;code>SELECT * FROM table&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>One way to solve the above performance issue is to separate the &lt;code>SELECT&lt;/code> and &lt;code>INSERT&lt;/code> queries. First, run the &lt;code>SELECT&lt;/code> query on the replica to get the data, then run the &lt;code>INSERT&lt;/code> query on the master to insert the data. We completely eliminate the lock since the read is done on the replica. This article goes through &lt;a class="link" href=".../mysql-query-performance-insert-subqueries" >a specific example of optimizing an INSERT with subqueries&lt;/a>.&lt;/p>
&lt;p>As general advice, avoid running &lt;code>SELECT&lt;/code> queries and subqueries on the master, especially if they scan the entire table.&lt;/p>
&lt;h2 id="read-after-write-consistency">&lt;a href="#read-after-write-consistency" class="header-anchor">&lt;/a>Read-after-write consistency
&lt;/h2>&lt;p>When you write to the master and read from the replica, you might not see the data you wrote. The replica is not in sync with the master in real time. In our production, the replica is usually less than 30 milliseconds behind the master.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/database-gotchas-when-scaling-apps/read-after-write-consistency.svg"
alt="Read-after-write database issue">&lt;figcaption>
&lt;h4>Read-after-write database issue&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>These issues are typically not caught in development since dev environments usually have one database instance. Unit or integration tests might not even see these issues if they run on a single database instance. Even in testing or small production environments, you might only see these issues if the replica sync time is high. Customers with large deployments may be experiencing these consistency issues without the development team knowing about it.&lt;/p>
&lt;p>One way to solve this issue is to read from the master after writing to it. This way, you are guaranteed to see the data you just wrote. In &lt;a class="link" href="https://github.com/fleetdm/fleet/blob/b7aac2cfabf17fcb5142808fb80352113710ec5c/server/contexts/ctxdb/ctxdb.go#L17" target="_blank" rel="noopener"
>our Go backend&lt;/a>, forcing reads from the master can be done by updating the &lt;code>Context&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">ctxUsePrimary&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">ctxdb&lt;/span>.&lt;span style="color:#a6e22e">RequirePrimary&lt;/span>(&lt;span style="color:#a6e22e">ctx&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>However, additional master reads increase the load on the master, defeating the purpose of having a replica for read scaling.&lt;/p>
&lt;p>In addition, what about expensive read queries, like &lt;code>COUNT(*)&lt;/code> and calculations, which we don&amp;rsquo;t want to run on the master? In this case, we can wait for the replica to catch up with the master.&lt;/p>
&lt;p>One generic approach to waiting for the replica is to read the last written data from the replica and retry the read if the data is not found. The app could check the &lt;code>updated_at&lt;/code> column to see if the data is recent. If the data is not found, the app can sleep for a few milliseconds and retry the read. This approach is imperfect but a good compromise between read consistency and performance.&lt;/p>
&lt;p>Note: &lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/date-and-time-type-syntax.html#:~:text=default%20precision%20is%200." target="_blank" rel="noopener"
>The default precision of MySQL date and time data types is 1 second (0 fractional seconds)&lt;/a>.&lt;/p>
&lt;h2 id="index-limitations">&lt;a href="#index-limitations" class="header-anchor">&lt;/a>Index limitations
&lt;/h2>&lt;h3 id="what-are-sql-indexes">&lt;a href="#what-are-sql-indexes" class="header-anchor">&lt;/a>What are SQL indexes?
&lt;/h3>&lt;p>Indexes are a way to optimize read queries. They are a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes and storage space to maintain the index data structure. Indexes are created using one or more database columns and are stored and sorted using a B-tree or a similar data structure. The goal is to reduce the number of data comparisons needed to find the data.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/database-gotchas-when-scaling-apps/database-index.svg"
alt="Database index">&lt;figcaption>
&lt;h4>Database index&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Indexes are generally beneficial. They speed up read queries but slightly slow down write queries. Indexes can also be large and take up a lot of disk space.&lt;/p>
&lt;h3 id="index-size-is-limited">&lt;a href="#index-size-is-limited" class="header-anchor">&lt;/a>Index size is limited
&lt;/h3>&lt;p>As the product grows with more features, the number of columns in a specific table can also increase. Sometimes, the new columns need to be part of a unique index. However, the &lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/innodb-limits.html" target="_blank" rel="noopener"
>maximum index size in MySQL is 3072 bytes&lt;/a>. This limit can be quickly reached if columns are of type &lt;code>VARCHAR&lt;/code> or &lt;code>TEXT&lt;/code>.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">CREATE&lt;/span> &lt;span style="color:#66d9ef">TABLE&lt;/span> &lt;span style="color:#f92672">`&lt;/span>activities&lt;span style="color:#f92672">`&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">`&lt;/span>user_name&lt;span style="color:#f92672">`&lt;/span> VARCHAR(&lt;span style="color:#ae81ff">255&lt;/span>) &lt;span style="color:#66d9ef">NOT&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>,
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>One way to solve the issue of hitting the index size limit is to create a new column that makes the hash of the other relevant column(s), and use that as the unique index. For example, in our backend &lt;a class="link" href="https://github.com/fleetdm/fleet/blob/6f008b40f24bcd000c1450d7438be99d30c518c5/server/datastore/mysql/schema.sql#L1450" target="_blank" rel="noopener"
>we use a &lt;code>checksum&lt;/code> column in the &lt;code>software&lt;/code> table to create a unique index for a software item&lt;/a>.&lt;/p>
&lt;h3 id="foreign-keys-may-cause-performance-issues">&lt;a href="#foreign-keys-may-cause-performance-issues" class="header-anchor">&lt;/a>Foreign keys may cause performance issues
&lt;/h3>&lt;p>If a table has a foreign key, any insert, update, or delete with a constraint on the foreign key column will lock the corresponding row in the parent table. This locking can lead to performance issues when&lt;/p>
&lt;ul>
&lt;li>the parent table is large&lt;/li>
&lt;li>the parent has many foreign key constraints&lt;/li>
&lt;li>the parent table or child tables are frequently updated&lt;/li>
&lt;/ul>
&lt;p>The performance issue manifests as excessive lock wait times for queries. One way to solve this issue is to remove the foreign key constraint. Instead, the application code can handle the data integrity checks that the foreign key constraint provides. In our application, we run a regular clean-up job to remove orphaned child rows.&lt;/p>
&lt;h2 id="bonus-database-gotchas">&lt;a href="#bonus-database-gotchas" class="header-anchor">&lt;/a>Bonus database gotchas
&lt;/h2>&lt;p>Additional database gotchas that we have seen in production include:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="../sql-prepared-statements-are-broken-when-scaling-applications" >Prepared statements consuming too much memory&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../mysql-upsert-deadlock" >Deadlocks caused by using an UPDATE/INSERT upsert pattern&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="3-database-gotchas-video">&lt;a href="#3-database-gotchas-video" class="header-anchor">&lt;/a>3 database gotchas video
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/N-wzNq-sEwo"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>Optimize MySQL query performance: INSERT with subqueries</title><link>https://victoronsoftware.com/posts/mysql-query-performance-insert-subqueries/</link><pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/mysql-query-performance-insert-subqueries/</guid><description>&lt;img src="https://victoronsoftware.com/posts/mysql-query-performance-insert-subqueries/INSERT%20with%20subqueries.png" alt="Featured image of post Optimize MySQL query performance: INSERT with subqueries" />&lt;h2 id="introduction">&lt;a href="#introduction" class="header-anchor">&lt;/a>Introduction
&lt;/h2>&lt;p>We recently encountered a performance issue in production. Once an hour, we saw a spike in average DB lock time, along with occasional deadlocks and server errors. We identified the problematic query using &lt;a class="link" href="https://aws.amazon.com/rds/" target="_blank" rel="noopener"
>Amazon RDS&lt;/a> logs. It was an &lt;code>INSERT&lt;/code> statement with subqueries.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">INSERT&lt;/span> &lt;span style="color:#66d9ef">INTO&lt;/span> policy_stats (policy_id, inherited_team_id, passing_host_count, failing_host_count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p.id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t.id &lt;span style="color:#66d9ef">AS&lt;/span> inherited_team_id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#66d9ef">COUNT&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">FROM&lt;/span> policy_membership pm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">INNER&lt;/span> &lt;span style="color:#66d9ef">JOIN&lt;/span> hosts h &lt;span style="color:#66d9ef">ON&lt;/span> pm.host_id &lt;span style="color:#f92672">=&lt;/span> h.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">WHERE&lt;/span> pm.policy_id &lt;span style="color:#f92672">=&lt;/span> p.id &lt;span style="color:#66d9ef">AND&lt;/span> pm.passes &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> h.team_id &lt;span style="color:#f92672">=&lt;/span> t.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#66d9ef">AS&lt;/span> passing_host_count,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#66d9ef">COUNT&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">FROM&lt;/span> policy_membership pm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">INNER&lt;/span> &lt;span style="color:#66d9ef">JOIN&lt;/span> hosts h &lt;span style="color:#66d9ef">ON&lt;/span> pm.host_id &lt;span style="color:#f92672">=&lt;/span> h.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">WHERE&lt;/span> pm.policy_id &lt;span style="color:#f92672">=&lt;/span> p.id &lt;span style="color:#66d9ef">AND&lt;/span> pm.passes &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> h.team_id &lt;span style="color:#f92672">=&lt;/span> t.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#66d9ef">AS&lt;/span> failing_host_count
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> policies p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">CROSS&lt;/span> &lt;span style="color:#66d9ef">JOIN&lt;/span> teams t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">WHERE&lt;/span> p.team_id &lt;span style="color:#66d9ef">IS&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">GROUP&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> p.id, t.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ON&lt;/span> DUPLICATE &lt;span style="color:#66d9ef">KEY&lt;/span> &lt;span style="color:#66d9ef">UPDATE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> updated_at &lt;span style="color:#f92672">=&lt;/span> NOW(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> passing_host_count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">VALUES&lt;/span>(passing_host_count),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> failing_host_count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">VALUES&lt;/span>(failing_host_count);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This statement calculated passing/failing results and inserted them into a &lt;code>policy_stats&lt;/code> summary table. Unfortunately, this query took over 30 seconds to execute. During this time, it locked the important &lt;code>policy_membership&lt;/code> table, preventing other threads from writing to it.&lt;/p>
&lt;h2 id="reproducing-slow-sql-queries">&lt;a href="#reproducing-slow-sql-queries" class="header-anchor">&lt;/a>Reproducing slow SQL queries
&lt;/h2>&lt;p>Since we saw the issue in production, we needed to reproduce it in a test environment. We created a similar schema and loaded it with data. We used a Go script to populate the tables with dummy data: &lt;a class="link" href="https://github.com/getvictor/mysql/blob/main/insert-with-subqueries-perf/main.go" target="_blank" rel="noopener"
>https://github.com/getvictor/mysql/blob/main/insert-with-subqueries-perf/main.go&lt;/a>.&lt;/p>
&lt;p>Initially, we used ten policies and ten teams with 10,000 hosts each, resulting in 100 inserted rows with the above query. However, the performance was only three to six seconds. Then, we increased the number of policies to 50, resulting in 500 inserted rows. The performance dropped to 30 to 60 seconds.&lt;/p>
&lt;p>The above data made it clear that this query needed to be more scalable. As the &lt;code>GROUP BY p.id, t.id&lt;/code> clause demonstrates, performance exponentially degrades with the number of policies and teams.&lt;/p>
&lt;h2 id="debugging-slow-sql-queries">&lt;a href="#debugging-slow-sql-queries" class="header-anchor">&lt;/a>Debugging slow SQL queries
&lt;/h2>&lt;p>MySQL has powerful tools called &lt;a class="link" href="https://dev.mysql.com/doc/refman/8.0/en/explain.html" target="_blank" rel="noopener"
>EXPLAIN&lt;/a> and &lt;code>EXPLAIN ANALYSE&lt;/code>. These tools show how MySQL executes a query and help identify performance bottlenecks. We ran &lt;code>EXPLAIN ANALYSE&lt;/code> on the problematic query and viewed the results as a tree and a diagram.&lt;/p>
&lt;p>&lt;figure>&lt;img src="https://victoronsoftware.com/posts/mysql-query-performance-insert-subqueries/mysql-explain-tree.png"
alt="MySQL EXPLAIN result in TREE format">&lt;figcaption>
&lt;h4>MySQL EXPLAIN result in TREE format&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;br>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/mysql-query-performance-insert-subqueries/mysql-explain-diagram.png"
alt="MySQL EXPLAIN result as a diagram">&lt;figcaption>
&lt;h4>MySQL EXPLAIN result as a diagram&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;/p>
&lt;p>Although the &lt;code>EXPLAIN&lt;/code> output was complex, it was clear that the &lt;code>SELECT&lt;/code> subqueries were executing too many times.&lt;/p>
&lt;h2 id="fixing-insert-with-subqueries-performance">&lt;a href="#fixing-insert-with-subqueries-performance" class="header-anchor">&lt;/a>Fixing INSERT with subqueries performance
&lt;/h2>&lt;p>The first step was to separate the &lt;code>INSERT&lt;/code> from the &lt;code>SELECT&lt;/code>. The top &lt;code>SELECT&lt;/code> subquery took most of the time. But, more importantly, the &lt;code>SELECT&lt;/code> does not block other threads from updating the &lt;code>policy_membership&lt;/code> table.&lt;/p>
&lt;p>However, the single standalone &lt;code>SELECT&lt;/code> subquery was still slow. In addition, memory usage could be high for many teams and policies.&lt;/p>
&lt;p>We decided to process one policy row at a time. This reduced the time to complete an individual &lt;code>SELECT&lt;/code> query to less than two seconds and limited the memory usage. We did not use a transaction to minimize locks. Not utilizing a transaction meant that the &lt;code>INSERT&lt;/code> could fail if a parallel process deleted the policy. Also, the &lt;code>INSERT&lt;/code> could overwrite a clearing of the &lt;code>policy_stats&lt;/code> row. These drawbacks were acceptable, as they were rare cases.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">SELECT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> p.id &lt;span style="color:#66d9ef">as&lt;/span> policy_id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> t.id &lt;span style="color:#66d9ef">AS&lt;/span> inherited_team_id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#66d9ef">COUNT&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">FROM&lt;/span> policy_membership pm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">INNER&lt;/span> &lt;span style="color:#66d9ef">JOIN&lt;/span> hosts h &lt;span style="color:#66d9ef">ON&lt;/span> pm.host_id &lt;span style="color:#f92672">=&lt;/span> h.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">WHERE&lt;/span> pm.policy_id &lt;span style="color:#f92672">=&lt;/span> p.id &lt;span style="color:#66d9ef">AND&lt;/span> pm.passes &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> h.team_id &lt;span style="color:#f92672">=&lt;/span> t.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#66d9ef">AS&lt;/span> passing_host_count,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#66d9ef">COUNT&lt;/span>(&lt;span style="color:#f92672">*&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">FROM&lt;/span> policy_membership pm
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">INNER&lt;/span> &lt;span style="color:#66d9ef">JOIN&lt;/span> hosts h &lt;span style="color:#66d9ef">ON&lt;/span> pm.host_id &lt;span style="color:#f92672">=&lt;/span> h.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">WHERE&lt;/span> pm.policy_id &lt;span style="color:#f92672">=&lt;/span> p.id &lt;span style="color:#66d9ef">AND&lt;/span> pm.passes &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> h.team_id &lt;span style="color:#f92672">=&lt;/span> t.id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ) &lt;span style="color:#66d9ef">AS&lt;/span> failing_host_count
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span> policies p
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">CROSS&lt;/span> &lt;span style="color:#66d9ef">JOIN&lt;/span> teams t
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">WHERE&lt;/span> p.team_id &lt;span style="color:#66d9ef">IS&lt;/span> &lt;span style="color:#66d9ef">NULL&lt;/span> &lt;span style="color:#66d9ef">AND&lt;/span> p.id &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">GROUP&lt;/span> &lt;span style="color:#66d9ef">BY&lt;/span> t.id, p.id;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After each &lt;code>SELECT&lt;/code>, we inserted the results into the &lt;code>policy_stats&lt;/code> table.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">INSERT&lt;/span> &lt;span style="color:#66d9ef">INTO&lt;/span> policy_stats (policy_id, inherited_team_id, passing_host_count, failing_host_count)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">VALUES&lt;/span> (&lt;span style="color:#f92672">?&lt;/span>, &lt;span style="color:#f92672">?&lt;/span>, &lt;span style="color:#f92672">?&lt;/span>, &lt;span style="color:#f92672">?&lt;/span>), ...
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">ON&lt;/span> DUPLICATE &lt;span style="color:#66d9ef">KEY&lt;/span> &lt;span style="color:#66d9ef">UPDATE&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> updated_at &lt;span style="color:#f92672">=&lt;/span> NOW(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> passing_host_count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">VALUES&lt;/span>(passing_host_count),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> failing_host_count &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">VALUES&lt;/span>(failing_host_count);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="further-reading-about-mysql">&lt;a href="#further-reading-about-mysql" class="header-anchor">&lt;/a>Further reading about MySQL
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="../mysql-upsert-deadlock/" >MySQL deadlock on UPDATE/INSERT upsert pattern&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../mysql-master-slave-replication/" >Scaling DB performance using master slave replication&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../unicode-and-emoji-gotchas/" >Fully supporting Unicode and emojis in your app&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../sql-prepared-statements-are-broken-when-scaling-applications/" >SQL prepared statements are broken when scaling applications&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="mysql-code-to-populate-db-on-github">&lt;a href="#mysql-code-to-populate-db-on-github" class="header-anchor">&lt;/a>MySQL code to populate DB on GitHub
&lt;/h2>&lt;p>The code to populate our test DB is available on GitHub at: &lt;a class="link" href="https://github.com/getvictor/mysql/tree/main/insert-with-subqueries-perf" target="_blank" rel="noopener"
>https://github.com/getvictor/mysql/tree/main/insert-with-subqueries-perf&lt;/a>&lt;/p>
&lt;h2 id="mysql-query-performance-insert-with-subqueries-video">&lt;a href="#mysql-query-performance-insert-with-subqueries-video" class="header-anchor">&lt;/a>MySQL query performance: INSERT with subqueries video
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/9vulV3W-bp8"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item></channel></rss>