<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GitHub on Victor on Software</title><link>https://victoronsoftware.com/tags/github/</link><description>Recent content in GitHub on Victor on Software</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 15 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://victoronsoftware.com/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>Top 3 issues with GitHub code review process</title><link>https://victoronsoftware.com/posts/github-code-review-issues/</link><pubDate>Sun, 15 Sep 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/github-code-review-issues/</guid><description>&lt;img src="https://victoronsoftware.com/posts/github-code-review-issues/developer-on-tightrope-headline.png" alt="Featured image of post Top 3 issues with GitHub code review process" />&lt;ul>
&lt;li>&lt;a class="link" href="#issue-1-codeowners-is-not-scalable" >CODEOWNERS is not scalable&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#issue-2-re-approvals-for-every-push" >Re-approvals for every push&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#issue-3-impractical-to-maintain-a-protected-feature-branch" >Impractical for protected feature branches&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Our team has been using GitHub to review the code for our open-source product. We have encountered several issues with
GitHub code reviews. The default GitHub code review process is not scalable and provides a poor developer experience.&lt;/p>
&lt;h2 id="how-to-set-up-a-github-code-review-process">&lt;a href="#how-to-set-up-a-github-code-review-process" class="header-anchor">&lt;/a>How to set up a GitHub code review process
&lt;/h2>&lt;p>GitHub admins can create a
&lt;a class="link" href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/managing-a-branch-protection-rule" target="_blank" rel="noopener"
>branch protection rule&lt;/a>
that requires a code review before merging the code to the main branch.&lt;/p>
&lt;p>Here&amp;rsquo;s a representative branch protection rule:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/github-code-review-issues/pr-branch-protection-rule.png"
alt="Branch protection rule requiring code review before merging">&lt;figcaption>
&lt;h4>PR branch protection rule&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>When a developer creates a pull request, GitHub requires code reviews from all relevant owners specified by the
&lt;code>CODEOWNERS&lt;/code> file in the repository. If someone makes a new push to the PR, all the owners need to re-approve the PR.&lt;/p>
&lt;p>In a previous article, we covered &lt;a class="link" href="../find-code-owners-for-pull-request" >how to find the required code owners for a PR&lt;/a>.
This is another issue, but we will not discuss it in this article.&lt;/p>
&lt;h2 id="issue-1-codeowners-is-not-scalable">&lt;a href="#issue-1-codeowners-is-not-scalable" class="header-anchor">&lt;/a>Issue 1: CODEOWNERS is not scalable
&lt;/h2>&lt;p>GitHub uses a
&lt;a class="link" href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners" target="_blank" rel="noopener"
>&lt;code>CODEOWNERS&lt;/code> file to define individuals or teams responsible for each file in the repository&lt;/a>.&lt;/p>
&lt;p>The &lt;code>CODEOWNERS&lt;/code> file format favors fine-grained code ownership, where the last matching pattern takes precedence over
previous patterns. Here is an example from the GitHub documentation:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span># In this example, @octocat owns any file in the `/apps`
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># directory in the root of your repository except for the `/apps/github`
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span># subdirectory, as this subdirectory has its own owner @doctocat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/apps/ @octocat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/apps/github @doctocat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The &lt;code>CODEOWNERS&lt;/code> file is not scalable for medium-to-large and even small organizations. As the number of code owners
grows, each pull request is likely to require approval from more code owners. Each code owner may request changes,
potentially leading to cycles and cycles of re-approvals.&lt;/p>
&lt;p>Tracking down multiple people to approve and re-approve a PR can be time-consuming and frustrating for developers. This
results in longer PR turnaround times, slower development velocity, and missed commitments.&lt;/p>
&lt;p>From a developer experience perspective, we want to make the code review process as smooth and efficient as possible,
which means one reviewer for one PR. This approach is feasible by manually inverting the
&lt;code>last matching pattern takes precedence&lt;/code> rule in the &lt;code>CODEOWNERS&lt;/code> file by always including the owner(s) from the
previous pattern. For example, we would rewrite the above owners as:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plaintext" data-lang="plaintext">&lt;span style="display:flex;">&lt;span>/apps/ @octocat
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>/apps/github @octocat @doctocat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Keeping the &lt;code>CODEOWNERS&lt;/code> file in this format may be cumbersome to do manually, but it can be done with a script.&lt;/p>
&lt;h2 id="issue-2-re-approvals-for-every-push">&lt;a href="#issue-2-re-approvals-for-every-push" class="header-anchor">&lt;/a>Issue 2: Re-approvals for every push
&lt;/h2>&lt;p>When a developer makes a new push to a PR, all the code owners need to re-approve it. This is a poor developer
experience, as it requires the code owners to review potentially the same code changes multiple times.&lt;/p>
&lt;p>The issue stems from the lack of fine-grained control over the following option:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/github-code-review-issues/dismiss-stale-pr-approvals.png"
alt="Dismiss stale pull request approvals when new commits are pushed">
&lt;/figure>
&lt;p>With multiple code owners, every code owner must re-approve every change.&lt;/p>
&lt;p>A code owner should not need to re-review code that didn&amp;rsquo;t change &amp;ndash; this is a waste of time and effort.&lt;/p>
&lt;p>With a single code owner, the reviewer must re-approve trivial or irrelevant changes, such as:&lt;/p>
&lt;ul>
&lt;li>fixing a typo in a comment&lt;/li>
&lt;li>fully accepting a suggestion from the reviewer&lt;/li>
&lt;li>re-generating an auto-generated file, such as documentation&lt;/li>
&lt;/ul>
&lt;p>The required re-approvals can be frustrating and time-consuming for developers and code owners. They make developers
feel untrusted and inefficient.&lt;/p>
&lt;p>The main argument for requiring re-approvals is securityâ€”we don&amp;rsquo;t want to merge potentially malicious code. If that&amp;rsquo;s
the case, we should have a security review process in place, not a code review process. A security review can be done by
a separate individual and improved by automated tools.&lt;/p>
&lt;p>In addition, we should be able to completely exclude some files/directories from the code review process. For example,
generated files, such as documentation based on code changes, should not require code review. Other generated files,
such as testing mocks, may have CI/CD checks that ensure they are generated correctly, and they should not require code
review either.&lt;/p>
&lt;h2 id="issue-3-impractical-to-maintain-a-protected-feature-branch">&lt;a href="#issue-3-impractical-to-maintain-a-protected-feature-branch" class="header-anchor">&lt;/a>Issue 3: Impractical to maintain a protected feature branch
&lt;/h2>&lt;p>A protected feature branch requires code reviews before merging. Since all the commits on the feature branch have
already been reviewed and approved, it is considered safe to merge into the main branch.&lt;/p>
&lt;p>The main issue is that the developer cannot simply update this feature branch with the latest changes on the main
branch. They need PR approval from all the code owners who have already approved the same changes on the main branch.
This busy work is another example of a waste of time and effort.&lt;/p>
&lt;p>In addition, a feature branch may be long-lived and introduce changes across multiple areas of the code base. This means
that it may require approval from many code owners, which can be time-consuming and frustrating.&lt;/p>
&lt;h2 id="solution-custom-github-action-to-manage-code-reviews">&lt;a href="#solution-custom-github-action-to-manage-code-reviews" class="header-anchor">&lt;/a>Solution: Custom GitHub Action to manage code reviews
&lt;/h2>&lt;p>Instead of relying on the default GitHub code review process, we can create a custom GitHub Action to manage code
reviews. The custom GitHub Action can:&lt;/p>
&lt;ul>
&lt;li>automatically identify a single reviewer for a PR (or identify a small group of reviewers, each of whom can approve
the PR)&lt;/li>
&lt;li>automatically exclude specific files/directories from the code review process&lt;/li>
&lt;li>automatically maintain the approval state of the PR when new commits meeting explicit criteria are pushed&lt;/li>
&lt;li>enable a usable and practical protected feature branch&lt;/li>
&lt;/ul>
&lt;p>In a future article, we will explore how to create a custom GitHub Action to manage code reviews.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="../git-merges-and-pull-requests" >How git merge works with PRs&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../github-reusable-workflows-and-steps" >How to reuse GitHub workflows and steps&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="watch-the-top-3-issues-with-github-code-reviews">&lt;a href="#watch-the-top-3-issues-with-github-code-reviews" class="header-anchor">&lt;/a>Watch the top 3 issues with GitHub code reviews
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/RWnJ84vTK48"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>Find required code owner approvers for a PR in 3 steps</title><link>https://victoronsoftware.com/posts/find-code-owners-for-pull-request/</link><pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/find-code-owners-for-pull-request/</guid><description>&lt;img src="https://victoronsoftware.com/posts/find-code-owners-for-pull-request/codeowners-headline.png" alt="Featured image of post Find required code owner approvers for a PR in 3 steps" />&lt;ul>
&lt;li>&lt;a class="link" href="#find-code-owners-from-command-line" >Find code owners from the command line&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-are-github-code-owners">&lt;a href="#what-are-github-code-owners" class="header-anchor">&lt;/a>What are GitHub code owners?
&lt;/h2>&lt;p>GitHub
&lt;a class="link" href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners" target="_blank" rel="noopener"
>CODEOWNERS&lt;/a>
is a file that defines the individuals or teams responsible for code in a repository. When a user creates a pull
request, GitHub uses the &lt;code>CODEOWNERS&lt;/code> file to suggest the appropriate reviewers for the pull request. This process helps
ensure that the right people review the code changes.&lt;/p>
&lt;p>Repository owners can enable branch protection rules that require the code owner of each changed file to approve the
pull request.&lt;/p>
&lt;h2 id="the-problem-too-many-files-and-too-many-code-owners">&lt;a href="#the-problem-too-many-files-and-too-many-code-owners" class="header-anchor">&lt;/a>The problem: too many files and too many code owners
&lt;/h2>&lt;p>It can be challenging to determine who needs to review a pull request in a large repository with many files and many
code owners. This challenge is especially true when the pull request touches many files.&lt;/p>
&lt;p>Many times, I&amp;rsquo;ve asked another engineer to approve my PR, and they approved it, but GitHub said that the PR still needed
approval from another code owner. I needed another approval because my PR changed another file with another code owner,
and I didn&amp;rsquo;t know about it.&lt;/p>
&lt;h2 id="steps-to-find-the-minimum-required-code-owners">&lt;a href="#steps-to-find-the-minimum-required-code-owners" class="header-anchor">&lt;/a>Steps to find the minimum required code owners
&lt;/h2>&lt;p>To find the minimum required code owners for a pull request, we can use these steps:&lt;/p>
&lt;ol>
&lt;li>Get the list of changed files in the pull request.&lt;/li>
&lt;li>For each changed file, get the list of code owners.&lt;/li>
&lt;li>Find the minimum set of code owners that covers all the above lists.&lt;/li>
&lt;/ol>
&lt;h2 id="finding-the-code-owners-manually">&lt;a href="#finding-the-code-owners-manually" class="header-anchor">&lt;/a>Finding the code owners manually
&lt;/h2>&lt;p>The above steps can be done manually by opening the pull request in GitHub and hovering over the blue CODEOWNERS icon
for each changed file to see the code owners. However, this can be time-consuming and error-prone.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/find-code-owners-for-pull-request/codeowners-hover.png"
alt="List of files, with code owners showing when hovering over the blue icon next to the file">&lt;figcaption>
&lt;h4>See the code owners on hover&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="find-code-owners-from-command-line">&lt;a href="#find-code-owners-from-command-line" class="header-anchor">&lt;/a>Finding the code owners from the command line
&lt;/h2>&lt;p>To automate the above steps, we will need the following prerequisites:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://cli.github.com/" target="_blank" rel="noopener"
>GitHub CLI&lt;/a> installed and logged in&lt;/li>
&lt;li>Command-line JSON processor &lt;a class="link" href="https://jqlang.github.io/jq/download/" target="_blank" rel="noopener"
>jq&lt;/a> installed&lt;/li>
&lt;li>A CODEOWNERS parser installed, such as &lt;a class="link" href="https://github.com/hmarr/codeowners" target="_blank" rel="noopener"
>https://github.com/hmarr/codeowners&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>From the top directory containing your git repository, run the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gh pr view $MY_PR_NUMBER --json files | jq -r &lt;span style="color:#e6db74">&amp;#39;.files[] .path&amp;#39;&lt;/span> &lt;span style="color:#ae81ff">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#ae81ff">&lt;/span>| xargs codeowners | tr -s &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> | cut -f2- -d &lt;span style="color:#e6db74">&amp;#39; &amp;#39;&lt;/span> | sort -u
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Where &lt;code>$MY_PR_NUMBER&lt;/code> is the number of your pull request.&lt;/p>
&lt;p>The first part of the command, &lt;code>gh pr view $MY_PR_NUMBER --json files&lt;/code>, gets the list of changed files in the pull
request in JSON format. The second part, &lt;code>jq -r '.files[] .path'&lt;/code>, extracts the file paths from the JSON. The third
part, &lt;code>xargs codeowners&lt;/code>, runs the &lt;code>codeowners&lt;/code> command for each file. The fourth optional part, &lt;code>tr -s ' '&lt;/code>, removes
extra spaces. The fifth part, &lt;code>cut -f2- -d ' '&lt;/code>, removes the first column. The last part, &lt;code>sort -u&lt;/code>, sorts and removes
duplicates.&lt;/p>
&lt;p>The output will be the list of code owners for the changed files in the pull request. For example:&lt;/p>
&lt;pre tabindex="0">&lt;code>(unowned)
@fleetdm/go
@getvictor @lucasmrod @roperzh @mostlikelee
@lucasmrod @getvictor @jacobshandling
@roperzh @gillespi314 @lucasmrod @getvictor
&lt;/code>&lt;/pre>&lt;p>At this point, we can do additional processing, such as excluding some code owners.&lt;/p>
&lt;p>By visually inspecting the output, we can determine the minimum set of code owners that need to review the pull request.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;p>Recently, we covered &lt;a class="link" href="../github-code-review-issues" >top 3 issues with GitHub code review process&lt;/a>.&lt;/p>
&lt;p>We also wrote about &lt;a class="link" href="../git-merges-and-pull-requests" >how merges work with GitHub pull requests&lt;/a>.&lt;/p>
&lt;p>Previously, we explained
&lt;a class="link" href="../github-reusable-workflows-and-steps" >how to create reusable workflows and steps in GitHub Actions&lt;/a>.&lt;/p>
&lt;h2 id="watch-how-to-find-the-minimum-required-code-owners-for-a-pull-request">&lt;a href="#watch-how-to-find-the-minimum-required-code-owners-for-a-pull-request" class="header-anchor">&lt;/a>Watch how to find the minimum required code owners for a pull request
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/RHW-ZELnuSg"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How git merge works with GitHub pull requests</title><link>https://victoronsoftware.com/posts/git-merges-and-pull-requests/</link><pubDate>Wed, 26 Jun 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/git-merges-and-pull-requests/</guid><description>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/git-merges-and-pull-requests-feature.png" alt="Featured image of post How git merge works with GitHub pull requests" />&lt;p>This article covers how &lt;code>git merge&lt;/code> works with GitHub pull requests. We will focus on the use case where developers want
to keep their feature branches updated with the main branch. After completing the feature work, developers create a pull
request to merge their feature branch into the main branch.&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="#git-merge" >git merge&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#pull-request-after-merge" >Pull request after a merge&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#update-protected-branch" >Updating a protected feature branch with a pull request&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="what-is-a-merge-in-version-control">&lt;a href="#what-is-a-merge-in-version-control" class="header-anchor">&lt;/a>What is a merge in version control?
&lt;/h2>&lt;p>Git is a distributed version control system that allows multiple developers to work on the same codebase. When
developers work on different branches, they must merge their changes into the main branch. A merge is the process of
combining changes from one branch into another branch, resulting in a single branch that contains the changes from both
branches.&lt;/p>
&lt;h2 id="git-merge">&lt;a href="#git-merge" class="header-anchor">&lt;/a>git merge
&lt;/h2>&lt;p>The standard &lt;code>git merge&lt;/code> command takes each commit from one branch and applies it to another. The final commit has two
parent commits: one from the current branch and one from the merged branch.&lt;/p>
&lt;p>In the following example, we have a &lt;code>branch&lt;/code> that we want to merge into the &lt;code>main&lt;/code> branch:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/git-merge-two-branches-1.svg"
alt="git merge of two branches before merge">&lt;figcaption>
&lt;h4>git merge of two branches before merge&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The &lt;code>git log&lt;/code> of the &lt;code>main&lt;/code> branch shows the commit history:&lt;/p>
&lt;pre tabindex="0">&lt;code>commit e493ac8fea4e0efe125a561b9014313bec41a489 (HEAD -&amp;gt; main, origin/main)
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:31:12 2024 -0500
m3
commit b79e810cb86405061dc979ce4fc05fe36a724256
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:29:41 2024 -0500
m2
commit eaccad9476b472dbfb3cdfbd17088425be75b7b1
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:26:55 2024 -0500
m1
commit 4265c0a30b7b6f03d93331bc112261393c97ee1d
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:25:40 2024 -0500
first commit
&lt;/code>&lt;/pre>&lt;p>And the &lt;code>git log&lt;/code> of the &lt;code>branch&lt;/code> shows the commit history:&lt;/p>
&lt;pre tabindex="0">&lt;code>commit 2afb078875a84095327ab2ef7c83711534c5eef8 (HEAD -&amp;gt; branch, origin/branch)
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:30:20 2024 -0500
b2
commit 9fc53c2ca9a58637a5d433de4c6150b832d4d275
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:28:25 2024 -0500
b1
commit eaccad9476b472dbfb3cdfbd17088425be75b7b1
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:26:55 2024 -0500
m1
commit 4265c0a30b7b6f03d93331bc112261393c97ee1d
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:25:40 2024 -0500
first commit
&lt;/code>&lt;/pre>&lt;p>We merge the &lt;code>branch&lt;/code> into the &lt;code>main&lt;/code> branch:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git checkout main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git merge branch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The resulting commit history shows all the commits from both branched as well as the final empty merge commit pointing
to the two parent commits: &lt;code>e493ac8 2afb078&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>commit 09d569bd079162643462dde112246f4167f14889 (HEAD -&amp;gt; main)
Merge: e493ac8 2afb078
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 21:03:01 2024 -0500
Merge branch &amp;#39;branch&amp;#39;
commit e493ac8fea4e0efe125a561b9014313bec41a489 (origin/main)
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:31:12 2024 -0500
m3
commit 2afb078875a84095327ab2ef7c83711534c5eef8 (origin/branch, branch)
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:30:20 2024 -0500
b2
commit b79e810cb86405061dc979ce4fc05fe36a724256
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:29:41 2024 -0500
m2
commit 9fc53c2ca9a58637a5d433de4c6150b832d4d275
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:28:25 2024 -0500
b1
commit eaccad9476b472dbfb3cdfbd17088425be75b7b1
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:26:55 2024 -0500
m1
commit 4265c0a30b7b6f03d93331bc112261393c97ee1d
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:25:40 2024 -0500
first commit
&lt;/code>&lt;/pre>&lt;figure>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/git-merge-two-branches-2.svg"
alt="git merge of two branches after merge">&lt;figcaption>
&lt;h4>git merge of two branches after merge&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The result would be the same if &lt;strong>instead&lt;/strong> we merged the &lt;code>main&lt;/code> branch into the &lt;code>branch&lt;/code> branch:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git checkout branch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git merge main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>except the final merge commit would be slightly different:&lt;/p>
&lt;pre tabindex="0">&lt;code>commit 06713a38ed38c12f599c6e810ee50d4cacfe2de7 (HEAD -&amp;gt; branch)
Merge: 2afb078 e493ac8
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 17:32:01 2024 -0500
Merge branch &amp;#39;main&amp;#39; into branch
&lt;/code>&lt;/pre>&lt;p>The merged changes on &lt;code>branch&lt;/code> can be pushed to the remote repository without issues because the remote branch can be
fast-forwarded to the new commit.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git push origin branch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="what-is-a-fast-forward-merge">&lt;a href="#what-is-a-fast-forward-merge" class="header-anchor">&lt;/a>What is a fast-forward merge?
&lt;/h2>&lt;p>A fast-forward merge is a merge where the base branch (target branch) has no new commits. In this case, git moves the
target branch to the commit of the source branch. It is a fast-forward merge because the target branch is moved forward
to the new commit.&lt;/p>
&lt;p>A fast-forward merge does not lose any history &amp;ndash; it is always possible to undo a fast-forward merge.&lt;/p>
&lt;p>&lt;code>git push&lt;/code> does not, by default, allow a merge that is not a fast-forward. Use the&amp;rsquo;- force&amp;rsquo; option to enable a merge
that is not a fast-forward.&lt;/p>
&lt;h2 id="undo-a-git-merge">&lt;a href="#undo-a-git-merge" class="header-anchor">&lt;/a>Undo a git merge
&lt;/h2>&lt;p>The above merge can be undone by resetting the branch to the commit before the merge, which is one of the parent commits
of the merge commit.&lt;/p>
&lt;p>This command resets the &lt;code>branch&lt;/code> to the commit before the merge:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git reset --hard 2afb078875a84095327ab2ef7c83711534c5eef8
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="git-rebase">&lt;a href="#git-rebase" class="header-anchor">&lt;/a>git rebase
&lt;/h2>&lt;p>Another way to combine changes from one branch into another is to use &lt;code>git rebase&lt;/code>. This command applies the changes
from the source branch to the target branch by reapplying the commits from the source branch to the target branch.&lt;/p>
&lt;p>The &lt;code>git rebase&lt;/code> command will modify the commit history of the source branch. In our pull request examples, we will use
&lt;code>git merge&lt;/code> instead of &lt;code>git rebase&lt;/code> to preserve all the commit histories.&lt;/p>
&lt;h2 id="pull-request-after-merge">&lt;a href="#pull-request-after-merge" class="header-anchor">&lt;/a>Pull request after a merge
&lt;/h2>&lt;p>When working on a feature branch, developers often want to update their branch with the latest changes from the main to
make sure their feature works with the newest code. We start this process with the above-described &lt;code>git merge&lt;/code> command,
where we merge the &lt;code>main&lt;/code> branch into the &lt;code>branch&lt;/code> branch.&lt;/p>
&lt;p>After the merge, the developer can create a GitHub pull request to merge the &lt;code>branch&lt;/code> into the &lt;code>main&lt;/code> branch.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/github-pull-request.png"
alt="GitHub pull request after merge">&lt;figcaption>
&lt;h4>GitHub pull request after merge&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Note that the commit history only shows the commits from the &lt;code>branch&lt;/code> and the merge commit. The &lt;code>main&lt;/code> commits are not
shown in the pull request.&lt;/p>
&lt;p>GitHub shows a few options for merging the pull request:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/merge-pull-request-options.png"
alt="Merge pull request">&lt;figcaption>
&lt;h4>Merge pull request&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;ul>
&lt;li>&lt;strong>Create a merge commit&lt;/strong>: This option creates a new merge commit combining the changes from the &lt;code>branch&lt;/code> and the
&lt;code>main&lt;/code> branches. This is the default option.&lt;/li>
&lt;li>&lt;strong>Squash and merge&lt;/strong>: This option combines all the commits from the &lt;code>branch&lt;/code> into a single commit and merges that
commit into the &lt;code>main&lt;/code> branch.&lt;/li>
&lt;li>&lt;strong>Rebase and merge&lt;/strong>: This option applies the changes from the &lt;code>branch&lt;/code> onto the &lt;code>main&lt;/code> branch by rebasing the commits
from the &lt;code>branch&lt;/code> onto the &lt;code>main&lt;/code> branch.&lt;/li>
&lt;/ul>
&lt;p>Selecting &lt;strong>Create a merge commit&lt;/strong> results in the following commit history:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/commit-history-after-pull-request.png"
alt="Commit history after pull request">&lt;figcaption>
&lt;h4>Commit history after pull request&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The last two commits are both merge commits.&lt;/p>
&lt;pre tabindex="0">&lt;code>commit 1eb0af8c0e9ad16a0267d8abd1ce667f125ab7e8 (HEAD -&amp;gt; main, origin/main)
Merge: e493ac8 22d2107
Author: Victor Lyuboslavsky &amp;lt;******&amp;gt;
Date: Sun Jun 23 07:35:57 2024 -0500
Merge pull request #1 from getvictor/branch
My pull request
commit 22d2107b49bca56e67b7d4e800d93f93378a0956 (origin/branch, branch)
Merge: 2afb078 e493ac8
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sat Jun 22 21:25:39 2024 -0500
Merge branch &amp;#39;main&amp;#39; into branch
&lt;/code>&lt;/pre>&lt;p>The PR merge commit points to the previous merge commit and the last commit on &lt;code>main&lt;/code>.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/pull-request-commit-history.svg"
alt="Diagram of commit history after pull request">&lt;figcaption>
&lt;h4>Diagram of commit history after pull request&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="update-protected-branch">&lt;a href="#update-protected-branch" class="header-anchor">&lt;/a>Updating a protected feature branch
&lt;/h2>&lt;p>We have two branches in this example: &lt;code>main&lt;/code> and &lt;code>feature&lt;/code>. Both branches are protected, meaning that changes to them
must be made through a pull request. We want to update the &lt;code>feature&lt;/code> branch with the latest changes from the &lt;code>main&lt;/code>
branch.&lt;/p>
&lt;p>We can do this by merging the &lt;code>main&lt;/code> branch into the &lt;code>feature&lt;/code> branch, creating a new branch, and creating a pull
request.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-shell" data-lang="shell">&lt;span style="display:flex;">&lt;span>git checkout feature
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git merge main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout -b feature-update
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git push origin feature-update
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>And create a pull request to merge &lt;code>feature-update&lt;/code> into &lt;code>feature&lt;/code>.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/github-pull-request-branches.png"
alt="Create a PR to merge into feature branch">&lt;figcaption>
&lt;h4>Create a PR to merge into feature branch&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>This pull request shows all the commits from the &lt;code>main&lt;/code> branch and the merge commit. This commit history is problematic
because the PR may trigger a code review from the
&lt;a class="link" href="https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners" target="_blank" rel="noopener"
>code owners&lt;/a>
of the files that were already reviewed in previous pull requests to the &lt;code>main&lt;/code> branch.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/github-pull-request-commits.png"
alt="Commits from feature-update branch">&lt;figcaption>
&lt;h4>Commits from feature-update branch&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>After the merge, the &lt;code>feature&lt;/code> branch commit history looks like:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/commit-history-of-feature-after-pr.png"
alt="Commit history of feature branch after PR">&lt;figcaption>
&lt;h4>Commit history of feature branch after PR&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Now, we create a pull request to merge the update &lt;code>feature&lt;/code> branch into the &lt;code>main&lt;/code> branch.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/github-pull-request-feature.png"
alt="PR to merge feature branch into main">&lt;figcaption>
&lt;h4>PR to merge feature branch into main&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>After the merge, the &lt;code>main&lt;/code> branch commit history looks like:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/commit-history-of-main-after-feature-pr.png"
alt="Commit history of main after PR from feature branch">&lt;figcaption>
&lt;h4>Commit history of main after PR from feature branch&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The last three commits are merge commits.&lt;/p>
&lt;pre tabindex="0">&lt;code>commit 59caaf1cc5103099f850c32f1729c5ffe3525404 (HEAD -&amp;gt; main, origin/main)
Merge: e493ac8 dcbc117
Author: Victor Lyuboslavsky &amp;lt;******&amp;gt;
Date: Sun Jun 23 08:56:53 2024 -0500
Merge pull request #3 from getvictor/feature
Feature
commit dcbc117e5811e683f1074d947bc25da21b5fa5f6 (origin/feature)
Merge: 2afb078 373dd82
Author: Victor Lyuboslavsky &amp;lt;******&amp;gt;
Date: Sun Jun 23 08:45:44 2024 -0500
Merge pull request #2 from getvictor/feature-update
Feature update
commit 373dd82672a4879bfcf3b29c4feb97004359adfe (origin/feature-update, feature-update, feature)
Merge: 2afb078 e493ac8
Author: Victor on Software &amp;lt;&amp;gt;
Date: Sun Jun 23 08:03:22 2024 -0500
Merge branch &amp;#39;main&amp;#39; into feature
&lt;/code>&lt;/pre>&lt;figure>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/pull-request-commit-history-2.svg"
alt="Diagram of commit history after two pull requests">&lt;figcaption>
&lt;h4>Diagram of commit history after two pull requests&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h3 id="merging-a-pull-request-with-squash-and-merge">&lt;a href="#merging-a-pull-request-with-squash-and-merge" class="header-anchor">&lt;/a>Merging a pull request with &lt;strong>Squash and merge&lt;/strong>
&lt;/h3>&lt;p>If the final pull request is merged with &lt;strong>Squash and merge&lt;/strong>, the commit history will look like:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/git-merges-and-pull-requests/commit-history-after-squash-and-merge.png"
alt="Commit history of main after squash and merge">&lt;figcaption>
&lt;h4>Commit history of main after squash and merge&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The last commit is a single commit that combines all the changes from the &lt;code>feature&lt;/code> branch. The merge commits and all
other commits are eliminated.&lt;/p>
&lt;p>The downside of &lt;strong>Squash and merge&lt;/strong> is that the commit history is lost. The commit history is useful for debugging,
understanding the changes made, and keeping ownership of the changes when multiple developers work on the same feature
branch.&lt;/p>
&lt;h2 id="further-reading">&lt;a href="#further-reading" class="header-anchor">&lt;/a>Further reading
&lt;/h2>&lt;p>Recently, we covered &lt;a class="link" href="../github-code-review-issues" >why GitHub code review process is broken for our organization&lt;/a>.&lt;/p>
&lt;p>Previously, we explained
&lt;a class="link" href="../find-code-owners-for-pull-request" >how to find the minimum required code owner approvers for a pull request&lt;/a>.&lt;/p>
&lt;h2 id="watch-how-git-merge-works-with-github-pull-requests">&lt;a href="#watch-how-git-merge-works-with-github-pull-requests" class="header-anchor">&lt;/a>Watch how git merge works with GitHub pull requests
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Djpc7ymvuzU"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>How to reuse workflows and steps in GitHub Actions (2024)</title><link>https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/</link><pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/</guid><description>&lt;img src="https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/GitHub%20Actions%20thumbnail.png" alt="Featured image of post How to reuse workflows and steps in GitHub Actions (2024)" />&lt;ul>
&lt;li>&lt;a class="link" href="#reusable-workflows" >GitHub reusable workflows&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="#reusable-steps-composite-action" >GitHub reusable steps (composite action)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="introduction">&lt;a href="#introduction" class="header-anchor">&lt;/a>Introduction
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/features/actions" target="_blank" rel="noopener"
>GitHub Actions&lt;/a> is a way to automate your software development workflows. The
approach is similar to CI/CD tools like Jenkins, CircleCI, and TravisCI. However, GitHub Actions are built into GitHub.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/GitHub%20Actions%20workflow.svg"
alt="High level diagram of GitHub Actions">&lt;figcaption>
&lt;h4>High level diagram of GitHub Actions&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>The entry point for GitHub Actions is the &lt;code>.github/workflows&lt;/code> directory in your repository. This directory contains one
or more YAML files that define your workflows. A workflow is an automated process made up of one or more jobs. Each job
runs on a separate runner. A runner is a server that runs the job. A job contains one or more steps. Each step runs a
separate command.&lt;/p>
&lt;h2 id="why-reuse">&lt;a href="#why-reuse" class="header-anchor">&lt;/a>Why reuse?
&lt;/h2>&lt;p>&lt;a class="link" href="https://en.wikipedia.org/wiki/Code_reuse" target="_blank" rel="noopener"
>Code reuse&lt;/a> is a fundamental principle of software development. Reusing
GitHub Actions code allows you to:&lt;/p>
&lt;ul>
&lt;li>Improve maintainability by keeping common code in one place and reducing the amount of code&lt;/li>
&lt;li>Increase consistency since multiple workflows can use the same code&lt;/li>
&lt;li>Promote best practices&lt;/li>
&lt;li>Increase productivity&lt;/li>
&lt;li>Reduce errors&lt;/li>
&lt;/ul>
&lt;p>Examples of reusable GitHub Actions code include:&lt;/p>
&lt;ul>
&lt;li>Code signing&lt;/li>
&lt;li>Uploading artifacts to cloud services&lt;/li>
&lt;li>Security checks&lt;/li>
&lt;li>Notifications and reports&lt;/li>
&lt;li>Data processing&lt;/li>
&lt;li>and many others&lt;/li>
&lt;/ul>
&lt;h2 id="reusable-workflows">&lt;a href="#reusable-workflows" class="header-anchor">&lt;/a>Reusable workflows
&lt;/h2>&lt;p>A reusable workflow replaces a job in the main workflow.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/GitHub%20Actions%20reusable%20workflow.svg"
alt="GitHub Actions reusable workflow">&lt;figcaption>
&lt;h4>GitHub Actions reusable workflow&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>A reusable workflow may be shared across repositories and run on a different platform than the main workflow.&lt;/p>
&lt;p>For file sharing, &amp;lsquo;build artifacts&amp;rsquo; must be used to share files with the main workflow. The reusable workflow does not
inherit environment variables. However, it accepts inputs and secrets from the calling workflow and may use outputs to
pass data back to the main workflow.&lt;/p>
&lt;p>Here is an example of a reusable workflow. It uses the same schema as a regular workflow.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Reusable workflow&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">on&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">workflow_call&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">inputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reusable_input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Input to the reusable workflow&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">required&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filename&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">required&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">type&lt;/span>: &lt;span style="color:#ae81ff">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">secrets&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">HELLO_WORLD_SECRET&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">required&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">outputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Map the workflow output(s) to job output(s)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reusable_output&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Output from the reusable workflow&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">${{ jobs.reusable-workflow-job.outputs.job_output }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">defaults&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>: &lt;span style="color:#ae81ff">bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">jobs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reusable-workflow-job&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">runs-on&lt;/span>: &lt;span style="color:#ae81ff">ubuntu-20.04&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Map the job output(s) to step output(s)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">outputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job_output&lt;/span>: &lt;span style="color:#ae81ff">${{ steps.process-step.outputs.step_output }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Process reusable input&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">process-step&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">HELLO_WORLD_SECRET&lt;/span>: &lt;span style="color:#ae81ff">${{ secrets.HELLO_WORLD_SECRET }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;reusable_input=${{ inputs.reusable_input }}&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;HELLO_WORLD_SECRET=${HELLO_WORLD_SECRET}&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;step_output=${{ inputs.reusable_input }}_processed&amp;#34; &amp;gt;&amp;gt; $GITHUB_OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/download-artifact@v4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">input_file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Process file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;Processing file: ${{ inputs.filename }}&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;file processed&amp;#34; &amp;gt;&amp;gt; ${{ inputs.filename }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">actions/upload-artifact@v4&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">output_file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">path&lt;/span>: &lt;span style="color:#ae81ff">${{ inputs.filename }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The reusable workflow is triggered &lt;code>on: workflow_call&lt;/code>. It accepts an input called &lt;code>reusable_input&lt;/code> and generates an
output called &lt;code>reusable_output&lt;/code>. It also downloads an artifact called &lt;code>input_file&lt;/code>, processes a file, and uploads an
artifact called &lt;code>output_file&lt;/code>.&lt;/p>
&lt;p>The main workflow calls the reusable workflow using the &lt;code>uses&lt;/code> keyword.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">job-2&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">needs&lt;/span>: &lt;span style="color:#ae81ff">job-1&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># We do not need to check out the repository to use the reusable workflow&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">./.github/workflows/reusable-workflow.yml&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reusable_input&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;job-2-input&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filename&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;input.txt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">secrets&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Can also implicitly pass the secrets with: secrets: inherit&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">HELLO_WORLD_SECRET&lt;/span>: &lt;span style="color:#ae81ff">TERCES_DLROW_OLLEH&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A successful run of the main workflow looks like this on GitHub:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/GitHub%20Actions%20reusable%20workflow%20success.png"
alt="GitHub Actions reusable workflow success">&lt;figcaption>
&lt;h4>GitHub Actions reusable workflow success&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="reusable-steps-composite-action">&lt;a href="#reusable-steps-composite-action" class="header-anchor">&lt;/a>Reusable steps (composite action)
&lt;/h2>&lt;p>Reusable steps replace a regular step in a job. We will use a &lt;code>composite action&lt;/code> for reusable steps in our example.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/GitHub%20Actions%20reusable%20steps.svg"
alt="GitHub Actions reusable steps (composite action)">&lt;figcaption>
&lt;h4>GitHub Actions reusable steps (composite action)&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;p>Like a reusable workflow, a composite action may be shared across repositories, it accepts inputs, and it may use
outputs to pass data back to the main workflow.&lt;/p>
&lt;p>Unlike a reusable workflow, a composite action inherits environment variables. However, it does not inherit secrets.
Secrets must be passed explicitly as inputs or environment variables. Also, there is no need to use &amp;lsquo;build artifacts&amp;rsquo; to
share files since the reusable steps run on the same runner and in the same work area as the main job.&lt;/p>
&lt;p>Here is an example of a composite action. It uses a different schema than a workflow. Also, the file must be named
&lt;code>action.yml&lt;/code> or similar.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Reusable steps (AKA composite action)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#ae81ff">Demonstrate how to use reusable steps in a workflow&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># Schema: https://json.schemastore.org/github-action.json&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">inputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reusable_input&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Input to the reusable workflow&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">required&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filename&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">required&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">outputs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Map the action output(s) to step output(s)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reusable_output&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">description&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;Output from the reusable workflow&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">value&lt;/span>: &lt;span style="color:#ae81ff">${{ steps.process-step.outputs.step_output }}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">runs&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">using&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;composite&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">steps&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Process reusable input&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">process-step&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Shell must explicitly specify the shell for each step. https://github.com/orgs/community/discussions/18597&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>: &lt;span style="color:#ae81ff">bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;reusable_input=${{ inputs.reusable_input }}&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;HELLO_WORLD_SECRET=${HELLO_WORLD_SECRET}&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;step_output=${{ inputs.reusable_input }}_processed&amp;#34; &amp;gt;&amp;gt; $GITHUB_OUTPUT&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Process file&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">shell&lt;/span>: &lt;span style="color:#ae81ff">bash&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">run&lt;/span>: |&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;Processing file: ${{ inputs.filename }}&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> echo &amp;#34;file processed&amp;#34; &amp;gt;&amp;gt; ${{ inputs.filename }}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The composite action is called via the &lt;code>uses&lt;/code> setting on a step. Our action accepts an input called &lt;code>reusable_input&lt;/code> and
generates an output called &lt;code>reusable_output&lt;/code>. It also processes a file called &lt;code>filename&lt;/code>.&lt;/p>
&lt;p>The following code snippet shows how to use the composite action in a job.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span> - &lt;span style="color:#f92672">name&lt;/span>: &lt;span style="color:#ae81ff">Use reusable steps&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">id&lt;/span>: &lt;span style="color:#ae81ff">reusable-steps&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">uses&lt;/span>: &lt;span style="color:#ae81ff">./.github/reusable-steps&lt;/span> &lt;span style="color:#75715e"># To use this syntax, we must have the repository checked out&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">with&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">reusable_input&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;job-2-input&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">filename&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;input.txt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">env&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">HELLO_WORLD_SECRET&lt;/span>: &lt;span style="color:#ae81ff">TERCES_DLROW_OLLEH&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>A successful run of the main workflow with reusable steps looks like this on GitHub:&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/github-reusable-workflows-and-steps/GitHub%20Actions%20composite%20action%20success.png"
alt="GitHub Actions composite action success">&lt;figcaption>
&lt;h4>GitHub Actions composite action success&lt;/h4>
&lt;/figcaption>
&lt;/figure>
&lt;h2 id="conclusion">&lt;a href="#conclusion" class="header-anchor">&lt;/a>Conclusion
&lt;/h2>&lt;p>Reusable workflows and steps are powerful tools for improving the maintainability, consistency, and productivity of your
GitHub Actions. They allow you to reuse code across repositories and workflows and promote best practices. They are a
great way to reduce errors and increase productivity.&lt;/p>
&lt;p>For larger units of work, a reusable workflow should be used. A composite action should be used for smaller units of
work that may run on the same runner and share the same work area.&lt;/p>
&lt;h2 id="example-code-on-github">&lt;a href="#example-code-on-github" class="header-anchor">&lt;/a>Example code on GitHub
&lt;/h2>&lt;p>The example code is available on GitHub at: &lt;a class="link" href="https://github.com/getvictor/github-reusable-workflows-and-steps" target="_blank" rel="noopener"
>https://github.com/getvictor/github-reusable-workflows-and-steps&lt;/a>&lt;/p>
&lt;h2 id="other-articles-related-to-github">&lt;a href="#other-articles-related-to-github" class="header-anchor">&lt;/a>Other articles related to GitHub
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="../github-code-review-issues" >Is GitHub code review process broken in your company?&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../git-merges-and-pull-requests/" >&lt;em>git merge&lt;/em> and GitHub pull requests explained&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../find-code-owners-for-pull-request" >Finding the minimum required code owner approvers for pull request&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../use-github-actions-for-general-purpose-tasks/" >Use GitHub actions for general-purpose tasks&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="github-actions-reusable-workflows-and-steps-video">&lt;a href="#github-actions-reusable-workflows-and-steps-video" class="header-anchor">&lt;/a>GitHub Actions reusable workflows and steps video
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/ciHJzV6TZB8"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item><item><title>Use GitHub Actions for general-purpose tasks</title><link>https://victoronsoftware.com/posts/use-github-actions-for-general-purpose-tasks/</link><pubDate>Thu, 11 Jan 2024 00:00:00 +0000</pubDate><guid>https://victoronsoftware.com/posts/use-github-actions-for-general-purpose-tasks/</guid><description>&lt;img src="https://victoronsoftware.com/posts/use-github-actions-for-general-purpose-tasks/GitHub-action.png" alt="Featured image of post Use GitHub Actions for general-purpose tasks" />&lt;h2 id="what-are-github-actions">&lt;a href="#what-are-github-actions" class="header-anchor">&lt;/a>What are GitHub Actions?
&lt;/h2>&lt;p>GitHub Actions are a way to automate your software development workflows. They are similar to CI/CD tools like Jenkins,
CircleCI, and TravisCI. However, GitHub Actions are built into GitHub.&lt;/p>
&lt;p>GitHub Actions are not entirely free, but they have very high usage limits for open-source projects. For private
repositories, you can run up to 2,000 minutes per month for free. After that, you will be charged.&lt;/p>
&lt;h2 id="github-actions-for-non-cicd-tasks">&lt;a href="#github-actions-for-non-cicd-tasks" class="header-anchor">&lt;/a>GitHub Actions for non-CI/CD tasks
&lt;/h2>&lt;p>However, GitHub Actions are not just for CI/CD. You can use them for many general-purpose tasks. For example, you can
use them as an extension of your application to perform tasks such as:&lt;/p>
&lt;ul>
&lt;li>generating aggregate reports&lt;/li>
&lt;li>updating a database&lt;/li>
&lt;li>sending notifications&lt;/li>
&lt;li>general data processing&lt;/li>
&lt;li>and many others&lt;/li>
&lt;/ul>
&lt;p>A GitHub Action can run arbitrary code, taking inputs from multiple sources such as API calls, databases, and files.&lt;/p>
&lt;figure>&lt;img src="https://victoronsoftware.com/posts/use-github-actions-for-general-purpose-tasks/GitHub-action.png"
alt="GitHub Action block diagram">
&lt;/figure>
&lt;p>You can use a GitHub Action as a worker for your application. For example, you can use it to process data from a
database and then send a notification to a user. Or you can use it to generate a report and upload it to a file server.&lt;/p>
&lt;p>Although GitHub Actions in open-source repositories are public, they can still use secrets that are not accessible to
the public. For example, secrets can be API keys and database access credentials.&lt;/p>
&lt;h2 id="a-real-world-github-action-doing-data-processing">&lt;a href="#a-real-world-github-action-doing-data-processing" class="header-anchor">&lt;/a>A real-world GitHub Action doing data processing
&lt;/h2>&lt;p>Below is an example GitHub Action that does general data processing. It uses API calls to download data from NVD
(National Vulnerability Database), generates files from this data, and then creates a release. Subsequently, the
application can download these files and use them directly without making the API calls or processing the data itself.&lt;/p>
&lt;p>GitHub gist: &lt;script src="https://gist.github.com/getvictor/5b708d408ec5508fbc5f1b3487e8f8a9.js">&lt;/script>
&lt;/p>
&lt;p>The GitHub Action does a checkout of our application code and runs a script &lt;em>cmd/cve/generate.go&lt;/em> to generate the files.
Then, it publishes the generated files as a new release. As a final step, it deletes any old releases.&lt;/p>
&lt;p>A note of caution. GitHub monitors for cryptocurrency mining and other abusive behavior. So, keep that in mind and be
careful with process-intensive actions.&lt;/p>
&lt;h2 id="use-github-actions-for-general-purpose-tasks-video">&lt;a href="#use-github-actions-for-general-purpose-tasks-video" class="header-anchor">&lt;/a>Use GitHub Actions for general-purpose tasks video
&lt;/h2>&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/y4Jct7eWLmY"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div>
&lt;h2 id="other-articles-related-to-github">&lt;a href="#other-articles-related-to-github" class="header-anchor">&lt;/a>Other articles related to GitHub
&lt;/h2>&lt;ul>
&lt;li>&lt;a class="link" href="../github-reusable-workflows-and-steps/" >How to reuse workflows and steps in GitHub Actions&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="../git-merges-and-pull-requests/" >What happens in a GitHub pull request after a &lt;code>git merge&lt;/code>&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;em>Note:&lt;/em> If you want to comment on this article, please do so on the YouTube video.&lt;/p></description></item></channel></rss>